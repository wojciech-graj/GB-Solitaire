                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mgbz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _draw_bkg_leaderboard
                                     12 	.globl _rand
                                     13 	.globl _initrand
                                     14 	.globl _font_set
                                     15 	.globl _font_load
                                     16 	.globl _font_init
                                     17 	.globl _set_sprite_data
                                     18 	.globl _set_bkg_tile_xy
                                     19 	.globl _set_bkg_tiles
                                     20 	.globl _set_bkg_data
                                     21 	.globl _wait_vbl_done
                                     22 	.globl _joypad
                                     23 	.globl _cursor
                                     24 	.globl _dynamic_metasprite
                                     25 	.globl _selected_leaderboard
                                     26 	.globl _score
                                     27 	.globl _num_folded_piles
                                     28 	.globl _settings
                                     29 	.globl _scroll
                                     30 	.globl _flags
                                     31 	.globl _top_card_idx
                                     32 	.globl _piles
                                     33 	.globl _deck
                                     34 	.globl _setting_pile_heights
                                     35 	.globl _menu_card_tiles
                                     36 	.globl _animation_speeds
                                     37 	.globl _clear_bkg_2x1
                                     38 	.globl _draw_card_top
                                     39 	.globl _draw_card_bottom
                                     40 	.globl _draw_card
                                     41 	.globl _draw_sequential_card
                                     42 	.globl _clear_bkg
                                     43 	.globl _draw_bkg_game
                                     44 	.globl _draw_bkg_splash_screen
                                     45 	.globl _draw_bkg_settings
                                     46 	.globl _metasprite_2x3_hide
                                     47 	.globl _set_metasprite_card
                                     48 	.globl _draw_setting_frame_metasprites
                                     49 	.globl _dynamic_metasprite_end_animation
                                     50 	.globl _dynamic_metasprite_splash_screen_callback
                                     51 	.globl _dynamic_metasprite_splash_screen
                                     52 	.globl _dynamic_metasprite_fold_pile
                                     53 	.globl _dynamic_metasprite_unfold_callback
                                     54 	.globl _dynamic_metasprite_move_stack_callback
                                     55 	.globl _dynamic_metasprite_fold_callback
                                     56 	.globl _dynamic_metasprite_fold
                                     57 	.globl _dynamic_metasprite_deal_callback
                                     58 	.globl _dynamic_metasprite_deal
                                     59 	.globl _dynamic_metasprite_process
                                     60 	.globl _cursor_adjust_height
                                     61 	.globl _cursor_grab_stack
                                     62 	.globl _cursor_place_stack
                                     63 	.globl _set_cursor_setting
                                     64 	.globl _change_cursor_height
                                     65 	.globl _cursor_process
                                     66 	.globl _init_deck
                                     67 	.globl _is_stack_coherent
                                     68 	.globl _deal
                                     69 	.globl _pile_append_cursor_stack
                                     70 	.globl _start_game
                                     71 	.globl _start_settings
                                     72 	.globl _start_splash_screen
                                     73 	.globl _start_leaderboard
                                     74 	.globl _add_leaderboard
                                     75 	.globl _nvram_check
                                     76 	.globl _inc_letter
                                     77 	.globl _input_process
                                     78 	.globl _main
                                     79 ;--------------------------------------------------------
                                     80 ; special function registers
                                     81 ;--------------------------------------------------------
                                     82 ;--------------------------------------------------------
                                     83 ; ram data
                                     84 ;--------------------------------------------------------
                                     85 	.area _DATA
      000000                         86 _deck::
      000000                         87 	.ds 312
      000138                         88 _piles::
      000138                         89 	.ds 50
      00016A                         90 _top_card_idx::
      00016A                         91 	.ds 1
      00016B                         92 _flags::
      00016B                         93 	.ds 1
      00016C                         94 _scroll::
      00016C                         95 	.ds 1
      00016D                         96 _settings::
      00016D                         97 	.ds 1
      00016E                         98 _num_folded_piles::
      00016E                         99 	.ds 1
      00016F                        100 _score::
      00016F                        101 	.ds 2
      000171                        102 _selected_leaderboard::
      000171                        103 	.ds 2
      000173                        104 _dynamic_metasprite::
      000173                        105 	.ds 21
      000188                        106 _cursor::
      000188                        107 	.ds 10
      000192                        108 _input_process_prev_input_65536_387:
      000192                        109 	.ds 1
      000193                        110 _main_prev_input_327681_450:
      000193                        111 	.ds 1
                                    112 ;--------------------------------------------------------
                                    113 ; absolute external ram data
                                    114 ;--------------------------------------------------------
                                    115 	.area _DABS (ABS)
                                    116 ;--------------------------------------------------------
                                    117 ; global & static initialisations
                                    118 ;--------------------------------------------------------
                                    119 	.area _HOME
                                    120 	.area _GSINIT
                                    121 	.area _GSFINAL
                                    122 	.area _GSINIT
                                    123 ;src/main.c:1163: static UINT8 prev_input = 0;
      000000 21r92r01               124 	ld	hl, #_input_process_prev_input_65536_387
      000003 36 00                  125 	ld	(hl), #0x00
                                    126 ;src/main.c:1163: static UINT8 prev_input = 0;
      000005 21r93r01               127 	ld	hl, #_main_prev_input_327681_450
      000008 36 00                  128 	ld	(hl), #0x00
                                    129 ;src/main.c:172: UINT8 flags = 0;
      00000A 21r6Br01               130 	ld	hl, #_flags
      00000D 36 00                  131 	ld	(hl), #0x00
                                    132 ;src/main.c:173: UINT8 scroll = 0;
      00000F 21r6Cr01               133 	ld	hl, #_scroll
      000012 36 00                  134 	ld	(hl), #0x00
                                    135 ;src/main.c:174: UINT8 settings = SETTING_ONE_SUIT | BITMASK_SETTING_MUSIC;
      000014 21r6Dr01               136 	ld	hl, #_settings
      000017 36 10                  137 	ld	(hl), #0x10
                                    138 ;src/main.c:175: UINT8 num_folded_piles = 0;
      000019 21r6Er01               139 	ld	hl, #_num_folded_piles
      00001C 36 00                  140 	ld	(hl), #0x00
                                    141 ;src/main.c:176: UINT16 score =  START_SCORE;
      00001E 21r6Fr01               142 	ld	hl, #_score
      000021 36 F4                  143 	ld	(hl), #0xf4
      000023 23                     144 	inc	hl
      000024 36 01                  145 	ld	(hl), #0x01
                                    146 ;src/main.c:177: LeaderBoard *selected_leaderboard = NULL;
      000026 21r71r01               147 	ld	hl, #_selected_leaderboard
      000029 36 00                  148 	ld	(hl), #0x00
      00002B 23                     149 	inc	hl
      00002C 36 00                  150 	ld	(hl), #0x00
                                    151 ;src/main.c:179: struct DynamicMetaSprite dynamic_metasprite = {
      00002E 21r7Br01               152 	ld	hl, #(_dynamic_metasprite + 0x0008)
      000031 36 FF                  153 	ld	(hl), #0xff
      000033 21r7Cr01               154 	ld	hl, #(_dynamic_metasprite + 0x0009)
      000036 36 00                  155 	ld	(hl), #0x00
                                    156 ;src/main.c:184: struct Cursor cursor = {
      000038 21r88r01               157 	ld	hl, #_cursor
      00003B AF                     158 	xor	a, a
      00003C 22                     159 	ld	(hl+), a
      00003D 77                     160 	ld	(hl), a
      00003E 21r8Ar01               161 	ld	hl, #(_cursor + 0x0002)
      000041 AF                     162 	xor	a, a
      000042 22                     163 	ld	(hl+), a
      000043 77                     164 	ld	(hl), a
      000044 21r8Dr01               165 	ld	hl, #(_cursor + 0x0005)
      000047 36 00                  166 	ld	(hl), #0x00
      000049 21r8Er01               167 	ld	hl, #(_cursor + 0x0006)
      00004C 36 0A                  168 	ld	(hl), #0x0a
      00004E 21r8Fr01               169 	ld	hl, #(_cursor + 0x0007)
      000051 36 00                  170 	ld	(hl), #0x00
      000053 21r90r01               171 	ld	hl, #(_cursor + 0x0008)
      000056 36 00                  172 	ld	(hl), #0x00
      000058 21r91r01               173 	ld	hl, #(_cursor + 0x0009)
      00005B 36 00                  174 	ld	(hl), #0x00
                                    175 ;--------------------------------------------------------
                                    176 ; Home
                                    177 ;--------------------------------------------------------
                                    178 	.area _HOME
                                    179 	.area _HOME
                                    180 ;--------------------------------------------------------
                                    181 ; code
                                    182 ;--------------------------------------------------------
                                    183 	.area _CODE
                                    184 ;src/main.c:348: inline void clear_bkg_2x1(const UINT8 x, const UINT8 y)
                                    185 ;	---------------------------------
                                    186 ; Function clear_bkg_2x1
                                    187 ; ---------------------------------
      000000                        188 _clear_bkg_2x1::
                                    189 ;src/main.c:350: set_bkg_tile_xy(x, y, OFFSET_BKG_NONE);
      000000 AF                     190 	xor	a, a
      000001 F5                     191 	push	af
      000002 33                     192 	inc	sp
      000003 F8 04                  193 	ldhl	sp,	#4
      000005 7E                     194 	ld	a, (hl)
      000006 F5                     195 	push	af
      000007 33                     196 	inc	sp
      000008 2B                     197 	dec	hl
      000009 7E                     198 	ld	a, (hl)
      00000A F5                     199 	push	af
      00000B 33                     200 	inc	sp
      00000C CDr00r00               201 	call	_set_bkg_tile_xy
      00000F E8 03                  202 	add	sp, #3
                                    203 ;src/main.c:351: set_bkg_tile_xy(x + 1u, y, OFFSET_BKG_NONE);
      000011 F8 02                  204 	ldhl	sp,	#2
      000013 7E                     205 	ld	a, (hl)
      000014 3C                     206 	inc	a
      000015 26 00                  207 	ld	h, #0x00
      000017 E5                     208 	push	hl
      000018 33                     209 	inc	sp
      000019 F8 04                  210 	ldhl	sp,	#4
      00001B 66                     211 	ld	h, (hl)
      00001C E5                     212 	push	hl
      00001D 33                     213 	inc	sp
      00001E F5                     214 	push	af
      00001F 33                     215 	inc	sp
      000020 CDr00r00               216 	call	_set_bkg_tile_xy
      000023 E8 03                  217 	add	sp, #3
                                    218 ;src/main.c:352: }
      000025 C9                     219 	ret
      000026                        220 _animation_speeds:
      000026 10                     221 	.db #0x10	; 16
      000027 20                     222 	.db #0x20	; 32
      000028 08                     223 	.db #0x08	; 8
      000029 10                     224 	.db #0x10	; 16
      00002A 04                     225 	.db #0x04	; 4
      00002B 08                     226 	.db #0x08	; 8
      00002C                        227 _menu_card_tiles:
      00002C C1                     228 	.db #0xc1	; 193
      00002D BD                     229 	.db #0xbd	; 189
      00002E 28                     230 	.db #0x28	; 40
      00002F 29                     231 	.db #0x29	; 41
      000030 C5                     232 	.db #0xc5	; 197
      000031 C6                     233 	.db #0xc6	; 198
      000032 C1                     234 	.db #0xc1	; 193
      000033 BD                     235 	.db #0xbd	; 189
      000034 2A                     236 	.db #0x2a	; 42
      000035 2B                     237 	.db #0x2b	; 43
      000036 DC                     238 	.db #0xdc	; 220
      000037 C6                     239 	.db #0xc6	; 198
      000038 26                     240 	.db #0x26	; 38
      000039 BD                     241 	.db #0xbd	; 189
      00003A 2C                     242 	.db #0x2c	; 44
      00003B 2D                     243 	.db #0x2d	; 45
      00003C DC                     244 	.db #0xdc	; 220
      00003D 27                     245 	.db #0x27	; 39
      00003E 2E                     246 	.db #0x2e	; 46
      00003F 2F                     247 	.db #0x2f	; 47
      000040 30                     248 	.db #0x30	; 48	'0'
      000041 31                     249 	.db #0x31	; 49	'1'
      000042 32                     250 	.db #0x32	; 50	'2'
      000043 33                     251 	.db #0x33	; 51	'3'
      000044 2E                     252 	.db #0x2e	; 46
      000045 34                     253 	.db #0x34	; 52	'4'
      000046 30                     254 	.db #0x30	; 48	'0'
      000047 35                     255 	.db #0x35	; 53	'5'
      000048 32                     256 	.db #0x32	; 50	'2'
      000049 36                     257 	.db #0x36	; 54	'6'
      00004A C1                     258 	.db #0xc1	; 193
      00004B C2                     259 	.db #0xc2	; 194
      00004C 37                     260 	.db #0x37	; 55	'7'
      00004D 38                     261 	.db #0x38	; 56	'8'
      00004E C5                     262 	.db #0xc5	; 197
      00004F C6                     263 	.db #0xc6	; 198
      000050 C1                     264 	.db #0xc1	; 193
      000051 C2                     265 	.db #0xc2	; 194
      000052 39                     266 	.db #0x39	; 57	'9'
      000053 3A                     267 	.db #0x3a	; 58
      000054 C5                     268 	.db #0xc5	; 197
      000055 C6                     269 	.db #0xc6	; 198
      000056 C1                     270 	.db #0xc1	; 193
      000057 C2                     271 	.db #0xc2	; 194
      000058 3B                     272 	.db #0x3b	; 59
      000059 3C                     273 	.db #0x3c	; 60
      00005A C5                     274 	.db #0xc5	; 197
      00005B C6                     275 	.db #0xc6	; 198
      00005C                        276 _setting_pile_heights:
      00005C 03                     277 	.db #0x03	; 3
      00005D 02                     278 	.db #0x02	; 2
      00005E 03                     279 	.db #0x03	; 3
      00005F 01                     280 	.db #0x01	; 1
                                    281 ;src/main.c:354: void draw_card_top(const UINT8 x, const UINT8 y, const UINT8 card_data)
                                    282 ;	---------------------------------
                                    283 ; Function draw_card_top
                                    284 ; ---------------------------------
      000060                        285 _draw_card_top::
                                    286 ;src/main.c:356: if (VISIBLE(card_data)) {
      000060 F8 04                  287 	ldhl	sp,	#4
                                    288 ;src/main.c:358: set_bkg_tile_xy(x + 1u, y, SUIT(card_data) + OFFSET_BKG_CARD + OFFSET_CARD_SUIT);
      000062 3A                     289 	ld	a, (hl-)
      000063 4F                     290 	ld	c, a
      000064 2B                     291 	dec	hl
      000065 46                     292 	ld	b, (hl)
      000066 04                     293 	inc	b
                                    294 ;src/main.c:356: if (VISIBLE(card_data)) {
      000067 CB 71                  295 	bit	6, c
      000069 28 3F                  296 	jr	Z, 00102$
                                    297 ;src/main.c:357: set_bkg_tile_xy(x, y, RANK(card_data) + OFFSET_BKG_CARD + OFFSET_CARD_RANK);
      00006B 79                     298 	ld	a, c
      00006C E6 0F                  299 	and	a, #0x0f
      00006E C6 B0                  300 	add	a, #0xb0
      000070 F5                     301 	push	af
      000071 33                     302 	inc	sp
      000072 F8 04                  303 	ldhl	sp,	#4
      000074 7E                     304 	ld	a, (hl)
      000075 F5                     305 	push	af
      000076 33                     306 	inc	sp
      000077 2B                     307 	dec	hl
      000078 7E                     308 	ld	a, (hl)
      000079 F5                     309 	push	af
      00007A 33                     310 	inc	sp
      00007B CDr00r00               311 	call	_set_bkg_tile_xy
      00007E E8 03                  312 	add	sp, #3
                                    313 ;src/main.c:358: set_bkg_tile_xy(x + 1u, y, SUIT(card_data) + OFFSET_BKG_CARD + OFFSET_CARD_SUIT);
      000080 79                     314 	ld	a, c
      000081 0E 00                  315 	ld	c, #0x00
      000083 E6 30                  316 	and	a, #0x30
      000085 5F                     317 	ld	e, a
      000086 16 00                  318 	ld	d, #0x00
      000088 CB 3A                  319 	srl	d
      00008A CB 1B                  320 	rr	e
      00008C CB 3A                  321 	srl	d
      00008E CB 1B                  322 	rr	e
      000090 CB 3A                  323 	srl	d
      000092 CB 1B                  324 	rr	e
      000094 CB 3A                  325 	srl	d
      000096 CB 1B                  326 	rr	e
      000098 7B                     327 	ld	a, e
      000099 C6 BD                  328 	add	a, #0xbd
      00009B F5                     329 	push	af
      00009C 33                     330 	inc	sp
      00009D F8 04                  331 	ldhl	sp,	#4
      00009F 7E                     332 	ld	a, (hl)
      0000A0 F5                     333 	push	af
      0000A1 33                     334 	inc	sp
      0000A2 C5                     335 	push	bc
      0000A3 33                     336 	inc	sp
      0000A4 CDr00r00               337 	call	_set_bkg_tile_xy
      0000A7 E8 03                  338 	add	sp, #3
      0000A9 C9                     339 	ret
      0000AA                        340 00102$:
                                    341 ;src/main.c:360: set_bkg_tile_xy(x, y, OFFSET_BKG_CARD + OFFSET_CARD_BACK);
      0000AA 3E C7                  342 	ld	a, #0xc7
      0000AC F5                     343 	push	af
      0000AD 33                     344 	inc	sp
      0000AE F8 04                  345 	ldhl	sp,	#4
      0000B0 7E                     346 	ld	a, (hl)
      0000B1 F5                     347 	push	af
      0000B2 33                     348 	inc	sp
      0000B3 2B                     349 	dec	hl
      0000B4 7E                     350 	ld	a, (hl)
      0000B5 F5                     351 	push	af
      0000B6 33                     352 	inc	sp
      0000B7 CDr00r00               353 	call	_set_bkg_tile_xy
      0000BA E8 03                  354 	add	sp, #3
                                    355 ;src/main.c:361: set_bkg_tile_xy(x + 1u, y, OFFSET_BKG_CARD + OFFSET_CARD_BACK + 1u);
      0000BC 3E C8                  356 	ld	a, #0xc8
      0000BE F5                     357 	push	af
      0000BF 33                     358 	inc	sp
      0000C0 F8 04                  359 	ldhl	sp,	#4
      0000C2 7E                     360 	ld	a, (hl)
      0000C3 F5                     361 	push	af
      0000C4 33                     362 	inc	sp
      0000C5 C5                     363 	push	bc
      0000C6 33                     364 	inc	sp
      0000C7 CDr00r00               365 	call	_set_bkg_tile_xy
      0000CA E8 03                  366 	add	sp, #3
                                    367 ;src/main.c:363: }
      0000CC C9                     368 	ret
                                    369 ;src/main.c:365: void draw_card_bottom(const UINT8 x, const UINT8 y, const UINT8 card_data)
                                    370 ;	---------------------------------
                                    371 ; Function draw_card_bottom
                                    372 ; ---------------------------------
      0000CD                        373 _draw_card_bottom::
                                    374 ;src/main.c:367: set_bkg_tile_xy(x, y, OFFSET_BKG_CARD + OFFSET_CARD_BLANK + 2u);
      0000CD 3E C3                  375 	ld	a, #0xc3
      0000CF F5                     376 	push	af
      0000D0 33                     377 	inc	sp
      0000D1 F8 04                  378 	ldhl	sp,	#4
      0000D3 7E                     379 	ld	a, (hl)
      0000D4 F5                     380 	push	af
      0000D5 33                     381 	inc	sp
      0000D6 2B                     382 	dec	hl
      0000D7 7E                     383 	ld	a, (hl)
      0000D8 F5                     384 	push	af
      0000D9 33                     385 	inc	sp
      0000DA CDr00r00               386 	call	_set_bkg_tile_xy
      0000DD E8 03                  387 	add	sp, #3
                                    388 ;src/main.c:368: set_bkg_tile_xy(x + 1u, y, OFFSET_BKG_CARD + OFFSET_CARD_BLANK + 3u);
      0000DF F8 02                  389 	ldhl	sp,	#2
      0000E1 4E                     390 	ld	c, (hl)
      0000E2 0C                     391 	inc	c
      0000E3 3E C4                  392 	ld	a, #0xc4
      0000E5 F5                     393 	push	af
      0000E6 33                     394 	inc	sp
      0000E7 23                     395 	inc	hl
      0000E8 46                     396 	ld	b, (hl)
      0000E9 C5                     397 	push	bc
      0000EA CDr00r00               398 	call	_set_bkg_tile_xy
      0000ED E8 03                  399 	add	sp, #3
                                    400 ;src/main.c:369: set_bkg_tile_xy(x, y+ 1u, SUIT(card_data) + OFFSET_BKG_CARD + OFFSET_CARD_SUIT_ROT);
      0000EF F8 04                  401 	ldhl	sp,	#4
      0000F1 7E                     402 	ld	a, (hl)
      0000F2 E6 30                  403 	and	a, #0x30
      0000F4 5F                     404 	ld	e, a
      0000F5 16 00                  405 	ld	d, #0x00
      0000F7 CB 3A                  406 	srl	d
      0000F9 CB 1B                  407 	rr	e
      0000FB CB 3A                  408 	srl	d
      0000FD CB 1B                  409 	rr	e
      0000FF CB 3A                  410 	srl	d
      000101 CB 1B                  411 	rr	e
      000103 CB 3A                  412 	srl	d
      000105 CB 1B                  413 	rr	e
      000107 7B                     414 	ld	a, e
      000108 C6 DA                  415 	add	a, #0xda
      00010A 2B                     416 	dec	hl
      00010B 46                     417 	ld	b, (hl)
      00010C 04                     418 	inc	b
      00010D F5                     419 	push	af
      00010E 33                     420 	inc	sp
      00010F C5                     421 	push	bc
      000110 33                     422 	inc	sp
      000111 2B                     423 	dec	hl
      000112 7E                     424 	ld	a, (hl)
      000113 F5                     425 	push	af
      000114 33                     426 	inc	sp
      000115 CDr00r00               427 	call	_set_bkg_tile_xy
      000118 E8 03                  428 	add	sp, #3
                                    429 ;src/main.c:370: set_bkg_tile_xy(x + 1u, y+ 1u, RANK(card_data) + OFFSET_BKG_CARD + OFFSET_CARD_RANK_ROT);
      00011A F8 04                  430 	ldhl	sp,	#4
      00011C 7E                     431 	ld	a, (hl)
      00011D E6 0F                  432 	and	a, #0x0f
      00011F C6 CD                  433 	add	a, #0xcd
      000121 F5                     434 	push	af
      000122 33                     435 	inc	sp
      000123 C5                     436 	push	bc
      000124 CDr00r00               437 	call	_set_bkg_tile_xy
      000127 E8 03                  438 	add	sp, #3
                                    439 ;src/main.c:371: }
      000129 C9                     440 	ret
                                    441 ;src/main.c:373: inline void draw_card(const UINT8 x, const UINT8 y, const UINT8 card_data)
                                    442 ;	---------------------------------
                                    443 ; Function draw_card
                                    444 ; ---------------------------------
      00012A                        445 _draw_card::
                                    446 ;src/main.c:375: draw_card_top(x, y, card_data);
      00012A F8 04                  447 	ldhl	sp,	#4
      00012C 7E                     448 	ld	a, (hl)
      00012D F5                     449 	push	af
      00012E 33                     450 	inc	sp
      00012F 2B                     451 	dec	hl
      000130 7E                     452 	ld	a, (hl)
      000131 F5                     453 	push	af
      000132 33                     454 	inc	sp
      000133 2B                     455 	dec	hl
      000134 7E                     456 	ld	a, (hl)
      000135 F5                     457 	push	af
      000136 33                     458 	inc	sp
      000137 CDr60r00               459 	call	_draw_card_top
      00013A E8 03                  460 	add	sp, #3
                                    461 ;src/main.c:376: draw_card_bottom(x, y + 1u, card_data);
      00013C F8 03                  462 	ldhl	sp,	#3
      00013E 7E                     463 	ld	a, (hl)
      00013F 3C                     464 	inc	a
      000140 23                     465 	inc	hl
      000141 66                     466 	ld	h, (hl)
      000142 E5                     467 	push	hl
      000143 33                     468 	inc	sp
      000144 F5                     469 	push	af
      000145 33                     470 	inc	sp
      000146 F8 04                  471 	ldhl	sp,	#4
      000148 7E                     472 	ld	a, (hl)
      000149 F5                     473 	push	af
      00014A 33                     474 	inc	sp
      00014B CDrCDr00               475 	call	_draw_card_bottom
      00014E E8 03                  476 	add	sp, #3
                                    477 ;src/main.c:377: }
      000150 C9                     478 	ret
                                    479 ;src/main.c:379: void draw_sequential_card(const UINT8 x, const UINT8 y, const UINT8 bkg_offset)
                                    480 ;	---------------------------------
                                    481 ; Function draw_sequential_card
                                    482 ; ---------------------------------
      000151                        483 _draw_sequential_card::
                                    484 ;src/main.c:381: set_bkg_tile_xy(x, y, bkg_offset);
      000151 F8 04                  485 	ldhl	sp,	#4
      000153 7E                     486 	ld	a, (hl)
      000154 F5                     487 	push	af
      000155 33                     488 	inc	sp
      000156 2B                     489 	dec	hl
      000157 7E                     490 	ld	a, (hl)
      000158 F5                     491 	push	af
      000159 33                     492 	inc	sp
      00015A 2B                     493 	dec	hl
      00015B 7E                     494 	ld	a, (hl)
      00015C F5                     495 	push	af
      00015D 33                     496 	inc	sp
      00015E CDr00r00               497 	call	_set_bkg_tile_xy
      000161 E8 03                  498 	add	sp, #3
                                    499 ;src/main.c:382: set_bkg_tile_xy(x + 1u, y, bkg_offset + 1u);
      000163 F8 04                  500 	ldhl	sp,	#4
      000165 7E                     501 	ld	a, (hl)
      000166 3C                     502 	inc	a
      000167 2B                     503 	dec	hl
      000168 2B                     504 	dec	hl
      000169 4E                     505 	ld	c, (hl)
      00016A 0C                     506 	inc	c
      00016B F5                     507 	push	af
      00016C 33                     508 	inc	sp
      00016D 23                     509 	inc	hl
      00016E 46                     510 	ld	b, (hl)
      00016F C5                     511 	push	bc
      000170 CDr00r00               512 	call	_set_bkg_tile_xy
      000173 E8 03                  513 	add	sp, #3
                                    514 ;src/main.c:383: set_bkg_tile_xy(x, y + 1u, bkg_offset + 2u);
      000175 F8 04                  515 	ldhl	sp,	#4
      000177 7E                     516 	ld	a, (hl)
      000178 3C                     517 	inc	a
      000179 3C                     518 	inc	a
      00017A 2B                     519 	dec	hl
      00017B 46                     520 	ld	b, (hl)
      00017C 04                     521 	inc	b
      00017D F5                     522 	push	af
      00017E 33                     523 	inc	sp
      00017F C5                     524 	push	bc
      000180 33                     525 	inc	sp
      000181 2B                     526 	dec	hl
      000182 7E                     527 	ld	a, (hl)
      000183 F5                     528 	push	af
      000184 33                     529 	inc	sp
      000185 CDr00r00               530 	call	_set_bkg_tile_xy
      000188 E8 03                  531 	add	sp, #3
                                    532 ;src/main.c:384: set_bkg_tile_xy(x + 1u, y + 1u, bkg_offset + 3u);
      00018A F8 04                  533 	ldhl	sp,	#4
      00018C 7E                     534 	ld	a, (hl)
      00018D 3C                     535 	inc	a
      00018E 3C                     536 	inc	a
      00018F 3C                     537 	inc	a
      000190 F5                     538 	push	af
      000191 33                     539 	inc	sp
      000192 C5                     540 	push	bc
      000193 33                     541 	inc	sp
      000194 79                     542 	ld	a, c
      000195 F5                     543 	push	af
      000196 33                     544 	inc	sp
      000197 CDr00r00               545 	call	_set_bkg_tile_xy
      00019A E8 03                  546 	add	sp, #3
                                    547 ;src/main.c:385: set_bkg_tile_xy(x, y + 2u, bkg_offset + 4u);
      00019C F8 04                  548 	ldhl	sp,	#4
      00019E 7E                     549 	ld	a, (hl)
      00019F 3C                     550 	inc	a
      0001A0 3C                     551 	inc	a
      0001A1 3C                     552 	inc	a
      0001A2 3C                     553 	inc	a
      0001A3 2B                     554 	dec	hl
      0001A4 46                     555 	ld	b, (hl)
      0001A5 04                     556 	inc	b
      0001A6 04                     557 	inc	b
      0001A7 F5                     558 	push	af
      0001A8 33                     559 	inc	sp
      0001A9 C5                     560 	push	bc
      0001AA 33                     561 	inc	sp
      0001AB 2B                     562 	dec	hl
      0001AC 7E                     563 	ld	a, (hl)
      0001AD F5                     564 	push	af
      0001AE 33                     565 	inc	sp
      0001AF CDr00r00               566 	call	_set_bkg_tile_xy
      0001B2 E8 03                  567 	add	sp, #3
                                    568 ;src/main.c:386: set_bkg_tile_xy(x + 1u, y + 2u, bkg_offset + 5u);
      0001B4 F8 04                  569 	ldhl	sp,	#4
      0001B6 7E                     570 	ld	a, (hl)
      0001B7 C6 05                  571 	add	a, #0x05
      0001B9 F5                     572 	push	af
      0001BA 33                     573 	inc	sp
      0001BB C5                     574 	push	bc
      0001BC CDr00r00               575 	call	_set_bkg_tile_xy
      0001BF E8 03                  576 	add	sp, #3
                                    577 ;src/main.c:387: }
      0001C1 C9                     578 	ret
                                    579 ;src/main.c:390: void clear_bkg(void)
                                    580 ;	---------------------------------
                                    581 ; Function clear_bkg
                                    582 ; ---------------------------------
      0001C2                        583 _clear_bkg::
                                    584 ;src/main.c:393: for (x = 0; x < 32u; x++)
      0001C2 0E 00                  585 	ld	c, #0x00
                                    586 ;src/main.c:394: for (y = 0; y < 32u; y++)
      0001C4                        587 00109$:
      0001C4 06 00                  588 	ld	b, #0x00
      0001C6                        589 00103$:
                                    590 ;src/main.c:395: set_bkg_tile_xy(x, y, 0);
      0001C6 AF                     591 	xor	a, a
      0001C7 F5                     592 	push	af
      0001C8 33                     593 	inc	sp
      0001C9 C5                     594 	push	bc
      0001CA 33                     595 	inc	sp
      0001CB 79                     596 	ld	a, c
      0001CC F5                     597 	push	af
      0001CD 33                     598 	inc	sp
      0001CE CDr00r00               599 	call	_set_bkg_tile_xy
      0001D1 E8 03                  600 	add	sp, #3
                                    601 ;src/main.c:394: for (y = 0; y < 32u; y++)
      0001D3 04                     602 	inc	b
      0001D4 78                     603 	ld	a, b
      0001D5 D6 20                  604 	sub	a, #0x20
      0001D7 38 ED                  605 	jr	C, 00103$
                                    606 ;src/main.c:393: for (x = 0; x < 32u; x++)
      0001D9 0C                     607 	inc	c
      0001DA 79                     608 	ld	a, c
      0001DB D6 20                  609 	sub	a, #0x20
      0001DD 38 E5                  610 	jr	C, 00109$
                                    611 ;src/main.c:396: }
      0001DF C9                     612 	ret
                                    613 ;src/main.c:398: void draw_bkg_game(void)
                                    614 ;	---------------------------------
                                    615 ; Function draw_bkg_game
                                    616 ; ---------------------------------
      0001E0                        617 _draw_bkg_game::
      0001E0 E8 F9                  618 	add	sp, #-7
                                    619 ;src/main.c:401: Pile *pile = IDX_PTR(piles, 0);
      0001E2 01r38r01               620 	ld	bc, #_piles+0
                                    621 ;src/main.c:402: for (x = 0; x < 20u; x += 2) {
      0001E5 AF                     622 	xor	a, a
      0001E6 F8 00                  623 	ldhl	sp,	#0
      0001E8 77                     624 	ld	(hl), a
      0001E9                        625 00106$:
                                    626 ;src/main.c:403: Card *card = pile->base;
      0001E9 59                     627 	ld	e, c
      0001EA 50                     628 	ld	d, b
      0001EB 1A                     629 	ld	a, (de)
      0001EC F8 05                  630 	ldhl	sp,	#5
      0001EE 22                     631 	ld	(hl+), a
      0001EF 13                     632 	inc	de
      0001F0 1A                     633 	ld	a, (de)
      0001F1 77                     634 	ld	(hl), a
                                    635 ;src/main.c:405: while (card->next_card) {
      0001F2 F8 01                  636 	ldhl	sp,	#1
      0001F4 36 03                  637 	ld	(hl), #0x03
      0001F6                        638 00101$:
      0001F6 F8 05                  639 	ldhl	sp,#5
      0001F8 2A                     640 	ld	a, (hl+)
      0001F9 5F                     641 	ld	e, a
      0001FA 56                     642 	ld	d, (hl)
      0001FB 1A                     643 	ld	a, (de)
      0001FC F8 02                  644 	ldhl	sp,	#2
      0001FE 22                     645 	ld	(hl+), a
      0001FF 13                     646 	inc	de
      000200 1A                     647 	ld	a, (de)
      000201 77                     648 	ld	(hl), a
                                    649 ;src/main.c:406: draw_card_top(x, y, card->data);
      000202 F8 05                  650 	ldhl	sp,#5
      000204 2A                     651 	ld	a, (hl+)
      000205 5F                     652 	ld	e, a
      000206 56                     653 	ld	d, (hl)
      000207 13                     654 	inc	de
      000208 13                     655 	inc	de
                                    656 ;src/main.c:407: y++;
      000209 F8 01                  657 	ldhl	sp,	#1
      00020B 7E                     658 	ld	a, (hl)
      00020C 3C                     659 	inc	a
      00020D F8 04                  660 	ldhl	sp,	#4
      00020F 77                     661 	ld	(hl), a
                                    662 ;src/main.c:406: draw_card_top(x, y, card->data);
      000210 1A                     663 	ld	a, (de)
      000211 57                     664 	ld	d, a
                                    665 ;src/main.c:405: while (card->next_card) {
      000212 2B                     666 	dec	hl
      000213 3A                     667 	ld	a, (hl-)
      000214 B6                     668 	or	a, (hl)
      000215 28 24                  669 	jr	Z, 00103$
                                    670 ;src/main.c:406: draw_card_top(x, y, card->data);
      000217 C5                     671 	push	bc
      000218 D5                     672 	push	de
      000219 33                     673 	inc	sp
      00021A 2B                     674 	dec	hl
      00021B 7E                     675 	ld	a, (hl)
      00021C F5                     676 	push	af
      00021D 33                     677 	inc	sp
      00021E 2B                     678 	dec	hl
      00021F 7E                     679 	ld	a, (hl)
      000220 F5                     680 	push	af
      000221 33                     681 	inc	sp
      000222 CDr60r00               682 	call	_draw_card_top
      000225 E8 03                  683 	add	sp, #3
      000227 C1                     684 	pop	bc
                                    685 ;src/main.c:407: y++;
      000228 F8 04                  686 	ldhl	sp,	#4
      00022A 7E                     687 	ld	a, (hl)
      00022B F8 01                  688 	ldhl	sp,	#1
      00022D 77                     689 	ld	(hl), a
                                    690 ;src/main.c:408: card = card->next_card;
      00022E F8 05                  691 	ldhl	sp,#5
      000230 2A                     692 	ld	a, (hl+)
      000231 5F                     693 	ld	e, a
      000232 56                     694 	ld	d, (hl)
      000233 1A                     695 	ld	a, (de)
      000234 2B                     696 	dec	hl
      000235 22                     697 	ld	(hl+), a
      000236 13                     698 	inc	de
      000237 1A                     699 	ld	a, (de)
      000238 77                     700 	ld	(hl), a
      000239 18 BB                  701 	jr	00101$
      00023B                        702 00103$:
                                    703 ;src/main.c:410: draw_card(x, y, card->data);
                                    704 ;src/main.c:375: draw_card_top(x, y, card_data);
      00023B C5                     705 	push	bc
      00023C D5                     706 	push	de
      00023D D5                     707 	push	de
      00023E 33                     708 	inc	sp
      00023F F8 06                  709 	ldhl	sp,	#6
      000241 7E                     710 	ld	a, (hl)
      000242 F5                     711 	push	af
      000243 33                     712 	inc	sp
      000244 2B                     713 	dec	hl
      000245 7E                     714 	ld	a, (hl)
      000246 F5                     715 	push	af
      000247 33                     716 	inc	sp
      000248 CDr60r00               717 	call	_draw_card_top
      00024B E8 03                  718 	add	sp, #3
      00024D 33                     719 	inc	sp
      00024E F8 07                  720 	ldhl	sp,	#7
      000250 7E                     721 	ld	a, (hl)
      000251 F5                     722 	push	af
      000252 33                     723 	inc	sp
      000253 F8 04                  724 	ldhl	sp,	#4
      000255 7E                     725 	ld	a, (hl)
      000256 F5                     726 	push	af
      000257 33                     727 	inc	sp
      000258 CDrCDr00               728 	call	_draw_card_bottom
      00025B E8 03                  729 	add	sp, #3
      00025D C1                     730 	pop	bc
                                    731 ;src/main.c:411: pile++;
      00025E 03                     732 	inc	bc
      00025F 03                     733 	inc	bc
      000260 03                     734 	inc	bc
      000261 03                     735 	inc	bc
      000262 03                     736 	inc	bc
                                    737 ;src/main.c:402: for (x = 0; x < 20u; x += 2) {
      000263 F8 00                  738 	ldhl	sp,	#0
      000265 7E                     739 	ld	a, (hl)
      000266 C6 02                  740 	add	a, #0x02
      000268 77                     741 	ld	(hl), a
      000269 D6 14                  742 	sub	a, #0x14
      00026B DArE9r01               743 	jp	C, 00106$
                                    744 ;src/main.c:413: draw_sequential_card(0, 0, OFFSET_BKG_CARD + OFFSET_CARD_BACK);
      00026E 3E C7                  745 	ld	a, #0xc7
      000270 F5                     746 	push	af
      000271 33                     747 	inc	sp
      000272 AF                     748 	xor	a, a
      000273 F5                     749 	push	af
      000274 33                     750 	inc	sp
      000275 AF                     751 	xor	a, a
      000276 F5                     752 	push	af
      000277 33                     753 	inc	sp
      000278 CDr51r01               754 	call	_draw_sequential_card
      00027B E8 03                  755 	add	sp, #3
                                    756 ;src/main.c:414: }
      00027D E8 07                  757 	add	sp, #7
      00027F C9                     758 	ret
                                    759 ;src/main.c:416: void draw_bkg_splash_screen(void)
                                    760 ;	---------------------------------
                                    761 ; Function draw_bkg_splash_screen
                                    762 ; ---------------------------------
      000280                        763 _draw_bkg_splash_screen::
                                    764 ;src/main.c:418: set_bkg_tile_xy(2u, 9u, OFFSET_BKG_BUTTON + OFFSET_BUTTON_SYMBOL);
      000280 11 09 3D               765 	ld	de, #0x3d09
      000283 D5                     766 	push	de
      000284 3E 02                  767 	ld	a, #0x02
      000286 F5                     768 	push	af
      000287 33                     769 	inc	sp
      000288 CDr00r00               770 	call	_set_bkg_tile_xy
      00028B E8 03                  771 	add	sp, #3
                                    772 ;src/main.c:419: set_bkg_tile_xy(3u, 9u, OFFSET_BKG_BUTTON + OFFSET_BUTTON_START);
      00028D 11 09 3E               773 	ld	de, #0x3e09
      000290 D5                     774 	push	de
      000291 3E 03                  775 	ld	a, #0x03
      000293 F5                     776 	push	af
      000294 33                     777 	inc	sp
      000295 CDr00r00               778 	call	_set_bkg_tile_xy
      000298 E8 03                  779 	add	sp, #3
                                    780 ;src/main.c:420: set_bkg_tile_xy(4u, 9u, OFFSET_BKG_BUTTON + OFFSET_BUTTON_START + 1u);
      00029A 11 09 3F               781 	ld	de, #0x3f09
      00029D D5                     782 	push	de
      00029E 3E 04                  783 	ld	a, #0x04
      0002A0 F5                     784 	push	af
      0002A1 33                     785 	inc	sp
      0002A2 CDr00r00               786 	call	_set_bkg_tile_xy
      0002A5 E8 03                  787 	add	sp, #3
                                    788 ;src/main.c:421: set_bkg_tile_xy(5u, 9u, OFFSET_BKG_BUTTON + OFFSET_BUTTON_START + 2u);
      0002A7 11 09 40               789 	ld	de, #0x4009
      0002AA D5                     790 	push	de
      0002AB 3E 05                  791 	ld	a, #0x05
      0002AD F5                     792 	push	af
      0002AE 33                     793 	inc	sp
      0002AF CDr00r00               794 	call	_set_bkg_tile_xy
      0002B2 E8 03                  795 	add	sp, #3
                                    796 ;src/main.c:422: set_bkg_tiles(7u, 9u, START_TEXT_LEN, 1u, start_text);
      0002B4 21r00r00               797 	ld	hl, #_start_text
      0002B7 E5                     798 	push	hl
      0002B8 11 05 01               799 	ld	de, #0x0105
      0002BB D5                     800 	push	de
      0002BC 11 07 09               801 	ld	de, #0x0907
      0002BF D5                     802 	push	de
      0002C0 CDr00r00               803 	call	_set_bkg_tiles
      0002C3 E8 06                  804 	add	sp, #6
                                    805 ;src/main.c:424: set_bkg_tile_xy(2u, 10u, OFFSET_BKG_BUTTON + OFFSET_BUTTON_SYMBOL);
      0002C5 11 0A 3D               806 	ld	de, #0x3d0a
      0002C8 D5                     807 	push	de
      0002C9 3E 02                  808 	ld	a, #0x02
      0002CB F5                     809 	push	af
      0002CC 33                     810 	inc	sp
      0002CD CDr00r00               811 	call	_set_bkg_tile_xy
      0002D0 E8 03                  812 	add	sp, #3
                                    813 ;src/main.c:425: set_bkg_tile_xy(3u, 10u, OFFSET_BKG_BUTTON + OFFSET_BUTTON_SELECT);
      0002D2 11 0A 41               814 	ld	de, #0x410a
      0002D5 D5                     815 	push	de
      0002D6 3E 03                  816 	ld	a, #0x03
      0002D8 F5                     817 	push	af
      0002D9 33                     818 	inc	sp
      0002DA CDr00r00               819 	call	_set_bkg_tile_xy
      0002DD E8 03                  820 	add	sp, #3
                                    821 ;src/main.c:426: set_bkg_tile_xy(4u, 10u, OFFSET_BKG_BUTTON + OFFSET_BUTTON_SELECT + 1u);
      0002DF 11 0A 42               822 	ld	de, #0x420a
      0002E2 D5                     823 	push	de
      0002E3 3E 04                  824 	ld	a, #0x04
      0002E5 F5                     825 	push	af
      0002E6 33                     826 	inc	sp
      0002E7 CDr00r00               827 	call	_set_bkg_tile_xy
      0002EA E8 03                  828 	add	sp, #3
                                    829 ;src/main.c:427: set_bkg_tile_xy(5u, 10u, OFFSET_BKG_BUTTON + OFFSET_BUTTON_SELECT + 2u);
      0002EC 11 0A 43               830 	ld	de, #0x430a
      0002EF D5                     831 	push	de
      0002F0 3E 05                  832 	ld	a, #0x05
      0002F2 F5                     833 	push	af
      0002F3 33                     834 	inc	sp
      0002F4 CDr00r00               835 	call	_set_bkg_tile_xy
      0002F7 E8 03                  836 	add	sp, #3
                                    837 ;src/main.c:428: set_bkg_tiles(7u, 10u, LEADERBOARD_TEXT_LEN, 1u, leaderboard_text);
      0002F9 21r00r00               838 	ld	hl, #_leaderboard_text
      0002FC E5                     839 	push	hl
      0002FD 11 0B 01               840 	ld	de, #0x010b
      000300 D5                     841 	push	de
      000301 11 07 0A               842 	ld	de, #0x0a07
      000304 D5                     843 	push	de
      000305 CDr00r00               844 	call	_set_bkg_tiles
      000308 E8 06                  845 	add	sp, #6
                                    846 ;src/main.c:430: set_bkg_tiles(0, 15u, COPYRIGHT_TEXT_LEN, 1u, copyright_text);
      00030A 21r00r00               847 	ld	hl, #_copyright_text
      00030D E5                     848 	push	hl
      00030E 11 14 01               849 	ld	de, #0x0114
      000311 D5                     850 	push	de
      000312 3E 0F                  851 	ld	a, #0x0f
      000314 F5                     852 	push	af
      000315 33                     853 	inc	sp
      000316 AF                     854 	xor	a, a
      000317 F5                     855 	push	af
      000318 33                     856 	inc	sp
      000319 CDr00r00               857 	call	_set_bkg_tiles
      00031C E8 06                  858 	add	sp, #6
                                    859 ;src/main.c:431: }
      00031E C9                     860 	ret
                                    861 ;src/main.c:433: void draw_bkg_settings(void)
                                    862 ;	---------------------------------
                                    863 ; Function draw_bkg_settings
                                    864 ; ---------------------------------
      00031F                        865 _draw_bkg_settings::
                                    866 ;src/main.c:435: set_bkg_tiles(SETTINGS_SPLIT_X - SUITS_TEXT_LEN, SETTINGS_PAD_Y + 1u, SUITS_TEXT_LEN, 1u, suits_text);
      00031F 21r00r00               867 	ld	hl, #_suits_text
      000322 E5                     868 	push	hl
      000323 11 05 01               869 	ld	de, #0x0105
      000326 D5                     870 	push	de
      000327 11 05 02               871 	ld	de, #0x0205
      00032A D5                     872 	push	de
      00032B CDr00r00               873 	call	_set_bkg_tiles
      00032E E8 06                  874 	add	sp, #6
                                    875 ;src/main.c:436: set_bkg_tiles(SETTINGS_SPLIT_X, SETTINGS_PAD_Y, 2u, 3u, menu_card_tiles[MENU_CARD_ONE_SUIT]);
      000330 21r2Cr00               876 	ld	hl, #_menu_card_tiles
      000333 E5                     877 	push	hl
      000334 11 02 03               878 	ld	de, #0x0302
      000337 D5                     879 	push	de
      000338 11 0A 01               880 	ld	de, #0x010a
      00033B D5                     881 	push	de
      00033C CDr00r00               882 	call	_set_bkg_tiles
      00033F E8 06                  883 	add	sp, #6
                                    884 ;src/main.c:437: set_bkg_tiles(SETTINGS_SPLIT_X + 2u, SETTINGS_PAD_Y, 2u, 3u, menu_card_tiles[MENU_CARD_TWO_SUIT]);
      000341 21r32r00               885 	ld	hl, #(_menu_card_tiles + 0x0006)
      000344 E5                     886 	push	hl
      000345 11 02 03               887 	ld	de, #0x0302
      000348 D5                     888 	push	de
      000349 11 0C 01               889 	ld	de, #0x010c
      00034C D5                     890 	push	de
      00034D CDr00r00               891 	call	_set_bkg_tiles
      000350 E8 06                  892 	add	sp, #6
                                    893 ;src/main.c:438: set_bkg_tiles(SETTINGS_SPLIT_X + 4u, SETTINGS_PAD_Y, 2u, 3u, menu_card_tiles[MENU_CARD_FOUR_SUIT]);
      000352 21r38r00               894 	ld	hl, #(_menu_card_tiles + 0x000c)
      000355 E5                     895 	push	hl
      000356 11 02 03               896 	ld	de, #0x0302
      000359 D5                     897 	push	de
      00035A 11 0E 01               898 	ld	de, #0x010e
      00035D D5                     899 	push	de
      00035E CDr00r00               900 	call	_set_bkg_tiles
      000361 E8 06                  901 	add	sp, #6
                                    902 ;src/main.c:440: set_bkg_tiles(SETTINGS_SPLIT_X - MUSIC_TEXT_LEN, SETTINGS_PAD_Y + 5u, MUSIC_TEXT_LEN, 1u, music_text);
      000363 21r00r00               903 	ld	hl, #_music_text
      000366 E5                     904 	push	hl
      000367 11 05 01               905 	ld	de, #0x0105
      00036A D5                     906 	push	de
      00036B 11 05 06               907 	ld	de, #0x0605
      00036E D5                     908 	push	de
      00036F CDr00r00               909 	call	_set_bkg_tiles
      000372 E8 06                  910 	add	sp, #6
                                    911 ;src/main.c:441: set_bkg_tiles(SETTINGS_SPLIT_X, SETTINGS_PAD_Y + 4u, 2u, 3u, menu_card_tiles[MENU_CARD_MUSIC]);
      000374 21r3Er00               912 	ld	hl, #(_menu_card_tiles + 0x0012)
      000377 E5                     913 	push	hl
      000378 11 02 03               914 	ld	de, #0x0302
      00037B D5                     915 	push	de
      00037C 11 0A 05               916 	ld	de, #0x050a
      00037F D5                     917 	push	de
      000380 CDr00r00               918 	call	_set_bkg_tiles
      000383 E8 06                  919 	add	sp, #6
                                    920 ;src/main.c:442: set_bkg_tiles(SETTINGS_SPLIT_X + 2u, SETTINGS_PAD_Y + 4u, 2u, 3u, menu_card_tiles[MENU_CARD_NO_MUSIC]);
      000385 21r44r00               921 	ld	hl, #(_menu_card_tiles + 0x0018)
      000388 E5                     922 	push	hl
      000389 11 02 03               923 	ld	de, #0x0302
      00038C D5                     924 	push	de
      00038D 11 0C 05               925 	ld	de, #0x050c
      000390 D5                     926 	push	de
      000391 CDr00r00               927 	call	_set_bkg_tiles
      000394 E8 06                  928 	add	sp, #6
                                    929 ;src/main.c:444: set_bkg_tiles(SETTINGS_SPLIT_X - SPEED_TEXT_LEN, SETTINGS_PAD_Y + 9u, SPEED_TEXT_LEN, 1u, speed_text);
      000396 21r00r00               930 	ld	hl, #_speed_text
      000399 E5                     931 	push	hl
      00039A 11 05 01               932 	ld	de, #0x0105
      00039D D5                     933 	push	de
      00039E 11 05 0A               934 	ld	de, #0x0a05
      0003A1 D5                     935 	push	de
      0003A2 CDr00r00               936 	call	_set_bkg_tiles
      0003A5 E8 06                  937 	add	sp, #6
                                    938 ;src/main.c:445: set_bkg_tiles(SETTINGS_SPLIT_X, SETTINGS_PAD_Y + 8u, 2u, 3u, menu_card_tiles[MENU_CARD_ANIMATION_SLOW]);
      0003A7 21r4Ar00               939 	ld	hl, #(_menu_card_tiles + 0x001e)
      0003AA E5                     940 	push	hl
      0003AB 11 02 03               941 	ld	de, #0x0302
      0003AE D5                     942 	push	de
      0003AF 11 0A 09               943 	ld	de, #0x090a
      0003B2 D5                     944 	push	de
      0003B3 CDr00r00               945 	call	_set_bkg_tiles
      0003B6 E8 06                  946 	add	sp, #6
                                    947 ;src/main.c:446: set_bkg_tiles(SETTINGS_SPLIT_X + 2u, SETTINGS_PAD_Y + 8u, 2u, 3u, menu_card_tiles[MENU_CARD_ANIMATION_MEDIUM]);
      0003B8 21r50r00               948 	ld	hl, #(_menu_card_tiles + 0x0024)
      0003BB E5                     949 	push	hl
      0003BC 11 02 03               950 	ld	de, #0x0302
      0003BF D5                     951 	push	de
      0003C0 11 0C 09               952 	ld	de, #0x090c
      0003C3 D5                     953 	push	de
      0003C4 CDr00r00               954 	call	_set_bkg_tiles
      0003C7 E8 06                  955 	add	sp, #6
                                    956 ;src/main.c:447: set_bkg_tiles(SETTINGS_SPLIT_X + 4u, SETTINGS_PAD_Y + 8u, 2u, 3u, menu_card_tiles[MENU_CARD_ANIMATION_FAST]);
      0003C9 21r56r00               957 	ld	hl, #(_menu_card_tiles + 0x002a)
      0003CC E5                     958 	push	hl
      0003CD 11 02 03               959 	ld	de, #0x0302
      0003D0 D5                     960 	push	de
      0003D1 11 0E 09               961 	ld	de, #0x090e
      0003D4 D5                     962 	push	de
      0003D5 CDr00r00               963 	call	_set_bkg_tiles
      0003D8 E8 06                  964 	add	sp, #6
                                    965 ;src/main.c:449: set_bkg_tiles(SETTINGS_SPLIT_X - START_TEXT_LEN, SETTINGS_PAD_Y + 13u, START_TEXT_LEN, 1u, start_text);
      0003DA 21r00r00               966 	ld	hl, #_start_text
      0003DD E5                     967 	push	hl
      0003DE 11 05 01               968 	ld	de, #0x0105
      0003E1 D5                     969 	push	de
      0003E2 11 05 0E               970 	ld	de, #0x0e05
      0003E5 D5                     971 	push	de
      0003E6 CDr00r00               972 	call	_set_bkg_tiles
      0003E9 E8 06                  973 	add	sp, #6
                                    974 ;src/main.c:450: draw_sequential_card(SETTINGS_SPLIT_X, SETTINGS_PAD_Y + 12u, OFFSET_BKG_CARD + OFFSET_CARD_BACK);
      0003EB 11 0D C7               975 	ld	de, #0xc70d
      0003EE D5                     976 	push	de
      0003EF 3E 0A                  977 	ld	a, #0x0a
      0003F1 F5                     978 	push	af
      0003F2 33                     979 	inc	sp
      0003F3 CDr51r01               980 	call	_draw_sequential_card
      0003F6 E8 03                  981 	add	sp, #3
                                    982 ;src/main.c:451: }
      0003F8 C9                     983 	ret
                                    984 ;src/main.c:464: void draw_bkg_leaderboard(void)
                                    985 ;	---------------------------------
                                    986 ; Function draw_bkg_leaderboard
                                    987 ; ---------------------------------
      0003F9                        988 _draw_bkg_leaderboard::
      0003F9 E8 F3                  989 	add	sp, #-13
                                    990 ;src/main.c:466: set_bkg_tiles(4u, 1u, LEADERBOARD_TEXT_LEN, 1u, leaderboard_text);
      0003FB 21r00r00               991 	ld	hl, #_leaderboard_text
      0003FE E5                     992 	push	hl
      0003FF 11 0B 01               993 	ld	de, #0x010b
      000402 D5                     994 	push	de
      000403 11 04 01               995 	ld	de, #0x0104
      000406 D5                     996 	push	de
      000407 CDr00r00               997 	call	_set_bkg_tiles
      00040A E8 06                  998 	add	sp, #6
                                    999 ;src/main.c:468: set_bkg_tiles(LEADERBOARD_CARD_X, LEADERBOARD_PAD_Y, 2u, 3u, menu_card_tiles[MENU_CARD_ONE_SUIT]);
      00040C 21r2Cr00              1000 	ld	hl, #_menu_card_tiles
      00040F E5                    1001 	push	hl
      000410 11 02 03              1002 	ld	de, #0x0302
      000413 D5                    1003 	push	de
      000414 11 04 04              1004 	ld	de, #0x0404
      000417 D5                    1005 	push	de
      000418 CDr00r00              1006 	call	_set_bkg_tiles
      00041B E8 06                 1007 	add	sp, #6
                                   1008 ;src/main.c:469: set_bkg_tiles(LEADERBOARD_CARD_X, LEADERBOARD_PAD_Y + 4u, 2u, 3u, menu_card_tiles[MENU_CARD_TWO_SUIT]);
      00041D 21r32r00              1009 	ld	hl, #(_menu_card_tiles + 0x0006)
      000420 E5                    1010 	push	hl
      000421 11 02 03              1011 	ld	de, #0x0302
      000424 D5                    1012 	push	de
      000425 11 04 08              1013 	ld	de, #0x0804
      000428 D5                    1014 	push	de
      000429 CDr00r00              1015 	call	_set_bkg_tiles
      00042C E8 06                 1016 	add	sp, #6
                                   1017 ;src/main.c:470: set_bkg_tiles(LEADERBOARD_CARD_X, LEADERBOARD_PAD_Y + 8u, 2u, 3u, menu_card_tiles[MENU_CARD_FOUR_SUIT]);
      00042E 21r38r00              1018 	ld	hl, #(_menu_card_tiles + 0x000c)
      000431 E5                    1019 	push	hl
      000432 11 02 03              1020 	ld	de, #0x0302
      000435 D5                    1021 	push	de
      000436 11 04 0C              1022 	ld	de, #0x0c04
      000439 D5                    1023 	push	de
      00043A CDr00r00              1024 	call	_set_bkg_tiles
      00043D E8 06                 1025 	add	sp, #6
                                   1026 ;src/main.c:472: LeaderBoard *iter = IDX_PTR(leaderboard[0], 0);
      00043F 01r00r00              1027 	ld	bc, #_leaderboard+0
                                   1028 ;src/main.c:474: for (i = 0; i < 3; i++) {
      000442 AF                    1029 	xor	a, a
      000443 F8 0B                 1030 	ldhl	sp,	#11
      000445 77                    1031 	ld	(hl), a
                                   1032 ;src/main.c:475: for (j = 0; j < 3; j++) {
      000446                       1033 00110$:
      000446 F8 0B                 1034 	ldhl	sp,	#11
      000448 7E                    1035 	ld	a, (hl)
      000449 87                    1036 	add	a, a
      00044A 87                    1037 	add	a, a
      00044B C6 04                 1038 	add	a, #0x04
      00044D F8 03                 1039 	ldhl	sp,	#3
      00044F 77                    1040 	ld	(hl), a
      000450 AF                    1041 	xor	a, a
      000451 F8 0C                 1042 	ldhl	sp,	#12
      000453 77                    1043 	ld	(hl), a
      000454                       1044 00104$:
                                   1045 ;src/main.c:476: UINT8 y = LEADERBOARD_PAD_Y + i * 4u + j;
      000454 F8 03                 1046 	ldhl	sp,	#3
      000456 7E                    1047 	ld	a, (hl)
      000457 F8 0C                 1048 	ldhl	sp,	#12
      000459 86                    1049 	add	a, (hl)
      00045A F8 04                 1050 	ldhl	sp,	#4
      00045C 77                    1051 	ld	(hl), a
                                   1052 ;src/main.c:477: set_bkg_tiles(LEADERBOARD_NAME_X, y, 3u, 1u, iter->name);
      00045D C5                    1053 	push	bc
      00045E 11 03 01              1054 	ld	de, #0x0103
      000461 D5                    1055 	push	de
      000462 56                    1056 	ld	d, (hl)
      000463 1E 08                 1057 	ld	e,#0x08
      000465 D5                    1058 	push	de
      000466 CDr00r00              1059 	call	_set_bkg_tiles
      000469 E8 06                 1060 	add	sp, #6
                                   1061 ;src/main.c:478: draw_bkg_leaderboard_score(LEADERBOARD_SCORE_X, y, iter->score);
      00046B 69                    1062 	ld	l, c
      00046C 60                    1063 	ld	h, b
      00046D 23                    1064 	inc	hl
      00046E 23                    1065 	inc	hl
      00046F 23                    1066 	inc	hl
      000470 5D                    1067 	ld	e, l
      000471 54                    1068 	ld	d, h
      000472 1A                    1069 	ld	a, (de)
      000473 F8 05                 1070 	ldhl	sp,	#5
      000475 22                    1071 	ld	(hl+), a
      000476 13                    1072 	inc	de
      000477 1A                    1073 	ld	a, (de)
      000478 77                    1074 	ld	(hl), a
                                   1075 ;src/main.c:455: UINT8 score_tiles[3] = {
      000479 F8 00                 1076 	ldhl	sp,	#0
      00047B 7D                    1077 	ld	a, l
      00047C 54                    1078 	ld	d, h
      00047D F8 07                 1079 	ldhl	sp,	#7
      00047F 22                    1080 	ld	(hl+), a
      000480 72                    1081 	ld	(hl), d
      000481 C5                    1082 	push	bc
      000482 21 64 00              1083 	ld	hl, #0x0064
      000485 E5                    1084 	push	hl
      000486 F8 09                 1085 	ldhl	sp,	#9
      000488 2A                    1086 	ld	a, (hl+)
      000489 66                    1087 	ld	h, (hl)
      00048A 6F                    1088 	ld	l, a
      00048B E5                    1089 	push	hl
      00048C CDr00r00              1090 	call	__divuint
      00048F E8 04                 1091 	add	sp, #4
      000491 C1                    1092 	pop	bc
      000492 7B                    1093 	ld	a, e
      000493 3C                    1094 	inc	a
      000494 F8 07                 1095 	ldhl	sp,	#7
      000496 F5                    1096 	push	af
      000497 2A                    1097 	ld	a, (hl+)
      000498 66                    1098 	ld	h, (hl)
      000499 6F                    1099 	ld	l, a
      00049A F1                    1100 	pop	af
      00049B 77                    1101 	ld	(hl), a
                                   1102 ;c
      00049C F8 07                 1103 	ldhl	sp,#7
      00049E 2A                    1104 	ld	a, (hl+)
      00049F 5F                    1105 	ld	e, a
      0004A0 56                    1106 	ld	d, (hl)
      0004A1 6B                    1107 	ld	l, e
      0004A2 62                    1108 	ld	h, d
      0004A3 23                    1109 	inc	hl
      0004A4 E5                    1110 	push	hl
      0004A5 7D                    1111 	ld	a, l
      0004A6 F8 0B                 1112 	ldhl	sp,	#11
      0004A8 77                    1113 	ld	(hl), a
      0004A9 E1                    1114 	pop	hl
      0004AA 7C                    1115 	ld	a, h
      0004AB F8 0A                 1116 	ldhl	sp,	#10
      0004AD 77                    1117 	ld	(hl), a
      0004AE C5                    1118 	push	bc
      0004AF 21 64 00              1119 	ld	hl, #0x0064
      0004B2 E5                    1120 	push	hl
      0004B3 F8 09                 1121 	ldhl	sp,	#9
      0004B5 2A                    1122 	ld	a, (hl+)
      0004B6 66                    1123 	ld	h, (hl)
      0004B7 6F                    1124 	ld	l, a
      0004B8 E5                    1125 	push	hl
      0004B9 CDr00r00              1126 	call	__moduint
      0004BC E8 04                 1127 	add	sp, #4
      0004BE 21 0A 00              1128 	ld	hl, #0x000a
      0004C1 E5                    1129 	push	hl
      0004C2 D5                    1130 	push	de
      0004C3 CDr00r00              1131 	call	__divuint
      0004C6 E8 04                 1132 	add	sp, #4
      0004C8 C1                    1133 	pop	bc
      0004C9 7B                    1134 	ld	a, e
      0004CA 3C                    1135 	inc	a
      0004CB F8 09                 1136 	ldhl	sp,	#9
      0004CD F5                    1137 	push	af
      0004CE 2A                    1138 	ld	a, (hl+)
      0004CF 66                    1139 	ld	h, (hl)
      0004D0 6F                    1140 	ld	l, a
      0004D1 F1                    1141 	pop	af
      0004D2 77                    1142 	ld	(hl), a
      0004D3 F8 07                 1143 	ldhl	sp,#7
      0004D5 2A                    1144 	ld	a, (hl+)
      0004D6 5F                    1145 	ld	e, a
      0004D7 56                    1146 	ld	d, (hl)
      0004D8 13                    1147 	inc	de
      0004D9 13                    1148 	inc	de
      0004DA C5                    1149 	push	bc
      0004DB D5                    1150 	push	de
      0004DC 21 0A 00              1151 	ld	hl, #0x000a
      0004DF E5                    1152 	push	hl
      0004E0 F8 0B                 1153 	ldhl	sp,	#11
      0004E2 2A                    1154 	ld	a, (hl+)
      0004E3 66                    1155 	ld	h, (hl)
      0004E4 6F                    1156 	ld	l, a
      0004E5 E5                    1157 	push	hl
      0004E6 CDr00r00              1158 	call	__moduint
      0004E9 E8 04                 1159 	add	sp, #4
      0004EB E5                    1160 	push	hl
      0004EC F8 0F                 1161 	ldhl	sp,	#15
      0004EE 73                    1162 	ld	(hl), e
      0004EF F8 10                 1163 	ldhl	sp,	#16
      0004F1 72                    1164 	ld	(hl), d
      0004F2 E1                    1165 	pop	hl
      0004F3 D1                    1166 	pop	de
      0004F4 C1                    1167 	pop	bc
      0004F5 F8 09                 1168 	ldhl	sp,	#9
      0004F7 7E                    1169 	ld	a, (hl)
      0004F8 3C                    1170 	inc	a
      0004F9 12                    1171 	ld	(de), a
                                   1172 ;src/main.c:460: set_bkg_tiles(x, y, 3u, 1u, score_tiles);
      0004FA 2B                    1173 	dec	hl
      0004FB 2B                    1174 	dec	hl
      0004FC 2A                    1175 	ld	a, (hl+)
      0004FD 5F                    1176 	ld	e, a
      0004FE 56                    1177 	ld	d, (hl)
      0004FF D5                    1178 	push	de
      000500 11 03 01              1179 	ld	de, #0x0103
      000503 D5                    1180 	push	de
      000504 F8 08                 1181 	ldhl	sp,	#8
      000506 56                    1182 	ld	d, (hl)
      000507 1E 0C                 1183 	ld	e,#0x0c
      000509 D5                    1184 	push	de
      00050A CDr00r00              1185 	call	_set_bkg_tiles
      00050D E8 06                 1186 	add	sp, #6
                                   1187 ;src/main.c:479: iter++;
      00050F 03                    1188 	inc	bc
      000510 03                    1189 	inc	bc
      000511 03                    1190 	inc	bc
      000512 03                    1191 	inc	bc
      000513 03                    1192 	inc	bc
                                   1193 ;src/main.c:475: for (j = 0; j < 3; j++) {
      000514 F8 0C                 1194 	ldhl	sp,	#12
      000516 34                    1195 	inc	(hl)
      000517 7E                    1196 	ld	a, (hl)
      000518 D6 03                 1197 	sub	a, #0x03
      00051A DAr54r04              1198 	jp	C, 00104$
                                   1199 ;src/main.c:474: for (i = 0; i < 3; i++) {
      00051D 2B                    1200 	dec	hl
      00051E 34                    1201 	inc	(hl)
      00051F 7E                    1202 	ld	a, (hl)
      000520 D6 03                 1203 	sub	a, #0x03
      000522 DAr46r04              1204 	jp	C, 00110$
                                   1205 ;src/main.c:482: }
      000525 E8 0D                 1206 	add	sp, #13
      000527 C9                    1207 	ret
                                   1208 ;src/main.c:488: void metasprite_2x3_hide(const UINT8 sprite)
                                   1209 ;	---------------------------------
                                   1210 ; Function metasprite_2x3_hide
                                   1211 ; ---------------------------------
      000528                       1212 _metasprite_2x3_hide::
                                   1213 ;src/main.c:495: );
      000528 F8 02                 1214 	ldhl	sp,	#2
      00052A 46                    1215 	ld	b, (hl)
                                   1216 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      00052B 21r00r00              1217 	ld	hl, #___current_metasprite
      00052E 36r00                 1218 	ld	(hl), #<(_metasprite_same_2x3)
      000530 23                    1219 	inc	hl
      000531 36s00                 1220 	ld	(hl), #>(_metasprite_same_2x3)
                                   1221 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      000533 21r00r00              1222 	ld	hl, #___current_base_tile
      000536 36 00                 1223 	ld	(hl), #0x00
                                   1224 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      000538 AF                    1225 	xor	a, a
      000539 F5                    1226 	push	af
      00053A 33                    1227 	inc	sp
      00053B AF                    1228 	xor	a, a
      00053C F5                    1229 	push	af
      00053D 33                    1230 	inc	sp
      00053E C5                    1231 	push	bc
      00053F 33                    1232 	inc	sp
      000540 CDr00r00              1233 	call	___move_metasprite
      000543 E8 03                 1234 	add	sp, #3
                                   1235 ;src/main.c:495: );
                                   1236 ;src/main.c:496: }
      000545 C9                    1237 	ret
                                   1238 ;src/main.c:498: void set_metasprite_card(const UINT8 card_data)
                                   1239 ;	---------------------------------
                                   1240 ; Function set_metasprite_card
                                   1241 ; ---------------------------------
      000546                       1242 _set_metasprite_card::
                                   1243 ;src/main.c:500: metasprite_t *iter = IDX_PTR(metasprite_custom_2x3, 0);
                                   1244 ;src/main.c:501: (iter++)->dtile = OFFSET_CARD_RANK + RANK(card_data);
      000546 F8 02                 1245 	ldhl	sp,	#2
      000548 46                    1246 	ld	b, (hl)
      000549 78                    1247 	ld	a, b
      00054A E6 0F                 1248 	and	a, #0x0f
      00054C 4F                    1249 	ld	c, a
      00054D 21r02r00              1250 	ld	hl, #(_metasprite_custom_2x3 + 0x0002)
      000550 71                    1251 	ld	(hl), c
                                   1252 ;src/main.c:502: (iter++)->dtile = OFFSET_CARD_SUIT + SUIT(card_data);
      000551 11r06r00              1253 	ld	de, #(_metasprite_custom_2x3 + 0x0004) + 2
      000554 78                    1254 	ld	a, b
      000555 E6 30                 1255 	and	a, #0x30
      000557 6F                    1256 	ld	l, a
      000558 26 00                 1257 	ld	h, #0x00
      00055A CB 3C                 1258 	srl	h
      00055C CB 1D                 1259 	rr	l
      00055E CB 3C                 1260 	srl	h
      000560 CB 1D                 1261 	rr	l
      000562 CB 3C                 1262 	srl	h
      000564 CB 1D                 1263 	rr	l
      000566 CB 3C                 1264 	srl	h
      000568 CB 1D                 1265 	rr	l
      00056A 45                    1266 	ld	b, l
      00056B 78                    1267 	ld	a, b
      00056C C6 0D                 1268 	add	a, #0x0d
      00056E 12                    1269 	ld	(de), a
                                   1270 ;src/main.c:503: (iter++)->dtile = OFFSET_CARD_BLANK + 2u;
      00056F 21r0Ar00              1271 	ld	hl, #(_metasprite_custom_2x3 + 0x000a)
      000572 36 13                 1272 	ld	(hl), #0x13
                                   1273 ;src/main.c:504: (iter++)->dtile = OFFSET_CARD_BLANK + 3u;
      000574 21r0Er00              1274 	ld	hl, #(_metasprite_custom_2x3 + 0x000e)
      000577 36 14                 1275 	ld	(hl), #0x14
                                   1276 ;src/main.c:505: (iter++)->dtile = OFFSET_CARD_SUIT_ROT + SUIT(card_data);
      000579 11r12r00              1277 	ld	de, #(_metasprite_custom_2x3 + 0x0010) + 2
      00057C 78                    1278 	ld	a, b
      00057D C6 2A                 1279 	add	a, #0x2a
      00057F 12                    1280 	ld	(de), a
                                   1281 ;src/main.c:506: (iter++)->dtile = OFFSET_CARD_RANK_ROT + RANK(card_data);
      000580 11r16r00              1282 	ld	de, #(_metasprite_custom_2x3 + 0x0014) + 2
      000583 79                    1283 	ld	a, c
      000584 C6 1D                 1284 	add	a, #0x1d
      000586 12                    1285 	ld	(de), a
                                   1286 ;src/main.c:507: }
      000587 C9                    1287 	ret
                                   1288 ;src/main.c:509: void draw_setting_frame_metasprites(void)
                                   1289 ;	---------------------------------
                                   1290 ; Function draw_setting_frame_metasprites
                                   1291 ; ---------------------------------
      000588                       1292 _draw_setting_frame_metasprites::
                                   1293 ;src/main.c:514: NUM_SUITS(settings) * 16u + SETTINGS_SPLIT_X * 8u,
      000588 FAr6Dr01              1294 	ld	a, (#_settings)
      00058B E6 03                 1295 	and	a, #0x03
      00058D CB 37                 1296 	swap	a
      00058F E6 F0                 1297 	and	a, #0xf0
      000591 C6 50                 1298 	add	a, #0x50
      000593 47                    1299 	ld	b, a
                                   1300 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      000594 21r00r00              1301 	ld	hl, #___current_metasprite
      000597 36r00                 1302 	ld	(hl), #<(_metasprite_sequential_2x3)
      000599 23                    1303 	inc	hl
      00059A 36s00                 1304 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   1305 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      00059C 21r00r00              1306 	ld	hl, #___current_base_tile
      00059F 36 E4                 1307 	ld	(hl), #0xe4
                                   1308 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      0005A1 3E 08                 1309 	ld	a, #0x08
      0005A3 F5                    1310 	push	af
      0005A4 33                    1311 	inc	sp
      0005A5 0E 12                 1312 	ld	c, #0x12
      0005A7 C5                    1313 	push	bc
      0005A8 CDr00r00              1314 	call	___move_metasprite
      0005AB E8 03                 1315 	add	sp, #3
                                   1316 ;src/main.c:520: !MUSIC(settings) * 16u + SETTINGS_SPLIT_X * 8u,
      0005AD FAr6Dr01              1317 	ld	a, (#_settings)
      0005B0 E6 10                 1318 	and	a, #0x10
      0005B2 F6 00                 1319 	or	a,#0x00
      0005B4 D6 01                 1320 	sub	a,#0x01
      0005B6 3E 00                 1321 	ld	a, #0x00
      0005B8 17                    1322 	rla
      0005B9 CB 37                 1323 	swap	a
      0005BB E6 F0                 1324 	and	a, #0xf0
      0005BD C6 50                 1325 	add	a, #0x50
      0005BF 47                    1326 	ld	b, a
                                   1327 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      0005C0 21r00r00              1328 	ld	hl, #___current_metasprite
      0005C3 36r00                 1329 	ld	(hl), #<(_metasprite_sequential_2x3)
      0005C5 23                    1330 	inc	hl
      0005C6 36s00                 1331 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   1332 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      0005C8 21r00r00              1333 	ld	hl, #___current_base_tile
      0005CB 36 E4                 1334 	ld	(hl), #0xe4
                                   1335 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      0005CD 3E 28                 1336 	ld	a, #0x28
      0005CF F5                    1337 	push	af
      0005D0 33                    1338 	inc	sp
      0005D1 0E 18                 1339 	ld	c, #0x18
      0005D3 C5                    1340 	push	bc
      0005D4 CDr00r00              1341 	call	___move_metasprite
      0005D7 E8 03                 1342 	add	sp, #3
                                   1343 ;src/main.c:526: ANIMATION_SPEED(settings) * 16u + SETTINGS_SPLIT_X * 8u,
      0005D9 FAr6Dr01              1344 	ld	a, (#_settings)
      0005DC E6 0C                 1345 	and	a, #0x0c
      0005DE 4F                    1346 	ld	c, a
      0005DF 06 00                 1347 	ld	b, #0x00
      0005E1 CB 38                 1348 	srl	b
      0005E3 CB 19                 1349 	rr	c
      0005E5 CB 38                 1350 	srl	b
      0005E7 CB 19                 1351 	rr	c
      0005E9 79                    1352 	ld	a, c
      0005EA CB 37                 1353 	swap	a
      0005EC E6 F0                 1354 	and	a, #0xf0
      0005EE C6 50                 1355 	add	a, #0x50
      0005F0 47                    1356 	ld	b, a
                                   1357 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      0005F1 21r00r00              1358 	ld	hl, #___current_metasprite
      0005F4 36r00                 1359 	ld	(hl), #<(_metasprite_sequential_2x3)
      0005F6 23                    1360 	inc	hl
      0005F7 36s00                 1361 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   1362 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      0005F9 21r00r00              1363 	ld	hl, #___current_base_tile
      0005FC 36 E4                 1364 	ld	(hl), #0xe4
                                   1365 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      0005FE 3E 48                 1366 	ld	a, #0x48
      000600 F5                    1367 	push	af
      000601 33                    1368 	inc	sp
      000602 0E 1E                 1369 	ld	c, #0x1e
      000604 C5                    1370 	push	bc
      000605 CDr00r00              1371 	call	___move_metasprite
      000608 E8 03                 1372 	add	sp, #3
                                   1373 ;src/main.c:528: );
                                   1374 ;src/main.c:529: }
      00060A C9                    1375 	ret
                                   1376 ;src/main.c:544: void dynamic_metasprite_end_animation(void)
                                   1377 ;	---------------------------------
                                   1378 ; Function dynamic_metasprite_end_animation
                                   1379 ; ---------------------------------
      00060B                       1380 _dynamic_metasprite_end_animation::
                                   1381 ;src/main.c:546: metasprite_2x3_hide(SPRITE_DYNAMIC);
      00060B AF                    1382 	xor	a, a
      00060C F5                    1383 	push	af
      00060D 33                    1384 	inc	sp
      00060E CDr28r05              1385 	call	_metasprite_2x3_hide
      000611 33                    1386 	inc	sp
                                   1387 ;src/main.c:547: flags &= ~FLAG_PLAYING_ANIMATION;
      000612 21r6Br01              1388 	ld	hl, #_flags
      000615 7E                    1389 	ld	a, (hl)
      000616 E6 FB                 1390 	and	a, #0xfb
      000618 77                    1391 	ld	(hl), a
                                   1392 ;src/main.c:548: dynamic_metasprite.target_frames = -1;
      000619 21r7Br01              1393 	ld	hl, #(_dynamic_metasprite + 0x0008)
      00061C 36 FF                 1394 	ld	(hl), #0xff
                                   1395 ;src/main.c:549: }
      00061E C9                    1396 	ret
                                   1397 ;src/main.c:551: void dynamic_metasprite_splash_screen_callback(void)
                                   1398 ;	---------------------------------
                                   1399 ; Function dynamic_metasprite_splash_screen_callback
                                   1400 ; ---------------------------------
      00061F                       1401 _dynamic_metasprite_splash_screen_callback::
      00061F E8 F2                 1402 	add	sp, #-14
                                   1403 ;src/main.c:553: const UINT8 offsets[] = {
      000621 F8 00                 1404 	ldhl	sp,	#0
      000623 4D                    1405 	ld	c, l
      000624 44                    1406 	ld	b, h
      000625 AF                    1407 	xor	a, a
      000626 02                    1408 	ld	(bc), a
      000627 69                    1409 	ld	l, c
      000628 60                    1410 	ld	h, b
      000629 23                    1411 	inc	hl
      00062A 36 06                 1412 	ld	(hl), #0x06
      00062C 69                    1413 	ld	l, c
      00062D 60                    1414 	ld	h, b
      00062E 23                    1415 	inc	hl
      00062F 23                    1416 	inc	hl
      000630 36 0C                 1417 	ld	(hl), #0x0c
      000632 69                    1418 	ld	l, c
      000633 60                    1419 	ld	h, b
      000634 23                    1420 	inc	hl
      000635 23                    1421 	inc	hl
      000636 23                    1422 	inc	hl
      000637 36 12                 1423 	ld	(hl), #0x12
      000639 21 04 00              1424 	ld	hl, #0x0004
      00063C 09                    1425 	add	hl, bc
      00063D 36 18                 1426 	ld	(hl), #0x18
      00063F 21 05 00              1427 	ld	hl, #0x0005
      000642 09                    1428 	add	hl, bc
      000643 36 1E                 1429 	ld	(hl), #0x1e
      000645 21 06 00              1430 	ld	hl, #0x0006
      000648 09                    1431 	add	hl, bc
      000649 36 12                 1432 	ld	(hl), #0x12
      00064B 21 07 00              1433 	ld	hl, #0x0007
      00064E 09                    1434 	add	hl, bc
      00064F 36 24                 1435 	ld	(hl), #0x24
      000651 21 08 00              1436 	ld	hl, #0x0008
      000654 09                    1437 	add	hl, bc
      000655 36 2A                 1438 	ld	(hl), #0x2a
                                   1439 ;src/main.c:564: draw_sequential_card(1u + dynamic_metasprite.data[0] * 2u, 2u, OFFSET_BKG_TITLE + offsets[dynamic_metasprite.data[0]]);
      000657 21r80r01              1440 	ld	hl, #(_dynamic_metasprite + 0x000d)
      00065A 6E                    1441 	ld	l, (hl)
      00065B 79                    1442 	ld	a, c
      00065C 85                    1443 	add	a, l
      00065D 5F                    1444 	ld	e, a
      00065E 78                    1445 	ld	a, b
      00065F CE 00                 1446 	adc	a, #0x00
      000661 57                    1447 	ld	d, a
      000662 1A                    1448 	ld	a, (de)
      000663 C6 80                 1449 	add	a, #0x80
      000665 29                    1450 	add	hl, hl
      000666 2C                    1451 	inc	l
      000667 C5                    1452 	push	bc
      000668 57                    1453 	ld	d,a
      000669 1E 02                 1454 	ld	e,#0x02
      00066B D5                    1455 	push	de
      00066C 7D                    1456 	ld	a, l
      00066D F5                    1457 	push	af
      00066E 33                    1458 	inc	sp
      00066F CDr51r01              1459 	call	_draw_sequential_card
      000672 E8 03                 1460 	add	sp, #3
      000674 C1                    1461 	pop	bc
                                   1462 ;src/main.c:565: if (dynamic_metasprite.data[0] == 8u) {
      000675 FAr80r01              1463 	ld	a, (#(_dynamic_metasprite + 0x000d) + 0)
      000678 FE 08                 1464 	cp	a, #0x08
      00067A 20 05                 1465 	jr	NZ, 00102$
                                   1466 ;src/main.c:566: dynamic_metasprite_end_animation();
      00067C CDr0Br06              1467 	call	_dynamic_metasprite_end_animation
                                   1468 ;src/main.c:567: return;
      00067F 18 41                 1469 	jr	00103$
      000681                       1470 00102$:
                                   1471 ;src/main.c:569: dynamic_metasprite.data[0]++;
      000681 3C                    1472 	inc	a
      000682 F8 09                 1473 	ldhl	sp,	#9
      000684 77                    1474 	ld	(hl), a
      000685 11r80r01              1475 	ld	de, #(_dynamic_metasprite + 0x000d)
      000688 7E                    1476 	ld	a, (hl)
      000689 12                    1477 	ld	(de), a
                                   1478 ;src/main.c:570: dynamic_metasprite.elapsed_frames = 0;
      00068A 21r7Cr01              1479 	ld	hl, #(_dynamic_metasprite + 0x0009)
      00068D 36 00                 1480 	ld	(hl), #0x00
                                   1481 ;src/main.c:571: dynamic_metasprite.dist[0] += 16;
      00068F 11r77r01              1482 	ld	de, #(_dynamic_metasprite + 0x0004)
      000692 1A                    1483 	ld	a, (de)
      000693 F8 0A                 1484 	ldhl	sp,	#10
      000695 22                    1485 	ld	(hl+), a
      000696 13                    1486 	inc	de
      000697 1A                    1487 	ld	a, (de)
                                   1488 ;c
      000698 32                    1489 	ld	(hl-), a
      000699 2A                    1490 	ld	a, (hl+)
      00069A 5F                    1491 	ld	e, a
      00069B 56                    1492 	ld	d, (hl)
      00069C 21 10 00              1493 	ld	hl, #0x0010
      00069F 19                    1494 	add	hl, de
      0006A0 E5                    1495 	push	hl
      0006A1 7D                    1496 	ld	a, l
      0006A2 F8 0E                 1497 	ldhl	sp,	#14
      0006A4 77                    1498 	ld	(hl), a
      0006A5 E1                    1499 	pop	hl
      0006A6 7C                    1500 	ld	a, h
      0006A7 F8 0D                 1501 	ldhl	sp,	#13
      0006A9 77                    1502 	ld	(hl), a
      0006AA 11r77r01              1503 	ld	de, #(_dynamic_metasprite + 0x0004)
      0006AD 2B                    1504 	dec	hl
      0006AE 7E                    1505 	ld	a, (hl)
      0006AF 12                    1506 	ld	(de), a
      0006B0 13                    1507 	inc	de
      0006B1 23                    1508 	inc	hl
      0006B2 7E                    1509 	ld	a, (hl)
      0006B3 12                    1510 	ld	(de), a
                                   1511 ;src/main.c:572: dynamic_metasprite.metasprite_offset = OFFSET_SPRITE_TITLE + offsets[dynamic_metasprite.data[0]];
      0006B4 F8 09                 1512 	ldhl	sp,	#9
      0006B6 6E                    1513 	ld	l, (hl)
      0006B7 26 00                 1514 	ld	h, #0x00
      0006B9 09                    1515 	add	hl, bc
      0006BA 4D                    1516 	ld	c, l
      0006BB 44                    1517 	ld	b, h
      0006BC 0A                    1518 	ld	a, (bc)
      0006BD C6 80                 1519 	add	a, #0x80
      0006BF EAr7Fr01              1520 	ld	(#(_dynamic_metasprite + 0x000c)),a
      0006C2                       1521 00103$:
                                   1522 ;src/main.c:573: }
      0006C2 E8 0E                 1523 	add	sp, #14
      0006C4 C9                    1524 	ret
                                   1525 ;src/main.c:575: inline void dynamic_metasprite_splash_screen(void)
                                   1526 ;	---------------------------------
                                   1527 ; Function dynamic_metasprite_splash_screen
                                   1528 ; ---------------------------------
      0006C5                       1529 _dynamic_metasprite_splash_screen::
                                   1530 ;src/main.c:577: dynamic_metasprite.src[0] = 72;
      0006C5 21r73r01              1531 	ld	hl, #_dynamic_metasprite
      0006C8 36 48                 1532 	ld	(hl), #0x48
      0006CA 23                    1533 	inc	hl
      0006CB 36 00                 1534 	ld	(hl), #0x00
                                   1535 ;src/main.c:578: dynamic_metasprite.src[1] = -24;
      0006CD 21r75r01              1536 	ld	hl, #(_dynamic_metasprite + 0x0002)
      0006D0 36 E8                 1537 	ld	(hl), #0xe8
      0006D2 23                    1538 	inc	hl
      0006D3 36 FF                 1539 	ld	(hl), #0xff
                                   1540 ;src/main.c:579: dynamic_metasprite.dist[0] = -64;
      0006D5 21r77r01              1541 	ld	hl, #(_dynamic_metasprite + 0x0004)
      0006D8 36 C0                 1542 	ld	(hl), #0xc0
      0006DA 23                    1543 	inc	hl
      0006DB 36 FF                 1544 	ld	(hl), #0xff
                                   1545 ;src/main.c:580: dynamic_metasprite.dist[1] = 40;
      0006DD 21r79r01              1546 	ld	hl, #(_dynamic_metasprite + 0x0006)
      0006E0 36 28                 1547 	ld	(hl), #0x28
      0006E2 23                    1548 	inc	hl
      0006E3 36 00                 1549 	ld	(hl), #0x00
                                   1550 ;src/main.c:581: dynamic_metasprite.target_frames = TARGET_FRAMES_SPLASH_SCREEN;
      0006E5 21r7Br01              1551 	ld	hl, #(_dynamic_metasprite + 0x0008)
      0006E8 36 20                 1552 	ld	(hl), #0x20
                                   1553 ;src/main.c:582: dynamic_metasprite.elapsed_frames = 0;
      0006EA 21r7Cr01              1554 	ld	hl, #(_dynamic_metasprite + 0x0009)
      0006ED 36 00                 1555 	ld	(hl), #0x00
                                   1556 ;src/main.c:583: dynamic_metasprite.metasprite = metasprite_sequential_2x3;
      0006EF 21r7Dr01              1557 	ld	hl, #(_dynamic_metasprite + 0x000a)
      0006F2 36r00                 1558 	ld	(hl), #<(_metasprite_sequential_2x3)
      0006F4 23                    1559 	inc	hl
      0006F5 36s00                 1560 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   1561 ;src/main.c:584: dynamic_metasprite.metasprite_offset = OFFSET_SPRITE_TITLE + OFFSET_TITLE_S;
      0006F7 21r7Fr01              1562 	ld	hl, #(_dynamic_metasprite + 0x000c)
      0006FA 36 80                 1563 	ld	(hl), #0x80
                                   1564 ;src/main.c:585: dynamic_metasprite.data[0] = 0;
      0006FC 21r80r01              1565 	ld	hl, #(_dynamic_metasprite + 0x000d)
      0006FF 36 00                 1566 	ld	(hl), #0x00
                                   1567 ;src/main.c:586: dynamic_metasprite.callback = &dynamic_metasprite_splash_screen_callback;
      000701 21r86r01              1568 	ld	hl, #(_dynamic_metasprite + 0x0013)
      000704 36r1F                 1569 	ld	(hl), #<(_dynamic_metasprite_splash_screen_callback)
      000706 23                    1570 	inc	hl
      000707 36s06                 1571 	ld	(hl), #>(_dynamic_metasprite_splash_screen_callback)
                                   1572 ;src/main.c:587: flags |= FLAG_PLAYING_ANIMATION;
      000709 21r6Br01              1573 	ld	hl, #_flags
      00070C 7E                    1574 	ld	a, (hl)
      00070D F6 04                 1575 	or	a, #0x04
      00070F 77                    1576 	ld	(hl), a
                                   1577 ;src/main.c:588: }
      000710 C9                    1578 	ret
                                   1579 ;src/main.c:590: void dynamic_metasprite_fold_pile(void)
                                   1580 ;	---------------------------------
                                   1581 ; Function dynamic_metasprite_fold_pile
                                   1582 ; ---------------------------------
      000711                       1583 _dynamic_metasprite_fold_pile::
      000711 E8 FA                 1584 	add	sp, #-6
                                   1585 ;src/main.c:592: UINT8 pile_idx = dynamic_metasprite.data[3] & 0xF;
      000713 FAr83r01              1586 	ld	a, (#(_dynamic_metasprite + 0x0010) + 0)
      000716 E6 0F                 1587 	and	a, #0x0f
                                   1588 ;src/main.c:593: if (!pile_idx) {
      000718 4F                    1589 	ld	c, a
      000719 B7                    1590 	or	a, a
      00071A 20 30                 1591 	jr	NZ, 00104$
                                   1592 ;src/main.c:594: dynamic_metasprite_end_animation();
      00071C CDr0Br06              1593 	call	_dynamic_metasprite_end_animation
                                   1594 ;src/main.c:595: if (num_folded_piles == 8u) {//NOTE: THIS IS WHERE GAME ENDS
      00071F FAr6Er01              1595 	ld	a, (#_num_folded_piles)
      000722 D6 08                 1596 	sub	a, #0x08
      000724 C2rC3r07              1597 	jp	NZ,00106$
                                   1598 ;src/main.c:596: metasprite_2x3_hide(SPRITE_FRAME);
      000727 3E 0C                 1599 	ld	a, #0x0c
      000729 F5                    1600 	push	af
      00072A 33                    1601 	inc	sp
      00072B CDr28r05              1602 	call	_metasprite_2x3_hide
      00072E 33                    1603 	inc	sp
                                   1604 ;/home/wojtek/gbdk/include/gb/gb.h:826: SCX_REG=x, SCY_REG=y;
      00072F 3E 00                 1605 	ld	a, #0x00
      000731 E0r00                 1606 	ldh	(_SCX_REG+0),a
      000733 3E 00                 1607 	ld	a, #0x00
      000735 E0r00                 1608 	ldh	(_SCY_REG+0),a
                                   1609 ;src/main.c:598: scroll = 0u;
      000737 21r6Cr01              1610 	ld	hl, #_scroll
      00073A 36 00                 1611 	ld	(hl), #0x00
                                   1612 ;src/main.c:599: add_leaderboard();
      00073C CDr0Er16              1613 	call	_add_leaderboard
                                   1614 ;src/main.c:600: start_leaderboard();
      00073F CDrEEr15              1615 	call	_start_leaderboard
                                   1616 ;src/main.c:601: score = START_SCORE;
      000742 21r6Fr01              1617 	ld	hl, #_score
      000745 3E F4                 1618 	ld	a, #0xf4
      000747 22                    1619 	ld	(hl+), a
      000748 36 01                 1620 	ld	(hl), #0x01
                                   1621 ;src/main.c:603: return;
      00074A 18 77                 1622 	jr	00106$
      00074C                       1623 00104$:
                                   1624 ;src/main.c:606: num_folded_piles++;
      00074C 21r6Er01              1625 	ld	hl, #_num_folded_piles
      00074F 34                    1626 	inc	(hl)
                                   1627 ;src/main.c:608: Pile *pile = IDX_PTR(piles, pile_idx);
      000750 06 00                 1628 	ld	b, #0x00
      000752 69                    1629 	ld	l, c
      000753 60                    1630 	ld	h, b
      000754 29                    1631 	add	hl, hl
      000755 29                    1632 	add	hl, hl
      000756 09                    1633 	add	hl, bc
      000757 3Er38                 1634 	ld	a, #<(_piles)
      000759 85                    1635 	add	a, l
      00075A 47                    1636 	ld	b, a
      00075B 3Es01                 1637 	ld	a, #>(_piles)
      00075D 8C                    1638 	adc	a, h
      00075E F8 00                 1639 	ldhl	sp,	#0
      000760 70                    1640 	ld	(hl), b
      000761 23                    1641 	inc	hl
      000762 77                    1642 	ld	(hl), a
                                   1643 ;src/main.c:609: UINT8 x = pile_idx * 16u;
      000763 79                    1644 	ld	a, c
      000764 CB 37                 1645 	swap	a
      000766 E6 F0                 1646 	and	a, #0xf0
      000768 23                    1647 	inc	hl
      000769 77                    1648 	ld	(hl), a
                                   1649 ;src/main.c:618: dynamic_metasprite.data[3] >> 4u
      00076A FAr83r01              1650 	ld	a, (#(_dynamic_metasprite + 0x0010) + 0)
      00076D CB 37                 1651 	swap	a
      00076F E6 0F                 1652 	and	a, #0x0f
      000771 23                    1653 	inc	hl
      000772 77                    1654 	ld	(hl), a
                                   1655 ;src/main.c:616: pile->base,
      000773 D1                    1656 	pop	de
      000774 D5                    1657 	push	de
      000775 1A                    1658 	ld	a, (de)
      000776 23                    1659 	inc	hl
      000777 22                    1660 	ld	(hl+), a
      000778 13                    1661 	inc	de
      000779 1A                    1662 	ld	a, (de)
      00077A 77                    1663 	ld	(hl), a
                                   1664 ;src/main.c:610: dynamic_metasprite_fold(pile->top->data,
      00077B C1                    1665 	pop	bc
      00077C C5                    1666 	push	bc
      00077D 03                    1667 	inc	bc
      00077E 03                    1668 	inc	bc
      00077F 69                    1669 	ld	l, c
      000780 60                    1670 	ld	h, b
      000781 2A                    1671 	ld	a, (hl+)
      000782 66                    1672 	ld	h, (hl)
      000783 6F                    1673 	ld	l, a
      000784 23                    1674 	inc	hl
      000785 23                    1675 	inc	hl
      000786 56                    1676 	ld	d, (hl)
      000787 C5                    1677 	push	bc
      000788 F8 05                 1678 	ldhl	sp,	#5
      00078A 7E                    1679 	ld	a, (hl)
      00078B F5                    1680 	push	af
      00078C 33                    1681 	inc	sp
      00078D AF                    1682 	xor	a, a
      00078E F5                    1683 	push	af
      00078F 33                    1684 	inc	sp
      000790 23                    1685 	inc	hl
      000791 2A                    1686 	ld	a, (hl+)
      000792 66                    1687 	ld	h, (hl)
      000793 6F                    1688 	ld	l, a
      000794 E5                    1689 	push	hl
      000795 3E 0D                 1690 	ld	a, #0x0d
      000797 F5                    1691 	push	af
      000798 33                    1692 	inc	sp
      000799 AF                    1693 	xor	a, a
      00079A F5                    1694 	push	af
      00079B 33                    1695 	inc	sp
      00079C F8 0A                 1696 	ldhl	sp,	#10
      00079E 46                    1697 	ld	b, (hl)
      00079F 0E 78                 1698 	ld	c, #0x78
      0007A1 C5                    1699 	push	bc
      0007A2 7E                    1700 	ld	a, (hl)
      0007A3 F5                    1701 	push	af
      0007A4 33                    1702 	inc	sp
      0007A5 D5                    1703 	push	de
      0007A6 33                    1704 	inc	sp
      0007A7 CDr35r0A              1705 	call	_dynamic_metasprite_fold
      0007AA E8 0A                 1706 	add	sp, #10
      0007AC C1                    1707 	pop	bc
                                   1708 ;src/main.c:620: pile->base = NULL;
      0007AD E1                    1709 	pop	hl
      0007AE E5                    1710 	push	hl
      0007AF AF                    1711 	xor	a, a
      0007B0 22                    1712 	ld	(hl+), a
      0007B1 77                    1713 	ld	(hl), a
                                   1714 ;src/main.c:621: pile->top = NULL;
      0007B2 AF                    1715 	xor	a, a
      0007B3 02                    1716 	ld	(bc), a
      0007B4 03                    1717 	inc	bc
      0007B5 02                    1718 	ld	(bc), a
                                   1719 ;src/main.c:622: pile->height = 0;
                                   1720 ;c
      0007B6 D1                    1721 	pop	de
      0007B7 D5                    1722 	push	de
      0007B8 21 04 00              1723 	ld	hl, #0x0004
      0007BB 19                    1724 	add	hl, de
      0007BC 4D                    1725 	ld	c, l
      0007BD 44                    1726 	ld	b, h
      0007BE AF                    1727 	xor	a, a
      0007BF 02                    1728 	ld	(bc), a
                                   1729 ;src/main.c:623: cursor_adjust_height();
      0007C0 CDrDFr0C              1730 	call	_cursor_adjust_height
      0007C3                       1731 00106$:
                                   1732 ;src/main.c:624: }
      0007C3 E8 06                 1733 	add	sp, #6
      0007C5 C9                    1734 	ret
                                   1735 ;src/main.c:626: void dynamic_metasprite_unfold_callback(void)
                                   1736 ;	---------------------------------
                                   1737 ; Function dynamic_metasprite_unfold_callback
                                   1738 ; ---------------------------------
      0007C6                       1739 _dynamic_metasprite_unfold_callback::
      0007C6 E8 FC                 1740 	add	sp, #-4
                                   1741 ;src/main.c:628: Card const *card = dynamic_metasprite.data_ptr;
      0007C8 21r84r01              1742 	ld	hl, #(_dynamic_metasprite + 0x0011)
      0007CB 2A                    1743 	ld	a, (hl+)
      0007CC 4F                    1744 	ld	c, a
      0007CD 46                    1745 	ld	b, (hl)
                                   1746 ;src/main.c:629: if (!card->next_card) {
      0007CE 59                    1747 	ld	e, c
      0007CF 50                    1748 	ld	d, b
      0007D0 1A                    1749 	ld	a, (de)
      0007D1 F8 00                 1750 	ldhl	sp,	#0
      0007D3 22                    1751 	ld	(hl+), a
      0007D4 13                    1752 	inc	de
      0007D5 1A                    1753 	ld	a, (de)
      0007D6 77                    1754 	ld	(hl), a
                                   1755 ;src/main.c:630: draw_card(dynamic_metasprite.data[1] / 8u, (UINT8)dynamic_metasprite.src[1] / 8u + 1u, card->data);
      0007D7 03                    1756 	inc	bc
      0007D8 03                    1757 	inc	bc
      0007D9 23                    1758 	inc	hl
      0007DA 79                    1759 	ld	a, c
      0007DB 22                    1760 	ld	(hl+), a
                                   1761 ;src/main.c:629: if (!card->next_card) {
      0007DC 78                    1762 	ld	a, b
      0007DD 32                    1763 	ld	(hl-), a
      0007DE 2B                    1764 	dec	hl
      0007DF 3A                    1765 	ld	a, (hl-)
      0007E0 B6                    1766 	or	a, (hl)
      0007E1 20 74                 1767 	jr	NZ, 00102$
                                   1768 ;src/main.c:630: draw_card(dynamic_metasprite.data[1] / 8u, (UINT8)dynamic_metasprite.src[1] / 8u + 1u, card->data);
      0007E3 F8 02                 1769 	ldhl	sp,#2
      0007E5 2A                    1770 	ld	a, (hl+)
      0007E6 5F                    1771 	ld	e, a
      0007E7 56                    1772 	ld	d, (hl)
      0007E8 1A                    1773 	ld	a, (de)
      0007E9 F8 00                 1774 	ldhl	sp,	#0
      0007EB 77                    1775 	ld	(hl), a
      0007EC FAr75r01              1776 	ld	a, (#(_dynamic_metasprite + 0x0002) + 0)
      0007EF F8 03                 1777 	ldhl	sp,	#3
      0007F1 77                    1778 	ld	(hl), a
      0007F2 F8 03                 1779 	ldhl	sp,	#3
      0007F4 3A                    1780 	ld	a, (hl-)
      0007F5 77                    1781 	ld	(hl), a
      0007F6 AF                    1782 	xor	a, a
      0007F7 23                    1783 	inc	hl
      0007F8 77                    1784 	ld	(hl), a
      0007F9 CB 3E                 1785 	srl	(hl)
      0007FB 2B                    1786 	dec	hl
      0007FC CB 1E                 1787 	rr	(hl)
      0007FE 23                    1788 	inc	hl
      0007FF CB 3E                 1789 	srl	(hl)
      000801 2B                    1790 	dec	hl
      000802 CB 1E                 1791 	rr	(hl)
      000804 23                    1792 	inc	hl
      000805 CB 3E                 1793 	srl	(hl)
      000807 2B                    1794 	dec	hl
      000808 CB 1E                 1795 	rr	(hl)
      00080A 2A                    1796 	ld	a, (hl+)
      00080B 77                    1797 	ld	(hl), a
      00080C 3C                    1798 	inc	a
      00080D 2B                    1799 	dec	hl
      00080E 2B                    1800 	dec	hl
      00080F 77                    1801 	ld	(hl), a
      000810 FAr81r01              1802 	ld	a, (#(_dynamic_metasprite + 0x000e) + 0)
      000813 F8 03                 1803 	ldhl	sp,	#3
      000815 77                    1804 	ld	(hl), a
      000816 F8 03                 1805 	ldhl	sp,	#3
      000818 3A                    1806 	ld	a, (hl-)
      000819 77                    1807 	ld	(hl), a
      00081A AF                    1808 	xor	a, a
      00081B 23                    1809 	inc	hl
      00081C 77                    1810 	ld	(hl), a
      00081D CB 3E                 1811 	srl	(hl)
      00081F 2B                    1812 	dec	hl
      000820 CB 1E                 1813 	rr	(hl)
      000822 23                    1814 	inc	hl
      000823 CB 3E                 1815 	srl	(hl)
      000825 2B                    1816 	dec	hl
      000826 CB 1E                 1817 	rr	(hl)
      000828 23                    1818 	inc	hl
      000829 CB 3E                 1819 	srl	(hl)
      00082B 2B                    1820 	dec	hl
      00082C CB 1E                 1821 	rr	(hl)
      00082E 46                    1822 	ld	b, (hl)
                                   1823 ;src/main.c:375: draw_card_top(x, y, card_data);
      00082F C5                    1824 	push	bc
      000830 2B                    1825 	dec	hl
      000831 2B                    1826 	dec	hl
      000832 7E                    1827 	ld	a, (hl)
      000833 F5                    1828 	push	af
      000834 33                    1829 	inc	sp
      000835 23                    1830 	inc	hl
      000836 7E                    1831 	ld	a, (hl)
      000837 F5                    1832 	push	af
      000838 33                    1833 	inc	sp
      000839 C5                    1834 	push	bc
      00083A 33                    1835 	inc	sp
      00083B CDr60r00              1836 	call	_draw_card_top
      00083E E8 03                 1837 	add	sp, #3
      000840 C1                    1838 	pop	bc
                                   1839 ;src/main.c:376: draw_card_bottom(x, y + 1u, card_data);
      000841 F8 01                 1840 	ldhl	sp,	#1
      000843 7E                    1841 	ld	a, (hl)
      000844 3C                    1842 	inc	a
      000845 2B                    1843 	dec	hl
      000846 66                    1844 	ld	h, (hl)
      000847 E5                    1845 	push	hl
      000848 33                    1846 	inc	sp
      000849 F5                    1847 	push	af
      00084A 33                    1848 	inc	sp
      00084B C5                    1849 	push	bc
      00084C 33                    1850 	inc	sp
      00084D CDrCDr00              1851 	call	_draw_card_bottom
      000850 E8 03                 1852 	add	sp, #3
                                   1853 ;src/main.c:631: dynamic_metasprite_fold_pile();
      000852 CDr11r07              1854 	call	_dynamic_metasprite_fold_pile
                                   1855 ;src/main.c:632: return;
      000855 18 4E                 1856 	jr	00104$
      000857                       1857 00102$:
                                   1858 ;src/main.c:634: dynamic_metasprite.data_ptr = card->next_card;
      000857 C1                    1859 	pop	bc
      000858 C5                    1860 	push	bc
      000859 21r84r01              1861 	ld	hl, #(_dynamic_metasprite + 0x0011)
      00085C 79                    1862 	ld	a, c
      00085D 22                    1863 	ld	(hl+), a
      00085E 70                    1864 	ld	(hl), b
                                   1865 ;src/main.c:635: dynamic_metasprite.src[1] += 8;
      00085F 21r75r01              1866 	ld	hl, #(_dynamic_metasprite + 0x0002)
      000862 2A                    1867 	ld	a, (hl+)
      000863 4F                    1868 	ld	c, a
      000864 46                    1869 	ld	b, (hl)
      000865 21 08 00              1870 	ld	hl, #0x0008
      000868 09                    1871 	add	hl, bc
      000869 4D                    1872 	ld	c, l
      00086A 44                    1873 	ld	b, h
      00086B 21r75r01              1874 	ld	hl, #(_dynamic_metasprite + 0x0002)
      00086E 79                    1875 	ld	a, c
      00086F 22                    1876 	ld	(hl+), a
      000870 70                    1877 	ld	(hl), b
                                   1878 ;src/main.c:636: draw_card_top(dynamic_metasprite.data[1] / 8u, dynamic_metasprite.src[1] / 8u, card->data);
      000871 F8 02                 1879 	ldhl	sp,#2
      000873 2A                    1880 	ld	a, (hl+)
      000874 5F                    1881 	ld	e, a
      000875 56                    1882 	ld	d, (hl)
      000876 1A                    1883 	ld	a, (de)
      000877 77                    1884 	ld	(hl), a
      000878 CB 38                 1885 	srl	b
      00087A CB 19                 1886 	rr	c
      00087C CB 38                 1887 	srl	b
      00087E CB 19                 1888 	rr	c
      000880 CB 38                 1889 	srl	b
      000882 CB 19                 1890 	rr	c
      000884 FAr81r01              1891 	ld	a, (#(_dynamic_metasprite + 0x000e) + 0)
      000887 5F                    1892 	ld	e, a
      000888 16 00                 1893 	ld	d, #0x00
      00088A CB 3A                 1894 	srl	d
      00088C CB 1B                 1895 	rr	e
      00088E CB 3A                 1896 	srl	d
      000890 CB 1B                 1897 	rr	e
      000892 CB 3A                 1898 	srl	d
      000894 CB 1B                 1899 	rr	e
      000896 7E                    1900 	ld	a, (hl)
      000897 F5                    1901 	push	af
      000898 33                    1902 	inc	sp
      000899 51                    1903 	ld	d, c
      00089A D5                    1904 	push	de
      00089B CDr60r00              1905 	call	_draw_card_top
      00089E E8 03                 1906 	add	sp, #3
                                   1907 ;src/main.c:637: dynamic_metasprite.elapsed_frames = 0;
      0008A0 21r7Cr01              1908 	ld	hl, #(_dynamic_metasprite + 0x0009)
      0008A3 36 00                 1909 	ld	(hl), #0x00
      0008A5                       1910 00104$:
                                   1911 ;src/main.c:638: }
      0008A5 E8 04                 1912 	add	sp, #4
      0008A7 C9                    1913 	ret
                                   1914 ;src/main.c:640: void dynamic_metasprite_move_stack_callback(void)
                                   1915 ;	---------------------------------
                                   1916 ; Function dynamic_metasprite_move_stack_callback
                                   1917 ; ---------------------------------
      0008A8                       1918 _dynamic_metasprite_move_stack_callback::
                                   1919 ;src/main.c:642: if (dynamic_metasprite.data[0] & BITMASK_DYNAMIC_METASPRITE_UNFOLD) {
      0008A8 FAr80r01              1920 	ld	a, (#(_dynamic_metasprite + 0x000d) + 0)
      0008AB 07                    1921 	rlca
      0008AC D2r11r07              1922 	jp	NC,_dynamic_metasprite_fold_pile
                                   1923 ;src/main.c:643: dynamic_metasprite.src[0] = dynamic_metasprite.data[1];
      0008AF FAr81r01              1924 	ld	a, (#(_dynamic_metasprite + 0x000e) + 0)
      0008B2 4F                    1925 	ld	c, a
      0008B3 06 00                 1926 	ld	b, #0x00
      0008B5 21r73r01              1927 	ld	hl, #_dynamic_metasprite
      0008B8 79                    1928 	ld	a, c
      0008B9 22                    1929 	ld	(hl+), a
                                   1930 ;src/main.c:644: dynamic_metasprite.src[1] = dynamic_metasprite.data[2] - 8u;
      0008BA 78                    1931 	ld	a, b
      0008BB 22                    1932 	ld	(hl+), a
      0008BC 01r82r01              1933 	ld	bc, #_dynamic_metasprite + 15
      0008BF 0A                    1934 	ld	a, (bc)
      0008C0 4F                    1935 	ld	c, a
      0008C1 06 00                 1936 	ld	b, #0x00
      0008C3 79                    1937 	ld	a, c
      0008C4 C6 F8                 1938 	add	a, #0xf8
      0008C6 4F                    1939 	ld	c, a
      0008C7 78                    1940 	ld	a, b
      0008C8 CE FF                 1941 	adc	a, #0xff
      0008CA 71                    1942 	ld	(hl), c
      0008CB 23                    1943 	inc	hl
      0008CC 77                    1944 	ld	(hl), a
                                   1945 ;src/main.c:645: dynamic_metasprite.dist[0] = 0;
      0008CD 21r77r01              1946 	ld	hl, #(_dynamic_metasprite + 0x0004)
      0008D0 AF                    1947 	xor	a, a
      0008D1 22                    1948 	ld	(hl+), a
      0008D2 77                    1949 	ld	(hl), a
                                   1950 ;src/main.c:646: dynamic_metasprite.dist[1] = 8;
      0008D3 21r79r01              1951 	ld	hl, #(_dynamic_metasprite + 0x0006)
      0008D6 3E 08                 1952 	ld	a, #0x08
      0008D8 22                    1953 	ld	(hl+), a
      0008D9 36 00                 1954 	ld	(hl), #0x00
                                   1955 ;src/main.c:647: dynamic_metasprite.target_frames = animation_speeds[ANIMATION_SPEED(settings)].fold_target_frames;
      0008DB 01r7Br01              1956 	ld	bc, #_dynamic_metasprite + 8
      0008DE FAr6Dr01              1957 	ld	a, (#_settings)
      0008E1 E6 0C                 1958 	and	a, #0x0c
      0008E3 6F                    1959 	ld	l, a
      0008E4 26 00                 1960 	ld	h, #0x00
      0008E6 CB 3C                 1961 	srl	h
      0008E8 CB 1D                 1962 	rr	l
      0008EA CB 3C                 1963 	srl	h
      0008EC CB 1D                 1964 	rr	l
      0008EE 29                    1965 	add	hl, hl
      0008EF 11r26r00              1966 	ld	de, #_animation_speeds
      0008F2 19                    1967 	add	hl, de
      0008F3 7E                    1968 	ld	a, (hl)
      0008F4 02                    1969 	ld	(bc), a
                                   1970 ;src/main.c:648: dynamic_metasprite.callback = &dynamic_metasprite_unfold_callback;
      0008F5 21r86r01              1971 	ld	hl, #(_dynamic_metasprite + 0x0013)
      0008F8 36rC6                 1972 	ld	(hl), #<(_dynamic_metasprite_unfold_callback)
      0008FA 23                    1973 	inc	hl
      0008FB 36s07                 1974 	ld	(hl), #>(_dynamic_metasprite_unfold_callback)
                                   1975 ;src/main.c:649: dynamic_metasprite_unfold_callback();
                                   1976 ;src/main.c:651: dynamic_metasprite_fold_pile();
                                   1977 ;src/main.c:653: }
      0008FD C3rC6r07              1978 	jp	_dynamic_metasprite_unfold_callback
                                   1979 ;src/main.c:655: void dynamic_metasprite_fold_callback(void)
                                   1980 ;	---------------------------------
                                   1981 ; Function dynamic_metasprite_fold_callback
                                   1982 ; ---------------------------------
      000900                       1983 _dynamic_metasprite_fold_callback::
      000900 E8 FC                 1984 	add	sp, #-4
                                   1985 ;src/main.c:657: dynamic_metasprite.src[1] -= 8;
      000902 21r75r01              1986 	ld	hl, #(_dynamic_metasprite + 0x0002)
      000905 2A                    1987 	ld	a, (hl+)
      000906 4F                    1988 	ld	c, a
      000907 46                    1989 	ld	b, (hl)
      000908 79                    1990 	ld	a, c
      000909 C6 F8                 1991 	add	a, #0xf8
      00090B 4F                    1992 	ld	c, a
      00090C 78                    1993 	ld	a, b
      00090D CE FF                 1994 	adc	a, #0xff
      00090F 47                    1995 	ld	b, a
      000910 21r75r01              1996 	ld	hl, #(_dynamic_metasprite + 0x0002)
      000913 79                    1997 	ld	a, c
      000914 22                    1998 	ld	(hl+), a
      000915 70                    1999 	ld	(hl), b
                                   2000 ;src/main.c:658: dynamic_metasprite.elapsed_frames = 0;
      000916 21r7Cr01              2001 	ld	hl, #(_dynamic_metasprite + 0x0009)
      000919 36 00                 2002 	ld	(hl), #0x00
                                   2003 ;src/main.c:659: clear_bkg_2x1((UINT8)dynamic_metasprite.src[0] / 8u, (UINT8)dynamic_metasprite.src[1] / 8u + 2u);
      00091B FAr75r01              2004 	ld	a, (#(_dynamic_metasprite + 0x0002) + 0)
      00091E 4F                    2005 	ld	c, a
      00091F 06 00                 2006 	ld	b, #0x00
      000921 CB 38                 2007 	srl	b
      000923 CB 19                 2008 	rr	c
      000925 CB 38                 2009 	srl	b
      000927 CB 19                 2010 	rr	c
      000929 CB 38                 2011 	srl	b
      00092B CB 19                 2012 	rr	c
      00092D 0C                    2013 	inc	c
      00092E 0C                    2014 	inc	c
      00092F FAr73r01              2015 	ld	a, (#_dynamic_metasprite + 0)
      000932 5F                    2016 	ld	e, a
      000933 16 00                 2017 	ld	d, #0x00
      000935 CB 3A                 2018 	srl	d
      000937 CB 1B                 2019 	rr	e
      000939 CB 3A                 2020 	srl	d
      00093B CB 1B                 2021 	rr	e
      00093D CB 3A                 2022 	srl	d
      00093F CB 1B                 2023 	rr	e
      000941 43                    2024 	ld	b, e
                                   2025 ;src/main.c:350: set_bkg_tile_xy(x, y, OFFSET_BKG_NONE);
      000942 AF                    2026 	xor	a, a
      000943 F5                    2027 	push	af
      000944 33                    2028 	inc	sp
      000945 79                    2029 	ld	a, c
      000946 F5                    2030 	push	af
      000947 33                    2031 	inc	sp
      000948 C5                    2032 	push	bc
      000949 33                    2033 	inc	sp
      00094A CDr00r00              2034 	call	_set_bkg_tile_xy
      00094D E8 03                 2035 	add	sp, #3
                                   2036 ;src/main.c:351: set_bkg_tile_xy(x + 1u, y, OFFSET_BKG_NONE);
      00094F 04                    2037 	inc	b
      000950 AF                    2038 	xor	a, a
      000951 F5                    2039 	push	af
      000952 33                    2040 	inc	sp
      000953 79                    2041 	ld	a, c
      000954 F5                    2042 	push	af
      000955 33                    2043 	inc	sp
      000956 C5                    2044 	push	bc
      000957 33                    2045 	inc	sp
      000958 CDr00r00              2046 	call	_set_bkg_tile_xy
      00095B E8 03                 2047 	add	sp, #3
                                   2048 ;src/main.c:660: if (dynamic_metasprite.data[0] & ~BITMASK_DYNAMIC_METASPRITE_UNFOLD) {
      00095D 01r80r01              2049 	ld	bc, #_dynamic_metasprite + 13
      000960 0A                    2050 	ld	a, (bc)
      000961 5F                    2051 	ld	e, a
      000962 E6 7F                 2052 	and	a, #0x7f
      000964 28 06                 2053 	jr	Z, 00105$
                                   2054 ;src/main.c:661: dynamic_metasprite.data[0]--;
      000966 7B                    2055 	ld	a, e
      000967 3D                    2056 	dec	a
      000968 02                    2057 	ld	(bc), a
      000969 C3r32r0A              2058 	jp	00109$
      00096C                       2059 00105$:
                                   2060 ;src/main.c:663: if (cursor.card_to_show) {
      00096C 21r8Ar01              2061 	ld	hl, #(_cursor + 0x0002)
      00096F 2A                    2062 	ld	a, (hl+)
      000970 4F                    2063 	ld	c, a
      000971 46                    2064 	ld	b, (hl)
                                   2065 ;src/main.c:659: clear_bkg_2x1((UINT8)dynamic_metasprite.src[0] / 8u, (UINT8)dynamic_metasprite.src[1] / 8u + 2u);
      000972 11r75r01              2066 	ld	de, #(_dynamic_metasprite + 0x0002)
      000975 1A                    2067 	ld	a, (de)
      000976 F8 02                 2068 	ldhl	sp,	#2
      000978 22                    2069 	ld	(hl+), a
      000979 13                    2070 	inc	de
      00097A 1A                    2071 	ld	a, (de)
      00097B 77                    2072 	ld	(hl), a
      00097C 11r73r01              2073 	ld	de, #_dynamic_metasprite
      00097F 1A                    2074 	ld	a, (de)
      000980 F8 00                 2075 	ldhl	sp,	#0
      000982 22                    2076 	ld	(hl+), a
      000983 13                    2077 	inc	de
      000984 1A                    2078 	ld	a, (de)
      000985 77                    2079 	ld	(hl), a
                                   2080 ;src/main.c:664: draw_card(dynamic_metasprite.src[0] / 8u, dynamic_metasprite.src[1] / 8u - 1u, cursor.card_to_show->data);
      000986 D1                    2081 	pop	de
      000987 D5                    2082 	push	de
      000988 23                    2083 	inc	hl
      000989 23                    2084 	inc	hl
      00098A CB 3E                 2085 	srl	(hl)
      00098C 2B                    2086 	dec	hl
      00098D CB 1E                 2087 	rr	(hl)
      00098F 23                    2088 	inc	hl
      000990 CB 3E                 2089 	srl	(hl)
      000992 2B                    2090 	dec	hl
      000993 CB 1E                 2091 	rr	(hl)
      000995 23                    2092 	inc	hl
      000996 CB 3E                 2093 	srl	(hl)
      000998 2B                    2094 	dec	hl
      000999 CB 1E                 2095 	rr	(hl)
      00099B CB 3A                 2096 	srl	d
      00099D CB 1B                 2097 	rr	e
      00099F CB 3A                 2098 	srl	d
      0009A1 CB 1B                 2099 	rr	e
      0009A3 CB 3A                 2100 	srl	d
      0009A5 CB 1B                 2101 	rr	e
      0009A7 6E                    2102 	ld	l, (hl)
                                   2103 ;src/main.c:663: if (cursor.card_to_show) {
      0009A8 78                    2104 	ld	a, b
      0009A9 B1                    2105 	or	a, c
      0009AA 28 27                 2106 	jr	Z, 00102$
                                   2107 ;src/main.c:664: draw_card(dynamic_metasprite.src[0] / 8u, dynamic_metasprite.src[1] / 8u - 1u, cursor.card_to_show->data);
      0009AC 03                    2108 	inc	bc
      0009AD 03                    2109 	inc	bc
      0009AE 0A                    2110 	ld	a, (bc)
      0009AF 47                    2111 	ld	b, a
      0009B0 55                    2112 	ld	d, l
      0009B1 15                    2113 	dec	d
                                   2114 ;src/main.c:375: draw_card_top(x, y, card_data);
      0009B2 C5                    2115 	push	bc
      0009B3 D5                    2116 	push	de
      0009B4 4A                    2117 	ld	c, d
      0009B5 C5                    2118 	push	bc
      0009B6 7B                    2119 	ld	a, e
      0009B7 F5                    2120 	push	af
      0009B8 33                    2121 	inc	sp
      0009B9 CDr60r00              2122 	call	_draw_card_top
      0009BC E8 03                 2123 	add	sp, #3
      0009BE D1                    2124 	pop	de
      0009BF C1                    2125 	pop	bc
                                   2126 ;src/main.c:376: draw_card_bottom(x, y + 1u, card_data);
      0009C0 7A                    2127 	ld	a, d
      0009C1 3C                    2128 	inc	a
      0009C2 C5                    2129 	push	bc
      0009C3 33                    2130 	inc	sp
      0009C4 57                    2131 	ld	d,a
      0009C5 D5                    2132 	push	de
      0009C6 CDrCDr00              2133 	call	_draw_card_bottom
      0009C9 E8 03                 2134 	add	sp, #3
                                   2135 ;src/main.c:665: cursor.card_to_show = NULL;
      0009CB 21r8Ar01              2136 	ld	hl, #(_cursor + 0x0002)
      0009CE AF                    2137 	xor	a, a
      0009CF 22                    2138 	ld	(hl+), a
      0009D0 77                    2139 	ld	(hl), a
      0009D1 18 0C                 2140 	jr	00103$
      0009D3                       2141 00102$:
                                   2142 ;src/main.c:667: draw_sequential_card(dynamic_metasprite.src[0] / 8u, dynamic_metasprite.src[1] / 8u, OFFSET_BKG_CARD + OFFSET_CARD_OUTLINE);
      0009D3 3E DE                 2143 	ld	a, #0xde
      0009D5 F5                    2144 	push	af
      0009D6 7D                    2145 	ld	a, l
      0009D7 33                    2146 	inc	sp
      0009D8 57                    2147 	ld	d,a
      0009D9 D5                    2148 	push	de
      0009DA CDr51r01              2149 	call	_draw_sequential_card
      0009DD E8 03                 2150 	add	sp, #3
      0009DF                       2151 00103$:
                                   2152 ;src/main.c:669: dynamic_metasprite.dist[0] = (INT16)dynamic_metasprite.data[1] - dynamic_metasprite.src[0];
      0009DF FAr81r01              2153 	ld	a, (#(_dynamic_metasprite + 0x000e) + 0)
      0009E2 4F                    2154 	ld	c, a
      0009E3 06 00                 2155 	ld	b, #0x00
      0009E5 21r73r01              2156 	ld	hl, #_dynamic_metasprite
      0009E8 2A                    2157 	ld	a, (hl+)
      0009E9 66                    2158 	ld	h, (hl)
      0009EA 6F                    2159 	ld	l, a
      0009EB 79                    2160 	ld	a, c
      0009EC 95                    2161 	sub	a, l
      0009ED 4F                    2162 	ld	c, a
      0009EE 78                    2163 	ld	a, b
      0009EF 9C                    2164 	sbc	a, h
      0009F0 47                    2165 	ld	b, a
      0009F1 21r77r01              2166 	ld	hl, #(_dynamic_metasprite + 0x0004)
      0009F4 79                    2167 	ld	a, c
      0009F5 22                    2168 	ld	(hl+), a
      0009F6 70                    2169 	ld	(hl), b
                                   2170 ;src/main.c:670: dynamic_metasprite.dist[1] = (INT16)dynamic_metasprite.data[2] - dynamic_metasprite.src[1];
      0009F7 FAr82r01              2171 	ld	a, (#(_dynamic_metasprite + 0x000f) + 0)
      0009FA 4F                    2172 	ld	c, a
      0009FB 06 00                 2173 	ld	b, #0x00
      0009FD 21r75r01              2174 	ld	hl, #(_dynamic_metasprite + 0x0002)
      000A00 2A                    2175 	ld	a, (hl+)
      000A01 66                    2176 	ld	h, (hl)
      000A02 6F                    2177 	ld	l, a
      000A03 79                    2178 	ld	a, c
      000A04 95                    2179 	sub	a, l
      000A05 4F                    2180 	ld	c, a
      000A06 78                    2181 	ld	a, b
      000A07 9C                    2182 	sbc	a, h
      000A08 47                    2183 	ld	b, a
      000A09 21r79r01              2184 	ld	hl, #(_dynamic_metasprite + 0x0006)
      000A0C 79                    2185 	ld	a, c
      000A0D 22                    2186 	ld	(hl+), a
      000A0E 70                    2187 	ld	(hl), b
                                   2188 ;src/main.c:671: dynamic_metasprite.target_frames = animation_speeds[ANIMATION_SPEED(settings)].move_target_frames;
      000A0F 01r7Br01              2189 	ld	bc, #_dynamic_metasprite + 8
      000A12 FAr6Dr01              2190 	ld	a, (#_settings)
      000A15 E6 0C                 2191 	and	a, #0x0c
      000A17 6F                    2192 	ld	l, a
      000A18 26 00                 2193 	ld	h, #0x00
      000A1A CB 3C                 2194 	srl	h
      000A1C CB 1D                 2195 	rr	l
      000A1E CB 3C                 2196 	srl	h
      000A20 CB 1D                 2197 	rr	l
      000A22 29                    2198 	add	hl, hl
      000A23 11r26r00              2199 	ld	de, #_animation_speeds
      000A26 19                    2200 	add	hl, de
      000A27 23                    2201 	inc	hl
      000A28 7E                    2202 	ld	a, (hl)
      000A29 02                    2203 	ld	(bc), a
                                   2204 ;src/main.c:672: dynamic_metasprite.callback = &dynamic_metasprite_move_stack_callback;
      000A2A 21r86r01              2205 	ld	hl, #(_dynamic_metasprite + 0x0013)
      000A2D 36rA8                 2206 	ld	(hl), #<(_dynamic_metasprite_move_stack_callback)
      000A2F 23                    2207 	inc	hl
      000A30 36s08                 2208 	ld	(hl), #>(_dynamic_metasprite_move_stack_callback)
      000A32                       2209 00109$:
                                   2210 ;src/main.c:675: }
      000A32 E8 04                 2211 	add	sp, #4
      000A34 C9                    2212 	ret
                                   2213 ;src/main.c:677: void dynamic_metasprite_fold(const UINT8 top_card_data, const UINT8 src_x, const UINT8 src_y, const UINT8 dest_x, const UINT8 dest_y, const UINT8 stack_height, const Card *base_card, const UINT8 unfold, const UINT8 piles_to_clear)
                                   2214 ;	---------------------------------
                                   2215 ; Function dynamic_metasprite_fold
                                   2216 ; ---------------------------------
      000A35                       2217 _dynamic_metasprite_fold::
                                   2218 ;src/main.c:679: set_metasprite_card(top_card_data);
      000A35 F8 02                 2219 	ldhl	sp,	#2
      000A37 7E                    2220 	ld	a, (hl)
      000A38 F5                    2221 	push	af
      000A39 33                    2222 	inc	sp
      000A3A CDr46r05              2223 	call	_set_metasprite_card
      000A3D 33                    2224 	inc	sp
                                   2225 ;src/main.c:681: dynamic_metasprite.metasprite = metasprite_custom_2x3;
      000A3E 21r7Dr01              2226 	ld	hl, #(_dynamic_metasprite + 0x000a)
      000A41 36r00                 2227 	ld	(hl), #<(_metasprite_custom_2x3)
      000A43 23                    2228 	inc	hl
      000A44 36s00                 2229 	ld	(hl), #>(_metasprite_custom_2x3)
                                   2230 ;src/main.c:682: dynamic_metasprite.metasprite_offset = OFFSET_SPRITE_CARD;
      000A46 21r7Fr01              2231 	ld	hl, #(_dynamic_metasprite + 0x000c)
      000A49 36 B0                 2232 	ld	(hl), #0xb0
                                   2233 ;src/main.c:684: dynamic_metasprite.data[0] = (stack_height - 1u) | unfold;
      000A4B 01r80r01              2234 	ld	bc, #_dynamic_metasprite + 13
      000A4E F8 07                 2235 	ldhl	sp,	#7
      000A50 7E                    2236 	ld	a, (hl)
      000A51 3D                    2237 	dec	a
      000A52 F8 0A                 2238 	ldhl	sp,	#10
      000A54 B6                    2239 	or	a, (hl)
      000A55 02                    2240 	ld	(bc), a
                                   2241 ;src/main.c:685: dynamic_metasprite.data[1] = dest_x;
      000A56 11r81r01              2242 	ld	de, #(_dynamic_metasprite + 0x000e)
      000A59 F8 05                 2243 	ldhl	sp,	#5
      000A5B 7E                    2244 	ld	a, (hl)
      000A5C 12                    2245 	ld	(de), a
                                   2246 ;src/main.c:686: dynamic_metasprite.data[2] = dest_y;
      000A5D 11r82r01              2247 	ld	de, #(_dynamic_metasprite + 0x000f)
      000A60 23                    2248 	inc	hl
      000A61 7E                    2249 	ld	a, (hl)
      000A62 12                    2250 	ld	(de), a
                                   2251 ;src/main.c:687: dynamic_metasprite.data[3] = piles_to_clear;
      000A63 11r83r01              2252 	ld	de, #(_dynamic_metasprite + 0x0010)
      000A66 F8 0B                 2253 	ldhl	sp,	#11
      000A68 7E                    2254 	ld	a, (hl)
      000A69 12                    2255 	ld	(de), a
                                   2256 ;src/main.c:688: dynamic_metasprite.data_ptr = base_card;
      000A6A 2B                    2257 	dec	hl
      000A6B 2B                    2258 	dec	hl
      000A6C 2B                    2259 	dec	hl
      000A6D 2A                    2260 	ld	a, (hl+)
      000A6E 4F                    2261 	ld	c, a
      000A6F 46                    2262 	ld	b, (hl)
      000A70 21r84r01              2263 	ld	hl, #(_dynamic_metasprite + 0x0011)
      000A73 79                    2264 	ld	a, c
      000A74 22                    2265 	ld	(hl+), a
      000A75 70                    2266 	ld	(hl), b
                                   2267 ;src/main.c:690: dynamic_metasprite.src[0] = src_x;
      000A76 F8 03                 2268 	ldhl	sp,	#3
      000A78 4E                    2269 	ld	c, (hl)
      000A79 06 00                 2270 	ld	b, #0x00
      000A7B 21r73r01              2271 	ld	hl, #_dynamic_metasprite
      000A7E 79                    2272 	ld	a, c
      000A7F 22                    2273 	ld	(hl+), a
      000A80 70                    2274 	ld	(hl), b
                                   2275 ;src/main.c:691: dynamic_metasprite.src[1] = src_y + 8u;
      000A81 F8 04                 2276 	ldhl	sp,	#4
      000A83 4E                    2277 	ld	c, (hl)
      000A84 06 00                 2278 	ld	b, #0x00
      000A86 79                    2279 	ld	a, c
      000A87 C6 08                 2280 	add	a, #0x08
      000A89 4F                    2281 	ld	c, a
      000A8A 30 01                 2282 	jr	NC, 00110$
      000A8C 04                    2283 	inc	b
      000A8D                       2284 00110$:
      000A8D 21r75r01              2285 	ld	hl, #(_dynamic_metasprite + 0x0002)
      000A90 79                    2286 	ld	a, c
      000A91 22                    2287 	ld	(hl+), a
      000A92 70                    2288 	ld	(hl), b
                                   2289 ;src/main.c:693: flags |= FLAG_PLAYING_ANIMATION;
      000A93 21r6Br01              2290 	ld	hl, #_flags
      000A96 7E                    2291 	ld	a, (hl)
      000A97 F6 04                 2292 	or	a, #0x04
      000A99 77                    2293 	ld	(hl), a
                                   2294 ;src/main.c:695: if (stack_height > 1) {
      000A9A 3E 01                 2295 	ld	a, #0x01
      000A9C F8 07                 2296 	ldhl	sp,	#7
      000A9E 96                    2297 	sub	a, (hl)
      000A9F D2r00r09              2298 	jp	NC,_dynamic_metasprite_fold_callback
                                   2299 ;src/main.c:696: dynamic_metasprite.dist[0] = 0;
      000AA2 21r77r01              2300 	ld	hl, #(_dynamic_metasprite + 0x0004)
      000AA5 AF                    2301 	xor	a, a
      000AA6 22                    2302 	ld	(hl+), a
      000AA7 77                    2303 	ld	(hl), a
                                   2304 ;src/main.c:697: dynamic_metasprite.dist[1] = -8;
      000AA8 21r79r01              2305 	ld	hl, #(_dynamic_metasprite + 0x0006)
      000AAB 3E F8                 2306 	ld	a, #0xf8
      000AAD 22                    2307 	ld	(hl+), a
      000AAE 36 FF                 2308 	ld	(hl), #0xff
                                   2309 ;src/main.c:698: dynamic_metasprite.target_frames = animation_speeds[ANIMATION_SPEED(settings)].fold_target_frames;
      000AB0 01r7Br01              2310 	ld	bc, #_dynamic_metasprite + 8
      000AB3 FAr6Dr01              2311 	ld	a, (#_settings)
      000AB6 E6 0C                 2312 	and	a, #0x0c
      000AB8 6F                    2313 	ld	l, a
      000AB9 26 00                 2314 	ld	h, #0x00
      000ABB CB 3C                 2315 	srl	h
      000ABD CB 1D                 2316 	rr	l
      000ABF CB 3C                 2317 	srl	h
      000AC1 CB 1D                 2318 	rr	l
      000AC3 29                    2319 	add	hl, hl
      000AC4 11r26r00              2320 	ld	de, #_animation_speeds
      000AC7 19                    2321 	add	hl, de
      000AC8 7E                    2322 	ld	a, (hl)
      000AC9 02                    2323 	ld	(bc), a
                                   2324 ;src/main.c:699: dynamic_metasprite.callback = &dynamic_metasprite_fold_callback;
      000ACA 21r86r01              2325 	ld	hl, #(_dynamic_metasprite + 0x0013)
      000ACD 36r00                 2326 	ld	(hl), #<(_dynamic_metasprite_fold_callback)
      000ACF 23                    2327 	inc	hl
      000AD0 36s09                 2328 	ld	(hl), #>(_dynamic_metasprite_fold_callback)
                                   2329 ;src/main.c:701: dynamic_metasprite_fold_callback();
                                   2330 ;src/main.c:702: }
      000AD2 C3r00r09              2331 	jp  _dynamic_metasprite_fold_callback
                                   2332 ;src/main.c:704: void dynamic_metasprite_deal_callback(void)
                                   2333 ;	---------------------------------
                                   2334 ; Function dynamic_metasprite_deal_callback
                                   2335 ; ---------------------------------
      000AD5                       2336 _dynamic_metasprite_deal_callback::
      000AD5 E8 FC                 2337 	add	sp, #-4
                                   2338 ;src/main.c:706: Pile *pile = IDX_PTR(piles, dynamic_metasprite.data[0]);
      000AD7 21r80r01              2339 	ld	hl, #(_dynamic_metasprite + 0x000d)
      000ADA 4E                    2340 	ld	c, (hl)
      000ADB 06 00                 2341 	ld	b, #0x00
      000ADD 69                    2342 	ld	l, c
      000ADE 60                    2343 	ld	h, b
      000ADF 29                    2344 	add	hl, hl
      000AE0 29                    2345 	add	hl, hl
      000AE1 09                    2346 	add	hl, bc
      000AE2 3Er38                 2347 	ld	a, #<(_piles)
      000AE4 85                    2348 	add	a, l
      000AE5 47                    2349 	ld	b, a
      000AE6 3Es01                 2350 	ld	a, #>(_piles)
      000AE8 8C                    2351 	adc	a, h
      000AE9 F8 00                 2352 	ldhl	sp,	#0
      000AEB 70                    2353 	ld	(hl), b
      000AEC 23                    2354 	inc	hl
      000AED 77                    2355 	ld	(hl), a
                                   2356 ;src/main.c:707: draw_card(dynamic_metasprite.data[0] * 2u, 2u + pile->height, pile->top->data);
      000AEE E1                    2357 	pop	hl
      000AEF E5                    2358 	push	hl
      000AF0 23                    2359 	inc	hl
      000AF1 23                    2360 	inc	hl
      000AF2 2A                    2361 	ld	a, (hl+)
      000AF3 66                    2362 	ld	h, (hl)
      000AF4 6F                    2363 	ld	l, a
      000AF5 23                    2364 	inc	hl
      000AF6 23                    2365 	inc	hl
      000AF7 46                    2366 	ld	b, (hl)
                                   2367 ;c
      000AF8 D1                    2368 	pop	de
      000AF9 D5                    2369 	push	de
      000AFA 21 04 00              2370 	ld	hl, #0x0004
      000AFD 19                    2371 	add	hl, de
      000AFE 5D                    2372 	ld	e, l
      000AFF 54                    2373 	ld	d, h
      000B00 1A                    2374 	ld	a, (de)
      000B01 C6 02                 2375 	add	a, #0x02
      000B03 57                    2376 	ld	d, a
      000B04 CB 21                 2377 	sla	c
                                   2378 ;src/main.c:375: draw_card_top(x, y, card_data);
      000B06 C5                    2379 	push	bc
      000B07 D5                    2380 	push	de
      000B08 C5                    2381 	push	bc
      000B09 33                    2382 	inc	sp
      000B0A 59                    2383 	ld	e, c
      000B0B D5                    2384 	push	de
      000B0C CDr60r00              2385 	call	_draw_card_top
      000B0F E8 03                 2386 	add	sp, #3
      000B11 D1                    2387 	pop	de
      000B12 C1                    2388 	pop	bc
                                   2389 ;src/main.c:376: draw_card_bottom(x, y + 1u, card_data);
      000B13 14                    2390 	inc	d
      000B14 C5                    2391 	push	bc
      000B15 33                    2392 	inc	sp
      000B16 59                    2393 	ld	e, c
      000B17 D5                    2394 	push	de
      000B18 CDrCDr00              2395 	call	_draw_card_bottom
      000B1B E8 03                 2396 	add	sp, #3
                                   2397 ;src/main.c:708: if (dynamic_metasprite.data[0] == 9u) {
      000B1D 21r80r01              2398 	ld	hl, #(_dynamic_metasprite + 0x000d)
      000B20 4E                    2399 	ld	c, (hl)
      000B21 79                    2400 	ld	a, c
      000B22 D6 09                 2401 	sub	a, #0x09
      000B24 20 1B                 2402 	jr	NZ, 00104$
                                   2403 ;src/main.c:709: if (top_card_idx == 104u)
      000B26 FAr6Ar01              2404 	ld	a, (#_top_card_idx)
      000B29 D6 68                 2405 	sub	a, #0x68
      000B2B 20 0F                 2406 	jr	NZ, 00102$
                                   2407 ;src/main.c:710: draw_sequential_card(0, 0, OFFSET_BKG_CARD + OFFSET_CARD_OUTLINE);
      000B2D 3E DE                 2408 	ld	a, #0xde
      000B2F F5                    2409 	push	af
      000B30 33                    2410 	inc	sp
      000B31 AF                    2411 	xor	a, a
      000B32 F5                    2412 	push	af
      000B33 33                    2413 	inc	sp
      000B34 AF                    2414 	xor	a, a
      000B35 F5                    2415 	push	af
      000B36 33                    2416 	inc	sp
      000B37 CDr51r01              2417 	call	_draw_sequential_card
      000B3A E8 03                 2418 	add	sp, #3
      000B3C                       2419 00102$:
                                   2420 ;src/main.c:711: dynamic_metasprite_end_animation();
      000B3C CDr0Br06              2421 	call	_dynamic_metasprite_end_animation
                                   2422 ;src/main.c:712: return;
      000B3F 18 48                 2423 	jr	00106$
      000B41                       2424 00104$:
                                   2425 ;src/main.c:714: pile++;
                                   2426 ;c
      000B41 D1                    2427 	pop	de
      000B42 D5                    2428 	push	de
      000B43 21 05 00              2429 	ld	hl, #0x0005
      000B46 19                    2430 	add	hl, de
      000B47 E5                    2431 	push	hl
      000B48 7D                    2432 	ld	a, l
      000B49 F8 04                 2433 	ldhl	sp,	#4
      000B4B 77                    2434 	ld	(hl), a
      000B4C E1                    2435 	pop	hl
      000B4D 7C                    2436 	ld	a, h
      000B4E F8 03                 2437 	ldhl	sp,	#3
      000B50 77                    2438 	ld	(hl), a
                                   2439 ;src/main.c:715: dynamic_metasprite.data[0]++;
      000B51 0C                    2440 	inc	c
      000B52 21r80r01              2441 	ld	hl, #(_dynamic_metasprite + 0x000d)
      000B55 71                    2442 	ld	(hl), c
                                   2443 ;src/main.c:716: dynamic_metasprite.dist[0] += 16;
      000B56 21r77r01              2444 	ld	hl, #(_dynamic_metasprite + 0x0004)
      000B59 2A                    2445 	ld	a, (hl+)
      000B5A 4F                    2446 	ld	c, a
      000B5B 46                    2447 	ld	b, (hl)
      000B5C 21 10 00              2448 	ld	hl, #0x0010
      000B5F 09                    2449 	add	hl, bc
      000B60 4D                    2450 	ld	c, l
      000B61 44                    2451 	ld	b, h
      000B62 21r77r01              2452 	ld	hl, #(_dynamic_metasprite + 0x0004)
      000B65 79                    2453 	ld	a, c
      000B66 22                    2454 	ld	(hl+), a
      000B67 70                    2455 	ld	(hl), b
                                   2456 ;src/main.c:717: dynamic_metasprite.dist[1] = (INT16)(2u + pile->height) * 8;
                                   2457 ;c
      000B68 F8 02                 2458 	ldhl	sp,#2
      000B6A 2A                    2459 	ld	a, (hl+)
      000B6B 5F                    2460 	ld	e, a
      000B6C 56                    2461 	ld	d, (hl)
      000B6D 21 04 00              2462 	ld	hl, #0x0004
      000B70 19                    2463 	add	hl, de
      000B71 4D                    2464 	ld	c, l
      000B72 44                    2465 	ld	b, h
      000B73 0A                    2466 	ld	a, (bc)
      000B74 6F                    2467 	ld	l, a
      000B75 26 00                 2468 	ld	h, #0x00
      000B77 23                    2469 	inc	hl
      000B78 23                    2470 	inc	hl
      000B79 29                    2471 	add	hl, hl
      000B7A 29                    2472 	add	hl, hl
      000B7B 29                    2473 	add	hl, hl
      000B7C 4D                    2474 	ld	c, l
      000B7D 44                    2475 	ld	b, h
      000B7E 21r79r01              2476 	ld	hl, #(_dynamic_metasprite + 0x0006)
      000B81 79                    2477 	ld	a, c
      000B82 22                    2478 	ld	(hl+), a
      000B83 70                    2479 	ld	(hl), b
                                   2480 ;src/main.c:718: dynamic_metasprite.elapsed_frames = 0;
      000B84 21r7Cr01              2481 	ld	hl, #(_dynamic_metasprite + 0x0009)
      000B87 36 00                 2482 	ld	(hl), #0x00
      000B89                       2483 00106$:
                                   2484 ;src/main.c:719: }
      000B89 E8 04                 2485 	add	sp, #4
      000B8B C9                    2486 	ret
                                   2487 ;src/main.c:721: void dynamic_metasprite_deal(void)
                                   2488 ;	---------------------------------
                                   2489 ; Function dynamic_metasprite_deal
                                   2490 ; ---------------------------------
      000B8C                       2491 _dynamic_metasprite_deal::
                                   2492 ;src/main.c:723: Pile *pile = IDX_PTR(piles, 0);
                                   2493 ;src/main.c:724: dynamic_metasprite.src[0] = 0;
      000B8C 21r73r01              2494 	ld	hl, #_dynamic_metasprite
      000B8F AF                    2495 	xor	a, a
      000B90 22                    2496 	ld	(hl+), a
      000B91 77                    2497 	ld	(hl), a
                                   2498 ;src/main.c:725: dynamic_metasprite.src[1] = 0;
      000B92 21r75r01              2499 	ld	hl, #(_dynamic_metasprite + 0x0002)
      000B95 AF                    2500 	xor	a, a
      000B96 22                    2501 	ld	(hl+), a
      000B97 77                    2502 	ld	(hl), a
                                   2503 ;src/main.c:726: dynamic_metasprite.dist[0] = 0;
      000B98 21r77r01              2504 	ld	hl, #(_dynamic_metasprite + 0x0004)
      000B9B AF                    2505 	xor	a, a
      000B9C 22                    2506 	ld	(hl+), a
      000B9D 77                    2507 	ld	(hl), a
                                   2508 ;src/main.c:727: dynamic_metasprite.dist[1] = (INT16)(2u + pile->height) * 8;
      000B9E FAr3Cr01              2509 	ld	a, (#(_piles + 0x0004) + 0)
      000BA1 26 00                 2510 	ld	h, #0x00
      000BA3 6F                    2511 	ld	l, a
      000BA4 23                    2512 	inc	hl
      000BA5 23                    2513 	inc	hl
      000BA6 29                    2514 	add	hl, hl
      000BA7 29                    2515 	add	hl, hl
      000BA8 29                    2516 	add	hl, hl
      000BA9 4D                    2517 	ld	c, l
      000BAA 44                    2518 	ld	b, h
      000BAB 21r79r01              2519 	ld	hl, #(_dynamic_metasprite + 0x0006)
      000BAE 79                    2520 	ld	a, c
      000BAF 22                    2521 	ld	(hl+), a
      000BB0 70                    2522 	ld	(hl), b
                                   2523 ;src/main.c:728: dynamic_metasprite.elapsed_frames = 0;
      000BB1 21r7Cr01              2524 	ld	hl, #(_dynamic_metasprite + 0x0009)
      000BB4 36 00                 2525 	ld	(hl), #0x00
                                   2526 ;src/main.c:729: dynamic_metasprite.target_frames = animation_speeds[ANIMATION_SPEED(settings)].move_target_frames;
      000BB6 FAr6Dr01              2527 	ld	a, (#_settings)
      000BB9 0E 00                 2528 	ld	c, #0x00
      000BBB E6 0C                 2529 	and	a, #0x0c
      000BBD 6F                    2530 	ld	l, a
      000BBE 26 00                 2531 	ld	h, #0x00
      000BC0 CB 3C                 2532 	srl	h
      000BC2 CB 1D                 2533 	rr	l
      000BC4 CB 3C                 2534 	srl	h
      000BC6 CB 1D                 2535 	rr	l
      000BC8 29                    2536 	add	hl, hl
      000BC9 11r26r00              2537 	ld	de, #_animation_speeds
      000BCC 19                    2538 	add	hl, de
      000BCD 23                    2539 	inc	hl
      000BCE 7E                    2540 	ld	a, (hl)
      000BCF EAr7Br01              2541 	ld	(#(_dynamic_metasprite + 0x0008)),a
                                   2542 ;src/main.c:730: dynamic_metasprite.metasprite = metasprite_sequential_2x3;
      000BD2 21r7Dr01              2543 	ld	hl, #(_dynamic_metasprite + 0x000a)
      000BD5 36r00                 2544 	ld	(hl), #<(_metasprite_sequential_2x3)
      000BD7 23                    2545 	inc	hl
      000BD8 36s00                 2546 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   2547 ;src/main.c:731: dynamic_metasprite.metasprite_offset = OFFSET_SPRITE_CARD + OFFSET_CARD_BACK;
      000BDA 21r7Fr01              2548 	ld	hl, #(_dynamic_metasprite + 0x000c)
      000BDD 36 C7                 2549 	ld	(hl), #0xc7
                                   2550 ;src/main.c:732: dynamic_metasprite.data[0] = 0;
      000BDF 21r80r01              2551 	ld	hl, #(_dynamic_metasprite + 0x000d)
      000BE2 36 00                 2552 	ld	(hl), #0x00
                                   2553 ;src/main.c:733: dynamic_metasprite.callback = &dynamic_metasprite_deal_callback;
      000BE4 21r86r01              2554 	ld	hl, #(_dynamic_metasprite + 0x0013)
      000BE7 36rD5                 2555 	ld	(hl), #<(_dynamic_metasprite_deal_callback)
      000BE9 23                    2556 	inc	hl
      000BEA 36s0A                 2557 	ld	(hl), #>(_dynamic_metasprite_deal_callback)
                                   2558 ;src/main.c:734: flags |= FLAG_PLAYING_ANIMATION;
      000BEC 21r6Br01              2559 	ld	hl, #_flags
      000BEF 7E                    2560 	ld	a, (hl)
      000BF0 F6 04                 2561 	or	a, #0x04
      000BF2 77                    2562 	ld	(hl), a
                                   2563 ;src/main.c:735: }
      000BF3 C9                    2564 	ret
                                   2565 ;src/main.c:737: inline void dynamic_metasprite_process(void)
                                   2566 ;	---------------------------------
                                   2567 ; Function dynamic_metasprite_process
                                   2568 ; ---------------------------------
      000BF4                       2569 _dynamic_metasprite_process::
      000BF4 E8 FB                 2570 	add	sp, #-5
                                   2571 ;src/main.c:739: if (dynamic_metasprite.elapsed_frames >= dynamic_metasprite.target_frames)
      000BF6 21r7Cr01              2572 	ld	hl, #(_dynamic_metasprite + 0x0009)
      000BF9 4E                    2573 	ld	c, (hl)
      000BFA 21r7Br01              2574 	ld	hl, #(_dynamic_metasprite + 0x0008)
      000BFD 46                    2575 	ld	b, (hl)
      000BFE 58                    2576 	ld	e, b
      000BFF 79                    2577 	ld	a,c
      000C00 57                    2578 	ld	d,a
      000C01 90                    2579 	sub	a, b
      000C02 CB 7B                 2580 	bit	7, e
      000C04 28 07                 2581 	jr	Z, 00124$
      000C06 CB 7A                 2582 	bit	7, d
      000C08 20 08                 2583 	jr	NZ, 00125$
      000C0A BF                    2584 	cp	a, a
      000C0B 18 05                 2585 	jr	00125$
      000C0D                       2586 00124$:
      000C0D CB 7A                 2587 	bit	7, d
      000C0F 28 01                 2588 	jr	Z, 00125$
      000C11 37                    2589 	scf
      000C12                       2590 00125$:
                                   2591 ;src/main.c:740: return;
      000C12 D2rDCr0C              2592 	jp	NC,00107$
                                   2593 ;src/main.c:742: dynamic_metasprite.elapsed_frames++;
      000C15 0C                    2594 	inc	c
      000C16 21r7Cr01              2595 	ld	hl, #(_dynamic_metasprite + 0x0009)
      000C19 71                    2596 	ld	(hl), c
                                   2597 ;src/main.c:747: (INT16)scroll * -8 + dynamic_metasprite.src[1] + (dynamic_metasprite.dist[1] * dynamic_metasprite.elapsed_frames / dynamic_metasprite.target_frames)
      000C1A FAr6Cr01              2598 	ld	a, (#_scroll)
      000C1D 5F                    2599 	ld	e, a
      000C1E 87                    2600 	add	a, a
      000C1F 83                    2601 	add	a, e
      000C20 87                    2602 	add	a, a
      000C21 83                    2603 	add	a, e
      000C22 87                    2604 	add	a, a
      000C23 83                    2605 	add	a, e
      000C24 87                    2606 	add	a, a
      000C25 83                    2607 	add	a, e
      000C26 87                    2608 	add	a, a
      000C27 83                    2609 	add	a, e
      000C28 87                    2610 	add	a, a
      000C29 83                    2611 	add	a, e
      000C2A 87                    2612 	add	a, a
      000C2B 83                    2613 	add	a, e
      000C2C 87                    2614 	add	a, a
      000C2D 83                    2615 	add	a, e
      000C2E 87                    2616 	add	a, a
      000C2F 83                    2617 	add	a, e
      000C30 87                    2618 	add	a, a
      000C31 83                    2619 	add	a, e
      000C32 87                    2620 	add	a, a
      000C33 83                    2621 	add	a, e
      000C34 87                    2622 	add	a, a
      000C35 83                    2623 	add	a, e
      000C36 87                    2624 	add	a, a
      000C37 87                    2625 	add	a, a
      000C38 87                    2626 	add	a, a
      000C39 21r75r01              2627 	ld	hl, #_dynamic_metasprite + 2
      000C3C 46                    2628 	ld	b, (hl)
      000C3D 80                    2629 	add	a, b
      000C3E F8 00                 2630 	ldhl	sp,	#0
      000C40 77                    2631 	ld	(hl), a
      000C41 21r79r01              2632 	ld	hl, #(_dynamic_metasprite + 0x0006)
      000C44 2A                    2633 	ld	a, (hl+)
      000C45 66                    2634 	ld	h, (hl)
      000C46 6F                    2635 	ld	l, a
      000C47 79                    2636 	ld	a, c
      000C48 17                    2637 	rla
      000C49 9F                    2638 	sbc	a, a
      000C4A 47                    2639 	ld	b, a
      000C4B C5                    2640 	push	bc
      000C4C C5                    2641 	push	bc
      000C4D E5                    2642 	push	hl
      000C4E CDr00r00              2643 	call	__mulint
      000C51 E8 04                 2644 	add	sp, #4
      000C53 E5                    2645 	push	hl
      000C54 F8 07                 2646 	ldhl	sp,	#7
      000C56 73                    2647 	ld	(hl), e
      000C57 F8 08                 2648 	ldhl	sp,	#8
      000C59 72                    2649 	ld	(hl), d
      000C5A E1                    2650 	pop	hl
      000C5B C1                    2651 	pop	bc
      000C5C FAr7Br01              2652 	ld	a, (#(_dynamic_metasprite + 0x0008) + 0)
      000C5F F8 01                 2653 	ldhl	sp,	#1
      000C61 77                    2654 	ld	(hl), a
      000C62 17                    2655 	rla
      000C63 9F                    2656 	sbc	a, a
      000C64 23                    2657 	inc	hl
      000C65 77                    2658 	ld	(hl), a
      000C66 C5                    2659 	push	bc
      000C67 2B                    2660 	dec	hl
      000C68 2A                    2661 	ld	a, (hl+)
      000C69 66                    2662 	ld	h, (hl)
      000C6A 6F                    2663 	ld	l, a
      000C6B E5                    2664 	push	hl
      000C6C F8 07                 2665 	ldhl	sp,	#7
      000C6E 2A                    2666 	ld	a, (hl+)
      000C6F 66                    2667 	ld	h, (hl)
      000C70 6F                    2668 	ld	l, a
      000C71 E5                    2669 	push	hl
      000C72 CDr00r00              2670 	call	__divsint
      000C75 E8 04                 2671 	add	sp, #4
      000C77 C1                    2672 	pop	bc
      000C78 7B                    2673 	ld	a, e
      000C79 F8 00                 2674 	ldhl	sp,	#0
      000C7B 86                    2675 	add	a, (hl)
      000C7C F8 03                 2676 	ldhl	sp,	#3
      000C7E 77                    2677 	ld	(hl), a
                                   2678 ;src/main.c:746: dynamic_metasprite.src[0] + (dynamic_metasprite.dist[0] * dynamic_metasprite.elapsed_frames / dynamic_metasprite.target_frames),
      000C7F FAr73r01              2679 	ld	a, (#_dynamic_metasprite + 0)
      000C82 F8 04                 2680 	ldhl	sp,	#4
      000C84 77                    2681 	ld	(hl), a
      000C85 21r77r01              2682 	ld	hl, #(_dynamic_metasprite + 0x0004)
      000C88 2A                    2683 	ld	a, (hl+)
      000C89 66                    2684 	ld	h, (hl)
      000C8A 6F                    2685 	ld	l, a
      000C8B C5                    2686 	push	bc
      000C8C E5                    2687 	push	hl
      000C8D CDr00r00              2688 	call	__mulint
      000C90 E8 04                 2689 	add	sp, #4
      000C92 F8 01                 2690 	ldhl	sp,	#1
      000C94 2A                    2691 	ld	a, (hl+)
      000C95 66                    2692 	ld	h, (hl)
      000C96 6F                    2693 	ld	l, a
      000C97 E5                    2694 	push	hl
      000C98 D5                    2695 	push	de
      000C99 CDr00r00              2696 	call	__divsint
      000C9C E8 04                 2697 	add	sp, #4
      000C9E 7B                    2698 	ld	a, e
      000C9F F8 04                 2699 	ldhl	sp,	#4
      000CA1 86                    2700 	add	a, (hl)
      000CA2 47                    2701 	ld	b, a
                                   2702 ;src/main.c:744: dynamic_metasprite.metasprite_offset,
      000CA3 FAr7Fr01              2703 	ld	a, (#(_dynamic_metasprite + 0x000c) + 0)
      000CA6 EAr00r00              2704 	ld	(#___current_base_tile),a
                                   2705 ;src/main.c:743: move_metasprite(dynamic_metasprite.metasprite,
      000CA9 21r7Dr01              2706 	ld	hl, #(_dynamic_metasprite + 0x000a)
      000CAC 2A                    2707 	ld	a, (hl+)
      000CAD 66                    2708 	ld	h, (hl)
                                   2709 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      000CAE EAr00r00              2710 	ld	(___current_metasprite), a
      000CB1 7C                    2711 	ld	a, h
      000CB2 EAr01r00              2712 	ld	(___current_metasprite + 1), a
                                   2713 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      000CB5 F8 03                 2714 	ldhl	sp,	#3
      000CB7 7E                    2715 	ld	a, (hl)
      000CB8 F5                    2716 	push	af
      000CB9 33                    2717 	inc	sp
      000CBA C5                    2718 	push	bc
      000CBB 33                    2719 	inc	sp
      000CBC AF                    2720 	xor	a, a
      000CBD F5                    2721 	push	af
      000CBE 33                    2722 	inc	sp
      000CBF CDr00r00              2723 	call	___move_metasprite
      000CC2 E8 03                 2724 	add	sp, #3
                                   2725 ;src/main.c:749: if (dynamic_metasprite.elapsed_frames == dynamic_metasprite.target_frames
      000CC4 FAr7Cr01              2726 	ld	a, (#(_dynamic_metasprite + 0x0009) + 0)
      000CC7 21r7Br01              2727 	ld	hl, #(_dynamic_metasprite + 0x0008)
      000CCA 4E                    2728 	ld	c, (hl)
      000CCB 91                    2729 	sub	a, c
      000CCC 20 0E                 2730 	jr	NZ, 00107$
                                   2731 ;src/main.c:750: && dynamic_metasprite.callback)
      000CCE 21r86r01              2732 	ld	hl, #(_dynamic_metasprite + 0x0013)
      000CD1 2A                    2733 	ld	a, (hl+)
      000CD2 4F                    2734 	ld	c, a
      000CD3 66                    2735 	ld	h, (hl)
      000CD4 7C                    2736 	ld	a, h
      000CD5 B1                    2737 	or	a, c
      000CD6 28 04                 2738 	jr	Z, 00107$
                                   2739 ;src/main.c:751: dynamic_metasprite.callback();
      000CD8 69                    2740 	ld	l, c
      000CD9 CDr00r00              2741 	call	___sdcc_call_hl
      000CDC                       2742 00107$:
                                   2743 ;src/main.c:752: }
      000CDC E8 05                 2744 	add	sp, #5
      000CDE C9                    2745 	ret
                                   2746 ;src/main.c:759: void cursor_adjust_height(void)
                                   2747 ;	---------------------------------
                                   2748 ; Function cursor_adjust_height
                                   2749 ; ---------------------------------
      000CDF                       2750 _cursor_adjust_height::
                                   2751 ;src/main.c:761: Pile *pile = IDX_PTR(piles, cursor.pile_idx);
      000CDF 01r38r01              2752 	ld	bc, #_piles+0
      000CE2 FAr8Er01              2753 	ld	a, (#(_cursor + 0x0006) + 0)
      000CE5 5F                    2754 	ld	e, a
      000CE6 16 00                 2755 	ld	d, #0x00
      000CE8 6B                    2756 	ld	l, e
      000CE9 62                    2757 	ld	h, d
      000CEA 29                    2758 	add	hl, hl
      000CEB 29                    2759 	add	hl, hl
      000CEC 19                    2760 	add	hl, de
      000CED 09                    2761 	add	hl, bc
                                   2762 ;src/main.c:762: if (cursor.height >= pile->height)
      000CEE 01r8Fr01              2763 	ld	bc, #_cursor + 7
      000CF1 0A                    2764 	ld	a, (bc)
      000CF2 57                    2765 	ld	d, a
      000CF3 23                    2766 	inc	hl
      000CF4 23                    2767 	inc	hl
      000CF5 23                    2768 	inc	hl
      000CF6 23                    2769 	inc	hl
      000CF7 5E                    2770 	ld	e, (hl)
      000CF8 7A                    2771 	ld	a, d
      000CF9 93                    2772 	sub	a, e
      000CFA D8                    2773 	ret	C
                                   2774 ;src/main.c:763: cursor.height = pile->height - !!pile->height;
      000CFB 7B                    2775 	ld	a, e
      000CFC D6 01                 2776 	sub	a,#0x01
      000CFE 3E 00                 2777 	ld	a, #0x00
      000D00 17                    2778 	rla
      000D01 EE 01                 2779 	xor	a, #0x01
      000D03 57                    2780 	ld	d, a
      000D04 7B                    2781 	ld	a, e
      000D05 92                    2782 	sub	a, d
      000D06 02                    2783 	ld	(bc), a
                                   2784 ;src/main.c:764: }
      000D07 C9                    2785 	ret
                                   2786 ;src/main.c:766: inline void cursor_grab_stack(void)
                                   2787 ;	---------------------------------
                                   2788 ; Function cursor_grab_stack
                                   2789 ; ---------------------------------
      000D08                       2790 _cursor_grab_stack::
      000D08 E8 F9                 2791 	add	sp, #-7
                                   2792 ;src/main.c:769: Pile *pile = IDX_PTR(piles, cursor.pile_idx);
      000D0A 01r38r01              2793 	ld	bc, #_piles+0
      000D0D FAr8Er01              2794 	ld	a, (#(_cursor + 0x0006) + 0)
      000D10 5F                    2795 	ld	e, a
      000D11 16 00                 2796 	ld	d, #0x00
      000D13 6B                    2797 	ld	l, e
      000D14 62                    2798 	ld	h, d
      000D15 29                    2799 	add	hl, hl
      000D16 29                    2800 	add	hl, hl
      000D17 19                    2801 	add	hl, de
      000D18 09                    2802 	add	hl, bc
      000D19 4D                    2803 	ld	c, l
      000D1A 7C                    2804 	ld	a, h
      000D1B F8 02                 2805 	ldhl	sp,	#2
      000D1D 71                    2806 	ld	(hl), c
      000D1E 23                    2807 	inc	hl
                                   2808 ;src/main.c:770: Card *top = pile->base;
      000D1F 32                    2809 	ld	(hl-), a
      000D20 2A                    2810 	ld	a, (hl+)
      000D21 5F                    2811 	ld	e, a
      000D22 56                    2812 	ld	d, (hl)
      000D23 1A                    2813 	ld	a, (de)
      000D24 23                    2814 	inc	hl
      000D25 23                    2815 	inc	hl
      000D26 22                    2816 	ld	(hl+), a
      000D27 13                    2817 	inc	de
      000D28 1A                    2818 	ld	a, (de)
      000D29 77                    2819 	ld	(hl), a
                                   2820 ;src/main.c:771: for (i = 1; i < cursor.height; i++)
      000D2A 06 01                 2821 	ld	b, #0x01
      000D2C                       2822 00109$:
      000D2C 21r8Fr01              2823 	ld	hl, #(_cursor + 0x0007)
      000D2F 4E                    2824 	ld	c, (hl)
      000D30 78                    2825 	ld	a, b
      000D31 91                    2826 	sub	a, c
      000D32 30 0E                 2827 	jr	NC, 00101$
                                   2828 ;src/main.c:772: top = top->next_card;
      000D34 F8 05                 2829 	ldhl	sp,#5
      000D36 2A                    2830 	ld	a, (hl+)
      000D37 5F                    2831 	ld	e, a
      000D38 56                    2832 	ld	d, (hl)
      000D39 1A                    2833 	ld	a, (de)
      000D3A 2B                    2834 	dec	hl
      000D3B 22                    2835 	ld	(hl+), a
      000D3C 13                    2836 	inc	de
      000D3D 1A                    2837 	ld	a, (de)
      000D3E 77                    2838 	ld	(hl), a
                                   2839 ;src/main.c:771: for (i = 1; i < cursor.height; i++)
      000D3F 04                    2840 	inc	b
      000D40 18 EA                 2841 	jr	00109$
      000D42                       2842 00101$:
                                   2843 ;src/main.c:773: Card *stack = cursor.height ? top->next_card : top;
      000D42 79                    2844 	ld	a, c
      000D43 B7                    2845 	or	a, a
      000D44 28 0E                 2846 	jr	Z, 00113$
      000D46 F8 05                 2847 	ldhl	sp,#5
      000D48 2A                    2848 	ld	a, (hl+)
      000D49 5F                    2849 	ld	e, a
      000D4A 56                    2850 	ld	d, (hl)
      000D4B 1A                    2851 	ld	a, (de)
      000D4C F8 00                 2852 	ldhl	sp,	#0
      000D4E 22                    2853 	ld	(hl+), a
      000D4F 13                    2854 	inc	de
      000D50 1A                    2855 	ld	a, (de)
      000D51 77                    2856 	ld	(hl), a
      000D52 18 08                 2857 	jr	00114$
      000D54                       2858 00113$:
      000D54 F8 05                 2859 	ldhl	sp,	#5
      000D56 2A                    2860 	ld	a, (hl+)
      000D57 5E                    2861 	ld	e, (hl)
      000D58 F8 00                 2862 	ldhl	sp,	#0
      000D5A 22                    2863 	ld	(hl+), a
      000D5B 73                    2864 	ld	(hl), e
      000D5C                       2865 00114$:
      000D5C C1                    2866 	pop	bc
      000D5D C5                    2867 	push	bc
                                   2868 ;src/main.c:774: if (!(VISIBLE(stack->data) && is_stack_coherent(stack)))
      000D5E 59                    2869 	ld	e, c
      000D5F 50                    2870 	ld	d, b
      000D60 13                    2871 	inc	de
      000D61 13                    2872 	inc	de
      000D62 1A                    2873 	ld	a, (de)
      000D63 CB 77                 2874 	bit	6, a
      000D65 28 76                 2875 	jr	Z, 00111$
      000D67 C5                    2876 	push	bc
      000D68 C5                    2877 	push	bc
      000D69 CDr98r12              2878 	call	_is_stack_coherent
      000D6C E8 02                 2879 	add	sp, #2
      000D6E 7B                    2880 	ld	a, e
      000D6F C1                    2881 	pop	bc
      000D70 B7                    2882 	or	a, a
                                   2883 ;src/main.c:775: return;
      000D71 28 6A                 2884 	jr	Z, 00111$
                                   2885 ;src/main.c:777: cursor.held_card = stack;
      000D73 21r88r01              2886 	ld	hl, #_cursor
      000D76 79                    2887 	ld	a, c
      000D77 22                    2888 	ld	(hl+), a
      000D78 70                    2889 	ld	(hl), b
                                   2890 ;src/main.c:778: cursor.hand_pile_idx = cursor.pile_idx;
      000D79 01r8Dr01              2891 	ld	bc, #_cursor + 5
      000D7C FAr8Er01              2892 	ld	a, (#(_cursor + 0x0006) + 0)
      000D7F 02                    2893 	ld	(bc), a
                                   2894 ;src/main.c:779: cursor.held_stack_size = pile->height - cursor.height;
                                   2895 ;c
      000D80 F8 02                 2896 	ldhl	sp,#2
      000D82 2A                    2897 	ld	a, (hl+)
      000D83 5F                    2898 	ld	e, a
      000D84 56                    2899 	ld	d, (hl)
      000D85 21 04 00              2900 	ld	hl, #0x0004
      000D88 19                    2901 	add	hl, de
      000D89 4D                    2902 	ld	c, l
      000D8A 44                    2903 	ld	b, h
      000D8B 0A                    2904 	ld	a, (bc)
      000D8C 21r8Fr01              2905 	ld	hl, #(_cursor + 0x0007)
      000D8F 6E                    2906 	ld	l, (hl)
      000D90 95                    2907 	sub	a, l
      000D91 EAr8Cr01              2908 	ld	(#(_cursor + 0x0004)),a
                                   2909 ;src/main.c:780: pile->height = cursor.height;
      000D94 FAr8Fr01              2910 	ld	a, (#(_cursor + 0x0007) + 0)
      000D97 02                    2911 	ld	(bc), a
                                   2912 ;src/main.c:781: flags |= FLAG_REDRAW_HAND;
      000D98 21r6Br01              2913 	ld	hl, #_flags
      000D9B 7E                    2914 	ld	a, (hl)
      000D9C F6 02                 2915 	or	a, #0x02
      000D9E 77                    2916 	ld	(hl), a
                                   2917 ;src/main.c:782: if (cursor.height) {
      000D9F FAr8Fr01              2918 	ld	a, (#(_cursor + 0x0007) + 0)
      000DA2 F8 04                 2919 	ldhl	sp,	#4
      000DA4 77                    2920 	ld	(hl), a
                                   2921 ;src/main.c:783: pile->top = top;
      000DA5 F8 02                 2922 	ldhl	sp,#2
      000DA7 2A                    2923 	ld	a, (hl+)
      000DA8 4F                    2924 	ld	c, a
      000DA9 46                    2925 	ld	b, (hl)
      000DAA 03                    2926 	inc	bc
      000DAB 03                    2927 	inc	bc
                                   2928 ;src/main.c:785: cursor.card_to_show = top;
                                   2929 ;src/main.c:782: if (cursor.height) {
      000DAC 23                    2930 	inc	hl
      000DAD 7E                    2931 	ld	a, (hl)
      000DAE B7                    2932 	or	a, a
      000DAF 28 1A                 2933 	jr	Z, 00106$
                                   2934 ;src/main.c:783: pile->top = top;
      000DB1 23                    2935 	inc	hl
      000DB2 2A                    2936 	ld	a, (hl+)
      000DB3 02                    2937 	ld	(bc), a
      000DB4 03                    2938 	inc	bc
      000DB5 7E                    2939 	ld	a, (hl)
      000DB6 02                    2940 	ld	(bc), a
                                   2941 ;src/main.c:784: top->next_card = NULL;
      000DB7 2B                    2942 	dec	hl
      000DB8 2A                    2943 	ld	a, (hl+)
      000DB9 66                    2944 	ld	h, (hl)
      000DBA 6F                    2945 	ld	l, a
      000DBB AF                    2946 	xor	a, a
      000DBC 22                    2947 	ld	(hl+), a
      000DBD 77                    2948 	ld	(hl), a
                                   2949 ;src/main.c:785: cursor.card_to_show = top;
      000DBE 11r8Ar01              2950 	ld	de, #(_cursor + 0x0002)
      000DC1 F8 05                 2951 	ldhl	sp,	#5
      000DC3 7E                    2952 	ld	a, (hl)
      000DC4 12                    2953 	ld	(de), a
      000DC5 13                    2954 	inc	de
      000DC6 23                    2955 	inc	hl
      000DC7 7E                    2956 	ld	a, (hl)
      000DC8 12                    2957 	ld	(de), a
      000DC9 18 12                 2958 	jr	00111$
      000DCB                       2959 00106$:
                                   2960 ;src/main.c:787: pile->base = NULL;
      000DCB F8 02                 2961 	ldhl	sp,	#2
      000DCD 2A                    2962 	ld	a, (hl+)
      000DCE 66                    2963 	ld	h, (hl)
      000DCF 6F                    2964 	ld	l, a
      000DD0 AF                    2965 	xor	a, a
      000DD1 22                    2966 	ld	(hl+), a
      000DD2 77                    2967 	ld	(hl), a
                                   2968 ;src/main.c:788: pile->top = NULL;
      000DD3 AF                    2969 	xor	a, a
      000DD4 02                    2970 	ld	(bc), a
      000DD5 03                    2971 	inc	bc
      000DD6 02                    2972 	ld	(bc), a
                                   2973 ;src/main.c:789: cursor.card_to_show = NULL;
      000DD7 21r8Ar01              2974 	ld	hl, #(_cursor + 0x0002)
      000DDA AF                    2975 	xor	a, a
      000DDB 22                    2976 	ld	(hl+), a
      000DDC 77                    2977 	ld	(hl), a
      000DDD                       2978 00111$:
                                   2979 ;src/main.c:791: }
      000DDD E8 07                 2980 	add	sp, #7
      000DDF C9                    2981 	ret
                                   2982 ;src/main.c:793: inline void cursor_place_stack(void)
                                   2983 ;	---------------------------------
                                   2984 ; Function cursor_place_stack
                                   2985 ; ---------------------------------
      000DE0                       2986 _cursor_place_stack::
      000DE0 E8 FE                 2987 	add	sp, #-2
                                   2988 ;src/main.c:795: Pile *pile = IDX_PTR(piles, cursor.hand_pile_idx);
      000DE2 01r38r01              2989 	ld	bc, #_piles+0
      000DE5 FAr8Dr01              2990 	ld	a, (#(_cursor + 0x0005) + 0)
      000DE8 F8 01                 2991 	ldhl	sp,	#1
      000DEA 77                    2992 	ld	(hl), a
      000DEB F8 01                 2993 	ldhl	sp,	#1
      000DED 5E                    2994 	ld	e, (hl)
      000DEE 16 00                 2995 	ld	d, #0x00
      000DF0 6B                    2996 	ld	l, e
      000DF1 62                    2997 	ld	h, d
      000DF2 29                    2998 	add	hl, hl
      000DF3 29                    2999 	add	hl, hl
      000DF4 19                    3000 	add	hl, de
      000DF5 09                    3001 	add	hl, bc
      000DF6 4D                    3002 	ld	c, l
      000DF7 44                    3003 	ld	b, h
                                   3004 ;src/main.c:796: if (cursor.hand_pile_idx == cursor.pile_idx) {
      000DF8 21r8Er01              3005 	ld	hl, #_cursor + 6
      000DFB 5E                    3006 	ld	e, (hl)
      000DFC F8 01                 3007 	ldhl	sp,	#1
      000DFE 7E                    3008 	ld	a, (hl)
      000DFF 93                    3009 	sub	a, e
      000E00 20 08                 3010 	jr	NZ, 00105$
                                   3011 ;src/main.c:797: pile_append_cursor_stack(pile);
      000E02 C5                    3012 	push	bc
      000E03 CDr5Cr13              3013 	call	_pile_append_cursor_stack
      000E06 E8 02                 3014 	add	sp, #2
      000E08 18 46                 3015 	jr	00107$
      000E0A                       3016 00105$:
                                   3017 ;src/main.c:798: } else if (!pile->height
      000E0A 21 04 00              3018 	ld	hl, #0x0004
      000E0D 09                    3019 	add	hl, bc
      000E0E 7E                    3020 	ld	a, (hl)
      000E0F B7                    3021 	or	a, a
      000E10 28 2C                 3022 	jr	Z, 00101$
                                   3023 ;src/main.c:799: || RANK(pile->top->data) == RANK(cursor.held_card->data) + 1u) {
      000E12 69                    3024 	ld	l, c
      000E13 60                    3025 	ld	h, b
      000E14 23                    3026 	inc	hl
      000E15 23                    3027 	inc	hl
      000E16 2A                    3028 	ld	a, (hl+)
      000E17 66                    3029 	ld	h, (hl)
      000E18 6F                    3030 	ld	l, a
      000E19 23                    3031 	inc	hl
      000E1A 23                    3032 	inc	hl
      000E1B 7E                    3033 	ld	a, (hl)
      000E1C E6 0F                 3034 	and	a, #0x0f
      000E1E F8 00                 3035 	ldhl	sp,	#0
      000E20 77                    3036 	ld	(hl), a
      000E21 AF                    3037 	xor	a, a
      000E22 23                    3038 	inc	hl
      000E23 77                    3039 	ld	(hl), a
      000E24 21r88r01              3040 	ld	hl, #_cursor
      000E27 2A                    3041 	ld	a, (hl+)
      000E28 66                    3042 	ld	h, (hl)
      000E29 6F                    3043 	ld	l, a
      000E2A 23                    3044 	inc	hl
      000E2B 23                    3045 	inc	hl
      000E2C 7E                    3046 	ld	a, (hl)
      000E2D E6 0F                 3047 	and	a, #0x0f
      000E2F 16 00                 3048 	ld	d, #0x00
      000E31 5F                    3049 	ld	e, a
      000E32 13                    3050 	inc	de
      000E33 F8 00                 3051 	ldhl	sp,	#0
      000E35 7E                    3052 	ld	a, (hl)
      000E36 93                    3053 	sub	a, e
      000E37 20 17                 3054 	jr	NZ, 00107$
      000E39 23                    3055 	inc	hl
      000E3A 7E                    3056 	ld	a, (hl)
      000E3B 92                    3057 	sub	a, d
      000E3C 20 12                 3058 	jr	NZ, 00107$
      000E3E                       3059 00101$:
                                   3060 ;src/main.c:800: pile_append_cursor_stack(pile);
      000E3E C5                    3061 	push	bc
      000E3F CDr5Cr13              3062 	call	_pile_append_cursor_stack
      000E42 E8 02                 3063 	add	sp, #2
                                   3064 ;src/main.c:801: score--;
      000E44 21r70r01              3065 	ld	hl, #_score + 1
      000E47 2B                    3066 	dec	hl
      000E48 2A                    3067 	ld	a, (hl+)
      000E49 5F                    3068 	ld	e, a
      000E4A 56                    3069 	ld	d, (hl)
      000E4B 1B                    3070 	dec	de
      000E4C 2B                    3071 	dec	hl
      000E4D 7B                    3072 	ld	a, e
      000E4E 22                    3073 	ld	(hl+), a
      000E4F 72                    3074 	ld	(hl), d
      000E50                       3075 00107$:
                                   3076 ;src/main.c:803: }
      000E50 E8 02                 3077 	add	sp, #2
      000E52 C9                    3078 	ret
                                   3079 ;src/main.c:805: void set_cursor_setting(void)
                                   3080 ;	---------------------------------
                                   3081 ; Function set_cursor_setting
                                   3082 ; ---------------------------------
      000E53                       3083 _set_cursor_setting::
                                   3084 ;src/main.c:807: switch (cursor.pile_idx) {
      000E53 21r8Er01              3085 	ld	hl, #_cursor + 6
      000E56 4E                    3086 	ld	c, (hl)
                                   3087 ;src/main.c:810: settings |= cursor.height;
      000E57 11r8Fr01              3088 	ld	de, #_cursor + 7
                                   3089 ;src/main.c:807: switch (cursor.pile_idx) {
      000E5A 79                    3090 	ld	a, c
      000E5B B7                    3091 	or	a, a
      000E5C 28 0F                 3092 	jr	Z, 00101$
      000E5E 79                    3093 	ld	a, c
      000E5F 3D                    3094 	dec	a
      000E60 28 18                 3095 	jr	Z, 00102$
      000E62 79                    3096 	ld	a,c
      000E63 FE 02                 3097 	cp	a,#0x02
      000E65 28 29                 3098 	jr	Z, 00103$
      000E67 D6 03                 3099 	sub	a, #0x03
      000E69 CAr43r15              3100 	jp	Z,_start_game
      000E6C C9                    3101 	ret
                                   3102 ;src/main.c:808: case 0u:
      000E6D                       3103 00101$:
                                   3104 ;src/main.c:809: settings &= ~BITMASK_SETTING_NUM_SUITS;
      000E6D 21r6Dr01              3105 	ld	hl, #_settings
      000E70 7E                    3106 	ld	a, (hl)
      000E71 E6 FC                 3107 	and	a, #0xfc
      000E73 77                    3108 	ld	(hl), a
                                   3109 ;src/main.c:810: settings |= cursor.height;
      000E74 1A                    3110 	ld	a, (de)
      000E75 B6                    3111 	or	a, (hl)
      000E76 77                    3112 	ld	(hl), a
                                   3113 ;src/main.c:811: draw_setting_frame_metasprites();
                                   3114 ;src/main.c:812: break;
      000E77 C3r88r05              3115 	jp  _draw_setting_frame_metasprites
                                   3116 ;src/main.c:813: case 1u:
      000E7A                       3117 00102$:
                                   3118 ;src/main.c:814: settings &= ~BITMASK_SETTING_MUSIC;
      000E7A 21r6Dr01              3119 	ld	hl, #_settings
      000E7D 7E                    3120 	ld	a, (hl)
      000E7E E6 EF                 3121 	and	a, #0xef
      000E80 77                    3122 	ld	(hl), a
                                   3123 ;src/main.c:815: settings |= !cursor.height << BIT_OFFSET_SETTING_MUSIC;
      000E81 1A                    3124 	ld	a, (de)
      000E82 D6 01                 3125 	sub	a,#0x01
      000E84 3E 00                 3126 	ld	a, #0x00
      000E86 17                    3127 	rla
      000E87 CB 37                 3128 	swap	a
      000E89 E6 F0                 3129 	and	a, #0xf0
      000E8B B6                    3130 	or	a, (hl)
      000E8C 77                    3131 	ld	(hl), a
                                   3132 ;src/main.c:816: draw_setting_frame_metasprites();
                                   3133 ;src/main.c:817: break;
      000E8D C3r88r05              3134 	jp  _draw_setting_frame_metasprites
                                   3135 ;src/main.c:818: case 2u:
      000E90                       3136 00103$:
                                   3137 ;src/main.c:819: settings &= ~BITMASK_SETTING_ANIMATION_SPEED;
      000E90 21r6Dr01              3138 	ld	hl, #_settings
      000E93 7E                    3139 	ld	a, (hl)
      000E94 E6 F3                 3140 	and	a, #0xf3
      000E96 77                    3141 	ld	(hl), a
                                   3142 ;src/main.c:820: settings |= cursor.height << BIT_OFFSET_SETTING_ANIMATION_SPEED;
      000E97 1A                    3143 	ld	a, (de)
      000E98 87                    3144 	add	a, a
      000E99 87                    3145 	add	a, a
      000E9A B6                    3146 	or	a, (hl)
      000E9B 77                    3147 	ld	(hl), a
                                   3148 ;src/main.c:821: draw_setting_frame_metasprites();
                                   3149 ;src/main.c:822: break;
                                   3150 ;src/main.c:823: case 3u:
                                   3151 ;src/main.c:824: start_game();
                                   3152 ;src/main.c:826: }
                                   3153 ;src/main.c:827: }
      000E9C C3r88r05              3154 	jp	_draw_setting_frame_metasprites
                                   3155 ;src/main.c:829: void change_cursor_height(const INT8 inc)
                                   3156 ;	---------------------------------
                                   3157 ; Function change_cursor_height
                                   3158 ; ---------------------------------
      000E9F                       3159 _change_cursor_height::
                                   3160 ;src/main.c:831: cursor.height = (INT8)cursor.height + inc;
      000E9F 01r8Fr01              3161 	ld	bc, #_cursor+7
      000EA2 0A                    3162 	ld	a, (bc)
      000EA3 F8 02                 3163 	ldhl	sp,	#2
      000EA5 86                    3164 	add	a, (hl)
      000EA6 02                    3165 	ld	(bc), a
                                   3166 ;src/main.c:832: if (cursor.height < scroll) {
      000EA7 0A                    3167 	ld	a, (bc)
      000EA8 4F                    3168 	ld	c, a
      000EA9 21r6Cr01              3169 	ld	hl, #_scroll
      000EAC 96                    3170 	sub	a, (hl)
      000EAD 30 0E                 3171 	jr	NC, 00104$
                                   3172 ;src/main.c:833: scroll = cursor.height;
      000EAF 71                    3173 	ld	(hl), c
                                   3174 ;src/main.c:834: move_bkg(0, scroll * 8u);
      000EB0 7E                    3175 	ld	a, (hl)
      000EB1 87                    3176 	add	a, a
      000EB2 87                    3177 	add	a, a
      000EB3 87                    3178 	add	a, a
      000EB4 4F                    3179 	ld	c, a
                                   3180 ;/home/wojtek/gbdk/include/gb/gb.h:826: SCX_REG=x, SCY_REG=y;
      000EB5 3E 00                 3181 	ld	a, #0x00
      000EB7 E0r00                 3182 	ldh	(_SCX_REG+0),a
      000EB9 79                    3183 	ld	a, c
      000EBA E0r00                 3184 	ldh	(_SCY_REG+0),a
                                   3185 ;src/main.c:834: move_bkg(0, scroll * 8u);
      000EBC C9                    3186 	ret
      000EBD                       3187 00104$:
                                   3188 ;src/main.c:835: } else if (cursor.height > scroll + 9u) {
      000EBD 21r6Cr01              3189 	ld	hl, #_scroll
      000EC0 5E                    3190 	ld	e, (hl)
      000EC1 16 00                 3191 	ld	d, #0x00
      000EC3 21 09 00              3192 	ld	hl, #0x0009
      000EC6 19                    3193 	add	hl, de
      000EC7 41                    3194 	ld	b, c
      000EC8 1E 00                 3195 	ld	e, #0x00
      000ECA 7D                    3196 	ld	a, l
      000ECB 90                    3197 	sub	a, b
      000ECC 7C                    3198 	ld	a, h
      000ECD 9B                    3199 	sbc	a, e
      000ECE D0                    3200 	ret	NC
                                   3201 ;src/main.c:836: scroll = cursor.height - 9u;
      000ECF 79                    3202 	ld	a, c
      000ED0 C6 F7                 3203 	add	a, #0xf7
      000ED2 21r6Cr01              3204 	ld	hl, #_scroll
      000ED5 77                    3205 	ld	(hl), a
                                   3206 ;src/main.c:837: move_bkg(0, scroll * 8u);
      000ED6 7E                    3207 	ld	a, (hl)
      000ED7 87                    3208 	add	a, a
      000ED8 87                    3209 	add	a, a
      000ED9 87                    3210 	add	a, a
      000EDA 4F                    3211 	ld	c, a
                                   3212 ;/home/wojtek/gbdk/include/gb/gb.h:826: SCX_REG=x, SCY_REG=y;
      000EDB 3E 00                 3213 	ld	a, #0x00
      000EDD E0r00                 3214 	ldh	(_SCX_REG+0),a
      000EDF 79                    3215 	ld	a, c
      000EE0 E0r00                 3216 	ldh	(_SCY_REG+0),a
                                   3217 ;src/main.c:837: move_bkg(0, scroll * 8u);
                                   3218 ;src/main.c:839: }
      000EE2 C9                    3219 	ret
                                   3220 ;src/main.c:841: inline void cursor_process(void)
                                   3221 ;	---------------------------------
                                   3222 ; Function cursor_process
                                   3223 ; ---------------------------------
      000EE3                       3224 _cursor_process::
      000EE3 3B                    3225 	dec	sp
                                   3226 ;src/main.c:843: switch (flags & FLAG_GAME_STATE) {
      000EE4 FAr6Br01              3227 	ld	a, (#_flags)
      000EE7 E6 18                 3228 	and	a, #0x18
      000EE9 4F                    3229 	ld	c, a
      000EEA 06 00                 3230 	ld	b, #0x00
      000EEC 79                    3231 	ld	a, c
      000EED B7                    3232 	or	a, a
      000EEE B0                    3233 	or	a, b
      000EEF CAr71r10              3234 	jp	Z,00127$
                                   3235 ;src/main.c:845: return;
      000EF2 18 00                 3236 	jr	00102$
                                   3237 ;src/main.c:846: }
      000EF4                       3238 00102$:
                                   3239 ;src/main.c:847: cursor.anim_ctr++;
      000EF4 21r90r01              3240 	ld	hl, #_cursor + 8
      000EF7 46                    3241 	ld	b, (hl)
      000EF8 04                    3242 	inc	b
      000EF9 70                    3243 	ld	(hl), b
                                   3244 ;src/main.c:848: cursor.anim_ctr &= (1u << (CURSOR_PERIOD_LOGSCALE + 1u)) - 1u;
      000EFA CB B8                 3245 	res	7, b
      000EFC 70                    3246 	ld	(hl), b
                                   3247 ;src/main.c:849: UINT8 prev_anim_frame = cursor.anim_frame;
      000EFD 21r91r01              3248 	ld	hl, #(_cursor + 0x0009)
      000F00 4E                    3249 	ld	c, (hl)
                                   3250 ;src/main.c:850: cursor.anim_frame = cursor.anim_ctr >> CURSOR_PERIOD_LOGSCALE;
      000F01 78                    3251 	ld	a, b
      000F02 07                    3252 	rlca
      000F03 07                    3253 	rlca
      000F04 E6 03                 3254 	and	a, #0x03
      000F06 EAr91r01              3255 	ld	(#(_cursor + 0x0009)),a
                                   3256 ;src/main.c:851: if (cursor.anim_frame != prev_anim_frame)
      000F09 91                    3257 	sub	a, c
      000F0A 28 07                 3258 	jr	Z, 00104$
                                   3259 ;src/main.c:852: flags |= FLAG_REDRAW_CURSOR;
      000F0C 21r6Br01              3260 	ld	hl, #_flags
      000F0F 7E                    3261 	ld	a, (hl)
      000F10 F6 01                 3262 	or	a, #0x01
      000F12 77                    3263 	ld	(hl), a
      000F13                       3264 00104$:
                                   3265 ;src/main.c:854: if (flags & FLAG_REDRAW_CURSOR) {
      000F13 FAr6Br01              3266 	ld	a, (#_flags)
      000F16 0F                    3267 	rrca
      000F17 D2r0Er10              3268 	jp	NC,00115$
                                   3269 ;src/main.c:855: flags &= ~FLAG_REDRAW_CURSOR;
      000F1A 21r6Br01              3270 	ld	hl, #_flags
      000F1D 7E                    3271 	ld	a, (hl)
      000F1E E6 FE                 3272 	and	a, #0xfe
      000F20 77                    3273 	ld	(hl), a
                                   3274 ;src/main.c:856: switch (flags & FLAG_GAME_STATE) {
      000F21 7E                    3275 	ld	a, (hl)
      000F22 E6 18                 3276 	and	a, #0x18
      000F24 5F                    3277 	ld	e, a
      000F25 16 00                 3278 	ld	d, #0x00
      000F27 7B                    3279 	ld	a, e
      000F28 D6 08                 3280 	sub	a, #0x08
      000F2A B2                    3281 	or	a, d
      000F2B 28 50                 3282 	jr	Z, 00106$
                                   3283 ;src/main.c:862: SETTINGS_PAD_Y * 8u + cursor.pile_idx * 32u
      000F2D 21r8Er01              3284 	ld	hl, #_cursor + 6
                                   3285 ;src/main.c:861: cursor.height * 16u + SETTINGS_SPLIT_X * 8u,
      000F30 01r8Fr01              3286 	ld	bc, #_cursor + 7
                                   3287 ;src/main.c:856: switch (flags & FLAG_GAME_STATE) {
      000F33 7B                    3288 	ld	a, e
      000F34 D6 10                 3289 	sub	a, #0x10
      000F36 B2                    3290 	or	a, d
      000F37 28 70                 3291 	jr	Z, 00109$
      000F39 7B                    3292 	ld	a, e
      000F3A D6 18                 3293 	sub	a, #0x18
      000F3C B2                    3294 	or	a, d
      000F3D C2r0Er10              3295 	jp	NZ,00115$
                                   3296 ;src/main.c:862: SETTINGS_PAD_Y * 8u + cursor.pile_idx * 32u
      000F40 7E                    3297 	ld	a, (hl)
      000F41 CB 37                 3298 	swap	a
      000F43 07                    3299 	rlca
      000F44 E6 E0                 3300 	and	a, #0xe0
      000F46 C6 08                 3301 	add	a, #0x08
      000F48 F8 00                 3302 	ldhl	sp,	#0
      000F4A 77                    3303 	ld	(hl), a
                                   3304 ;src/main.c:861: cursor.height * 16u + SETTINGS_SPLIT_X * 8u,
      000F4B 0A                    3305 	ld	a, (bc)
      000F4C CB 37                 3306 	swap	a
      000F4E E6 F0                 3307 	and	a, #0xf0
      000F50 C6 50                 3308 	add	a, #0x50
      000F52 4F                    3309 	ld	c, a
                                   3310 ;src/main.c:858: move_metasprite(cursor_metasprites[cursor.anim_frame],
      000F53 FAr91r01              3311 	ld	a, (#(_cursor + 0x0009) + 0)
      000F56 26 00                 3312 	ld	h, #0x00
      000F58 6F                    3313 	ld	l, a
      000F59 29                    3314 	add	hl, hl
      000F5A 11r00r00              3315 	ld	de, #_cursor_metasprites
      000F5D 19                    3316 	add	hl, de
      000F5E 2A                    3317 	ld	a, (hl+)
      000F5F 66                    3318 	ld	h, (hl)
                                   3319 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      000F60 EAr00r00              3320 	ld	(___current_metasprite), a
      000F63 7C                    3321 	ld	a, h
      000F64 EAr01r00              3322 	ld	(___current_metasprite + 1), a
                                   3323 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      000F67 21r00r00              3324 	ld	hl, #___current_base_tile
      000F6A 36 01                 3325 	ld	(hl), #0x01
                                   3326 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      000F6C F8 00                 3327 	ldhl	sp,	#0
      000F6E 7E                    3328 	ld	a, (hl)
      000F6F F5                    3329 	push	af
      000F70 33                    3330 	inc	sp
      000F71 51                    3331 	ld	d, c
      000F72 1E 0C                 3332 	ld	e,#0x0c
      000F74 D5                    3333 	push	de
      000F75 CDr00r00              3334 	call	___move_metasprite
      000F78 E8 03                 3335 	add	sp, #3
                                   3336 ;src/main.c:864: break;
      000F7A C3r0Er10              3337 	jp	00115$
                                   3338 ;src/main.c:865: case FLAG_GAME_STATE_LEADERBOARD:
      000F7D                       3339 00106$:
                                   3340 ;src/main.c:866: if (selected_leaderboard) {
      000F7D 21r72r01              3341 	ld	hl, #_selected_leaderboard + 1
      000F80 3A                    3342 	ld	a, (hl-)
      000F81 B6                    3343 	or	a, (hl)
      000F82 CAr0Er10              3344 	jp	Z, 00115$
                                   3345 ;src/main.c:867: set_sprite_tile(SPRITE_FRAME, OFFSET_SPRITE_CURSOR + OFFSET_CURSOR_UNDERLINE + cursor.anim_frame);
      000F85 FAr91r01              3346 	ld	a, (#(_cursor + 0x0009) + 0)
      000F88 C6 09                 3347 	add	a, #0x09
      000F8A 4F                    3348 	ld	c, a
                                   3349 ;/home/wojtek/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      000F8B 21r32r00              3350 	ld	hl, #(_shadow_OAM + 0x0032)
      000F8E 71                    3351 	ld	(hl), c
                                   3352 ;src/main.c:868: move_sprite(SPRITE_FRAME, (LEADERBOARD_NAME_X + 1u) * 8u + cursor.pile_idx * 8u, 16u + cursor.height * 8u);
      000F8F FAr8Fr01              3353 	ld	a, (#(_cursor + 0x0007) + 0)
      000F92 87                    3354 	add	a, a
      000F93 87                    3355 	add	a, a
      000F94 87                    3356 	add	a, a
      000F95 C6 10                 3357 	add	a, #0x10
      000F97 4F                    3358 	ld	c, a
      000F98 FAr8Er01              3359 	ld	a, (#(_cursor + 0x0006) + 0)
      000F9B 87                    3360 	add	a, a
      000F9C 87                    3361 	add	a, a
      000F9D 87                    3362 	add	a, a
      000F9E C6 48                 3363 	add	a, #0x48
      000FA0 5F                    3364 	ld	e, a
                                   3365 ;/home/wojtek/gbdk/include/gb/gb.h:1218: OAM_item_t * itm = &shadow_OAM[nb];
      000FA1 21r30r00              3366 	ld	hl, #(_shadow_OAM + 0x0030)
                                   3367 ;/home/wojtek/gbdk/include/gb/gb.h:1219: itm->y=y, itm->x=x;
      000FA4 79                    3368 	ld	a, c
      000FA5 22                    3369 	ld	(hl+), a
      000FA6 73                    3370 	ld	(hl), e
                                   3371 ;src/main.c:870: break;
      000FA7 18 65                 3372 	jr	00115$
                                   3373 ;src/main.c:871: case FLAG_GAME_STATE_INGAME:
      000FA9                       3374 00109$:
                                   3375 ;src/main.c:872: if (cursor.pile_idx == PILE_IDX_DECK)
      000FA9 7E                    3376 	ld	a, (hl)
      000FAA F8 00                 3377 	ldhl	sp,	#0
      000FAC 77                    3378 	ld	(hl), a
                                   3379 ;src/main.c:849: UINT8 prev_anim_frame = cursor.anim_frame;
      000FAD FAr91r01              3380 	ld	a, (#(_cursor + 0x0009) + 0)
                                   3381 ;src/main.c:873: move_metasprite(cursor_metasprites[cursor.anim_frame],
      000FB0 6F                    3382 	ld	l, a
      000FB1 26 00                 3383 	ld	h, #0x00
      000FB3 29                    3384 	add	hl, hl
      000FB4 5D                    3385 	ld	e, l
      000FB5 54                    3386 	ld	d, h
                                   3387 ;src/main.c:872: if (cursor.pile_idx == PILE_IDX_DECK)
      000FB6 F8 00                 3388 	ldhl	sp,	#0
      000FB8 7E                    3389 	ld	a, (hl)
      000FB9 D6 0A                 3390 	sub	a, #0x0a
      000FBB 20 21                 3391 	jr	NZ, 00111$
                                   3392 ;src/main.c:873: move_metasprite(cursor_metasprites[cursor.anim_frame],
      000FBD 21r00r00              3393 	ld	hl, #_cursor_metasprites
      000FC0 19                    3394 	add	hl, de
      000FC1 2A                    3395 	ld	a, (hl+)
      000FC2 4F                    3396 	ld	c, a
      000FC3 46                    3397 	ld	b, (hl)
                                   3398 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      000FC4 21r00r00              3399 	ld	hl, #___current_metasprite
      000FC7 79                    3400 	ld	a, c
      000FC8 22                    3401 	ld	(hl+), a
      000FC9 70                    3402 	ld	(hl), b
                                   3403 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      000FCA 21r00r00              3404 	ld	hl, #___current_base_tile
      000FCD 36 01                 3405 	ld	(hl), #0x01
                                   3406 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      000FCF AF                    3407 	xor	a, a
      000FD0 F5                    3408 	push	af
      000FD1 33                    3409 	inc	sp
      000FD2 AF                    3410 	xor	a, a
      000FD3 57                    3411 	ld	d,a
      000FD4 1E 0C                 3412 	ld	e,#0x0c
      000FD6 D5                    3413 	push	de
      000FD7 CDr00r00              3414 	call	___move_metasprite
      000FDA E8 03                 3415 	add	sp, #3
                                   3416 ;src/main.c:878: );
      000FDC 18 30                 3417 	jr	00115$
      000FDE                       3418 00111$:
                                   3419 ;src/main.c:884: (cursor.height + 3u - scroll) * 8u
      000FDE 0A                    3420 	ld	a, (bc)
      000FDF C6 03                 3421 	add	a, #0x03
      000FE1 21r6Cr01              3422 	ld	hl, #_scroll
      000FE4 96                    3423 	sub	a, (hl)
      000FE5 87                    3424 	add	a, a
      000FE6 87                    3425 	add	a, a
      000FE7 87                    3426 	add	a, a
      000FE8 4F                    3427 	ld	c, a
                                   3428 ;src/main.c:883: cursor.pile_idx * 16u,
      000FE9 F8 00                 3429 	ldhl	sp,	#0
      000FEB 7E                    3430 	ld	a, (hl)
      000FEC CB 37                 3431 	swap	a
      000FEE E6 F0                 3432 	and	a, #0xf0
      000FF0 47                    3433 	ld	b, a
                                   3434 ;src/main.c:880: move_metasprite(cursor_metasprites[cursor.anim_frame],
      000FF1 21r00r00              3435 	ld	hl, #_cursor_metasprites
      000FF4 19                    3436 	add	hl, de
      000FF5 2A                    3437 	ld	a, (hl+)
      000FF6 66                    3438 	ld	h, (hl)
                                   3439 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      000FF7 EAr00r00              3440 	ld	(___current_metasprite), a
      000FFA 7C                    3441 	ld	a, h
      000FFB EAr01r00              3442 	ld	(___current_metasprite + 1), a
                                   3443 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      000FFE 21r00r00              3444 	ld	hl, #___current_base_tile
      001001 36 01                 3445 	ld	(hl), #0x01
                                   3446 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      001003 79                    3447 	ld	a, c
      001004 F5                    3448 	push	af
      001005 33                    3449 	inc	sp
      001006 0E 0C                 3450 	ld	c, #0x0c
      001008 C5                    3451 	push	bc
      001009 CDr00r00              3452 	call	___move_metasprite
      00100C E8 03                 3453 	add	sp, #3
                                   3454 ;src/main.c:887: }
      00100E                       3455 00115$:
                                   3456 ;src/main.c:890: if (flags & FLAG_REDRAW_HAND) {
      00100E FAr6Br01              3457 	ld	a, (#_flags)
      001011 CB 4F                 3458 	bit	1, a
      001013 28 5C                 3459 	jr	Z, 00127$
                                   3460 ;src/main.c:891: flags &= ~FLAG_REDRAW_HAND;
      001015 21r6Br01              3461 	ld	hl, #_flags
      001018 7E                    3462 	ld	a, (hl)
      001019 E6 FD                 3463 	and	a, #0xfd
      00101B 77                    3464 	ld	(hl), a
                                   3465 ;src/main.c:892: if (cursor.held_card) {
      00101C 21r88r01              3466 	ld	hl, #_cursor
      00101F 2A                    3467 	ld	a, (hl+)
      001020 B6                    3468 	or	a,(hl)
      001021 28 46                 3469 	jr	Z, 00117$
                                   3470 ;src/main.c:893: UINT8 height = piles[cursor.hand_pile_idx].height;
      001023 21r8Dr01              3471 	ld	hl, #(_cursor + 0x0005)
      001026 4E                    3472 	ld	c, (hl)
      001027 06 00                 3473 	ld	b, #0x00
      001029 69                    3474 	ld	l, c
      00102A 60                    3475 	ld	h, b
      00102B 29                    3476 	add	hl, hl
      00102C 29                    3477 	add	hl, hl
      00102D 09                    3478 	add	hl, bc
      00102E 11r38r01              3479 	ld	de, #_piles
      001031 19                    3480 	add	hl, de
      001032 23                    3481 	inc	hl
      001033 23                    3482 	inc	hl
      001034 23                    3483 	inc	hl
      001035 23                    3484 	inc	hl
      001036 5E                    3485 	ld	e, (hl)
                                   3486 ;src/main.c:898: (height + !height + 2u - scroll) * 8u
      001037 7B                    3487 	ld	a, e
      001038 D6 01                 3488 	sub	a,#0x01
      00103A 3E 00                 3489 	ld	a, #0x00
      00103C 17                    3490 	rla
      00103D 83                    3491 	add	a, e
      00103E C6 02                 3492 	add	a, #0x02
      001040 21r6Cr01              3493 	ld	hl, #_scroll
      001043 46                    3494 	ld	b, (hl)
      001044 90                    3495 	sub	a, b
      001045 87                    3496 	add	a, a
      001046 87                    3497 	add	a, a
      001047 87                    3498 	add	a, a
      001048 47                    3499 	ld	b, a
                                   3500 ;src/main.c:897: cursor.hand_pile_idx * 16u,
      001049 79                    3501 	ld	a, c
      00104A CB 37                 3502 	swap	a
      00104C E6 F0                 3503 	and	a, #0xf0
      00104E 57                    3504 	ld	d, a
                                   3505 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      00104F 21r00r00              3506 	ld	hl, #___current_metasprite
      001052 36r00                 3507 	ld	(hl), #<(_metasprite_sequential_2x3)
      001054 23                    3508 	inc	hl
      001055 36s00                 3509 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   3510 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      001057 21r00r00              3511 	ld	hl, #___current_base_tile
      00105A 36 03                 3512 	ld	(hl), #0x03
                                   3513 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      00105C 4A                    3514 	ld	c, d
      00105D C5                    3515 	push	bc
      00105E 3E 06                 3516 	ld	a, #0x06
      001060 F5                    3517 	push	af
      001061 33                    3518 	inc	sp
      001062 CDr00r00              3519 	call	___move_metasprite
      001065 E8 03                 3520 	add	sp, #3
                                   3521 ;src/main.c:899: );
      001067 18 08                 3522 	jr	00127$
      001069                       3523 00117$:
                                   3524 ;src/main.c:901: metasprite_2x3_hide(SPRITE_HAND);
      001069 3E 06                 3525 	ld	a, #0x06
      00106B F5                    3526 	push	af
      00106C 33                    3527 	inc	sp
      00106D CDr28r05              3528 	call	_metasprite_2x3_hide
      001070 33                    3529 	inc	sp
      001071                       3530 00127$:
                                   3531 ;src/main.c:904: }
      001071 33                    3532 	inc	sp
      001072 C9                    3533 	ret
                                   3534 ;src/main.c:910: void init_deck(void)
                                   3535 ;	---------------------------------
                                   3536 ; Function init_deck
                                   3537 ; ---------------------------------
      001073                       3538 _init_deck::
      001073 E8 F0                 3539 	add	sp, #-16
                                   3540 ;src/main.c:912: Card *card = IDX_PTR(deck, 0);
      001075 01r00r00              3541 	ld	bc, #_deck
                                   3542 ;src/main.c:918: UINT8 suit_increment = 4u >> NUM_SUITS(settings);
      001078 FAr6Dr01              3543 	ld	a, (#_settings)
      00107B E6 03                 3544 	and	a, #0x03
      00107D 6F                    3545 	ld	l, a
      00107E 11 04 00              3546 	ld	de, #0x0004
      001081 2C                    3547 	inc	l
      001082 18 04                 3548 	jr	00210$
      001084                       3549 00209$:
      001084 CB 3A                 3550 	srl	d
      001086 CB 1B                 3551 	rr	e
      001088                       3552 00210$:
      001088 2D                    3553 	dec	l
      001089 20 F9                 3554 	jr	NZ, 00209$
      00108B F8 05                 3555 	ldhl	sp,	#5
      00108D 73                    3556 	ld	(hl), e
                                   3557 ;src/main.c:919: UINT8 i_max = suit_increment * 2u;
      00108E 7E                    3558 	ld	a, (hl)
      00108F 87                    3559 	add	a, a
      001090 23                    3560 	inc	hl
      001091 77                    3561 	ld	(hl), a
                                   3562 ;src/main.c:920: for (suit = 0; suit < 4u; suit += suit_increment) {
      001092 AF                    3563 	xor	a, a
      001093 F8 0B                 3564 	ldhl	sp,	#11
      001095 77                    3565 	ld	(hl), a
                                   3566 ;src/main.c:921: for (rank = 0; rank < 13u; rank++) {
      001096                       3567 00131$:
      001096 F8 0B                 3568 	ldhl	sp,	#11
      001098 7E                    3569 	ld	a, (hl)
      001099 CB 37                 3570 	swap	a
      00109B E6 F0                 3571 	and	a, #0xf0
      00109D F8 07                 3572 	ldhl	sp,	#7
      00109F 77                    3573 	ld	(hl), a
      0010A0 AF                    3574 	xor	a, a
      0010A1 F8 0C                 3575 	ldhl	sp,	#12
      0010A3 77                    3576 	ld	(hl), a
                                   3577 ;src/main.c:922: for (i = 0; i < i_max; i++) {
      0010A4                       3578 00130$:
      0010A4 F8 0C                 3579 	ldhl	sp,	#12
      0010A6 7E                    3580 	ld	a, (hl)
      0010A7 F8 07                 3581 	ldhl	sp,	#7
      0010A9 B6                    3582 	or	a, (hl)
      0010AA 23                    3583 	inc	hl
      0010AB 77                    3584 	ld	(hl), a
      0010AC F8 0D                 3585 	ldhl	sp,	#13
      0010AE 79                    3586 	ld	a, c
      0010AF 22                    3587 	ld	(hl+), a
      0010B0 70                    3588 	ld	(hl), b
      0010B1 AF                    3589 	xor	a, a
      0010B2 23                    3590 	inc	hl
      0010B3 77                    3591 	ld	(hl), a
      0010B4                       3592 00112$:
      0010B4 F8 0F                 3593 	ldhl	sp,	#15
      0010B6 7E                    3594 	ld	a, (hl)
      0010B7 F8 06                 3595 	ldhl	sp,	#6
      0010B9 96                    3596 	sub	a, (hl)
      0010BA 30 30                 3597 	jr	NC, 00143$
                                   3598 ;src/main.c:923: card->data = rank | (suit << BIT_OFFSET_CARD_SUIT);
                                   3599 ;c
      0010BC F8 0D                 3600 	ldhl	sp,#13
      0010BE 2A                    3601 	ld	a, (hl+)
      0010BF 5F                    3602 	ld	e, a
      0010C0 56                    3603 	ld	d, (hl)
      0010C1 21 02 00              3604 	ld	hl, #0x0002
      0010C4 19                    3605 	add	hl, de
      0010C5 E5                    3606 	push	hl
      0010C6 7D                    3607 	ld	a, l
      0010C7 F8 0B                 3608 	ldhl	sp,	#11
      0010C9 77                    3609 	ld	(hl), a
      0010CA E1                    3610 	pop	hl
      0010CB 7C                    3611 	ld	a, h
      0010CC F8 0A                 3612 	ldhl	sp,	#10
      0010CE 32                    3613 	ld	(hl-), a
      0010CF 2A                    3614 	ld	a, (hl+)
      0010D0 5F                    3615 	ld	e, a
      0010D1 3A                    3616 	ld	a, (hl-)
      0010D2 57                    3617 	ld	d, a
      0010D3 2B                    3618 	dec	hl
      0010D4 7E                    3619 	ld	a, (hl)
      0010D5 12                    3620 	ld	(de), a
                                   3621 ;src/main.c:924: card++;
                                   3622 ;c
      0010D6 F8 0D                 3623 	ldhl	sp,#13
      0010D8 2A                    3624 	ld	a, (hl+)
      0010D9 5F                    3625 	ld	e, a
      0010DA 56                    3626 	ld	d, (hl)
      0010DB 21 03 00              3627 	ld	hl, #0x0003
      0010DE 19                    3628 	add	hl, de
      0010DF E5                    3629 	push	hl
      0010E0 7D                    3630 	ld	a, l
      0010E1 F8 0F                 3631 	ldhl	sp,	#15
      0010E3 77                    3632 	ld	(hl), a
      0010E4 E1                    3633 	pop	hl
      0010E5 7C                    3634 	ld	a, h
      0010E6 F8 0E                 3635 	ldhl	sp,	#14
                                   3636 ;src/main.c:922: for (i = 0; i < i_max; i++) {
      0010E8 22                    3637 	ld	(hl+), a
      0010E9 34                    3638 	inc	(hl)
      0010EA 18 C8                 3639 	jr	00112$
      0010EC                       3640 00143$:
      0010EC F8 0D                 3641 	ldhl	sp,#13
      0010EE 2A                    3642 	ld	a, (hl+)
      0010EF 4F                    3643 	ld	c, a
                                   3644 ;src/main.c:921: for (rank = 0; rank < 13u; rank++) {
      0010F0 3A                    3645 	ld	a, (hl-)
      0010F1 47                    3646 	ld	b, a
      0010F2 2B                    3647 	dec	hl
      0010F3 34                    3648 	inc	(hl)
      0010F4 7E                    3649 	ld	a, (hl)
      0010F5 D6 0D                 3650 	sub	a, #0x0d
      0010F7 38 AB                 3651 	jr	C, 00130$
                                   3652 ;src/main.c:920: for (suit = 0; suit < 4u; suit += suit_increment) {
      0010F9 2B                    3653 	dec	hl
      0010FA 7E                    3654 	ld	a, (hl)
      0010FB F8 05                 3655 	ldhl	sp,	#5
      0010FD 86                    3656 	add	a, (hl)
      0010FE F8 0B                 3657 	ldhl	sp,	#11
      001100 77                    3658 	ld	(hl), a
      001101 D6 04                 3659 	sub	a, #0x04
      001103 38 91                 3660 	jr	C, 00131$
                                   3661 ;src/main.c:930: card = IDX_PTR(deck, 103u);
      001105 23                    3662 	inc	hl
      001106 23                    3663 	inc	hl
      001107 3Er35                 3664 	ld	a, #<((_deck + 0x0135))
      001109 22                    3665 	ld	(hl+), a
      00110A 36s01                 3666 	ld	(hl), #>((_deck + 0x0135))
                                   3667 ;src/main.c:931: for (i = 103u; i; i--) {
      00110C F8 02                 3668 	ldhl	sp,	#2
      00110E 7D                    3669 	ld	a, l
      00110F 54                    3670 	ld	d, h
      001110 F8 07                 3671 	ldhl	sp,	#7
      001112 22                    3672 	ld	(hl+), a
      001113 7A                    3673 	ld	a, d
      001114 32                    3674 	ld	(hl-), a
      001115 2A                    3675 	ld	a, (hl+)
      001116 5E                    3676 	ld	e, (hl)
      001117 23                    3677 	inc	hl
      001118 22                    3678 	ld	(hl+), a
      001119 73                    3679 	ld	(hl), e
      00111A F8 0F                 3680 	ldhl	sp,	#15
      00111C 36 67                 3681 	ld	(hl), #0x67
      00111E                       3682 00118$:
                                   3683 ;src/main.c:932: Card *swap = IDX_PTR(deck, (UINT8)rand() % i);
      00111E CDr00r00              3684 	call	_rand
      001121 7B                    3685 	ld	a, e
      001122 F8 0F                 3686 	ldhl	sp,	#15
      001124 66                    3687 	ld	h, (hl)
      001125 E5                    3688 	push	hl
      001126 33                    3689 	inc	sp
      001127 F5                    3690 	push	af
      001128 33                    3691 	inc	sp
      001129 CDr00r00              3692 	call	__moduchar
      00112C E8 02                 3693 	add	sp, #2
      00112E 4B                    3694 	ld	c, e
      00112F 06 00                 3695 	ld	b, #0x00
      001131 69                    3696 	ld	l, c
      001132 60                    3697 	ld	h, b
      001133 29                    3698 	add	hl, hl
      001134 09                    3699 	add	hl, bc
      001135 7D                    3700 	ld	a, l
      001136 C6r00                 3701 	add	a, #<(_deck)
      001138 4F                    3702 	ld	c, a
      001139 7C                    3703 	ld	a, h
      00113A CEs00                 3704 	adc	a, #>(_deck)
      00113C 47                    3705 	ld	b, a
      00113D F8 0B                 3706 	ldhl	sp,	#11
      00113F 79                    3707 	ld	a, c
      001140 22                    3708 	ld	(hl+), a
                                   3709 ;src/main.c:934: temp = *card;
      001141 78                    3710 	ld	a, b
      001142 22                    3711 	ld	(hl+), a
      001143 2A                    3712 	ld	a, (hl+)
      001144 5F                    3713 	ld	e, a
      001145 56                    3714 	ld	d, (hl)
      001146 F8 07                 3715 	ldhl	sp,#7
      001148 2A                    3716 	ld	a, (hl+)
      001149 4F                    3717 	ld	c, a
      00114A 46                    3718 	ld	b, (hl)
      00114B 21 03 00              3719 	ld	hl, #0x0003
      00114E E5                    3720 	push	hl
      00114F D5                    3721 	push	de
      001150 C5                    3722 	push	bc
      001151 CDr00r00              3723 	call	___memcpy
      001154 E8 06                 3724 	add	sp, #6
                                   3725 ;src/main.c:935: *card = *swap;
      001156 F8 0B                 3726 	ldhl	sp,#11
      001158 2A                    3727 	ld	a, (hl+)
      001159 5F                    3728 	ld	e, a
      00115A 2A                    3729 	ld	a, (hl+)
      00115B 57                    3730 	ld	d, a
      00115C 2A                    3731 	ld	a, (hl+)
      00115D 4F                    3732 	ld	c, a
      00115E 46                    3733 	ld	b, (hl)
      00115F 21 03 00              3734 	ld	hl, #0x0003
      001162 E5                    3735 	push	hl
      001163 D5                    3736 	push	de
      001164 C5                    3737 	push	bc
      001165 CDr00r00              3738 	call	___memcpy
      001168 E8 06                 3739 	add	sp, #6
                                   3740 ;src/main.c:936: *swap = temp;
      00116A F8 09                 3741 	ldhl	sp,#9
      00116C 2A                    3742 	ld	a, (hl+)
      00116D 5F                    3743 	ld	e, a
      00116E 2A                    3744 	ld	a, (hl+)
      00116F 57                    3745 	ld	d, a
      001170 2A                    3746 	ld	a, (hl+)
      001171 4F                    3747 	ld	c, a
      001172 46                    3748 	ld	b, (hl)
      001173 21 03 00              3749 	ld	hl, #0x0003
      001176 E5                    3750 	push	hl
      001177 D5                    3751 	push	de
      001178 C5                    3752 	push	bc
      001179 CDr00r00              3753 	call	___memcpy
      00117C E8 06                 3754 	add	sp, #6
                                   3755 ;src/main.c:937: card--;
      00117E F8 0D                 3756 	ldhl	sp,#13
      001180 2A                    3757 	ld	a, (hl+)
      001181 5F                    3758 	ld	e, a
      001182 56                    3759 	ld	d, (hl)
      001183 21 03 00              3760 	ld	hl, #0x0003
      001186 7B                    3761 	ld	a, e
      001187 95                    3762 	sub	a, l
      001188 5F                    3763 	ld	e, a
      001189 7A                    3764 	ld	a, d
      00118A 9C                    3765 	sbc	a, h
      00118B F8 0E                 3766 	ldhl	sp,	#14
      00118D 32                    3767 	ld	(hl-), a
                                   3768 ;src/main.c:931: for (i = 103u; i; i--) {
      00118E 7B                    3769 	ld	a, e
      00118F 22                    3770 	ld	(hl+), a
      001190 23                    3771 	inc	hl
      001191 35                    3772 	dec	(hl)
      001192 20 8A                 3773 	jr	NZ, 00118$
                                   3774 ;src/main.c:941: card = IDX_PTR(deck, 0);
      001194 01r00r00              3775 	ld	bc, #_deck
                                   3776 ;src/main.c:942: for (i = 0; i < 44u; i++) {
      001197 AF                    3777 	xor	a, a
      001198 77                    3778 	ld	(hl), a
      001199                       3779 00120$:
                                   3780 ;src/main.c:943: card->next_card = IDX_PTR(deck, i + 10u);
      001199 F8 0F                 3781 	ldhl	sp,	#15
      00119B 5E                    3782 	ld	e, (hl)
      00119C 16 00                 3783 	ld	d, #0x00
      00119E 6B                    3784 	ld	l, e
      00119F 62                    3785 	ld	h, d
      0011A0 29                    3786 	add	hl, hl
      0011A1 19                    3787 	add	hl, de
      0011A2 11r00r00              3788 	ld	de, #_deck
      0011A5 19                    3789 	add	hl, de
      0011A6 11 1E 00              3790 	ld	de, #0x001e
      0011A9 19                    3791 	add	hl, de
      0011AA 5D                    3792 	ld	e, l
      0011AB 54                    3793 	ld	d, h
      0011AC 69                    3794 	ld	l, c
      0011AD 60                    3795 	ld	h, b
      0011AE 7B                    3796 	ld	a, e
      0011AF 22                    3797 	ld	(hl+), a
      0011B0 72                    3798 	ld	(hl), d
                                   3799 ;src/main.c:944: card++;
      0011B1 03                    3800 	inc	bc
      0011B2 03                    3801 	inc	bc
      0011B3 03                    3802 	inc	bc
                                   3803 ;src/main.c:942: for (i = 0; i < 44u; i++) {
      0011B4 F8 0F                 3804 	ldhl	sp,	#15
      0011B6 34                    3805 	inc	(hl)
      0011B7 7E                    3806 	ld	a, (hl)
      0011B8 D6 2C                 3807 	sub	a, #0x2c
      0011BA 38 DD                 3808 	jr	C, 00120$
      0011BC 5E                    3809 	ld	e, (hl)
      0011BD                       3810 00123$:
                                   3811 ;src/main.c:946: for (; i < 104u; i++) {
      0011BD 7B                    3812 	ld	a, e
      0011BE D6 68                 3813 	sub	a, #0x68
      0011C0 30 11                 3814 	jr	NC, 00106$
                                   3815 ;src/main.c:947: card->data |= BITMASK_CARD_VISIBLE;
      0011C2 69                    3816 	ld	l, c
      0011C3 60                    3817 	ld	h, b
      0011C4 23                    3818 	inc	hl
      0011C5 23                    3819 	inc	hl
      0011C6 CB F6                 3820 	set	6, (hl)
                                   3821 ;src/main.c:948: card->next_card = NULL;
      0011C8 69                    3822 	ld	l, c
      0011C9 60                    3823 	ld	h, b
      0011CA AF                    3824 	xor	a, a
      0011CB 22                    3825 	ld	(hl+), a
      0011CC 77                    3826 	ld	(hl), a
                                   3827 ;src/main.c:949: card++;
      0011CD 03                    3828 	inc	bc
      0011CE 03                    3829 	inc	bc
      0011CF 03                    3830 	inc	bc
                                   3831 ;src/main.c:946: for (; i < 104u; i++) {
      0011D0 1C                    3832 	inc	e
      0011D1 18 EA                 3833 	jr	00123$
      0011D3                       3834 00106$:
                                   3835 ;src/main.c:952: card = IDX_PTR(deck, 0);
      0011D3 F8 0B                 3836 	ldhl	sp,	#11
      0011D5 3Er00                 3837 	ld	a, #<(_deck)
      0011D7 22                    3838 	ld	(hl+), a
                                   3839 ;src/main.c:953: Pile *pile = IDX_PTR(piles, 0);
      0011D8 3Es00                 3840 	ld	a, #>(_deck)
      0011DA 22                    3841 	ld	(hl+), a
      0011DB 3Er38                 3842 	ld	a, #<(_piles)
      0011DD 22                    3843 	ld	(hl+), a
      0011DE 36s01                 3844 	ld	(hl), #>(_piles)
                                   3845 ;src/main.c:954: for (i = 0; i < 10; i++) {
      0011E0 AF                    3846 	xor	a, a
      0011E1 23                    3847 	inc	hl
      0011E2 77                    3848 	ld	(hl), a
      0011E3                       3849 00125$:
                                   3850 ;src/main.c:955: pile->base = card;
      0011E3 F8 0D                 3851 	ldhl	sp,#13
      0011E5 2A                    3852 	ld	a, (hl+)
      0011E6 5F                    3853 	ld	e, a
      0011E7 56                    3854 	ld	d, (hl)
      0011E8 F8 0B                 3855 	ldhl	sp,	#11
      0011EA 7E                    3856 	ld	a, (hl)
      0011EB 12                    3857 	ld	(de), a
      0011EC 13                    3858 	inc	de
      0011ED 23                    3859 	inc	hl
      0011EE 7E                    3860 	ld	a, (hl)
      0011EF 12                    3861 	ld	(de), a
                                   3862 ;src/main.c:957: pile->top = IDX_PTR(deck, 50u + i);
                                   3863 ;c
      0011F0 23                    3864 	inc	hl
      0011F1 2A                    3865 	ld	a, (hl+)
      0011F2 5F                    3866 	ld	e, a
      0011F3 56                    3867 	ld	d, (hl)
      0011F4 21 02 00              3868 	ld	hl, #0x0002
      0011F7 19                    3869 	add	hl, de
      0011F8 E5                    3870 	push	hl
      0011F9 7D                    3871 	ld	a, l
      0011FA F8 07                 3872 	ldhl	sp,	#7
      0011FC 77                    3873 	ld	(hl), a
      0011FD E1                    3874 	pop	hl
      0011FE 7C                    3875 	ld	a, h
      0011FF F8 06                 3876 	ldhl	sp,	#6
      001201 77                    3877 	ld	(hl), a
      001202 F8 0F                 3878 	ldhl	sp,	#15
      001204 4E                    3879 	ld	c, (hl)
      001205 06 00                 3880 	ld	b, #0x00
      001207 69                    3881 	ld	l, c
      001208 60                    3882 	ld	h, b
      001209 29                    3883 	add	hl, hl
      00120A 09                    3884 	add	hl, bc
      00120B 33                    3885 	inc	sp
      00120C 33                    3886 	inc	sp
      00120D E5                    3887 	push	hl
                                   3888 ;src/main.c:958: pile->height = 6u;
                                   3889 ;c
      00120E F8 0D                 3890 	ldhl	sp,#13
      001210 2A                    3891 	ld	a, (hl+)
      001211 5F                    3892 	ld	e, a
      001212 56                    3893 	ld	d, (hl)
      001213 21 04 00              3894 	ld	hl, #0x0004
      001216 19                    3895 	add	hl, de
      001217 E5                    3896 	push	hl
      001218 7D                    3897 	ld	a, l
      001219 F8 09                 3898 	ldhl	sp,	#9
      00121B 77                    3899 	ld	(hl), a
      00121C E1                    3900 	pop	hl
      00121D 7C                    3901 	ld	a, h
      00121E F8 08                 3902 	ldhl	sp,	#8
      001220 77                    3903 	ld	(hl), a
                                   3904 ;src/main.c:956: if (i < 4u) {
      001221 F8 0F                 3905 	ldhl	sp,	#15
      001223 7E                    3906 	ld	a, (hl)
      001224 D6 04                 3907 	sub	a, #0x04
      001226 30 26                 3908 	jr	NC, 00108$
                                   3909 ;src/main.c:957: pile->top = IDX_PTR(deck, 50u + i);
                                   3910 ;c
      001228 D1                    3911 	pop	de
      001229 D5                    3912 	push	de
      00122A 21r96r00              3913 	ld	hl, #(_deck + 0x0096)
      00122D 19                    3914 	add	hl, de
      00122E E5                    3915 	push	hl
      00122F 7D                    3916 	ld	a, l
      001230 F8 0B                 3917 	ldhl	sp,	#11
      001232 77                    3918 	ld	(hl), a
      001233 E1                    3919 	pop	hl
      001234 7C                    3920 	ld	a, h
      001235 F8 0A                 3921 	ldhl	sp,	#10
      001237 77                    3922 	ld	(hl), a
      001238 F8 05                 3923 	ldhl	sp,#5
      00123A 2A                    3924 	ld	a, (hl+)
      00123B 5F                    3925 	ld	e, a
      00123C 56                    3926 	ld	d, (hl)
      00123D F8 09                 3927 	ldhl	sp,	#9
      00123F 7E                    3928 	ld	a, (hl)
      001240 12                    3929 	ld	(de), a
      001241 13                    3930 	inc	de
      001242 23                    3931 	inc	hl
      001243 7E                    3932 	ld	a, (hl)
      001244 12                    3933 	ld	(de), a
                                   3934 ;src/main.c:958: pile->height = 6u;
      001245 F8 07                 3935 	ldhl	sp,	#7
      001247 2A                    3936 	ld	a, (hl+)
      001248 66                    3937 	ld	h, (hl)
      001249 6F                    3938 	ld	l, a
      00124A 36 06                 3939 	ld	(hl), #0x06
      00124C 18 17                 3940 	jr	00109$
      00124E                       3941 00108$:
                                   3942 ;src/main.c:960: pile->top = IDX_PTR(deck, 40u + i);
                                   3943 ;c
      00124E 11r78r00              3944 	ld	de, #(_deck + 0x0078)
      001251 E1                    3945 	pop	hl
      001252 E5                    3946 	push	hl
      001253 19                    3947 	add	hl, de
      001254 4D                    3948 	ld	c, l
      001255 44                    3949 	ld	b, h
      001256 F8 05                 3950 	ldhl	sp,	#5
      001258 2A                    3951 	ld	a, (hl+)
      001259 66                    3952 	ld	h, (hl)
      00125A 6F                    3953 	ld	l, a
      00125B 79                    3954 	ld	a, c
      00125C 22                    3955 	ld	(hl+), a
      00125D 70                    3956 	ld	(hl), b
                                   3957 ;src/main.c:961: pile->height = 5u;
      00125E F8 07                 3958 	ldhl	sp,	#7
      001260 2A                    3959 	ld	a, (hl+)
      001261 66                    3960 	ld	h, (hl)
      001262 6F                    3961 	ld	l, a
      001263 36 05                 3962 	ld	(hl), #0x05
      001265                       3963 00109$:
                                   3964 ;src/main.c:964: card++;
                                   3965 ;c
      001265 F8 0B                 3966 	ldhl	sp,#11
      001267 2A                    3967 	ld	a, (hl+)
      001268 5F                    3968 	ld	e, a
      001269 56                    3969 	ld	d, (hl)
      00126A 21 03 00              3970 	ld	hl, #0x0003
      00126D 19                    3971 	add	hl, de
      00126E E5                    3972 	push	hl
      00126F 7D                    3973 	ld	a, l
      001270 F8 0D                 3974 	ldhl	sp,	#13
      001272 77                    3975 	ld	(hl), a
      001273 E1                    3976 	pop	hl
      001274 7C                    3977 	ld	a, h
      001275 F8 0C                 3978 	ldhl	sp,	#12
                                   3979 ;src/main.c:965: pile++;
                                   3980 ;c
      001277 22                    3981 	ld	(hl+), a
      001278 2A                    3982 	ld	a, (hl+)
      001279 5F                    3983 	ld	e, a
      00127A 56                    3984 	ld	d, (hl)
      00127B 21 05 00              3985 	ld	hl, #0x0005
      00127E 19                    3986 	add	hl, de
      00127F E5                    3987 	push	hl
      001280 7D                    3988 	ld	a, l
      001281 F8 0F                 3989 	ldhl	sp,	#15
      001283 77                    3990 	ld	(hl), a
      001284 E1                    3991 	pop	hl
      001285 7C                    3992 	ld	a, h
      001286 F8 0E                 3993 	ldhl	sp,	#14
                                   3994 ;src/main.c:954: for (i = 0; i < 10; i++) {
      001288 22                    3995 	ld	(hl+), a
      001289 34                    3996 	inc	(hl)
      00128A 7E                    3997 	ld	a, (hl)
      00128B D6 0A                 3998 	sub	a, #0x0a
      00128D DArE3r11              3999 	jp	C, 00125$
                                   4000 ;src/main.c:968: top_card_idx = 54u;
      001290 21r6Ar01              4001 	ld	hl, #_top_card_idx
      001293 36 36                 4002 	ld	(hl), #0x36
                                   4003 ;src/main.c:969: }
      001295 E8 10                 4004 	add	sp, #16
      001297 C9                    4005 	ret
                                   4006 ;src/main.c:971: UINT8 is_stack_coherent(Card *card)
                                   4007 ;	---------------------------------
                                   4008 ; Function is_stack_coherent
                                   4009 ; ---------------------------------
      001298                       4010 _is_stack_coherent::
      001298 E8 FE                 4011 	add	sp, #-2
                                   4012 ;src/main.c:973: while (card->next_card) {
      00129A                       4013 00103$:
      00129A F8 04                 4014 	ldhl	sp,#4
      00129C 2A                    4015 	ld	a, (hl+)
      00129D 4F                    4016 	ld	c, a
      00129E 46                    4017 	ld	b, (hl)
      00129F 59                    4018 	ld	e, c
      0012A0 50                    4019 	ld	d, b
      0012A1 1A                    4020 	ld	a, (de)
      0012A2 F8 00                 4021 	ldhl	sp,	#0
      0012A4 22                    4022 	ld	(hl+), a
      0012A5 13                    4023 	inc	de
      0012A6 1A                    4024 	ld	a, (de)
      0012A7 77                    4025 	ld	(hl), a
      0012A8 3A                    4026 	ld	a, (hl-)
      0012A9 B6                    4027 	or	a, (hl)
      0012AA 28 27                 4028 	jr	Z, 00105$
                                   4029 ;src/main.c:974: UINT8 prev_data = card->data;
      0012AC 03                    4030 	inc	bc
      0012AD 03                    4031 	inc	bc
      0012AE 78                    4032 	ld	a, b
      0012AF 69                    4033 	ld	l, c
      0012B0 67                    4034 	ld	h, a
      0012B1 4E                    4035 	ld	c, (hl)
                                   4036 ;src/main.c:975: card = card->next_card;
      0012B2 F8 00                 4037 	ldhl	sp,	#0
      0012B4 2A                    4038 	ld	a, (hl+)
      0012B5 5E                    4039 	ld	e, (hl)
      0012B6 F8 04                 4040 	ldhl	sp,	#4
      0012B8 22                    4041 	ld	(hl+), a
                                   4042 ;src/main.c:976: if (prev_data != card->data + 1u)
      0012B9 7B                    4043 	ld	a, e
      0012BA 32                    4044 	ld	(hl-), a
      0012BB 2A                    4045 	ld	a, (hl+)
      0012BC 5F                    4046 	ld	e, a
      0012BD 56                    4047 	ld	d, (hl)
      0012BE 13                    4048 	inc	de
      0012BF 13                    4049 	inc	de
      0012C0 1A                    4050 	ld	a, (de)
      0012C1 5F                    4051 	ld	e, a
      0012C2 16 00                 4052 	ld	d, #0x00
      0012C4 13                    4053 	inc	de
      0012C5 06 00                 4054 	ld	b, #0x00
      0012C7 79                    4055 	ld	a, c
      0012C8 93                    4056 	sub	a, e
      0012C9 20 04                 4057 	jr	NZ, 00123$
      0012CB 78                    4058 	ld	a, b
      0012CC 92                    4059 	sub	a, d
      0012CD 28 CB                 4060 	jr	Z, 00103$
      0012CF                       4061 00123$:
                                   4062 ;src/main.c:977: return 0u;
      0012CF 1E 00                 4063 	ld	e, #0x00
      0012D1 18 02                 4064 	jr	00106$
      0012D3                       4065 00105$:
                                   4066 ;src/main.c:979: return 1u;
      0012D3 1E 01                 4067 	ld	e, #0x01
      0012D5                       4068 00106$:
                                   4069 ;src/main.c:980: }
      0012D5 E8 02                 4070 	add	sp, #2
      0012D7 C9                    4071 	ret
                                   4072 ;src/main.c:982: inline void deal(void)
                                   4073 ;	---------------------------------
                                   4074 ; Function deal
                                   4075 ; ---------------------------------
      0012D8                       4076 _deal::
      0012D8 E8 FB                 4077 	add	sp, #-5
                                   4078 ;src/main.c:985: Pile *pile = IDX_PTR(piles, 0);
      0012DA 01r38r01              4079 	ld	bc, #_piles
                                   4080 ;src/main.c:988: for (i = 0; i < 10u; i++) {
      0012DD 1E 00                 4081 	ld	e, #0x00
      0012DF                       4082 00105$:
                                   4083 ;src/main.c:989: if (!pile->height)
      0012DF 21 04 00              4084 	ld	hl, #0x0004
      0012E2 09                    4085 	add	hl, bc
      0012E3 7E                    4086 	ld	a, (hl)
      0012E4 B7                    4087 	or	a, a
                                   4088 ;src/main.c:990: return;
      0012E5 28 72                 4089 	jr	Z, 00110$
                                   4090 ;src/main.c:991: pile++;
      0012E7 03                    4091 	inc	bc
      0012E8 03                    4092 	inc	bc
      0012E9 03                    4093 	inc	bc
      0012EA 03                    4094 	inc	bc
      0012EB 03                    4095 	inc	bc
                                   4096 ;src/main.c:988: for (i = 0; i < 10u; i++) {
      0012EC 1C                    4097 	inc	e
      0012ED 7B                    4098 	ld	a, e
      0012EE D6 0A                 4099 	sub	a, #0x0a
      0012F0 38 ED                 4100 	jr	C, 00105$
                                   4101 ;src/main.c:994: pile = IDX_PTR(piles, 0);
      0012F2 F8 02                 4102 	ldhl	sp,	#2
      0012F4 3Er38                 4103 	ld	a, #<(_piles)
      0012F6 22                    4104 	ld	(hl+), a
      0012F7 36s01                 4105 	ld	(hl), #>(_piles)
                                   4106 ;src/main.c:995: Card *deck_top = IDX_PTR(deck, top_card_idx);
      0012F9 21r6Ar01              4107 	ld	hl, #_top_card_idx
      0012FC 4E                    4108 	ld	c, (hl)
      0012FD 06 00                 4109 	ld	b, #0x00
      0012FF 69                    4110 	ld	l, c
      001300 60                    4111 	ld	h, b
      001301 29                    4112 	add	hl, hl
      001302 09                    4113 	add	hl, bc
      001303 01r00r00              4114 	ld	bc,#_deck
      001306 09                    4115 	add	hl,bc
      001307 4D                    4116 	ld	c, l
      001308 44                    4117 	ld	b, h
                                   4118 ;src/main.c:996: top_card_idx += 10u;
      001309 21r6Ar01              4119 	ld	hl, #_top_card_idx
      00130C 7E                    4120 	ld	a, (hl)
      00130D C6 0A                 4121 	add	a, #0x0a
      00130F 77                    4122 	ld	(hl), a
                                   4123 ;src/main.c:999: for (i = 0; i < 10u; i++) {
      001310 F8 04                 4124 	ldhl	sp,	#4
      001312 36 0A                 4125 	ld	(hl), #0x0a
      001314                       4126 00109$:
                                   4127 ;src/main.c:1000: pile->top->next_card = deck_top;
                                   4128 ;c
      001314 F8 02                 4129 	ldhl	sp,#2
      001316 2A                    4130 	ld	a, (hl+)
      001317 5F                    4131 	ld	e, a
      001318 56                    4132 	ld	d, (hl)
      001319 21 02 00              4133 	ld	hl, #0x0002
      00131C 19                    4134 	add	hl, de
      00131D 33                    4135 	inc	sp
      00131E 33                    4136 	inc	sp
      00131F 5D                    4137 	ld	e, l
      001320 54                    4138 	ld	d, h
      001321 D5                    4139 	push	de
      001322 1A                    4140 	ld	a, (de)
      001323 6F                    4141 	ld	l, a
      001324 13                    4142 	inc	de
      001325 1A                    4143 	ld	a, (de)
      001326 67                    4144 	ld	h, a
      001327 79                    4145 	ld	a, c
      001328 22                    4146 	ld	(hl+), a
      001329 70                    4147 	ld	(hl), b
                                   4148 ;src/main.c:1001: pile->top = deck_top;
      00132A E1                    4149 	pop	hl
      00132B E5                    4150 	push	hl
      00132C 79                    4151 	ld	a, c
      00132D 22                    4152 	ld	(hl+), a
      00132E 70                    4153 	ld	(hl), b
                                   4154 ;src/main.c:1002: pile->height++;
                                   4155 ;c
      00132F F8 02                 4156 	ldhl	sp,#2
      001331 2A                    4157 	ld	a, (hl+)
      001332 5F                    4158 	ld	e, a
      001333 56                    4159 	ld	d, (hl)
      001334 21 04 00              4160 	ld	hl, #0x0004
      001337 19                    4161 	add	hl, de
      001338 5D                    4162 	ld	e, l
      001339 54                    4163 	ld	d, h
      00133A 1A                    4164 	ld	a, (de)
      00133B 3C                    4165 	inc	a
      00133C 12                    4166 	ld	(de), a
                                   4167 ;src/main.c:1003: deck_top++;
      00133D 03                    4168 	inc	bc
      00133E 03                    4169 	inc	bc
      00133F 03                    4170 	inc	bc
                                   4171 ;src/main.c:1004: pile++;
                                   4172 ;c
      001340 F8 02                 4173 	ldhl	sp,#2
      001342 2A                    4174 	ld	a, (hl+)
      001343 5F                    4175 	ld	e, a
      001344 56                    4176 	ld	d, (hl)
      001345 21 05 00              4177 	ld	hl, #0x0005
      001348 19                    4178 	add	hl, de
      001349 E5                    4179 	push	hl
      00134A 7D                    4180 	ld	a, l
      00134B F8 04                 4181 	ldhl	sp,	#4
      00134D 77                    4182 	ld	(hl), a
      00134E E1                    4183 	pop	hl
      00134F 7C                    4184 	ld	a, h
      001350 F8 03                 4185 	ldhl	sp,	#3
      001352 22                    4186 	ld	(hl+), a
                                   4187 ;src/main.c:999: for (i = 0; i < 10u; i++) {
      001353 35                    4188 	dec	(hl)
      001354 20 BE                 4189 	jr	NZ, 00109$
                                   4190 ;src/main.c:1007: dynamic_metasprite_deal();
      001356 CDr8Cr0B              4191 	call	_dynamic_metasprite_deal
      001359                       4192 00110$:
                                   4193 ;src/main.c:1008: }
      001359 E8 05                 4194 	add	sp, #5
      00135B C9                    4195 	ret
                                   4196 ;src/main.c:1010: void pile_append_cursor_stack(Pile *pile)
                                   4197 ;	---------------------------------
                                   4198 ; Function pile_append_cursor_stack
                                   4199 ; ---------------------------------
      00135C                       4200 _pile_append_cursor_stack::
      00135C E8 F3                 4201 	add	sp, #-13
                                   4202 ;src/main.c:1012: if (pile->height)
      00135E F8 0F                 4203 	ldhl	sp,	#15
      001360 2A                    4204 	ld	a, (hl+)
      001361 5E                    4205 	ld	e, (hl)
      001362 F8 00                 4206 	ldhl	sp,	#0
      001364 22                    4207 	ld	(hl+), a
      001365 73                    4208 	ld	(hl), e
                                   4209 ;c
      001366 D1                    4210 	pop	de
      001367 D5                    4211 	push	de
      001368 21 04 00              4212 	ld	hl, #0x0004
      00136B 19                    4213 	add	hl, de
      00136C E5                    4214 	push	hl
      00136D 7D                    4215 	ld	a, l
      00136E F8 04                 4216 	ldhl	sp,	#4
      001370 77                    4217 	ld	(hl), a
      001371 E1                    4218 	pop	hl
      001372 7C                    4219 	ld	a, h
      001373 F8 03                 4220 	ldhl	sp,	#3
      001375 32                    4221 	ld	(hl-), a
      001376 2A                    4222 	ld	a, (hl+)
      001377 5F                    4223 	ld	e, a
      001378 56                    4224 	ld	d, (hl)
      001379 1A                    4225 	ld	a, (de)
      00137A F8 0C                 4226 	ldhl	sp,	#12
      00137C 77                    4227 	ld	(hl), a
                                   4228 ;src/main.c:1013: pile->top->next_card = cursor.held_card;
                                   4229 ;c
      00137D D1                    4230 	pop	de
      00137E D5                    4231 	push	de
      00137F 21 02 00              4232 	ld	hl, #0x0002
      001382 19                    4233 	add	hl, de
      001383 E5                    4234 	push	hl
      001384 7D                    4235 	ld	a, l
      001385 F8 06                 4236 	ldhl	sp,	#6
      001387 77                    4237 	ld	(hl), a
      001388 E1                    4238 	pop	hl
      001389 7C                    4239 	ld	a, h
      00138A F8 05                 4240 	ldhl	sp,	#5
      00138C 77                    4241 	ld	(hl), a
                                   4242 ;src/main.c:1012: if (pile->height)
      00138D F8 0C                 4243 	ldhl	sp,	#12
      00138F 7E                    4244 	ld	a, (hl)
      001390 B7                    4245 	or	a, a
      001391 28 1C                 4246 	jr	Z, 00102$
                                   4247 ;src/main.c:1013: pile->top->next_card = cursor.held_card;
      001393 F8 04                 4248 	ldhl	sp,#4
      001395 2A                    4249 	ld	a, (hl+)
      001396 5F                    4250 	ld	e, a
      001397 56                    4251 	ld	d, (hl)
      001398 1A                    4252 	ld	a, (de)
      001399 F8 0B                 4253 	ldhl	sp,	#11
      00139B 22                    4254 	ld	(hl+), a
      00139C 13                    4255 	inc	de
      00139D 1A                    4256 	ld	a, (de)
      00139E 77                    4257 	ld	(hl), a
      00139F 21r88r01              4258 	ld	hl, #_cursor
      0013A2 2A                    4259 	ld	a, (hl+)
      0013A3 4F                    4260 	ld	c, a
      0013A4 46                    4261 	ld	b, (hl)
      0013A5 F8 0B                 4262 	ldhl	sp,	#11
      0013A7 2A                    4263 	ld	a, (hl+)
      0013A8 66                    4264 	ld	h, (hl)
      0013A9 6F                    4265 	ld	l, a
      0013AA 79                    4266 	ld	a, c
      0013AB 22                    4267 	ld	(hl+), a
      0013AC 70                    4268 	ld	(hl), b
      0013AD 18 13                 4269 	jr	00103$
      0013AF                       4270 00102$:
                                   4271 ;src/main.c:1015: pile->base = cursor.held_card;
      0013AF 11r88r01              4272 	ld	de, #_cursor
      0013B2 1A                    4273 	ld	a, (de)
      0013B3 F8 0B                 4274 	ldhl	sp,	#11
      0013B5 22                    4275 	ld	(hl+), a
      0013B6 13                    4276 	inc	de
      0013B7 1A                    4277 	ld	a, (de)
      0013B8 77                    4278 	ld	(hl), a
      0013B9 D1                    4279 	pop	de
      0013BA D5                    4280 	push	de
      0013BB 2B                    4281 	dec	hl
      0013BC 7E                    4282 	ld	a, (hl)
      0013BD 12                    4283 	ld	(de), a
      0013BE 13                    4284 	inc	de
      0013BF 23                    4285 	inc	hl
      0013C0 7E                    4286 	ld	a, (hl)
      0013C1 12                    4287 	ld	(de), a
      0013C2                       4288 00103$:
                                   4289 ;src/main.c:1017: Pile *src_pile = IDX_PTR(piles, cursor.pile_idx);
      0013C2 01r38r01              4290 	ld	bc, #_piles+0
      0013C5 FAr8Er01              4291 	ld	a, (#(_cursor + 0x0006) + 0)
      0013C8 5F                    4292 	ld	e, a
      0013C9 16 00                 4293 	ld	d, #0x00
      0013CB 6B                    4294 	ld	l, e
      0013CC 62                    4295 	ld	h, d
      0013CD 29                    4296 	add	hl, hl
      0013CE 29                    4297 	add	hl, hl
      0013CF 19                    4298 	add	hl, de
      0013D0 09                    4299 	add	hl, bc
      0013D1 4D                    4300 	ld	c, l
      0013D2 7C                    4301 	ld	a, h
      0013D3 F8 06                 4302 	ldhl	sp,	#6
      0013D5 71                    4303 	ld	(hl), c
      0013D6 23                    4304 	inc	hl
      0013D7 77                    4305 	ld	(hl), a
                                   4306 ;src/main.c:1018: Card *top_card = cursor.held_card;
      0013D8 11r88r01              4307 	ld	de, #_cursor
      0013DB 1A                    4308 	ld	a, (de)
      0013DC 23                    4309 	inc	hl
      0013DD 22                    4310 	ld	(hl+), a
      0013DE 13                    4311 	inc	de
      0013DF 1A                    4312 	ld	a, (de)
      0013E0 77                    4313 	ld	(hl), a
                                   4314 ;src/main.c:1019: while (top_card->next_card)
      0013E1                       4315 00104$:
      0013E1 F8 08                 4316 	ldhl	sp,#8
      0013E3 2A                    4317 	ld	a, (hl+)
      0013E4 5F                    4318 	ld	e, a
      0013E5 56                    4319 	ld	d, (hl)
      0013E6 1A                    4320 	ld	a, (de)
      0013E7 23                    4321 	inc	hl
      0013E8 23                    4322 	inc	hl
      0013E9 22                    4323 	ld	(hl+), a
      0013EA 13                    4324 	inc	de
      0013EB 1A                    4325 	ld	a, (de)
      0013EC 77                    4326 	ld	(hl), a
      0013ED 3A                    4327 	ld	a, (hl-)
      0013EE B6                    4328 	or	a, (hl)
      0013EF 28 08                 4329 	jr	Z, 00106$
                                   4330 ;src/main.c:1020: top_card = top_card->next_card;
      0013F1 2A                    4331 	ld	a, (hl+)
      0013F2 5E                    4332 	ld	e, (hl)
      0013F3 F8 08                 4333 	ldhl	sp,	#8
      0013F5 22                    4334 	ld	(hl+), a
      0013F6 73                    4335 	ld	(hl), e
      0013F7 18 E8                 4336 	jr	00104$
      0013F9                       4337 00106$:
                                   4338 ;src/main.c:1021: pile->top = top_card;
      0013F9 F8 04                 4339 	ldhl	sp,#4
      0013FB 2A                    4340 	ld	a, (hl+)
      0013FC 5F                    4341 	ld	e, a
      0013FD 56                    4342 	ld	d, (hl)
      0013FE F8 08                 4343 	ldhl	sp,	#8
      001400 7E                    4344 	ld	a, (hl)
      001401 12                    4345 	ld	(de), a
      001402 13                    4346 	inc	de
      001403 23                    4347 	inc	hl
      001404 7E                    4348 	ld	a, (hl)
      001405 12                    4349 	ld	(de), a
                                   4350 ;src/main.c:1022: cursor.height = pile->height - !!pile->height;
      001406 F8 02                 4351 	ldhl	sp,#2
      001408 2A                    4352 	ld	a, (hl+)
      001409 5F                    4353 	ld	e, a
      00140A 56                    4354 	ld	d, (hl)
      00140B 1A                    4355 	ld	a, (de)
      00140C 47                    4356 	ld	b, a
      00140D D6 01                 4357 	sub	a,#0x01
      00140F 3E 00                 4358 	ld	a, #0x00
      001411 17                    4359 	rla
      001412 EE 01                 4360 	xor	a, #0x01
      001414 4F                    4361 	ld	c, a
      001415 78                    4362 	ld	a, b
      001416 91                    4363 	sub	a, c
      001417 EAr8Fr01              4364 	ld	(#(_cursor + 0x0007)),a
                                   4365 ;src/main.c:1023: pile->height += cursor.held_stack_size;
      00141A F8 02                 4366 	ldhl	sp,#2
      00141C 2A                    4367 	ld	a, (hl+)
      00141D 5F                    4368 	ld	e, a
      00141E 56                    4369 	ld	d, (hl)
      00141F 1A                    4370 	ld	a, (de)
      001420 4F                    4371 	ld	c, a
      001421 FAr8Cr01              4372 	ld	a, (#(_cursor + 0x0004) + 0)
      001424 81                    4373 	add	a, c
      001425 4F                    4374 	ld	c, a
      001426 2B                    4375 	dec	hl
      001427 2A                    4376 	ld	a, (hl+)
      001428 66                    4377 	ld	h, (hl)
      001429 6F                    4378 	ld	l, a
      00142A 71                    4379 	ld	(hl), c
                                   4380 ;src/main.c:1024: if (cursor.hand_pile_idx != cursor.pile_idx) {
      00142B FAr8Dr01              4381 	ld	a, (#(_cursor + 0x0005) + 0)
      00142E 21r8Er01              4382 	ld	hl, #(_cursor + 0x0006)
      001431 4E                    4383 	ld	c, (hl)
      001432 91                    4384 	sub	a, c
      001433 CAr2Dr15              4385 	jp	Z,00116$
                                   4386 ;src/main.c:1025: UINT8 piles_to_clear = 0;
      001436 AF                    4387 	xor	a, a
      001437 F8 0C                 4388 	ldhl	sp,	#12
      001439 77                    4389 	ld	(hl), a
                                   4390 ;src/main.c:1026: if (src_pile->height == 13u && is_stack_coherent(src_pile->base)) {
                                   4391 ;c
      00143A F8 06                 4392 	ldhl	sp,#6
      00143C 2A                    4393 	ld	a, (hl+)
      00143D 5F                    4394 	ld	e, a
      00143E 56                    4395 	ld	d, (hl)
      00143F 21 04 00              4396 	ld	hl, #0x0004
      001442 19                    4397 	add	hl, de
      001443 E5                    4398 	push	hl
      001444 7D                    4399 	ld	a, l
      001445 F8 0C                 4400 	ldhl	sp,	#12
      001447 77                    4401 	ld	(hl), a
      001448 E1                    4402 	pop	hl
      001449 7C                    4403 	ld	a, h
      00144A F8 0B                 4404 	ldhl	sp,	#11
      00144C 32                    4405 	ld	(hl-), a
      00144D 2A                    4406 	ld	a, (hl+)
      00144E 5F                    4407 	ld	e, a
      00144F 56                    4408 	ld	d, (hl)
      001450 1A                    4409 	ld	a, (de)
      001451 D6 0D                 4410 	sub	a, #0x0d
      001453 20 1A                 4411 	jr	NZ, 00108$
      001455 F8 06                 4412 	ldhl	sp,#6
      001457 2A                    4413 	ld	a, (hl+)
      001458 5F                    4414 	ld	e, a
      001459 56                    4415 	ld	d, (hl)
      00145A 1A                    4416 	ld	a, (de)
      00145B 4F                    4417 	ld	c, a
      00145C 13                    4418 	inc	de
      00145D 1A                    4419 	ld	a, (de)
      00145E 47                    4420 	ld	b, a
      00145F C5                    4421 	push	bc
      001460 CDr98r12              4422 	call	_is_stack_coherent
      001463 E8 02                 4423 	add	sp, #2
      001465 7B                    4424 	ld	a, e
      001466 B7                    4425 	or	a, a
      001467 28 06                 4426 	jr	Z, 00108$
                                   4427 ;src/main.c:1027: piles_to_clear = cursor.pile_idx;
      001469 FAr8Er01              4428 	ld	a, (#(_cursor + 0x0006) + 0)
      00146C F8 0C                 4429 	ldhl	sp,	#12
      00146E 77                    4430 	ld	(hl), a
      00146F                       4431 00108$:
                                   4432 ;src/main.c:1029: if (pile->height == 13u && is_stack_coherent(pile->base)) {
      00146F F8 02                 4433 	ldhl	sp,#2
      001471 2A                    4434 	ld	a, (hl+)
      001472 5F                    4435 	ld	e, a
      001473 56                    4436 	ld	d, (hl)
      001474 1A                    4437 	ld	a, (de)
      001475 D6 0D                 4438 	sub	a, #0x0d
      001477 20 32                 4439 	jr	NZ, 00111$
      001479 D1                    4440 	pop	de
      00147A D5                    4441 	push	de
      00147B 1A                    4442 	ld	a, (de)
      00147C 4F                    4443 	ld	c, a
      00147D 13                    4444 	inc	de
      00147E 1A                    4445 	ld	a, (de)
      00147F 47                    4446 	ld	b, a
      001480 C5                    4447 	push	bc
      001481 CDr98r12              4448 	call	_is_stack_coherent
      001484 E8 02                 4449 	add	sp, #2
      001486 7B                    4450 	ld	a, e
      001487 B7                    4451 	or	a, a
      001488 28 21                 4452 	jr	Z, 00111$
                                   4453 ;src/main.c:1030: cursor.height = 0;
      00148A 21r8Fr01              4454 	ld	hl, #(_cursor + 0x0007)
      00148D 36 00                 4455 	ld	(hl), #0x00
                                   4456 ;src/main.c:1024: if (cursor.hand_pile_idx != cursor.pile_idx) {
      00148F FAr8Dr01              4457 	ld	a, (#(_cursor + 0x0005) + 0)
      001492 F8 07                 4458 	ldhl	sp,	#7
      001494 77                    4459 	ld	(hl), a
                                   4460 ;src/main.c:1031: piles_to_clear |= piles_to_clear ? cursor.hand_pile_idx << 4u : cursor.hand_pile_idx;
      001495 F8 0C                 4461 	ldhl	sp,	#12
      001497 7E                    4462 	ld	a, (hl)
      001498 B7                    4463 	or	a, a
      001499 28 09                 4464 	jr	Z, 00119$
      00149B F8 07                 4465 	ldhl	sp,	#7
      00149D 7E                    4466 	ld	a, (hl)
      00149E CB 37                 4467 	swap	a
      0014A0 E6 F0                 4468 	and	a, #0xf0
      0014A2 18 03                 4469 	jr	00120$
      0014A4                       4470 00119$:
      0014A4 F8 07                 4471 	ldhl	sp,	#7
      0014A6 7E                    4472 	ld	a, (hl)
      0014A7                       4473 00120$:
      0014A7 F8 0C                 4474 	ldhl	sp,	#12
      0014A9 B6                    4475 	or	a, (hl)
      0014AA 77                    4476 	ld	(hl), a
      0014AB                       4477 00111$:
                                   4478 ;src/main.c:1034: if (cursor.card_to_show)
      0014AB 11r8Ar01              4479 	ld	de, #(_cursor + 0x0002)
      0014AE 1A                    4480 	ld	a, (de)
      0014AF F8 06                 4481 	ldhl	sp,	#6
      0014B1 22                    4482 	ld	(hl+), a
      0014B2 13                    4483 	inc	de
      0014B3 1A                    4484 	ld	a, (de)
      0014B4 77                    4485 	ld	(hl), a
      0014B5 3A                    4486 	ld	a, (hl-)
      0014B6 B6                    4487 	or	a, (hl)
      0014B7 28 07                 4488 	jr	Z, 00114$
                                   4489 ;src/main.c:1035: cursor.card_to_show->data |= BITMASK_CARD_VISIBLE;
      0014B9 2A                    4490 	ld	a, (hl+)
      0014BA 66                    4491 	ld	h, (hl)
      0014BB 6F                    4492 	ld	l, a
      0014BC 23                    4493 	inc	hl
      0014BD 23                    4494 	inc	hl
      0014BE CB F6                 4495 	set	6, (hl)
      0014C0                       4496 00114$:
                                   4497 ;src/main.c:1041: cursor.held_card,
      0014C0 11r88r01              4498 	ld	de, #_cursor
      0014C3 1A                    4499 	ld	a, (de)
      0014C4 F8 06                 4500 	ldhl	sp,	#6
      0014C6 22                    4501 	ld	(hl+), a
      0014C7 13                    4502 	inc	de
      0014C8 1A                    4503 	ld	a, (de)
      0014C9 77                    4504 	ld	(hl), a
                                   4505 ;src/main.c:1040: cursor.held_stack_size,
      0014CA 21r8Cr01              4506 	ld	hl, #(_cursor + 0x0004)
      0014CD 4E                    4507 	ld	c, (hl)
                                   4508 ;src/main.c:1039: (pile->height + 3u - cursor.held_stack_size) * 8u,
      0014CE F8 02                 4509 	ldhl	sp,#2
      0014D0 2A                    4510 	ld	a, (hl+)
      0014D1 5F                    4511 	ld	e, a
      0014D2 56                    4512 	ld	d, (hl)
      0014D3 1A                    4513 	ld	a, (de)
      0014D4 C6 03                 4514 	add	a, #0x03
      0014D6 91                    4515 	sub	a, c
      0014D7 87                    4516 	add	a, a
      0014D8 87                    4517 	add	a, a
      0014D9 87                    4518 	add	a, a
      0014DA 23                    4519 	inc	hl
      0014DB 77                    4520 	ld	(hl), a
                                   4521 ;src/main.c:1038: (src_pile->height + 2u + cursor.held_stack_size) * 8u, cursor.hand_pile_idx * 16u,
      0014DC FAr8Dr01              4522 	ld	a, (#(_cursor + 0x0005) + 0)
      0014DF CB 37                 4523 	swap	a
      0014E1 E6 F0                 4524 	and	a, #0xf0
      0014E3 23                    4525 	inc	hl
      0014E4 77                    4526 	ld	(hl), a
      0014E5 F8 0A                 4527 	ldhl	sp,#10
      0014E7 2A                    4528 	ld	a, (hl+)
      0014E8 5F                    4529 	ld	e, a
      0014E9 56                    4530 	ld	d, (hl)
      0014EA 1A                    4531 	ld	a, (de)
      0014EB C6 02                 4532 	add	a, #0x02
      0014ED 81                    4533 	add	a, c
      0014EE 87                    4534 	add	a, a
      0014EF 87                    4535 	add	a, a
      0014F0 87                    4536 	add	a, a
      0014F1 77                    4537 	ld	(hl), a
                                   4538 ;src/main.c:1037: cursor.pile_idx * 16u,
      0014F2 FAr8Er01              4539 	ld	a, (#(_cursor + 0x0006) + 0)
      0014F5 CB 37                 4540 	swap	a
      0014F7 E6 F0                 4541 	and	a, #0xf0
                                   4542 ;src/main.c:1036: dynamic_metasprite_fold(top_card->data,
      0014F9 F8 08                 4543 	ldhl	sp,	#8
      0014FB F5                    4544 	push	af
      0014FC 2A                    4545 	ld	a, (hl+)
      0014FD 66                    4546 	ld	h, (hl)
      0014FE 6F                    4547 	ld	l, a
      0014FF F1                    4548 	pop	af
      001500 23                    4549 	inc	hl
      001501 23                    4550 	inc	hl
      001502 5E                    4551 	ld	e, (hl)
      001503 F8 0C                 4552 	ldhl	sp,	#12
      001505 66                    4553 	ld	h, (hl)
      001506 E5                    4554 	push	hl
      001507 33                    4555 	inc	sp
      001508 26 80                 4556 	ld	h, #0x80
      00150A E5                    4557 	push	hl
      00150B 33                    4558 	inc	sp
      00150C F8 08                 4559 	ldhl	sp,	#8
      00150E F5                    4560 	push	af
      00150F 2A                    4561 	ld	a, (hl+)
      001510 66                    4562 	ld	h, (hl)
      001511 6F                    4563 	ld	l, a
      001512 F1                    4564 	pop	af
      001513 E5                    4565 	push	hl
      001514 61                    4566 	ld	h, c
      001515 E5                    4567 	push	hl
      001516 33                    4568 	inc	sp
      001517 F8 09                 4569 	ldhl	sp,	#9
      001519 66                    4570 	ld	h, (hl)
      00151A E5                    4571 	push	hl
      00151B 33                    4572 	inc	sp
      00151C F8 0B                 4573 	ldhl	sp,	#11
      00151E 66                    4574 	ld	h, (hl)
      00151F E5                    4575 	push	hl
      001520 33                    4576 	inc	sp
      001521 F8 12                 4577 	ldhl	sp,	#18
      001523 66                    4578 	ld	h, (hl)
      001524 E5                    4579 	push	hl
      001525 33                    4580 	inc	sp
      001526 57                    4581 	ld	d,a
      001527 D5                    4582 	push	de
      001528 CDr35r0A              4583 	call	_dynamic_metasprite_fold
      00152B E8 0A                 4584 	add	sp, #10
      00152D                       4585 00116$:
                                   4586 ;src/main.c:1047: cursor.held_card = NULL;
      00152D 21r88r01              4587 	ld	hl, #_cursor
      001530 AF                    4588 	xor	a, a
      001531 22                    4589 	ld	(hl+), a
      001532 77                    4590 	ld	(hl), a
                                   4591 ;src/main.c:1048: cursor.pile_idx = cursor.hand_pile_idx;
      001533 FAr8Dr01              4592 	ld	a, (#(_cursor + 0x0005) + 0)
      001536 EAr8Er01              4593 	ld	(#(_cursor + 0x0006)),a
                                   4594 ;src/main.c:1049: flags |= FLAG_REDRAW_CURSOR;
      001539 21r6Br01              4595 	ld	hl, #_flags
      00153C 7E                    4596 	ld	a, (hl)
      00153D F6 01                 4597 	or	a, #0x01
      00153F 77                    4598 	ld	(hl), a
                                   4599 ;src/main.c:1050: }
      001540 E8 0D                 4600 	add	sp, #13
      001542 C9                    4601 	ret
                                   4602 ;src/main.c:1056: void start_game(void)
                                   4603 ;	---------------------------------
                                   4604 ; Function start_game
                                   4605 ; ---------------------------------
      001543                       4606 _start_game::
                                   4607 ;src/main.c:1058: flags &= ~FLAG_GAME_STATE;
      001543 21r6Br01              4608 	ld	hl, #_flags
      001546 7E                    4609 	ld	a, (hl)
      001547 E6 E7                 4610 	and	a, #0xe7
                                   4611 ;src/main.c:1059: flags |= FLAG_GAME_STATE_INGAME | FLAG_REDRAW_CURSOR;
      001549 77                    4612 	ld	(hl), a
      00154A F6 11                 4613 	or	a, #0x11
      00154C 77                    4614 	ld	(hl), a
                                   4615 ;src/main.c:1060: cursor.pile_idx = 0;
      00154D 21r8Er01              4616 	ld	hl, #(_cursor + 0x0006)
      001550 36 00                 4617 	ld	(hl), #0x00
                                   4618 ;src/main.c:1061: cursor.height = 0;
      001552 21r8Fr01              4619 	ld	hl, #(_cursor + 0x0007)
      001555 36 00                 4620 	ld	(hl), #0x00
                                   4621 ;src/main.c:1062: metasprite_2x3_hide(SPRITE_FRAME_1);
      001557 3E 12                 4622 	ld	a, #0x12
      001559 F5                    4623 	push	af
      00155A 33                    4624 	inc	sp
      00155B CDr28r05              4625 	call	_metasprite_2x3_hide
      00155E 33                    4626 	inc	sp
                                   4627 ;src/main.c:1063: metasprite_2x3_hide(SPRITE_FRAME_2);
      00155F 3E 18                 4628 	ld	a, #0x18
      001561 F5                    4629 	push	af
      001562 33                    4630 	inc	sp
      001563 CDr28r05              4631 	call	_metasprite_2x3_hide
      001566 33                    4632 	inc	sp
                                   4633 ;src/main.c:1064: metasprite_2x3_hide(SPRITE_FRAME_3);
      001567 3E 1E                 4634 	ld	a, #0x1e
      001569 F5                    4635 	push	af
      00156A 33                    4636 	inc	sp
      00156B CDr28r05              4637 	call	_metasprite_2x3_hide
      00156E 33                    4638 	inc	sp
                                   4639 ;src/main.c:1065: init_deck();
      00156F CDr73r10              4640 	call	_init_deck
                                   4641 ;src/main.c:1066: clear_bkg();
      001572 CDrC2r01              4642 	call	_clear_bkg
                                   4643 ;src/main.c:1067: draw_bkg_game();
                                   4644 ;src/main.c:1068: }
      001575 C3rE0r01              4645 	jp  _draw_bkg_game
                                   4646 ;src/main.c:1070: inline void start_settings(void)
                                   4647 ;	---------------------------------
                                   4648 ; Function start_settings
                                   4649 ; ---------------------------------
      001578                       4650 _start_settings::
                                   4651 ;src/main.c:1072: flags &= ~FLAG_GAME_STATE;
      001578 21r6Br01              4652 	ld	hl, #_flags
      00157B 7E                    4653 	ld	a, (hl)
      00157C E6 E7                 4654 	and	a, #0xe7
                                   4655 ;src/main.c:1073: flags |= FLAG_GAME_STATE_SETTINGS | FLAG_REDRAW_CURSOR;
      00157E 77                    4656 	ld	(hl), a
      00157F F6 19                 4657 	or	a, #0x19
      001581 77                    4658 	ld	(hl), a
                                   4659 ;src/main.c:1074: cursor.pile_idx = 0;
      001582 21r8Er01              4660 	ld	hl, #(_cursor + 0x0006)
      001585 36 00                 4661 	ld	(hl), #0x00
                                   4662 ;src/main.c:1075: cursor.height = 0;
      001587 21r8Fr01              4663 	ld	hl, #(_cursor + 0x0007)
      00158A 36 00                 4664 	ld	(hl), #0x00
                                   4665 ;src/main.c:1076: draw_setting_frame_metasprites();
      00158C CDr88r05              4666 	call	_draw_setting_frame_metasprites
                                   4667 ;src/main.c:1077: clear_bkg();
      00158F CDrC2r01              4668 	call	_clear_bkg
                                   4669 ;src/main.c:1078: draw_bkg_settings();
                                   4670 ;src/main.c:1079: }
      001592 C3r1Fr03              4671 	jp  _draw_bkg_settings
                                   4672 ;src/main.c:1081: void start_splash_screen(void)
                                   4673 ;	---------------------------------
                                   4674 ; Function start_splash_screen
                                   4675 ; ---------------------------------
      001595                       4676 _start_splash_screen::
                                   4677 ;src/main.c:1083: flags &= ~FLAG_GAME_STATE;
      001595 21r6Br01              4678 	ld	hl, #_flags
      001598 7E                    4679 	ld	a, (hl)
      001599 E6 E7                 4680 	and	a, #0xe7
      00159B 77                    4681 	ld	(hl), a
                                   4682 ;src/main.c:1084: flags |= FLAG_GAME_STATE_SPLASH;
                                   4683 ;src/main.c:1085: clear_bkg();
      00159C CDrC2r01              4684 	call	_clear_bkg
                                   4685 ;src/main.c:1086: draw_bkg_splash_screen();
      00159F CDr80r02              4686 	call	_draw_bkg_splash_screen
                                   4687 ;src/main.c:577: dynamic_metasprite.src[0] = 72;
      0015A2 21r73r01              4688 	ld	hl, #_dynamic_metasprite
      0015A5 36 48                 4689 	ld	(hl), #0x48
      0015A7 23                    4690 	inc	hl
      0015A8 36 00                 4691 	ld	(hl), #0x00
                                   4692 ;src/main.c:578: dynamic_metasprite.src[1] = -24;
      0015AA 21r75r01              4693 	ld	hl, #(_dynamic_metasprite + 0x0002)
      0015AD 36 E8                 4694 	ld	(hl), #0xe8
      0015AF 23                    4695 	inc	hl
      0015B0 36 FF                 4696 	ld	(hl), #0xff
                                   4697 ;src/main.c:579: dynamic_metasprite.dist[0] = -64;
      0015B2 21r77r01              4698 	ld	hl, #(_dynamic_metasprite + 0x0004)
      0015B5 36 C0                 4699 	ld	(hl), #0xc0
      0015B7 23                    4700 	inc	hl
      0015B8 36 FF                 4701 	ld	(hl), #0xff
                                   4702 ;src/main.c:580: dynamic_metasprite.dist[1] = 40;
      0015BA 21r79r01              4703 	ld	hl, #(_dynamic_metasprite + 0x0006)
      0015BD 36 28                 4704 	ld	(hl), #0x28
      0015BF 23                    4705 	inc	hl
      0015C0 36 00                 4706 	ld	(hl), #0x00
                                   4707 ;src/main.c:581: dynamic_metasprite.target_frames = TARGET_FRAMES_SPLASH_SCREEN;
      0015C2 21r7Br01              4708 	ld	hl, #(_dynamic_metasprite + 0x0008)
      0015C5 36 20                 4709 	ld	(hl), #0x20
                                   4710 ;src/main.c:582: dynamic_metasprite.elapsed_frames = 0;
      0015C7 21r7Cr01              4711 	ld	hl, #(_dynamic_metasprite + 0x0009)
      0015CA 36 00                 4712 	ld	(hl), #0x00
                                   4713 ;src/main.c:583: dynamic_metasprite.metasprite = metasprite_sequential_2x3;
      0015CC 21r7Dr01              4714 	ld	hl, #(_dynamic_metasprite + 0x000a)
      0015CF 36r00                 4715 	ld	(hl), #<(_metasprite_sequential_2x3)
      0015D1 23                    4716 	inc	hl
      0015D2 36s00                 4717 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   4718 ;src/main.c:584: dynamic_metasprite.metasprite_offset = OFFSET_SPRITE_TITLE + OFFSET_TITLE_S;
      0015D4 21r7Fr01              4719 	ld	hl, #(_dynamic_metasprite + 0x000c)
      0015D7 36 80                 4720 	ld	(hl), #0x80
                                   4721 ;src/main.c:585: dynamic_metasprite.data[0] = 0;
      0015D9 21r80r01              4722 	ld	hl, #(_dynamic_metasprite + 0x000d)
      0015DC 36 00                 4723 	ld	(hl), #0x00
                                   4724 ;src/main.c:586: dynamic_metasprite.callback = &dynamic_metasprite_splash_screen_callback;
      0015DE 21r86r01              4725 	ld	hl, #(_dynamic_metasprite + 0x0013)
      0015E1 36r1F                 4726 	ld	(hl), #<(_dynamic_metasprite_splash_screen_callback)
      0015E3 23                    4727 	inc	hl
      0015E4 36s06                 4728 	ld	(hl), #>(_dynamic_metasprite_splash_screen_callback)
                                   4729 ;src/main.c:587: flags |= FLAG_PLAYING_ANIMATION;
      0015E6 21r6Br01              4730 	ld	hl, #_flags
      0015E9 7E                    4731 	ld	a, (hl)
      0015EA F6 04                 4732 	or	a, #0x04
      0015EC 77                    4733 	ld	(hl), a
                                   4734 ;src/main.c:1087: dynamic_metasprite_splash_screen();
                                   4735 ;src/main.c:1088: }
      0015ED C9                    4736 	ret
                                   4737 ;src/main.c:1090: void start_leaderboard(void)
                                   4738 ;	---------------------------------
                                   4739 ; Function start_leaderboard
                                   4740 ; ---------------------------------
      0015EE                       4741 _start_leaderboard::
                                   4742 ;src/main.c:1092: ENABLE_RAM_MBC1;
      0015EE 21 00 00              4743 	ld	hl, #0x0000
      0015F1 36 0A                 4744 	ld	(hl), #0x0a
                                   4745 ;src/main.c:1093: flags &= ~FLAG_GAME_STATE;
      0015F3 21r6Br01              4746 	ld	hl, #_flags
      0015F6 7E                    4747 	ld	a, (hl)
      0015F7 E6 E7                 4748 	and	a, #0xe7
                                   4749 ;src/main.c:1094: flags |= FLAG_GAME_STATE_LEADERBOARD;
      0015F9 77                    4750 	ld	(hl), a
      0015FA F6 08                 4751 	or	a, #0x08
      0015FC 77                    4752 	ld	(hl), a
                                   4753 ;src/main.c:1095: cursor.pile_idx = 0;
      0015FD 21r8Er01              4754 	ld	hl, #(_cursor + 0x0006)
      001600 36 00                 4755 	ld	(hl), #0x00
                                   4756 ;src/main.c:1096: clear_bkg();
      001602 CDrC2r01              4757 	call	_clear_bkg
                                   4758 ;src/main.c:1097: draw_bkg_leaderboard();
      001605 CDrF9r03              4759 	call	_draw_bkg_leaderboard
                                   4760 ;src/main.c:1098: DISABLE_RAM_MBC1;
      001608 21 00 00              4761 	ld	hl, #0x0000
      00160B 36 00                 4762 	ld	(hl), #0x00
                                   4763 ;src/main.c:1099: }
      00160D C9                    4764 	ret
                                   4765 ;src/main.c:1101: void add_leaderboard(void)
                                   4766 ;	---------------------------------
                                   4767 ; Function add_leaderboard
                                   4768 ; ---------------------------------
      00160E                       4769 _add_leaderboard::
      00160E E8 FD                 4770 	add	sp, #-3
                                   4771 ;src/main.c:1103: ENABLE_RAM_MBC1;
      001610 21 00 00              4772 	ld	hl, #0x0000
      001613 36 0A                 4773 	ld	(hl), #0x0a
                                   4774 ;src/main.c:1104: LeaderBoard *iter = leaderboard[NUM_SUITS(settings)];
      001615 01r00r00              4775 	ld	bc, #_leaderboard+0
      001618 FAr6Dr01              4776 	ld	a, (#_settings)
      00161B E6 03                 4777 	and	a, #0x03
      00161D 6F                    4778 	ld	l, a
      00161E 26 00                 4779 	ld	h, #0x00
      001620 5D                    4780 	ld	e, l
      001621 54                    4781 	ld	d, h
      001622 29                    4782 	add	hl, hl
      001623 19                    4783 	add	hl, de
      001624 29                    4784 	add	hl, hl
      001625 19                    4785 	add	hl, de
      001626 29                    4786 	add	hl, hl
      001627 19                    4787 	add	hl, de
      001628 09                    4788 	add	hl, bc
      001629 4D                    4789 	ld	c, l
      00162A 44                    4790 	ld	b, h
                                   4791 ;src/main.c:1106: for (i = 0; i < 3u; i++) {
      00162B AF                    4792 	xor	a, a
      00162C F8 02                 4793 	ldhl	sp,	#2
      00162E 77                    4794 	ld	(hl), a
      00162F                       4795 00106$:
                                   4796 ;src/main.c:1107: if (score > iter->score)
      00162F 69                    4797 	ld	l, c
      001630 60                    4798 	ld	h, b
      001631 23                    4799 	inc	hl
      001632 23                    4800 	inc	hl
      001633 23                    4801 	inc	hl
      001634 5D                    4802 	ld	e, l
      001635 54                    4803 	ld	d, h
      001636 1A                    4804 	ld	a, (de)
      001637 F8 00                 4805 	ldhl	sp,	#0
      001639 22                    4806 	ld	(hl+), a
      00163A 13                    4807 	inc	de
      00163B 1A                    4808 	ld	a, (de)
      00163C 77                    4809 	ld	(hl), a
      00163D F8 00                 4810 	ldhl	sp,	#0
      00163F 5D                    4811 	ld	e, l
      001640 54                    4812 	ld	d, h
      001641 21r6Fr01              4813 	ld	hl, #_score
      001644 1A                    4814 	ld	a, (de)
      001645 96                    4815 	sub	a, (hl)
      001646 23                    4816 	inc	hl
      001647 13                    4817 	inc	de
      001648 1A                    4818 	ld	a, (de)
      001649 9E                    4819 	sbc	a, (hl)
      00164A 38 0D                 4820 	jr	C, 00103$
                                   4821 ;src/main.c:1109: iter++;
      00164C 03                    4822 	inc	bc
      00164D 03                    4823 	inc	bc
      00164E 03                    4824 	inc	bc
      00164F 03                    4825 	inc	bc
      001650 03                    4826 	inc	bc
                                   4827 ;src/main.c:1106: for (i = 0; i < 3u; i++) {
      001651 F8 02                 4828 	ldhl	sp,	#2
      001653 34                    4829 	inc	(hl)
      001654 7E                    4830 	ld	a, (hl)
      001655 D6 03                 4831 	sub	a, #0x03
      001657 38 D6                 4832 	jr	C, 00106$
      001659                       4833 00103$:
                                   4834 ;src/main.c:1111: if (i == 3u)
      001659 F8 02                 4835 	ldhl	sp,	#2
      00165B 7E                    4836 	ld	a, (hl)
      00165C D6 03                 4837 	sub	a, #0x03
      00165E 28 3F                 4838 	jr	Z, 00108$
                                   4839 ;src/main.c:1112: return;
      001660 18 00                 4840 	jr	00105$
      001662                       4841 00105$:
                                   4842 ;src/main.c:1113: iter->score = score;
      001662 59                    4843 	ld	e, c
      001663 50                    4844 	ld	d, b
      001664 13                    4845 	inc	de
      001665 13                    4846 	inc	de
      001666 13                    4847 	inc	de
      001667 21r6Fr01              4848 	ld	hl, #_score
      00166A 7E                    4849 	ld	a, (hl)
      00166B 12                    4850 	ld	(de), a
      00166C 13                    4851 	inc	de
      00166D 23                    4852 	inc	hl
      00166E 7E                    4853 	ld	a, (hl)
      00166F 12                    4854 	ld	(de), a
                                   4855 ;src/main.c:1114: iter->name[0] = 0x0B;
      001670 3E 0B                 4856 	ld	a, #0x0b
      001672 02                    4857 	ld	(bc), a
                                   4858 ;src/main.c:1115: iter->name[1] = 0x0B;
      001673 69                    4859 	ld	l, c
      001674 60                    4860 	ld	h, b
      001675 23                    4861 	inc	hl
      001676 36 0B                 4862 	ld	(hl), #0x0b
                                   4863 ;src/main.c:1116: iter->name[2] = 0x0B;
      001678 69                    4864 	ld	l, c
      001679 60                    4865 	ld	h, b
      00167A 23                    4866 	inc	hl
      00167B 23                    4867 	inc	hl
      00167C 36 0B                 4868 	ld	(hl), #0x0b
                                   4869 ;src/main.c:1117: selected_leaderboard = iter;
      00167E 21r71r01              4870 	ld	hl, #_selected_leaderboard
      001681 79                    4871 	ld	a, c
      001682 22                    4872 	ld	(hl+), a
      001683 70                    4873 	ld	(hl), b
                                   4874 ;src/main.c:1118: cursor.height = LEADERBOARD_PAD_Y + NUM_SUITS(settings) * 4u + i;
      001684 FAr6Dr01              4875 	ld	a, (#_settings)
      001687 E6 03                 4876 	and	a, #0x03
      001689 87                    4877 	add	a, a
      00168A 87                    4878 	add	a, a
      00168B C6 04                 4879 	add	a, #0x04
      00168D F8 02                 4880 	ldhl	sp,	#2
      00168F 86                    4881 	add	a, (hl)
      001690 EAr8Fr01              4882 	ld	(#(_cursor + 0x0007)),a
                                   4883 ;src/main.c:1119: flags |= FLAG_REDRAW_CURSOR;
      001693 21r6Br01              4884 	ld	hl, #_flags
      001696 7E                    4885 	ld	a, (hl)
      001697 F6 01                 4886 	or	a, #0x01
      001699 77                    4887 	ld	(hl), a
                                   4888 ;src/main.c:1120: DISABLE_RAM_MBC1;
      00169A 21 00 00              4889 	ld	hl, #0x0000
      00169D 36 00                 4890 	ld	(hl), #0x00
      00169F                       4891 00108$:
                                   4892 ;src/main.c:1121: }
      00169F E8 03                 4893 	add	sp, #3
      0016A1 C9                    4894 	ret
                                   4895 ;src/main.c:1123: void nvram_check(void)
                                   4896 ;	---------------------------------
                                   4897 ; Function nvram_check
                                   4898 ; ---------------------------------
      0016A2                       4899 _nvram_check::
      0016A2 E8 FB                 4900 	add	sp, #-5
                                   4901 ;src/main.c:1125: ENABLE_RAM_MBC1;
      0016A4 21 00 00              4902 	ld	hl, #0x0000
      0016A7 36 0A                 4903 	ld	(hl), #0x0a
                                   4904 ;src/main.c:1126: if (nvram_check_data != NVRAM_SET) {
      0016A9 21r00r00              4905 	ld	hl, #_nvram_check_data
      0016AC 7E                    4906 	ld	a, (hl)
      0016AD D6 37                 4907 	sub	a, #0x37
      0016AF 20 12                 4908 	jr	NZ, 00134$
      0016B1 23                    4909 	inc	hl
      0016B2 7E                    4910 	ld	a, (hl)
      0016B3 3D                    4911 	dec	a
      0016B4 20 0D                 4912 	jr	NZ, 00134$
      0016B6 23                    4913 	inc	hl
      0016B7 7E                    4914 	ld	a, (hl)
      0016B8 D6 3E                 4915 	sub	a, #0x3e
      0016BA 20 07                 4916 	jr	NZ, 00134$
      0016BC 23                    4917 	inc	hl
      0016BD 7E                    4918 	ld	a, (hl)
      0016BE D6 CD                 4919 	sub	a, #0xcd
      0016C0 CAr44r17              4920 	jp	Z,00104$
      0016C3                       4921 00134$:
                                   4922 ;src/main.c:1127: nvram_check_data = NVRAM_SET;
      0016C3 21r00r00              4923 	ld	hl, #_nvram_check_data
      0016C6 36 37                 4924 	ld	(hl), #0x37
      0016C8 23                    4925 	inc	hl
      0016C9 36 01                 4926 	ld	(hl), #0x01
      0016CB 23                    4927 	inc	hl
      0016CC 36 3E                 4928 	ld	(hl), #0x3e
      0016CE 23                    4929 	inc	hl
      0016CF 36 CD                 4930 	ld	(hl), #0xcd
                                   4931 ;src/main.c:1128: LeaderBoard *iter = IDX_PTR(leaderboard[0], 0u);
      0016D1 F8 00                 4932 	ldhl	sp,	#0
      0016D3 36r00                 4933 	ld	(hl), #<(_leaderboard)
      0016D5 23                    4934 	inc	hl
      0016D6 36s00                 4935 	ld	(hl), #>(_leaderboard)
                                   4936 ;src/main.c:1130: for (i = 0; i < 3; i++) {
      0016D8 AF                    4937 	xor	a, a
      0016D9 F8 04                 4938 	ldhl	sp,	#4
      0016DB 77                    4939 	ld	(hl), a
      0016DC                       4940 00108$:
                                   4941 ;src/main.c:1131: iter->score = 400u - 100u * (UINT16)i;
      0016DC C1                    4942 	pop	bc
      0016DD C5                    4943 	push	bc
      0016DE 03                    4944 	inc	bc
      0016DF 03                    4945 	inc	bc
      0016E0 03                    4946 	inc	bc
      0016E1 F8 04                 4947 	ldhl	sp,	#4
      0016E3 3A                    4948 	ld	a, (hl-)
      0016E4 2B                    4949 	dec	hl
      0016E5 77                    4950 	ld	(hl), a
      0016E6 AF                    4951 	xor	a, a
      0016E7 23                    4952 	inc	hl
      0016E8 32                    4953 	ld	(hl-), a
      0016E9 2A                    4954 	ld	a, (hl+)
      0016EA 5F                    4955 	ld	e, a
      0016EB 56                    4956 	ld	d, (hl)
      0016EC 6B                    4957 	ld	l, e
      0016ED 62                    4958 	ld	h, d
      0016EE 29                    4959 	add	hl, hl
      0016EF 19                    4960 	add	hl, de
      0016F0 29                    4961 	add	hl, hl
      0016F1 29                    4962 	add	hl, hl
      0016F2 29                    4963 	add	hl, hl
      0016F3 19                    4964 	add	hl, de
      0016F4 29                    4965 	add	hl, hl
      0016F5 29                    4966 	add	hl, hl
      0016F6 3E 90                 4967 	ld	a, #0x90
      0016F8 95                    4968 	sub	a, l
      0016F9 5F                    4969 	ld	e, a
      0016FA 3E 01                 4970 	ld	a, #0x01
      0016FC 9C                    4971 	sbc	a, h
      0016FD 57                    4972 	ld	d, a
      0016FE 7B                    4973 	ld	a, e
      0016FF 02                    4974 	ld	(bc), a
      001700 03                    4975 	inc	bc
      001701 7A                    4976 	ld	a, d
      001702 02                    4977 	ld	(bc), a
                                   4978 ;src/main.c:1132: iter->name[0] = 0x21u;
      001703 E1                    4979 	pop	hl
      001704 E5                    4980 	push	hl
      001705 36 21                 4981 	ld	(hl), #0x21
                                   4982 ;src/main.c:1133: iter->name[1] = 0x19u;
      001707 E1                    4983 	pop	hl
      001708 E5                    4984 	push	hl
      001709 23                    4985 	inc	hl
      00170A 36 19                 4986 	ld	(hl), #0x19
                                   4987 ;src/main.c:1134: iter->name[2] = 0x14u;
      00170C E1                    4988 	pop	hl
      00170D E5                    4989 	push	hl
      00170E 23                    4990 	inc	hl
      00170F 23                    4991 	inc	hl
      001710 36 14                 4992 	ld	(hl), #0x14
                                   4993 ;src/main.c:1135: iter++;
                                   4994 ;c
      001712 D1                    4995 	pop	de
      001713 D5                    4996 	push	de
      001714 21 05 00              4997 	ld	hl, #0x0005
      001717 19                    4998 	add	hl, de
      001718 4D                    4999 	ld	c, l
      001719 44                    5000 	ld	b, h
                                   5001 ;src/main.c:1136: for (j = 0; j < 2; j++) {
      00171A 1E 02                 5002 	ld	e, #0x02
      00171C                       5003 00107$:
                                   5004 ;src/main.c:1137: iter->score = 0u;
      00171C 69                    5005 	ld	l, c
      00171D 60                    5006 	ld	h, b
      00171E 23                    5007 	inc	hl
      00171F 23                    5008 	inc	hl
      001720 23                    5009 	inc	hl
      001721 AF                    5010 	xor	a, a
      001722 22                    5011 	ld	(hl+), a
      001723 77                    5012 	ld	(hl), a
                                   5013 ;src/main.c:1138: iter->name[0] = 0u;
      001724 AF                    5014 	xor	a, a
      001725 02                    5015 	ld	(bc), a
                                   5016 ;src/main.c:1139: iter->name[1] = 0u;
      001726 69                    5017 	ld	l, c
      001727 60                    5018 	ld	h, b
      001728 23                    5019 	inc	hl
      001729 36 00                 5020 	ld	(hl), #0x00
                                   5021 ;src/main.c:1140: iter->name[2] = 0u;
      00172B 69                    5022 	ld	l, c
      00172C 60                    5023 	ld	h, b
      00172D 23                    5024 	inc	hl
      00172E 23                    5025 	inc	hl
      00172F 36 00                 5026 	ld	(hl), #0x00
                                   5027 ;src/main.c:1141: iter++;
      001731 03                    5028 	inc	bc
      001732 03                    5029 	inc	bc
      001733 03                    5030 	inc	bc
      001734 03                    5031 	inc	bc
      001735 03                    5032 	inc	bc
                                   5033 ;src/main.c:1136: for (j = 0; j < 2; j++) {
      001736 1D                    5034 	dec	e
      001737 20 E3                 5035 	jr	NZ, 00107$
                                   5036 ;src/main.c:1130: for (i = 0; i < 3; i++) {
      001739 33                    5037 	inc	sp
      00173A 33                    5038 	inc	sp
      00173B C5                    5039 	push	bc
      00173C F8 04                 5040 	ldhl	sp,	#4
      00173E 34                    5041 	inc	(hl)
      00173F 7E                    5042 	ld	a, (hl)
      001740 D6 03                 5043 	sub	a, #0x03
      001742 38 98                 5044 	jr	C, 00108$
      001744                       5045 00104$:
                                   5046 ;src/main.c:1145: DISABLE_RAM_MBC1;
      001744 21 00 00              5047 	ld	hl, #0x0000
      001747 36 00                 5048 	ld	(hl), #0x00
                                   5049 ;src/main.c:1146: }
      001749 E8 05                 5050 	add	sp, #5
      00174B C9                    5051 	ret
                                   5052 ;src/main.c:1148: void inc_letter(const INT8 inc)
                                   5053 ;	---------------------------------
                                   5054 ; Function inc_letter
                                   5055 ; ---------------------------------
      00174C                       5056 _inc_letter::
                                   5057 ;src/main.c:1150: ENABLE_RAM_MBC1;
      00174C 21 00 00              5058 	ld	hl, #0x0000
      00174F 36 0A                 5059 	ld	(hl), #0x0a
                                   5060 ;src/main.c:1151: UINT8 *letter = &selected_leaderboard->name[cursor.pile_idx];
      001751 21r72r01              5061 	ld	hl, #_selected_leaderboard + 1
      001754 2B                    5062 	dec	hl
      001755 2A                    5063 	ld	a, (hl+)
      001756 4F                    5064 	ld	c, a
      001757 46                    5065 	ld	b, (hl)
      001758 FAr8Er01              5066 	ld	a, (#(_cursor + 0x0006) + 0)
      00175B 81                    5067 	add	a, c
      00175C 4F                    5068 	ld	c, a
      00175D 3E 00                 5069 	ld	a, #0x00
      00175F 88                    5070 	adc	a, b
      001760 47                    5071 	ld	b, a
                                   5072 ;src/main.c:1152: *letter = (INT8)*letter + inc;
      001761 0A                    5073 	ld	a, (bc)
      001762 F8 02                 5074 	ldhl	sp,	#2
      001764 86                    5075 	add	a, (hl)
                                   5076 ;src/main.c:1153: if (*letter < 0x0Bu)
      001765 02                    5077 	ld	(bc), a
      001766 5F                    5078 	ld	e, a
      001767 D6 0B                 5079 	sub	a, #0x0b
      001769 30 05                 5080 	jr	NC, 00104$
                                   5081 ;src/main.c:1154: *letter = 0x24u;
      00176B 3E 24                 5082 	ld	a, #0x24
      00176D 02                    5083 	ld	(bc), a
      00176E 18 08                 5084 	jr	00105$
      001770                       5085 00104$:
                                   5086 ;src/main.c:1155: else if (*letter > 0x24u)
      001770 3E 24                 5087 	ld	a, #0x24
      001772 93                    5088 	sub	a, e
      001773 30 03                 5089 	jr	NC, 00105$
                                   5090 ;src/main.c:1156: *letter = 0x0Bu;
      001775 3E 0B                 5091 	ld	a, #0x0b
      001777 02                    5092 	ld	(bc), a
      001778                       5093 00105$:
                                   5094 ;src/main.c:1157: set_bkg_tile_xy(LEADERBOARD_NAME_X + cursor.pile_idx, cursor.height, *letter);
      001778 0A                    5095 	ld	a, (bc)
      001779 4F                    5096 	ld	c, a
      00177A 21r8Fr01              5097 	ld	hl, #(_cursor + 0x0007)
      00177D 46                    5098 	ld	b, (hl)
      00177E FAr8Er01              5099 	ld	a, (#(_cursor + 0x0006) + 0)
      001781 C6 08                 5100 	add	a, #0x08
      001783 61                    5101 	ld	h, c
      001784 68                    5102 	ld	l, b
      001785 E5                    5103 	push	hl
      001786 F5                    5104 	push	af
      001787 33                    5105 	inc	sp
      001788 CDr00r00              5106 	call	_set_bkg_tile_xy
      00178B E8 03                 5107 	add	sp, #3
                                   5108 ;src/main.c:1158: DISABLE_RAM_MBC1;
      00178D 21 00 00              5109 	ld	hl, #0x0000
      001790 36 00                 5110 	ld	(hl), #0x00
                                   5111 ;src/main.c:1159: }
      001792 C9                    5112 	ret
                                   5113 ;src/main.c:1161: inline void input_process(void)
                                   5114 ;	---------------------------------
                                   5115 ; Function input_process
                                   5116 ; ---------------------------------
      001793                       5117 _input_process::
      001793 E8 F1                 5118 	add	sp, #-15
                                   5119 ;src/main.c:1164: UINT8 input = joypad();
      001795 CDr00r00              5120 	call	_joypad
      001798 F8 00                 5121 	ldhl	sp,	#0
      00179A 73                    5122 	ld	(hl), e
                                   5123 ;src/main.c:1165: UINT8 new_input = input & ~prev_input;
      00179B FAr92r01              5124 	ld	a, (#_input_process_prev_input_65536_387)
      00179E 2F                    5125 	cpl
      00179F F8 00                 5126 	ldhl	sp,	#0
      0017A1 A6                    5127 	and	a, (hl)
                                   5128 ;src/main.c:1166: if (new_input) {
      0017A2 4F                    5129 	ld	c, a
      0017A3 B7                    5130 	or	a, a
      0017A4 CAr4Ar1C              5131 	jp	Z, 00206$
                                   5132 ;src/main.c:1167: switch (flags & FLAG_GAME_STATE) {
      0017A7 FAr6Br01              5133 	ld	a, (#_flags)
      0017AA E6 18                 5134 	and	a, #0x18
      0017AC 47                    5135 	ld	b, a
      0017AD 1E 00                 5136 	ld	e, #0x00
                                   5137 ;src/main.c:1169: if (new_input & J_START) {
      0017AF 79                    5138 	ld	a, c
      0017B0 E6 80                 5139 	and	a, #0x80
      0017B2 F8 01                 5140 	ldhl	sp,	#1
      0017B4 77                    5141 	ld	(hl), a
      0017B5 AF                    5142 	xor	a, a
      0017B6 23                    5143 	inc	hl
      0017B7 77                    5144 	ld	(hl), a
                                   5145 ;src/main.c:1171: if (flags & FLAG_PLAYING_ANIMATION)
      0017B8 FAr6Br01              5146 	ld	a, (#_flags)
      0017BB F8 03                 5147 	ldhl	sp,	#3
      0017BD 77                    5148 	ld	(hl), a
                                   5149 ;src/main.c:1167: switch (flags & FLAG_GAME_STATE) {
      0017BE 78                    5150 	ld	a, b
      0017BF B7                    5151 	or	a, a
      0017C0 B3                    5152 	or	a, e
      0017C1 28 47                 5153 	jr	Z, 00101$
                                   5154 ;src/main.c:1187: } else if (new_input & J_A) {
      0017C3 79                    5155 	ld	a, c
      0017C4 E6 10                 5156 	and	a, #0x10
      0017C6 23                    5157 	inc	hl
      0017C7 77                    5158 	ld	(hl), a
      0017C8 AF                    5159 	xor	a, a
      0017C9 23                    5160 	inc	hl
      0017CA 77                    5161 	ld	(hl), a
                                   5162 ;src/main.c:1195: && cursor.pile_idx < 2u) {
      0017CB 79                    5163 	ld	a, c
      0017CC E6 01                 5164 	and	a, #0x01
      0017CE 23                    5165 	inc	hl
      0017CF 77                    5166 	ld	(hl), a
      0017D0 AF                    5167 	xor	a, a
      0017D1 23                    5168 	inc	hl
      0017D2 77                    5169 	ld	(hl), a
                                   5170 ;src/main.c:1198: && cursor.pile_idx) {
      0017D3 79                    5171 	ld	a, c
      0017D4 E6 02                 5172 	and	a, #0x02
      0017D6 23                    5173 	inc	hl
      0017D7 77                    5174 	ld	(hl), a
      0017D8 AF                    5175 	xor	a, a
      0017D9 23                    5176 	inc	hl
      0017DA 77                    5177 	ld	(hl), a
                                   5178 ;src/main.c:1200: } else if (new_input & J_UP) {
      0017DB 79                    5179 	ld	a, c
      0017DC E6 04                 5180 	and	a, #0x04
      0017DE 23                    5181 	inc	hl
      0017DF 77                    5182 	ld	(hl), a
      0017E0 AF                    5183 	xor	a, a
      0017E1 23                    5184 	inc	hl
      0017E2 77                    5185 	ld	(hl), a
                                   5186 ;src/main.c:1202: } else if (new_input & J_DOWN) {
      0017E3 79                    5187 	ld	a, c
      0017E4 E6 08                 5188 	and	a, #0x08
      0017E6 23                    5189 	inc	hl
      0017E7 77                    5190 	ld	(hl), a
      0017E8 AF                    5191 	xor	a, a
      0017E9 23                    5192 	inc	hl
      0017EA 77                    5193 	ld	(hl), a
                                   5194 ;src/main.c:1181: flags |= FLAG_REDRAW_CURSOR;
      0017EB F8 03                 5195 	ldhl	sp,	#3
      0017ED 7E                    5196 	ld	a, (hl)
      0017EE F6 01                 5197 	or	a, #0x01
      0017F0 F8 0E                 5198 	ldhl	sp,	#14
      0017F2 77                    5199 	ld	(hl), a
                                   5200 ;src/main.c:1167: switch (flags & FLAG_GAME_STATE) {
      0017F3 78                    5201 	ld	a, b
      0017F4 D6 08                 5202 	sub	a, #0x08
      0017F6 B3                    5203 	or	a, e
      0017F7 28 61                 5204 	jr	Z, 00111$
      0017F9 78                    5205 	ld	a, b
      0017FA D6 10                 5206 	sub	a, #0x10
      0017FC B3                    5207 	or	a, e
      0017FD CAr7Fr19              5208 	jp	Z,00161$
      001800 78                    5209 	ld	a, b
      001801 D6 18                 5210 	sub	a, #0x18
      001803 B3                    5211 	or	a, e
      001804 CArFCr18              5212 	jp	Z,00140$
      001807 C3r4Ar1C              5213 	jp	00206$
                                   5214 ;src/main.c:1168: case FLAG_GAME_STATE_SPLASH:
      00180A                       5215 00101$:
                                   5216 ;src/main.c:1169: if (new_input & J_START) {
      00180A F8 02                 5217 	ldhl	sp,	#2
      00180C 3A                    5218 	ld	a, (hl-)
      00180D B6                    5219 	or	a, (hl)
      00180E 28 36                 5220 	jr	Z, 00109$
                                   5221 ;src/main.c:1170: initrand(DIV_REG);
      001810 F0r00                 5222 	ldh	a, (_DIV_REG+0)
      001812 4F                    5223 	ld	c, a
      001813 06 00                 5224 	ld	b, #0x00
      001815 C5                    5225 	push	bc
      001816 CDr00r00              5226 	call	_initrand
      001819 E8 02                 5227 	add	sp, #2
                                   5228 ;src/main.c:1171: if (flags & FLAG_PLAYING_ANIMATION)
      00181B FAr6Br01              5229 	ld	a, (#_flags)
      00181E CB 57                 5230 	bit	2, a
      001820 28 03                 5231 	jr	Z, 00103$
                                   5232 ;src/main.c:1172: dynamic_metasprite_end_animation();
      001822 CDr0Br06              5233 	call	_dynamic_metasprite_end_animation
      001825                       5234 00103$:
                                   5235 ;src/main.c:1072: flags &= ~FLAG_GAME_STATE;
      001825 21r6Br01              5236 	ld	hl, #_flags
      001828 7E                    5237 	ld	a, (hl)
      001829 E6 E7                 5238 	and	a, #0xe7
      00182B 77                    5239 	ld	(hl), a
                                   5240 ;src/main.c:1073: flags |= FLAG_GAME_STATE_SETTINGS | FLAG_REDRAW_CURSOR;
      00182C 7E                    5241 	ld	a, (hl)
      00182D F6 19                 5242 	or	a, #0x19
      00182F 77                    5243 	ld	(hl), a
                                   5244 ;src/main.c:1074: cursor.pile_idx = 0;
      001830 21r8Er01              5245 	ld	hl, #(_cursor + 0x0006)
      001833 36 00                 5246 	ld	(hl), #0x00
                                   5247 ;src/main.c:1075: cursor.height = 0;
      001835 21r8Fr01              5248 	ld	hl, #(_cursor + 0x0007)
      001838 36 00                 5249 	ld	(hl), #0x00
                                   5250 ;src/main.c:1076: draw_setting_frame_metasprites();
      00183A CDr88r05              5251 	call	_draw_setting_frame_metasprites
                                   5252 ;src/main.c:1077: clear_bkg();
      00183D CDrC2r01              5253 	call	_clear_bkg
                                   5254 ;src/main.c:1078: draw_bkg_settings();
      001840 CDr1Fr03              5255 	call	_draw_bkg_settings
                                   5256 ;src/main.c:1173: start_settings();
      001843 C3r4Ar1C              5257 	jp	00206$
      001846                       5258 00109$:
                                   5259 ;src/main.c:1174: } else if (new_input & J_SELECT) {
      001846 CB 71                 5260 	bit	6, c
      001848 CAr4Ar1C              5261 	jp	Z,00206$
                                   5262 ;src/main.c:1175: if (flags & FLAG_PLAYING_ANIMATION)
      00184B F8 03                 5263 	ldhl	sp,	#3
      00184D CB 56                 5264 	bit	2, (hl)
      00184F 28 03                 5265 	jr	Z, 00105$
                                   5266 ;src/main.c:1176: dynamic_metasprite_end_animation();
      001851 CDr0Br06              5267 	call	_dynamic_metasprite_end_animation
      001854                       5268 00105$:
                                   5269 ;src/main.c:1177: start_leaderboard();
      001854 CDrEEr15              5270 	call	_start_leaderboard
                                   5271 ;src/main.c:1179: break;
      001857 C3r4Ar1C              5272 	jp	00206$
                                   5273 ;src/main.c:1180: case FLAG_GAME_STATE_LEADERBOARD:
      00185A                       5274 00111$:
                                   5275 ;src/main.c:1181: flags |= FLAG_REDRAW_CURSOR;
      00185A F8 0E                 5276 	ldhl	sp,	#14
      00185C 7E                    5277 	ld	a, (hl)
      00185D EAr6Br01              5278 	ld	(#_flags),a
                                   5279 ;src/main.c:1182: if (selected_leaderboard) {
      001860 21r72r01              5280 	ld	hl, #_selected_leaderboard + 1
      001863 3A                    5281 	ld	a, (hl-)
      001864 B6                    5282 	or	a, (hl)
      001865 CArF0r18              5283 	jp	Z, 00138$
                                   5284 ;src/main.c:1184: && cursor.pile_idx == 2u) {
      001868 F8 02                 5285 	ldhl	sp,	#2
      00186A 3A                    5286 	ld	a, (hl-)
      00186B B6                    5287 	or	a, (hl)
      00186C 28 17                 5288 	jr	Z, 00132$
      00186E FAr8Er01              5289 	ld	a, (#(_cursor + 0x0006) + 0)
      001871 D6 02                 5290 	sub	a, #0x02
      001873 20 10                 5291 	jr	NZ, 00132$
                                   5292 ;src/main.c:1185: selected_leaderboard = NULL;
      001875 21r71r01              5293 	ld	hl, #_selected_leaderboard
      001878 3E 00                 5294 	ld	a, #0x00
      00187A 22                    5295 	ld	(hl+), a
      00187B 36 00                 5296 	ld	(hl), #0x00
                                   5297 ;/home/wojtek/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      00187D 21r32r00              5298 	ld	hl, #(_shadow_OAM + 0x0032)
      001880 36 00                 5299 	ld	(hl), #0x00
                                   5300 ;src/main.c:1186: set_sprite_tile(SPRITE_FRAME, OFFSET_SPRITE_NONE);
      001882 C3r4Ar1C              5301 	jp	00206$
      001885                       5302 00132$:
                                   5303 ;src/main.c:1187: } else if (new_input & J_A) {
      001885 F8 05                 5304 	ldhl	sp,	#5
      001887 3A                    5305 	ld	a, (hl-)
      001888 B6                    5306 	or	a, (hl)
      001889 28 1D                 5307 	jr	Z, 00129$
                                   5308 ;src/main.c:1188: if (cursor.pile_idx == 2u) {
      00188B 01r8Er01              5309 	ld	bc, #_cursor+6
      00188E 0A                    5310 	ld	a, (bc)
      00188F FE 02                 5311 	cp	a, #0x02
      001891 20 10                 5312 	jr	NZ, 00113$
                                   5313 ;src/main.c:1189: selected_leaderboard = NULL;
      001893 21r71r01              5314 	ld	hl, #_selected_leaderboard
      001896 3E 00                 5315 	ld	a, #0x00
      001898 22                    5316 	ld	(hl+), a
      001899 36 00                 5317 	ld	(hl), #0x00
                                   5318 ;/home/wojtek/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      00189B 21r32r00              5319 	ld	hl, #(_shadow_OAM + 0x0032)
      00189E 36 00                 5320 	ld	(hl), #0x00
                                   5321 ;src/main.c:1190: set_sprite_tile(SPRITE_FRAME, OFFSET_SPRITE_NONE);
      0018A0 C3r4Ar1C              5322 	jp	00206$
      0018A3                       5323 00113$:
                                   5324 ;src/main.c:1192: cursor.pile_idx++;
      0018A3 3C                    5325 	inc	a
      0018A4 02                    5326 	ld	(bc), a
      0018A5 C3r4Ar1C              5327 	jp	00206$
      0018A8                       5328 00129$:
                                   5329 ;src/main.c:1195: && cursor.pile_idx < 2u) {
      0018A8 F8 07                 5330 	ldhl	sp,	#7
      0018AA 3A                    5331 	ld	a, (hl-)
      0018AB B6                    5332 	or	a, (hl)
      0018AC 28 0D                 5333 	jr	Z, 00125$
      0018AE 01r8Er01              5334 	ld	bc, #_cursor+6
      0018B1 0A                    5335 	ld	a, (bc)
      0018B2 FE 02                 5336 	cp	a, #0x02
      0018B4 30 05                 5337 	jr	NC, 00125$
                                   5338 ;src/main.c:1196: cursor.pile_idx++;
      0018B6 3C                    5339 	inc	a
      0018B7 02                    5340 	ld	(bc), a
      0018B8 C3r4Ar1C              5341 	jp	00206$
      0018BB                       5342 00125$:
                                   5343 ;src/main.c:1198: && cursor.pile_idx) {
      0018BB F8 09                 5344 	ldhl	sp,	#9
      0018BD 3A                    5345 	ld	a, (hl-)
      0018BE B6                    5346 	or	a, (hl)
      0018BF 28 0C                 5347 	jr	Z, 00121$
      0018C1 01r8Er01              5348 	ld	bc, #_cursor+6
      0018C4 0A                    5349 	ld	a, (bc)
      0018C5 B7                    5350 	or	a, a
      0018C6 28 05                 5351 	jr	Z, 00121$
                                   5352 ;src/main.c:1199: cursor.pile_idx--;
      0018C8 3D                    5353 	dec	a
      0018C9 02                    5354 	ld	(bc), a
      0018CA C3r4Ar1C              5355 	jp	00206$
      0018CD                       5356 00121$:
                                   5357 ;src/main.c:1200: } else if (new_input & J_UP) {
      0018CD F8 0B                 5358 	ldhl	sp,	#11
      0018CF 3A                    5359 	ld	a, (hl-)
      0018D0 B6                    5360 	or	a, (hl)
      0018D1 28 0B                 5361 	jr	Z, 00118$
                                   5362 ;src/main.c:1201: inc_letter(1);
      0018D3 3E 01                 5363 	ld	a, #0x01
      0018D5 F5                    5364 	push	af
      0018D6 33                    5365 	inc	sp
      0018D7 CDr4Cr17              5366 	call	_inc_letter
      0018DA 33                    5367 	inc	sp
      0018DB C3r4Ar1C              5368 	jp	00206$
      0018DE                       5369 00118$:
                                   5370 ;src/main.c:1202: } else if (new_input & J_DOWN) {
      0018DE F8 0D                 5371 	ldhl	sp,	#13
      0018E0 3A                    5372 	ld	a, (hl-)
      0018E1 B6                    5373 	or	a, (hl)
      0018E2 CAr4Ar1C              5374 	jp	Z, 00206$
                                   5375 ;src/main.c:1203: inc_letter(-1);
      0018E5 3E FF                 5376 	ld	a, #0xff
      0018E7 F5                    5377 	push	af
      0018E8 33                    5378 	inc	sp
      0018E9 CDr4Cr17              5379 	call	_inc_letter
      0018EC 33                    5380 	inc	sp
      0018ED C3r4Ar1C              5381 	jp	00206$
      0018F0                       5382 00138$:
                                   5383 ;src/main.c:1205: } else if (new_input & (J_START | J_SELECT | J_A | J_B)) {
      0018F0 79                    5384 	ld	a, c
      0018F1 E6 F0                 5385 	and	a, #0xf0
      0018F3 CAr4Ar1C              5386 	jp	Z,00206$
                                   5387 ;src/main.c:1206: start_splash_screen();
      0018F6 CDr95r15              5388 	call	_start_splash_screen
                                   5389 ;src/main.c:1208: break;
      0018F9 C3r4Ar1C              5390 	jp	00206$
                                   5391 ;src/main.c:1209: case FLAG_GAME_STATE_SETTINGS:
      0018FC                       5392 00140$:
                                   5393 ;src/main.c:1210: flags |= FLAG_REDRAW_CURSOR;
      0018FC F8 0E                 5394 	ldhl	sp,	#14
      0018FE 7E                    5395 	ld	a, (hl)
      0018FF EAr6Br01              5396 	ld	(#_flags),a
                                   5397 ;src/main.c:1211: if (new_input & J_START) {
      001902 F8 02                 5398 	ldhl	sp,	#2
      001904 3A                    5399 	ld	a, (hl-)
      001905 B6                    5400 	or	a, (hl)
      001906 28 05                 5401 	jr	Z, 00157$
                                   5402 ;src/main.c:1212: start_game();
      001908 CDr43r15              5403 	call	_start_game
      00190B 18 65                 5404 	jr	00158$
      00190D                       5405 00157$:
                                   5406 ;src/main.c:1214: && cursor.height) {
      00190D F8 09                 5407 	ldhl	sp,	#9
      00190F 3A                    5408 	ld	a, (hl-)
      001910 B6                    5409 	or	a, (hl)
      001911 28 0B                 5410 	jr	Z, 00153$
      001913 01r8Fr01              5411 	ld	bc, #_cursor+7
      001916 0A                    5412 	ld	a, (bc)
      001917 B7                    5413 	or	a, a
      001918 28 04                 5414 	jr	Z, 00153$
                                   5415 ;src/main.c:1215: cursor.height--;
      00191A 3D                    5416 	dec	a
      00191B 02                    5417 	ld	(bc), a
      00191C 18 54                 5418 	jr	00158$
      00191E                       5419 00153$:
                                   5420 ;src/main.c:1217: && cursor.height + 1u < setting_pile_heights[cursor.pile_idx]) {
      00191E F8 07                 5421 	ldhl	sp,	#7
      001920 3A                    5422 	ld	a, (hl-)
      001921 B6                    5423 	or	a, (hl)
      001922 28 23                 5424 	jr	Z, 00149$
      001924 21r8Fr01              5425 	ld	hl, #(_cursor + 0x0007)
      001927 4E                    5426 	ld	c, (hl)
      001928 59                    5427 	ld	e, c
      001929 16 00                 5428 	ld	d, #0x00
      00192B 13                    5429 	inc	de
      00192C FAr8Er01              5430 	ld	a, (#_cursor + 6)
      00192F C6r5C                 5431 	add	a, #<(_setting_pile_heights)
      001931 6F                    5432 	ld	l, a
      001932 3E 00                 5433 	ld	a, #0x00
      001934 CEs00                 5434 	adc	a, #>(_setting_pile_heights)
      001936 67                    5435 	ld	h, a
      001937 6E                    5436 	ld	l, (hl)
      001938 06 00                 5437 	ld	b, #0x00
      00193A 7B                    5438 	ld	a, e
      00193B 95                    5439 	sub	a, l
      00193C 7A                    5440 	ld	a, d
      00193D 98                    5441 	sbc	a, b
      00193E 30 07                 5442 	jr	NC, 00149$
                                   5443 ;src/main.c:1218: cursor.height++;
      001940 0C                    5444 	inc	c
      001941 21r8Fr01              5445 	ld	hl, #(_cursor + 0x0007)
      001944 71                    5446 	ld	(hl), c
      001945 18 2B                 5447 	jr	00158$
      001947                       5448 00149$:
                                   5449 ;src/main.c:1220: && cursor.pile_idx) {
      001947 F8 0B                 5450 	ldhl	sp,	#11
      001949 3A                    5451 	ld	a, (hl-)
      00194A B6                    5452 	or	a, (hl)
      00194B 28 10                 5453 	jr	Z, 00145$
      00194D 01r8Er01              5454 	ld	bc, #_cursor + 6
      001950 0A                    5455 	ld	a, (bc)
      001951 B7                    5456 	or	a, a
      001952 28 09                 5457 	jr	Z, 00145$
                                   5458 ;src/main.c:1221: cursor.pile_idx--;
      001954 3D                    5459 	dec	a
      001955 02                    5460 	ld	(bc), a
                                   5461 ;src/main.c:1222: cursor.height = 0;
      001956 21r8Fr01              5462 	ld	hl, #(_cursor + 0x0007)
      001959 36 00                 5463 	ld	(hl), #0x00
      00195B 18 15                 5464 	jr	00158$
      00195D                       5465 00145$:
                                   5466 ;src/main.c:1224: && cursor.pile_idx < NUM_SETTING_PILES - 1u) {
      00195D F8 0D                 5467 	ldhl	sp,	#13
      00195F 3A                    5468 	ld	a, (hl-)
      001960 B6                    5469 	or	a, (hl)
      001961 28 0F                 5470 	jr	Z, 00158$
      001963 01r8Er01              5471 	ld	bc, #_cursor + 6
      001966 0A                    5472 	ld	a, (bc)
      001967 FE 03                 5473 	cp	a, #0x03
      001969 30 07                 5474 	jr	NC, 00158$
                                   5475 ;src/main.c:1225: cursor.pile_idx++;
      00196B 3C                    5476 	inc	a
      00196C 02                    5477 	ld	(bc), a
                                   5478 ;src/main.c:1226: cursor.height = 0;
      00196D 21r8Fr01              5479 	ld	hl, #(_cursor + 0x0007)
      001970 36 00                 5480 	ld	(hl), #0x00
      001972                       5481 00158$:
                                   5482 ;src/main.c:1228: if (new_input & J_A) {
      001972 F8 05                 5483 	ldhl	sp,	#5
      001974 3A                    5484 	ld	a, (hl-)
      001975 B6                    5485 	or	a, (hl)
      001976 CAr4Ar1C              5486 	jp	Z, 00206$
                                   5487 ;src/main.c:1229: set_cursor_setting();
      001979 CDr53r0E              5488 	call	_set_cursor_setting
                                   5489 ;src/main.c:1231: break;
      00197C C3r4Ar1C              5490 	jp	00206$
                                   5491 ;src/main.c:1232: case FLAG_GAME_STATE_INGAME:
      00197F                       5492 00161$:
                                   5493 ;src/main.c:1233: if (cursor.held_card) {
      00197F 21r88r01              5494 	ld	hl, #_cursor
      001982 2A                    5495 	ld	a, (hl+)
      001983 B6                    5496 	or	a,(hl)
      001984 CAr39r1A              5497 	jp	Z, 00202$
                                   5498 ;src/main.c:1234: flags |= FLAG_REDRAW_HAND;
      001987 F8 03                 5499 	ldhl	sp,	#3
      001989 7E                    5500 	ld	a, (hl)
      00198A F6 02                 5501 	or	a, #0x02
      00198C EAr6Br01              5502 	ld	(#_flags),a
                                   5503 ;src/main.c:1236: && cursor.hand_pile_idx != 0) {
      00198F F8 09                 5504 	ldhl	sp,	#9
      001991 3A                    5505 	ld	a, (hl-)
      001992 B6                    5506 	or	a, (hl)
      001993 28 0B                 5507 	jr	Z, 00166$
      001995 01r8Dr01              5508 	ld	bc, #_cursor+5
      001998 0A                    5509 	ld	a, (bc)
      001999 B7                    5510 	or	a, a
      00199A 28 04                 5511 	jr	Z, 00166$
                                   5512 ;src/main.c:1237: cursor.hand_pile_idx--;
      00199C 3D                    5513 	dec	a
      00199D 02                    5514 	ld	(bc), a
      00199E 18 10                 5515 	jr	00167$
      0019A0                       5516 00166$:
                                   5517 ;src/main.c:1239: && cursor.hand_pile_idx < 9) {
      0019A0 F8 07                 5518 	ldhl	sp,	#7
      0019A2 3A                    5519 	ld	a, (hl-)
      0019A3 B6                    5520 	or	a, (hl)
      0019A4 28 0A                 5521 	jr	Z, 00167$
      0019A6 01r8Dr01              5522 	ld	bc, #_cursor+5
      0019A9 0A                    5523 	ld	a, (bc)
      0019AA FE 09                 5524 	cp	a, #0x09
      0019AC 30 02                 5525 	jr	NC, 00167$
                                   5526 ;src/main.c:1240: cursor.hand_pile_idx++;
      0019AE 3C                    5527 	inc	a
      0019AF 02                    5528 	ld	(bc), a
      0019B0                       5529 00167$:
                                   5530 ;src/main.c:1243: && ~flags & FLAG_PLAYING_ANIMATION) {
      0019B0 F8 05                 5531 	ldhl	sp,	#5
      0019B2 3A                    5532 	ld	a, (hl-)
      0019B3 B6                    5533 	or	a, (hl)
      0019B4 CAr4Ar1C              5534 	jp	Z, 00206$
      0019B7 FAr6Br01              5535 	ld	a, (#_flags)
      0019BA 06 00                 5536 	ld	b, #0x00
      0019BC 2F                    5537 	cpl
      0019BD 4F                    5538 	ld	c, a
      0019BE 78                    5539 	ld	a, b
      0019BF 2F                    5540 	cpl
      0019C0 CB 51                 5541 	bit	2, c
      0019C2 CAr4Ar1C              5542 	jp	Z,00206$
                                   5543 ;src/main.c:795: Pile *pile = IDX_PTR(piles, cursor.hand_pile_idx);
      0019C5 01r38r01              5544 	ld	bc, #_piles+0
      0019C8 FAr8Dr01              5545 	ld	a, (#(_cursor + 0x0005) + 0)
      0019CB F8 0E                 5546 	ldhl	sp,	#14
      0019CD 77                    5547 	ld	(hl), a
      0019CE F8 0E                 5548 	ldhl	sp,	#14
      0019D0 5E                    5549 	ld	e, (hl)
      0019D1 16 00                 5550 	ld	d, #0x00
      0019D3 6B                    5551 	ld	l, e
      0019D4 62                    5552 	ld	h, d
      0019D5 29                    5553 	add	hl, hl
      0019D6 29                    5554 	add	hl, hl
      0019D7 19                    5555 	add	hl, de
      0019D8 09                    5556 	add	hl, bc
      0019D9 4D                    5557 	ld	c, l
      0019DA 44                    5558 	ld	b, h
                                   5559 ;src/main.c:796: if (cursor.hand_pile_idx == cursor.pile_idx) {
      0019DB 21r8Er01              5560 	ld	hl, #_cursor + 6
      0019DE 5E                    5561 	ld	e, (hl)
      0019DF F8 0E                 5562 	ldhl	sp,	#14
      0019E1 7E                    5563 	ld	a, (hl)
      0019E2 93                    5564 	sub	a, e
      0019E3 20 09                 5565 	jr	NZ, 00214$
                                   5566 ;src/main.c:797: pile_append_cursor_stack(pile);
      0019E5 C5                    5567 	push	bc
      0019E6 CDr5Cr13              5568 	call	_pile_append_cursor_stack
      0019E9 E8 02                 5569 	add	sp, #2
      0019EB C3r4Ar1C              5570 	jp	00206$
      0019EE                       5571 00214$:
                                   5572 ;src/main.c:798: } else if (!pile->height
      0019EE 21 04 00              5573 	ld	hl, #0x0004
      0019F1 09                    5574 	add	hl, bc
      0019F2 7E                    5575 	ld	a, (hl)
      0019F3 B7                    5576 	or	a, a
      0019F4 28 2E                 5577 	jr	Z, 00212$
                                   5578 ;src/main.c:799: || RANK(pile->top->data) == RANK(cursor.held_card->data) + 1u) {
      0019F6 69                    5579 	ld	l, c
      0019F7 60                    5580 	ld	h, b
      0019F8 23                    5581 	inc	hl
      0019F9 23                    5582 	inc	hl
      0019FA 2A                    5583 	ld	a, (hl+)
      0019FB 66                    5584 	ld	h, (hl)
      0019FC 6F                    5585 	ld	l, a
      0019FD 23                    5586 	inc	hl
      0019FE 23                    5587 	inc	hl
      0019FF 7E                    5588 	ld	a, (hl)
      001A00 E6 0F                 5589 	and	a, #0x0f
      001A02 F8 0D                 5590 	ldhl	sp,	#13
      001A04 77                    5591 	ld	(hl), a
      001A05 AF                    5592 	xor	a, a
      001A06 23                    5593 	inc	hl
      001A07 77                    5594 	ld	(hl), a
      001A08 21r88r01              5595 	ld	hl, #_cursor
      001A0B 2A                    5596 	ld	a, (hl+)
      001A0C 66                    5597 	ld	h, (hl)
      001A0D 6F                    5598 	ld	l, a
      001A0E 23                    5599 	inc	hl
      001A0F 23                    5600 	inc	hl
      001A10 7E                    5601 	ld	a, (hl)
      001A11 E6 0F                 5602 	and	a, #0x0f
      001A13 5F                    5603 	ld	e, a
      001A14 16 00                 5604 	ld	d, #0x00
      001A16 13                    5605 	inc	de
      001A17 F8 0D                 5606 	ldhl	sp,	#13
      001A19 7E                    5607 	ld	a, (hl)
      001A1A 93                    5608 	sub	a, e
      001A1B C2r4Ar1C              5609 	jp	NZ,00206$
      001A1E 23                    5610 	inc	hl
      001A1F 7E                    5611 	ld	a, (hl)
      001A20 92                    5612 	sub	a, d
      001A21 C2r4Ar1C              5613 	jp	NZ,00206$
      001A24                       5614 00212$:
                                   5615 ;src/main.c:800: pile_append_cursor_stack(pile);
      001A24 C5                    5616 	push	bc
      001A25 CDr5Cr13              5617 	call	_pile_append_cursor_stack
      001A28 E8 02                 5618 	add	sp, #2
                                   5619 ;src/main.c:801: score--;
      001A2A 21r70r01              5620 	ld	hl, #_score + 1
      001A2D 2B                    5621 	dec	hl
      001A2E 2A                    5622 	ld	a, (hl+)
      001A2F 5F                    5623 	ld	e, a
      001A30 56                    5624 	ld	d, (hl)
      001A31 1B                    5625 	dec	de
      001A32 2B                    5626 	dec	hl
      001A33 7B                    5627 	ld	a, e
      001A34 22                    5628 	ld	(hl+), a
      001A35 72                    5629 	ld	(hl), d
                                   5630 ;src/main.c:1244: cursor_place_stack();
      001A36 C3r4Ar1C              5631 	jp	00206$
      001A39                       5632 00202$:
                                   5633 ;src/main.c:1247: flags |= FLAG_REDRAW_CURSOR;
      001A39 F8 0E                 5634 	ldhl	sp,	#14
      001A3B 7E                    5635 	ld	a, (hl)
      001A3C EAr6Br01              5636 	ld	(#_flags),a
                                   5637 ;src/main.c:1248: if (new_input & J_DOWN) {
      001A3F F8 0D                 5638 	ldhl	sp,	#13
      001A41 3A                    5639 	ld	a, (hl-)
      001A42 B6                    5640 	or	a, (hl)
      001A43 28 3D                 5641 	jr	Z, 00192$
                                   5642 ;src/main.c:1249: if (cursor.pile_idx == PILE_IDX_DECK)
      001A45 21r8Er01              5643 	ld	hl, #_cursor + 6
      001A48 4E                    5644 	ld	c, (hl)
      001A49 79                    5645 	ld	a, c
                                   5646 ;src/main.c:1250: cursor.pile_idx = 0;
      001A4A D6 0A                 5647 	sub	a,#0x0a
      001A4C 20 03                 5648 	jr	NZ, 00175$
      001A4E 77                    5649 	ld	(hl),a
      001A4F 18 79                 5650 	jr	00193$
      001A51                       5651 00175$:
                                   5652 ;src/main.c:1251: else if (cursor.height + 1u < piles[cursor.pile_idx].height)
      001A51 FAr8Fr01              5653 	ld	a, (#(_cursor + 0x0007) + 0)
      001A54 16 00                 5654 	ld	d, #0x00
      001A56 5F                    5655 	ld	e, a
      001A57 13                    5656 	inc	de
      001A58 F8 0D                 5657 	ldhl	sp,	#13
      001A5A 7B                    5658 	ld	a, e
      001A5B 22                    5659 	ld	(hl+), a
      001A5C 72                    5660 	ld	(hl), d
      001A5D 06 00                 5661 	ld	b, #0x00
      001A5F 69                    5662 	ld	l, c
      001A60 60                    5663 	ld	h, b
      001A61 29                    5664 	add	hl, hl
      001A62 29                    5665 	add	hl, hl
      001A63 09                    5666 	add	hl, bc
      001A64 11r38r01              5667 	ld	de, #_piles
      001A67 19                    5668 	add	hl, de
      001A68 01 04 00              5669 	ld	bc, #0x0004
      001A6B 09                    5670 	add	hl, bc
      001A6C 4E                    5671 	ld	c, (hl)
      001A6D 06 00                 5672 	ld	b, #0x00
      001A6F F8 0D                 5673 	ldhl	sp,	#13
      001A71 7E                    5674 	ld	a, (hl)
      001A72 91                    5675 	sub	a, c
      001A73 23                    5676 	inc	hl
      001A74 7E                    5677 	ld	a, (hl)
      001A75 98                    5678 	sbc	a, b
      001A76 30 52                 5679 	jr	NC, 00193$
                                   5680 ;src/main.c:1252: change_cursor_height(1);
      001A78 3E 01                 5681 	ld	a, #0x01
      001A7A F5                    5682 	push	af
      001A7B 33                    5683 	inc	sp
      001A7C CDr9Fr0E              5684 	call	_change_cursor_height
      001A7F 33                    5685 	inc	sp
      001A80 18 48                 5686 	jr	00193$
      001A82                       5687 00192$:
                                   5688 ;src/main.c:1253: } else if (new_input & J_UP) {
      001A82 F8 0B                 5689 	ldhl	sp,	#11
      001A84 3A                    5690 	ld	a, (hl-)
      001A85 B6                    5691 	or	a, (hl)
      001A86 28 17                 5692 	jr	Z, 00189$
                                   5693 ;src/main.c:1254: if (cursor.height == 0)
      001A88 FAr8Fr01              5694 	ld	a, (#(_cursor + 0x0007) + 0)
      001A8B B7                    5695 	or	a, a
      001A8C 20 07                 5696 	jr	NZ, 00178$
                                   5697 ;src/main.c:1255: cursor.pile_idx = PILE_IDX_DECK;
      001A8E 21r8Er01              5698 	ld	hl, #(_cursor + 0x0006)
      001A91 36 0A                 5699 	ld	(hl), #0x0a
      001A93 18 35                 5700 	jr	00193$
      001A95                       5701 00178$:
                                   5702 ;src/main.c:1257: change_cursor_height(-1);
      001A95 3E FF                 5703 	ld	a, #0xff
      001A97 F5                    5704 	push	af
      001A98 33                    5705 	inc	sp
      001A99 CDr9Fr0E              5706 	call	_change_cursor_height
      001A9C 33                    5707 	inc	sp
      001A9D 18 2B                 5708 	jr	00193$
      001A9F                       5709 00189$:
                                   5710 ;src/main.c:1259: && cursor.pile_idx != 0
      001A9F F8 09                 5711 	ldhl	sp,	#9
      001AA1 3A                    5712 	ld	a, (hl-)
      001AA2 B6                    5713 	or	a, (hl)
      001AA3 28 12                 5714 	jr	Z, 00184$
      001AA5 01r8Er01              5715 	ld	bc, #_cursor+6
      001AA8 0A                    5716 	ld	a, (bc)
      001AA9 B7                    5717 	or	a, a
      001AAA 28 0B                 5718 	jr	Z, 00184$
                                   5719 ;src/main.c:1260: && cursor.pile_idx != PILE_IDX_DECK) {
      001AAC FE 0A                 5720 	cp	a, #0x0a
      001AAE 28 07                 5721 	jr	Z, 00184$
                                   5722 ;src/main.c:1261: cursor.pile_idx--;
      001AB0 3D                    5723 	dec	a
      001AB1 02                    5724 	ld	(bc), a
                                   5725 ;src/main.c:1262: cursor_adjust_height();
      001AB2 CDrDFr0C              5726 	call	_cursor_adjust_height
      001AB5 18 13                 5727 	jr	00193$
      001AB7                       5728 00184$:
                                   5729 ;src/main.c:1264: && cursor.pile_idx < PILE_IDX_DECK - 1u) {
      001AB7 F8 07                 5730 	ldhl	sp,	#7
      001AB9 3A                    5731 	ld	a, (hl-)
      001ABA B6                    5732 	or	a, (hl)
      001ABB 28 0D                 5733 	jr	Z, 00193$
      001ABD 01r8Er01              5734 	ld	bc, #_cursor+6
      001AC0 0A                    5735 	ld	a, (bc)
      001AC1 FE 09                 5736 	cp	a, #0x09
      001AC3 30 05                 5737 	jr	NC, 00193$
                                   5738 ;src/main.c:1265: cursor.pile_idx++;
      001AC5 3C                    5739 	inc	a
      001AC6 02                    5740 	ld	(bc), a
                                   5741 ;src/main.c:1266: cursor_adjust_height();
      001AC7 CDrDFr0C              5742 	call	_cursor_adjust_height
      001ACA                       5743 00193$:
                                   5744 ;src/main.c:1269: && ~flags & FLAG_PLAYING_ANIMATION) {
      001ACA F8 05                 5745 	ldhl	sp,	#5
      001ACC 3A                    5746 	ld	a, (hl-)
      001ACD B6                    5747 	or	a, (hl)
      001ACE CAr4Ar1C              5748 	jp	Z, 00206$
      001AD1 FAr6Br01              5749 	ld	a, (#_flags)
      001AD4 06 00                 5750 	ld	b, #0x00
      001AD6 2F                    5751 	cpl
      001AD7 4F                    5752 	ld	c, a
      001AD8 78                    5753 	ld	a, b
      001AD9 2F                    5754 	cpl
      001ADA CB 51                 5755 	bit	2, c
      001ADC CAr4Ar1C              5756 	jp	Z,00206$
                                   5757 ;src/main.c:1270: if (cursor.pile_idx == PILE_IDX_DECK && top_card_idx != 104u)
      001ADF 21r8Er01              5758 	ld	hl, #(_cursor + 0x0006)
      001AE2 4E                    5759 	ld	c, (hl)
      001AE3 79                    5760 	ld	a, c
      001AE4 D6 0A                 5761 	sub	a, #0x0a
      001AE6 C2r80r1B              5762 	jp	NZ,00195$
      001AE9 FAr6Ar01              5763 	ld	a, (#_top_card_idx)
      001AEC D6 68                 5764 	sub	a, #0x68
      001AEE CAr80r1B              5765 	jp	Z,00195$
                                   5766 ;src/main.c:985: Pile *pile = IDX_PTR(piles, 0);
      001AF1 01r38r01              5767 	ld	bc, #_piles
                                   5768 ;src/main.c:988: for (i = 0; i < 10u; i++) {
      001AF4 1E 00                 5769 	ld	e, #0x00
      001AF6                       5770 00230$:
                                   5771 ;src/main.c:989: if (!pile->height)
      001AF6 21 04 00              5772 	ld	hl, #0x0004
      001AF9 09                    5773 	add	hl, bc
      001AFA 7E                    5774 	ld	a, (hl)
      001AFB B7                    5775 	or	a, a
      001AFC CAr4Ar1C              5776 	jp	Z, 00206$
                                   5777 ;src/main.c:991: pile++;
      001AFF 03                    5778 	inc	bc
      001B00 03                    5779 	inc	bc
      001B01 03                    5780 	inc	bc
      001B02 03                    5781 	inc	bc
      001B03 03                    5782 	inc	bc
                                   5783 ;src/main.c:988: for (i = 0; i < 10u; i++) {
      001B04 1C                    5784 	inc	e
      001B05 7B                    5785 	ld	a, e
      001B06 D6 0A                 5786 	sub	a, #0x0a
      001B08 38 EC                 5787 	jr	C, 00230$
                                   5788 ;src/main.c:994: pile = IDX_PTR(piles, 0);
      001B0A F8 0C                 5789 	ldhl	sp,	#12
      001B0C 3Er38                 5790 	ld	a, #<(_piles)
      001B0E 22                    5791 	ld	(hl+), a
      001B0F 36s01                 5792 	ld	(hl), #>(_piles)
                                   5793 ;src/main.c:995: Card *deck_top = IDX_PTR(deck, top_card_idx);
      001B11 21r6Ar01              5794 	ld	hl, #_top_card_idx
      001B14 4E                    5795 	ld	c, (hl)
      001B15 06 00                 5796 	ld	b, #0x00
      001B17 69                    5797 	ld	l, c
      001B18 60                    5798 	ld	h, b
      001B19 29                    5799 	add	hl, hl
      001B1A 09                    5800 	add	hl, bc
      001B1B 01r00r00              5801 	ld	bc,#_deck
      001B1E 09                    5802 	add	hl,bc
      001B1F 4D                    5803 	ld	c, l
      001B20 44                    5804 	ld	b, h
                                   5805 ;src/main.c:996: top_card_idx += 10u;
      001B21 21r6Ar01              5806 	ld	hl, #_top_card_idx
      001B24 7E                    5807 	ld	a, (hl)
      001B25 C6 0A                 5808 	add	a, #0x0a
      001B27 77                    5809 	ld	(hl), a
                                   5810 ;src/main.c:999: for (i = 0; i < 10u; i++) {
      001B28 F8 0E                 5811 	ldhl	sp,	#14
      001B2A 36 0A                 5812 	ld	(hl), #0x0a
      001B2C                       5813 00234$:
                                   5814 ;src/main.c:1000: pile->top->next_card = deck_top;
                                   5815 ;c
      001B2C F8 0C                 5816 	ldhl	sp,#12
      001B2E 2A                    5817 	ld	a, (hl+)
      001B2F 5F                    5818 	ld	e, a
      001B30 56                    5819 	ld	d, (hl)
      001B31 21 02 00              5820 	ld	hl, #0x0002
      001B34 19                    5821 	add	hl, de
      001B35 E5                    5822 	push	hl
      001B36 7D                    5823 	ld	a, l
      001B37 F8 0C                 5824 	ldhl	sp,	#12
      001B39 77                    5825 	ld	(hl), a
      001B3A E1                    5826 	pop	hl
      001B3B 7C                    5827 	ld	a, h
      001B3C F8 0B                 5828 	ldhl	sp,	#11
      001B3E 32                    5829 	ld	(hl-), a
      001B3F 2A                    5830 	ld	a, (hl+)
      001B40 5F                    5831 	ld	e, a
      001B41 56                    5832 	ld	d, (hl)
      001B42 1A                    5833 	ld	a, (de)
      001B43 6F                    5834 	ld	l, a
      001B44 13                    5835 	inc	de
      001B45 1A                    5836 	ld	a, (de)
      001B46 67                    5837 	ld	h, a
      001B47 79                    5838 	ld	a, c
      001B48 22                    5839 	ld	(hl+), a
      001B49 70                    5840 	ld	(hl), b
                                   5841 ;src/main.c:1001: pile->top = deck_top;
      001B4A F8 0A                 5842 	ldhl	sp,	#10
      001B4C 2A                    5843 	ld	a, (hl+)
      001B4D 66                    5844 	ld	h, (hl)
      001B4E 6F                    5845 	ld	l, a
      001B4F 79                    5846 	ld	a, c
      001B50 22                    5847 	ld	(hl+), a
      001B51 70                    5848 	ld	(hl), b
                                   5849 ;src/main.c:1002: pile->height++;
                                   5850 ;c
      001B52 F8 0C                 5851 	ldhl	sp,#12
      001B54 2A                    5852 	ld	a, (hl+)
      001B55 5F                    5853 	ld	e, a
      001B56 56                    5854 	ld	d, (hl)
      001B57 21 04 00              5855 	ld	hl, #0x0004
      001B5A 19                    5856 	add	hl, de
      001B5B 5D                    5857 	ld	e, l
      001B5C 54                    5858 	ld	d, h
      001B5D 1A                    5859 	ld	a, (de)
      001B5E 3C                    5860 	inc	a
      001B5F 12                    5861 	ld	(de), a
                                   5862 ;src/main.c:1003: deck_top++;
      001B60 03                    5863 	inc	bc
      001B61 03                    5864 	inc	bc
      001B62 03                    5865 	inc	bc
                                   5866 ;src/main.c:1004: pile++;
                                   5867 ;c
      001B63 F8 0C                 5868 	ldhl	sp,#12
      001B65 2A                    5869 	ld	a, (hl+)
      001B66 5F                    5870 	ld	e, a
      001B67 56                    5871 	ld	d, (hl)
      001B68 21 05 00              5872 	ld	hl, #0x0005
      001B6B 19                    5873 	add	hl, de
      001B6C E5                    5874 	push	hl
      001B6D 7D                    5875 	ld	a, l
      001B6E F8 0E                 5876 	ldhl	sp,	#14
      001B70 77                    5877 	ld	(hl), a
      001B71 E1                    5878 	pop	hl
      001B72 7C                    5879 	ld	a, h
      001B73 F8 0D                 5880 	ldhl	sp,	#13
      001B75 22                    5881 	ld	(hl+), a
                                   5882 ;src/main.c:999: for (i = 0; i < 10u; i++) {
      001B76 35                    5883 	dec	(hl)
      001B77 7E                    5884 	ld	a, (hl)
      001B78 20 B2                 5885 	jr	NZ, 00234$
                                   5886 ;src/main.c:1007: dynamic_metasprite_deal();
      001B7A CDr8Cr0B              5887 	call	_dynamic_metasprite_deal
                                   5888 ;src/main.c:1271: deal();
      001B7D C3r4Ar1C              5889 	jp	00206$
      001B80                       5890 00195$:
                                   5891 ;src/main.c:769: Pile *pile = IDX_PTR(piles, cursor.pile_idx);
      001B80 06 00                 5892 	ld	b, #0x00
      001B82 69                    5893 	ld	l, c
      001B83 60                    5894 	ld	h, b
      001B84 29                    5895 	add	hl, hl
      001B85 29                    5896 	add	hl, hl
      001B86 09                    5897 	add	hl, bc
      001B87 3Er38                 5898 	ld	a, #<(_piles)
      001B89 85                    5899 	add	a, l
      001B8A 4F                    5900 	ld	c, a
      001B8B 3Es01                 5901 	ld	a, #>(_piles)
      001B8D 8C                    5902 	adc	a, h
      001B8E 47                    5903 	ld	b, a
      001B8F F8 0A                 5904 	ldhl	sp,	#10
      001B91 79                    5905 	ld	a, c
      001B92 22                    5906 	ld	(hl+), a
                                   5907 ;src/main.c:770: Card *top = pile->base;
      001B93 78                    5908 	ld	a, b
      001B94 32                    5909 	ld	(hl-), a
      001B95 2A                    5910 	ld	a, (hl+)
      001B96 5F                    5911 	ld	e, a
      001B97 56                    5912 	ld	d, (hl)
      001B98 1A                    5913 	ld	a, (de)
      001B99 23                    5914 	inc	hl
      001B9A 23                    5915 	inc	hl
      001B9B 22                    5916 	ld	(hl+), a
      001B9C 13                    5917 	inc	de
      001B9D 1A                    5918 	ld	a, (de)
      001B9E 77                    5919 	ld	(hl), a
                                   5920 ;src/main.c:771: for (i = 1; i < cursor.height; i++)
      001B9F 06 01                 5921 	ld	b, #0x01
      001BA1                       5922 00236$:
      001BA1 21r8Fr01              5923 	ld	hl, #(_cursor + 0x0007)
      001BA4 4E                    5924 	ld	c, (hl)
      001BA5 78                    5925 	ld	a, b
      001BA6 91                    5926 	sub	a, c
      001BA7 30 0E                 5927 	jr	NC, 00222$
                                   5928 ;src/main.c:772: top = top->next_card;
      001BA9 F8 0D                 5929 	ldhl	sp,#13
      001BAB 2A                    5930 	ld	a, (hl+)
      001BAC 5F                    5931 	ld	e, a
      001BAD 56                    5932 	ld	d, (hl)
      001BAE 1A                    5933 	ld	a, (de)
      001BAF 2B                    5934 	dec	hl
      001BB0 22                    5935 	ld	(hl+), a
      001BB1 13                    5936 	inc	de
      001BB2 1A                    5937 	ld	a, (de)
      001BB3 77                    5938 	ld	(hl), a
                                   5939 ;src/main.c:771: for (i = 1; i < cursor.height; i++)
      001BB4 04                    5940 	inc	b
      001BB5 18 EA                 5941 	jr	00236$
      001BB7                       5942 00222$:
                                   5943 ;src/main.c:773: Card *stack = cursor.height ? top->next_card : top;
      001BB7 79                    5944 	ld	a, c
      001BB8 B7                    5945 	or	a, a
      001BB9 28 0C                 5946 	jr	Z, 00240$
      001BBB F8 0D                 5947 	ldhl	sp,#13
      001BBD 2A                    5948 	ld	a, (hl+)
      001BBE 5F                    5949 	ld	e, a
      001BBF 56                    5950 	ld	d, (hl)
      001BC0 1A                    5951 	ld	a, (de)
      001BC1 4F                    5952 	ld	c, a
      001BC2 13                    5953 	inc	de
      001BC3 1A                    5954 	ld	a, (de)
      001BC4 47                    5955 	ld	b, a
      001BC5 18 05                 5956 	jr	00241$
      001BC7                       5957 00240$:
      001BC7 F8 0D                 5958 	ldhl	sp,#13
      001BC9 2A                    5959 	ld	a, (hl+)
      001BCA 4F                    5960 	ld	c, a
      001BCB 46                    5961 	ld	b, (hl)
      001BCC                       5962 00241$:
                                   5963 ;src/main.c:774: if (!(VISIBLE(stack->data) && is_stack_coherent(stack)))
      001BCC 59                    5964 	ld	e, c
      001BCD 50                    5965 	ld	d, b
      001BCE 13                    5966 	inc	de
      001BCF 13                    5967 	inc	de
      001BD0 1A                    5968 	ld	a, (de)
      001BD1 CB 77                 5969 	bit	6, a
      001BD3 28 75                 5970 	jr	Z, 00206$
      001BD5 C5                    5971 	push	bc
      001BD6 C5                    5972 	push	bc
      001BD7 CDr98r12              5973 	call	_is_stack_coherent
      001BDA E8 02                 5974 	add	sp, #2
      001BDC 7B                    5975 	ld	a, e
      001BDD C1                    5976 	pop	bc
      001BDE B7                    5977 	or	a, a
      001BDF 28 69                 5978 	jr	Z, 00206$
                                   5979 ;src/main.c:777: cursor.held_card = stack;
      001BE1 21r88r01              5980 	ld	hl, #_cursor
      001BE4 79                    5981 	ld	a, c
      001BE5 22                    5982 	ld	(hl+), a
      001BE6 70                    5983 	ld	(hl), b
                                   5984 ;src/main.c:778: cursor.hand_pile_idx = cursor.pile_idx;
      001BE7 FAr8Er01              5985 	ld	a, (#(_cursor + 0x0006) + 0)
      001BEA EAr8Dr01              5986 	ld	(#(_cursor + 0x0005)),a
                                   5987 ;src/main.c:779: cursor.held_stack_size = pile->height - cursor.height;
                                   5988 ;c
      001BED F8 0A                 5989 	ldhl	sp,#10
      001BEF 2A                    5990 	ld	a, (hl+)
      001BF0 5F                    5991 	ld	e, a
      001BF1 56                    5992 	ld	d, (hl)
      001BF2 21 04 00              5993 	ld	hl, #0x0004
      001BF5 19                    5994 	add	hl, de
      001BF6 4D                    5995 	ld	c, l
      001BF7 44                    5996 	ld	b, h
      001BF8 0A                    5997 	ld	a, (bc)
      001BF9 21r8Fr01              5998 	ld	hl, #(_cursor + 0x0007)
      001BFC 6E                    5999 	ld	l, (hl)
      001BFD 95                    6000 	sub	a, l
      001BFE EAr8Cr01              6001 	ld	(#(_cursor + 0x0004)),a
                                   6002 ;src/main.c:780: pile->height = cursor.height;
      001C01 FAr8Fr01              6003 	ld	a, (#(_cursor + 0x0007) + 0)
      001C04 02                    6004 	ld	(bc), a
                                   6005 ;src/main.c:781: flags |= FLAG_REDRAW_HAND;
      001C05 21r6Br01              6006 	ld	hl, #_flags
      001C08 7E                    6007 	ld	a, (hl)
      001C09 F6 02                 6008 	or	a, #0x02
      001C0B 77                    6009 	ld	(hl), a
                                   6010 ;src/main.c:782: if (cursor.height) {
      001C0C FAr8Fr01              6011 	ld	a, (#(_cursor + 0x0007) + 0)
      001C0F F8 0C                 6012 	ldhl	sp,	#12
      001C11 77                    6013 	ld	(hl), a
                                   6014 ;src/main.c:783: pile->top = top;
      001C12 F8 0A                 6015 	ldhl	sp,#10
      001C14 2A                    6016 	ld	a, (hl+)
      001C15 4F                    6017 	ld	c, a
      001C16 46                    6018 	ld	b, (hl)
      001C17 03                    6019 	inc	bc
      001C18 03                    6020 	inc	bc
                                   6021 ;src/main.c:785: cursor.card_to_show = top;
                                   6022 ;src/main.c:782: if (cursor.height) {
      001C19 23                    6023 	inc	hl
      001C1A 7E                    6024 	ld	a, (hl)
      001C1B B7                    6025 	or	a, a
      001C1C 28 1A                 6026 	jr	Z, 00227$
                                   6027 ;src/main.c:783: pile->top = top;
      001C1E 23                    6028 	inc	hl
      001C1F 2A                    6029 	ld	a, (hl+)
      001C20 02                    6030 	ld	(bc), a
      001C21 03                    6031 	inc	bc
      001C22 7E                    6032 	ld	a, (hl)
      001C23 02                    6033 	ld	(bc), a
                                   6034 ;src/main.c:784: top->next_card = NULL;
      001C24 2B                    6035 	dec	hl
      001C25 2A                    6036 	ld	a, (hl+)
      001C26 66                    6037 	ld	h, (hl)
      001C27 6F                    6038 	ld	l, a
      001C28 AF                    6039 	xor	a, a
      001C29 22                    6040 	ld	(hl+), a
      001C2A 77                    6041 	ld	(hl), a
                                   6042 ;src/main.c:785: cursor.card_to_show = top;
      001C2B 11r8Ar01              6043 	ld	de, #(_cursor + 0x0002)
      001C2E F8 0D                 6044 	ldhl	sp,	#13
      001C30 7E                    6045 	ld	a, (hl)
      001C31 12                    6046 	ld	(de), a
      001C32 13                    6047 	inc	de
      001C33 23                    6048 	inc	hl
      001C34 7E                    6049 	ld	a, (hl)
      001C35 12                    6050 	ld	(de), a
      001C36 18 12                 6051 	jr	00206$
      001C38                       6052 00227$:
                                   6053 ;src/main.c:787: pile->base = NULL;
      001C38 F8 0A                 6054 	ldhl	sp,	#10
      001C3A 2A                    6055 	ld	a, (hl+)
      001C3B 66                    6056 	ld	h, (hl)
      001C3C 6F                    6057 	ld	l, a
      001C3D AF                    6058 	xor	a, a
      001C3E 22                    6059 	ld	(hl+), a
      001C3F 77                    6060 	ld	(hl), a
                                   6061 ;src/main.c:788: pile->top = NULL;
      001C40 AF                    6062 	xor	a, a
      001C41 02                    6063 	ld	(bc), a
      001C42 03                    6064 	inc	bc
      001C43 02                    6065 	ld	(bc), a
                                   6066 ;src/main.c:789: cursor.card_to_show = NULL;
      001C44 21r8Ar01              6067 	ld	hl, #(_cursor + 0x0002)
      001C47 AF                    6068 	xor	a, a
      001C48 22                    6069 	ld	(hl+), a
      001C49 77                    6070 	ld	(hl), a
                                   6071 ;src/main.c:1277: }
      001C4A                       6072 00206$:
                                   6073 ;src/main.c:1279: prev_input = input;
      001C4A F8 00                 6074 	ldhl	sp,	#0
      001C4C 7E                    6075 	ld	a, (hl)
      001C4D EAr92r01              6076 	ld	(#_input_process_prev_input_65536_387),a
                                   6077 ;src/main.c:1280: }
      001C50 E8 0F                 6078 	add	sp, #15
      001C52 C9                    6079 	ret
                                   6080 ;src/main.c:1282: void main(void)
                                   6081 ;	---------------------------------
                                   6082 ; Function main
                                   6083 ; ---------------------------------
      001C53                       6084 _main::
      001C53 E8 F1                 6085 	add	sp, #-15
                                   6086 ;src/main.c:1284: font_init();
      001C55 CDr00r00              6087 	call	_font_init
                                   6088 ;src/main.c:1285: font_t font = font_load(font_min);
      001C58 21r00r00              6089 	ld	hl, #_font_min
      001C5B E5                    6090 	push	hl
      001C5C CDr00r00              6091 	call	_font_load
      001C5F E8 02                 6092 	add	sp, #2
                                   6093 ;src/main.c:1286: font_set(font);
      001C61 D5                    6094 	push	de
      001C62 CDr00r00              6095 	call	_font_set
      001C65 E8 02                 6096 	add	sp, #2
                                   6097 ;src/main.c:1287: set_bkg_data(OFFSET_BKG_FONT_ADDON, N_FONT_ADDON, font_addon);
      001C67 21r00r00              6098 	ld	hl, #_font_addon
      001C6A E5                    6099 	push	hl
      001C6B 11 25 01              6100 	ld	de, #0x0125
      001C6E D5                    6101 	push	de
      001C6F CDr00r00              6102 	call	_set_bkg_data
      001C72 E8 04                 6103 	add	sp, #4
                                   6104 ;src/main.c:1289: set_bkg_data(OFFSET_BKG_TITLE, N_TITLE, title_textures);
      001C74 21r00r00              6105 	ld	hl, #_title_textures
      001C77 E5                    6106 	push	hl
      001C78 11 80 30              6107 	ld	de, #0x3080
      001C7B D5                    6108 	push	de
      001C7C CDr00r00              6109 	call	_set_bkg_data
      001C7F E8 04                 6110 	add	sp, #4
                                   6111 ;src/main.c:1290: set_bkg_data(OFFSET_BKG_CARD, N_CARD, card_textures);
      001C81 21r00r00              6112 	ld	hl, #_card_textures
      001C84 E5                    6113 	push	hl
      001C85 11 B0 3A              6114 	ld	de, #0x3ab0
      001C88 D5                    6115 	push	de
      001C89 CDr00r00              6116 	call	_set_bkg_data
      001C8C E8 04                 6117 	add	sp, #4
                                   6118 ;src/main.c:1291: set_bkg_data(OFFSET_BKG_CARD_ADDON, N_CARD_ADDON, card_addon);
      001C8E 21r00r00              6119 	ld	hl, #_card_addon
      001C91 E5                    6120 	push	hl
      001C92 11 26 17              6121 	ld	de, #0x1726
      001C95 D5                    6122 	push	de
      001C96 CDr00r00              6123 	call	_set_bkg_data
      001C99 E8 04                 6124 	add	sp, #4
                                   6125 ;src/main.c:1292: set_bkg_data(OFFSET_BKG_BUTTON, N_BUTTON, button_textures);
      001C9B 21r00r00              6126 	ld	hl, #_button_textures
      001C9E E5                    6127 	push	hl
      001C9F 11 3D 07              6128 	ld	de, #0x073d
      001CA2 D5                    6129 	push	de
      001CA3 CDr00r00              6130 	call	_set_bkg_data
      001CA6 E8 04                 6131 	add	sp, #4
                                   6132 ;src/main.c:1293: set_sprite_data(OFFSET_SPRITE_CURSOR, N_CURSOR, cursor_textures);
      001CA8 21r00r00              6133 	ld	hl, #_cursor_textures
      001CAB E5                    6134 	push	hl
      001CAC 11 01 0A              6135 	ld	de, #0x0a01
      001CAF D5                    6136 	push	de
      001CB0 CDr00r00              6137 	call	_set_sprite_data
      001CB3 E8 04                 6138 	add	sp, #4
                                   6139 ;src/main.c:1295: nvram_check();
      001CB5 CDrA2r16              6140 	call	_nvram_check
                                   6141 ;src/main.c:1297: start_splash_screen();
      001CB8 CDr95r15              6142 	call	_start_splash_screen
                                   6143 ;src/main.c:1299: SHOW_BKG;
      001CBB F0r00                 6144 	ldh	a, (_LCDC_REG+0)
      001CBD F6 01                 6145 	or	a, #0x01
      001CBF E0r00                 6146 	ldh	(_LCDC_REG+0),a
                                   6147 ;src/main.c:1300: SHOW_SPRITES;
      001CC1 F0r00                 6148 	ldh	a, (_LCDC_REG+0)
      001CC3 F6 02                 6149 	or	a, #0x02
      001CC5 E0r00                 6150 	ldh	(_LCDC_REG+0),a
                                   6151 ;src/main.c:1301: DISPLAY_ON;
      001CC7 F0r00                 6152 	ldh	a, (_LCDC_REG+0)
      001CC9 F6 80                 6153 	or	a, #0x80
      001CCB E0r00                 6154 	ldh	(_LCDC_REG+0),a
                                   6155 ;src/main.c:1303: while (1) {
      001CCD                       6156 00102$:
                                   6157 ;src/main.c:1164: UINT8 input = joypad();
      001CCD CDr00r00              6158 	call	_joypad
      001CD0 F8 00                 6159 	ldhl	sp,	#0
      001CD2 73                    6160 	ld	(hl), e
                                   6161 ;src/main.c:1165: UINT8 new_input = input & ~prev_input;
      001CD3 FAr93r01              6162 	ld	a, (#_main_prev_input_327681_450)
      001CD6 2F                    6163 	cpl
      001CD7 F8 00                 6164 	ldhl	sp,	#0
      001CD9 A6                    6165 	and	a, (hl)
                                   6166 ;src/main.c:1166: if (new_input) {
      001CDA 4F                    6167 	ld	c, a
      001CDB B7                    6168 	or	a, a
      001CDC CAr82r21              6169 	jp	Z, 00232$
                                   6170 ;src/main.c:1167: switch (flags & FLAG_GAME_STATE) {
      001CDF FAr6Br01              6171 	ld	a, (#_flags)
      001CE2 E6 18                 6172 	and	a, #0x18
      001CE4 47                    6173 	ld	b, a
      001CE5 1E 00                 6174 	ld	e, #0x00
                                   6175 ;src/main.c:1169: if (new_input & J_START) {
      001CE7 79                    6176 	ld	a, c
      001CE8 E6 80                 6177 	and	a, #0x80
      001CEA F8 01                 6178 	ldhl	sp,	#1
      001CEC 77                    6179 	ld	(hl), a
      001CED AF                    6180 	xor	a, a
      001CEE 23                    6181 	inc	hl
      001CEF 77                    6182 	ld	(hl), a
                                   6183 ;src/main.c:1171: if (flags & FLAG_PLAYING_ANIMATION)
      001CF0 FAr6Br01              6184 	ld	a, (#_flags)
      001CF3 F8 03                 6185 	ldhl	sp,	#3
      001CF5 77                    6186 	ld	(hl), a
                                   6187 ;src/main.c:1167: switch (flags & FLAG_GAME_STATE) {
      001CF6 78                    6188 	ld	a, b
      001CF7 B7                    6189 	or	a, a
      001CF8 B3                    6190 	or	a, e
      001CF9 28 47                 6191 	jr	Z, 00114$
                                   6192 ;src/main.c:1187: } else if (new_input & J_A) {
      001CFB 79                    6193 	ld	a, c
      001CFC E6 10                 6194 	and	a, #0x10
      001CFE 23                    6195 	inc	hl
      001CFF 77                    6196 	ld	(hl), a
      001D00 AF                    6197 	xor	a, a
      001D01 23                    6198 	inc	hl
      001D02 77                    6199 	ld	(hl), a
                                   6200 ;src/main.c:1195: && cursor.pile_idx < 2u) {
      001D03 79                    6201 	ld	a, c
      001D04 E6 01                 6202 	and	a, #0x01
      001D06 23                    6203 	inc	hl
      001D07 77                    6204 	ld	(hl), a
      001D08 AF                    6205 	xor	a, a
      001D09 23                    6206 	inc	hl
      001D0A 77                    6207 	ld	(hl), a
                                   6208 ;src/main.c:1198: && cursor.pile_idx) {
      001D0B 79                    6209 	ld	a, c
      001D0C E6 02                 6210 	and	a, #0x02
      001D0E 23                    6211 	inc	hl
      001D0F 77                    6212 	ld	(hl), a
      001D10 AF                    6213 	xor	a, a
      001D11 23                    6214 	inc	hl
      001D12 77                    6215 	ld	(hl), a
                                   6216 ;src/main.c:1200: } else if (new_input & J_UP) {
      001D13 79                    6217 	ld	a, c
      001D14 E6 04                 6218 	and	a, #0x04
      001D16 23                    6219 	inc	hl
      001D17 77                    6220 	ld	(hl), a
      001D18 AF                    6221 	xor	a, a
      001D19 23                    6222 	inc	hl
      001D1A 77                    6223 	ld	(hl), a
                                   6224 ;src/main.c:1202: } else if (new_input & J_DOWN) {
      001D1B 79                    6225 	ld	a, c
      001D1C E6 08                 6226 	and	a, #0x08
      001D1E 23                    6227 	inc	hl
      001D1F 77                    6228 	ld	(hl), a
      001D20 AF                    6229 	xor	a, a
      001D21 23                    6230 	inc	hl
      001D22 77                    6231 	ld	(hl), a
                                   6232 ;src/main.c:1181: flags |= FLAG_REDRAW_CURSOR;
      001D23 F8 03                 6233 	ldhl	sp,	#3
      001D25 7E                    6234 	ld	a, (hl)
      001D26 F6 01                 6235 	or	a, #0x01
      001D28 F8 0E                 6236 	ldhl	sp,	#14
      001D2A 77                    6237 	ld	(hl), a
                                   6238 ;src/main.c:1167: switch (flags & FLAG_GAME_STATE) {
      001D2B 78                    6239 	ld	a, b
      001D2C D6 08                 6240 	sub	a, #0x08
      001D2E B3                    6241 	or	a, e
      001D2F 28 61                 6242 	jr	Z, 00115$
      001D31 78                    6243 	ld	a, b
      001D32 D6 10                 6244 	sub	a, #0x10
      001D34 B3                    6245 	or	a, e
      001D35 CArB7r1E              6246 	jp	Z,00229$
      001D38 78                    6247 	ld	a, b
      001D39 D6 18                 6248 	sub	a, #0x18
      001D3B B3                    6249 	or	a, e
      001D3C CAr34r1E              6250 	jp	Z,00146$
      001D3F C3r82r21              6251 	jp	00232$
                                   6252 ;src/main.c:1168: case FLAG_GAME_STATE_SPLASH:
      001D42                       6253 00114$:
                                   6254 ;src/main.c:1169: if (new_input & J_START) {
      001D42 F8 02                 6255 	ldhl	sp,	#2
      001D44 3A                    6256 	ld	a, (hl-)
      001D45 B6                    6257 	or	a, (hl)
      001D46 28 36                 6258 	jr	Z, 00112$
                                   6259 ;src/main.c:1170: initrand(DIV_REG);
      001D48 F0r00                 6260 	ldh	a, (_DIV_REG+0)
      001D4A 4F                    6261 	ld	c, a
      001D4B 06 00                 6262 	ld	b, #0x00
      001D4D C5                    6263 	push	bc
      001D4E CDr00r00              6264 	call	_initrand
      001D51 E8 02                 6265 	add	sp, #2
                                   6266 ;src/main.c:1171: if (flags & FLAG_PLAYING_ANIMATION)
      001D53 FAr6Br01              6267 	ld	a, (#_flags)
      001D56 CB 57                 6268 	bit	2, a
      001D58 28 03                 6269 	jr	Z, 00105$
                                   6270 ;src/main.c:1172: dynamic_metasprite_end_animation();
      001D5A CDr0Br06              6271 	call	_dynamic_metasprite_end_animation
      001D5D                       6272 00105$:
                                   6273 ;src/main.c:1072: flags &= ~FLAG_GAME_STATE;
      001D5D 21r6Br01              6274 	ld	hl, #_flags
      001D60 7E                    6275 	ld	a, (hl)
      001D61 E6 E7                 6276 	and	a, #0xe7
      001D63 77                    6277 	ld	(hl), a
                                   6278 ;src/main.c:1073: flags |= FLAG_GAME_STATE_SETTINGS | FLAG_REDRAW_CURSOR;
      001D64 7E                    6279 	ld	a, (hl)
      001D65 F6 19                 6280 	or	a, #0x19
      001D67 77                    6281 	ld	(hl), a
                                   6282 ;src/main.c:1074: cursor.pile_idx = 0;
      001D68 21r8Er01              6283 	ld	hl, #(_cursor + 0x0006)
      001D6B 36 00                 6284 	ld	(hl), #0x00
                                   6285 ;src/main.c:1075: cursor.height = 0;
      001D6D 21r8Fr01              6286 	ld	hl, #(_cursor + 0x0007)
      001D70 36 00                 6287 	ld	(hl), #0x00
                                   6288 ;src/main.c:1076: draw_setting_frame_metasprites();
      001D72 CDr88r05              6289 	call	_draw_setting_frame_metasprites
                                   6290 ;src/main.c:1077: clear_bkg();
      001D75 CDrC2r01              6291 	call	_clear_bkg
                                   6292 ;src/main.c:1078: draw_bkg_settings();
      001D78 CDr1Fr03              6293 	call	_draw_bkg_settings
                                   6294 ;src/main.c:1173: start_settings();
      001D7B C3r82r21              6295 	jp	00232$
      001D7E                       6296 00112$:
                                   6297 ;src/main.c:1174: } else if (new_input & J_SELECT) {
      001D7E CB 71                 6298 	bit	6, c
      001D80 CAr82r21              6299 	jp	Z,00232$
                                   6300 ;src/main.c:1175: if (flags & FLAG_PLAYING_ANIMATION)
      001D83 F8 03                 6301 	ldhl	sp,	#3
      001D85 CB 56                 6302 	bit	2, (hl)
      001D87 28 03                 6303 	jr	Z, 00109$
                                   6304 ;src/main.c:1176: dynamic_metasprite_end_animation();
      001D89 CDr0Br06              6305 	call	_dynamic_metasprite_end_animation
      001D8C                       6306 00109$:
                                   6307 ;src/main.c:1177: start_leaderboard();
      001D8C CDrEEr15              6308 	call	_start_leaderboard
                                   6309 ;src/main.c:1179: break;
      001D8F C3r82r21              6310 	jp	00232$
                                   6311 ;src/main.c:1180: case FLAG_GAME_STATE_LEADERBOARD:
      001D92                       6312 00115$:
                                   6313 ;src/main.c:1181: flags |= FLAG_REDRAW_CURSOR;
      001D92 F8 0E                 6314 	ldhl	sp,	#14
      001D94 7E                    6315 	ld	a, (hl)
      001D95 EAr6Br01              6316 	ld	(#_flags),a
                                   6317 ;src/main.c:1182: if (selected_leaderboard) {
      001D98 21r72r01              6318 	ld	hl, #_selected_leaderboard + 1
      001D9B 3A                    6319 	ld	a, (hl-)
      001D9C B6                    6320 	or	a, (hl)
      001D9D CAr28r1E              6321 	jp	Z, 00144$
                                   6322 ;src/main.c:1184: && cursor.pile_idx == 2u) {
      001DA0 F8 02                 6323 	ldhl	sp,	#2
      001DA2 3A                    6324 	ld	a, (hl-)
      001DA3 B6                    6325 	or	a, (hl)
      001DA4 28 17                 6326 	jr	Z, 00139$
      001DA6 FAr8Er01              6327 	ld	a, (#(_cursor + 0x0006) + 0)
      001DA9 D6 02                 6328 	sub	a, #0x02
      001DAB 20 10                 6329 	jr	NZ, 00139$
                                   6330 ;src/main.c:1185: selected_leaderboard = NULL;
      001DAD 21r71r01              6331 	ld	hl, #_selected_leaderboard
      001DB0 3E 00                 6332 	ld	a, #0x00
      001DB2 22                    6333 	ld	(hl+), a
      001DB3 36 00                 6334 	ld	(hl), #0x00
                                   6335 ;/home/wojtek/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      001DB5 21r32r00              6336 	ld	hl, #(_shadow_OAM + 0x0032)
      001DB8 36 00                 6337 	ld	(hl), #0x00
                                   6338 ;src/main.c:1186: set_sprite_tile(SPRITE_FRAME, OFFSET_SPRITE_NONE);
      001DBA C3r82r21              6339 	jp	00232$
      001DBD                       6340 00139$:
                                   6341 ;src/main.c:1187: } else if (new_input & J_A) {
      001DBD F8 05                 6342 	ldhl	sp,	#5
      001DBF 3A                    6343 	ld	a, (hl-)
      001DC0 B6                    6344 	or	a, (hl)
      001DC1 28 1D                 6345 	jr	Z, 00137$
                                   6346 ;src/main.c:1188: if (cursor.pile_idx == 2u) {
      001DC3 01r8Er01              6347 	ld	bc, #_cursor+6
      001DC6 0A                    6348 	ld	a, (bc)
      001DC7 FE 02                 6349 	cp	a, #0x02
      001DC9 20 10                 6350 	jr	NZ, 00121$
                                   6351 ;src/main.c:1189: selected_leaderboard = NULL;
      001DCB 21r71r01              6352 	ld	hl, #_selected_leaderboard
      001DCE 3E 00                 6353 	ld	a, #0x00
      001DD0 22                    6354 	ld	(hl+), a
      001DD1 36 00                 6355 	ld	(hl), #0x00
                                   6356 ;/home/wojtek/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      001DD3 21r32r00              6357 	ld	hl, #(_shadow_OAM + 0x0032)
      001DD6 36 00                 6358 	ld	(hl), #0x00
                                   6359 ;src/main.c:1190: set_sprite_tile(SPRITE_FRAME, OFFSET_SPRITE_NONE);
      001DD8 C3r82r21              6360 	jp	00232$
      001DDB                       6361 00121$:
                                   6362 ;src/main.c:1192: cursor.pile_idx++;
      001DDB 3C                    6363 	inc	a
      001DDC 02                    6364 	ld	(bc), a
      001DDD C3r82r21              6365 	jp	00232$
      001DE0                       6366 00137$:
                                   6367 ;src/main.c:1195: && cursor.pile_idx < 2u) {
      001DE0 F8 07                 6368 	ldhl	sp,	#7
      001DE2 3A                    6369 	ld	a, (hl-)
      001DE3 B6                    6370 	or	a, (hl)
      001DE4 28 0D                 6371 	jr	Z, 00135$
      001DE6 01r8Er01              6372 	ld	bc, #_cursor+6
      001DE9 0A                    6373 	ld	a, (bc)
      001DEA FE 02                 6374 	cp	a, #0x02
      001DEC 30 05                 6375 	jr	NC, 00135$
                                   6376 ;src/main.c:1196: cursor.pile_idx++;
      001DEE 3C                    6377 	inc	a
      001DEF 02                    6378 	ld	(bc), a
      001DF0 C3r82r21              6379 	jp	00232$
      001DF3                       6380 00135$:
                                   6381 ;src/main.c:1198: && cursor.pile_idx) {
      001DF3 F8 09                 6382 	ldhl	sp,	#9
      001DF5 3A                    6383 	ld	a, (hl-)
      001DF6 B6                    6384 	or	a, (hl)
      001DF7 28 0C                 6385 	jr	Z, 00133$
      001DF9 01r8Er01              6386 	ld	bc, #_cursor+6
      001DFC 0A                    6387 	ld	a, (bc)
      001DFD B7                    6388 	or	a, a
      001DFE 28 05                 6389 	jr	Z, 00133$
                                   6390 ;src/main.c:1199: cursor.pile_idx--;
      001E00 3D                    6391 	dec	a
      001E01 02                    6392 	ld	(bc), a
      001E02 C3r82r21              6393 	jp	00232$
      001E05                       6394 00133$:
                                   6395 ;src/main.c:1200: } else if (new_input & J_UP) {
      001E05 F8 0B                 6396 	ldhl	sp,	#11
      001E07 3A                    6397 	ld	a, (hl-)
      001E08 B6                    6398 	or	a, (hl)
      001E09 28 0B                 6399 	jr	Z, 00131$
                                   6400 ;src/main.c:1201: inc_letter(1);
      001E0B 3E 01                 6401 	ld	a, #0x01
      001E0D F5                    6402 	push	af
      001E0E 33                    6403 	inc	sp
      001E0F CDr4Cr17              6404 	call	_inc_letter
      001E12 33                    6405 	inc	sp
      001E13 C3r82r21              6406 	jp	00232$
      001E16                       6407 00131$:
                                   6408 ;src/main.c:1202: } else if (new_input & J_DOWN) {
      001E16 F8 0D                 6409 	ldhl	sp,	#13
      001E18 3A                    6410 	ld	a, (hl-)
      001E19 B6                    6411 	or	a, (hl)
      001E1A CAr82r21              6412 	jp	Z, 00232$
                                   6413 ;src/main.c:1203: inc_letter(-1);
      001E1D 3E FF                 6414 	ld	a, #0xff
      001E1F F5                    6415 	push	af
      001E20 33                    6416 	inc	sp
      001E21 CDr4Cr17              6417 	call	_inc_letter
      001E24 33                    6418 	inc	sp
      001E25 C3r82r21              6419 	jp	00232$
      001E28                       6420 00144$:
                                   6421 ;src/main.c:1205: } else if (new_input & (J_START | J_SELECT | J_A | J_B)) {
      001E28 79                    6422 	ld	a, c
      001E29 E6 F0                 6423 	and	a, #0xf0
      001E2B CAr82r21              6424 	jp	Z,00232$
                                   6425 ;src/main.c:1206: start_splash_screen();
      001E2E CDr95r15              6426 	call	_start_splash_screen
                                   6427 ;src/main.c:1208: break;
      001E31 C3r82r21              6428 	jp	00232$
                                   6429 ;src/main.c:1209: case FLAG_GAME_STATE_SETTINGS:
      001E34                       6430 00146$:
                                   6431 ;src/main.c:1210: flags |= FLAG_REDRAW_CURSOR;
      001E34 F8 0E                 6432 	ldhl	sp,	#14
      001E36 7E                    6433 	ld	a, (hl)
      001E37 EAr6Br01              6434 	ld	(#_flags),a
                                   6435 ;src/main.c:1211: if (new_input & J_START) {
      001E3A F8 02                 6436 	ldhl	sp,	#2
      001E3C 3A                    6437 	ld	a, (hl-)
      001E3D B6                    6438 	or	a, (hl)
      001E3E 28 05                 6439 	jr	Z, 00163$
                                   6440 ;src/main.c:1212: start_game();
      001E40 CDr43r15              6441 	call	_start_game
      001E43 18 65                 6442 	jr	00164$
      001E45                       6443 00163$:
                                   6444 ;src/main.c:1214: && cursor.height) {
      001E45 F8 09                 6445 	ldhl	sp,	#9
      001E47 3A                    6446 	ld	a, (hl-)
      001E48 B6                    6447 	or	a, (hl)
      001E49 28 0B                 6448 	jr	Z, 00161$
      001E4B 01r8Fr01              6449 	ld	bc, #_cursor+7
      001E4E 0A                    6450 	ld	a, (bc)
      001E4F B7                    6451 	or	a, a
      001E50 28 04                 6452 	jr	Z, 00161$
                                   6453 ;src/main.c:1215: cursor.height--;
      001E52 3D                    6454 	dec	a
      001E53 02                    6455 	ld	(bc), a
      001E54 18 54                 6456 	jr	00164$
      001E56                       6457 00161$:
                                   6458 ;src/main.c:1217: && cursor.height + 1u < setting_pile_heights[cursor.pile_idx]) {
      001E56 F8 07                 6459 	ldhl	sp,	#7
      001E58 3A                    6460 	ld	a, (hl-)
      001E59 B6                    6461 	or	a, (hl)
      001E5A 28 23                 6462 	jr	Z, 00159$
      001E5C 21r8Fr01              6463 	ld	hl, #(_cursor + 0x0007)
      001E5F 4E                    6464 	ld	c, (hl)
      001E60 59                    6465 	ld	e, c
      001E61 16 00                 6466 	ld	d, #0x00
      001E63 13                    6467 	inc	de
      001E64 FAr8Er01              6468 	ld	a, (#_cursor + 6)
      001E67 C6r5C                 6469 	add	a, #<(_setting_pile_heights)
      001E69 6F                    6470 	ld	l, a
      001E6A 3E 00                 6471 	ld	a, #0x00
      001E6C CEs00                 6472 	adc	a, #>(_setting_pile_heights)
      001E6E 67                    6473 	ld	h, a
      001E6F 6E                    6474 	ld	l, (hl)
      001E70 06 00                 6475 	ld	b, #0x00
      001E72 7B                    6476 	ld	a, e
      001E73 95                    6477 	sub	a, l
      001E74 7A                    6478 	ld	a, d
      001E75 98                    6479 	sbc	a, b
      001E76 30 07                 6480 	jr	NC, 00159$
                                   6481 ;src/main.c:1218: cursor.height++;
      001E78 0C                    6482 	inc	c
      001E79 21r8Fr01              6483 	ld	hl, #(_cursor + 0x0007)
      001E7C 71                    6484 	ld	(hl), c
      001E7D 18 2B                 6485 	jr	00164$
      001E7F                       6486 00159$:
                                   6487 ;src/main.c:1220: && cursor.pile_idx) {
      001E7F F8 0B                 6488 	ldhl	sp,	#11
      001E81 3A                    6489 	ld	a, (hl-)
      001E82 B6                    6490 	or	a, (hl)
      001E83 28 10                 6491 	jr	Z, 00157$
      001E85 01r8Er01              6492 	ld	bc, #_cursor + 6
      001E88 0A                    6493 	ld	a, (bc)
      001E89 B7                    6494 	or	a, a
      001E8A 28 09                 6495 	jr	Z, 00157$
                                   6496 ;src/main.c:1221: cursor.pile_idx--;
      001E8C 3D                    6497 	dec	a
      001E8D 02                    6498 	ld	(bc), a
                                   6499 ;src/main.c:1222: cursor.height = 0;
      001E8E 21r8Fr01              6500 	ld	hl, #(_cursor + 0x0007)
      001E91 36 00                 6501 	ld	(hl), #0x00
      001E93 18 15                 6502 	jr	00164$
      001E95                       6503 00157$:
                                   6504 ;src/main.c:1224: && cursor.pile_idx < NUM_SETTING_PILES - 1u) {
      001E95 F8 0D                 6505 	ldhl	sp,	#13
      001E97 3A                    6506 	ld	a, (hl-)
      001E98 B6                    6507 	or	a, (hl)
      001E99 28 0F                 6508 	jr	Z, 00164$
      001E9B 01r8Er01              6509 	ld	bc, #_cursor + 6
      001E9E 0A                    6510 	ld	a, (bc)
      001E9F FE 03                 6511 	cp	a, #0x03
      001EA1 30 07                 6512 	jr	NC, 00164$
                                   6513 ;src/main.c:1225: cursor.pile_idx++;
      001EA3 3C                    6514 	inc	a
      001EA4 02                    6515 	ld	(bc), a
                                   6516 ;src/main.c:1226: cursor.height = 0;
      001EA5 21r8Fr01              6517 	ld	hl, #(_cursor + 0x0007)
      001EA8 36 00                 6518 	ld	(hl), #0x00
      001EAA                       6519 00164$:
                                   6520 ;src/main.c:1228: if (new_input & J_A) {
      001EAA F8 05                 6521 	ldhl	sp,	#5
      001EAC 3A                    6522 	ld	a, (hl-)
      001EAD B6                    6523 	or	a, (hl)
      001EAE CAr82r21              6524 	jp	Z, 00232$
                                   6525 ;src/main.c:1229: set_cursor_setting();
      001EB1 CDr53r0E              6526 	call	_set_cursor_setting
                                   6527 ;src/main.c:1231: break;
      001EB4 C3r82r21              6528 	jp	00232$
                                   6529 ;src/main.c:1232: case FLAG_GAME_STATE_INGAME:
      001EB7                       6530 00229$:
                                   6531 ;src/main.c:1233: if (cursor.held_card) {
      001EB7 21r88r01              6532 	ld	hl, #_cursor
      001EBA 2A                    6533 	ld	a, (hl+)
      001EBB B6                    6534 	or	a,(hl)
      001EBC CAr71r1F              6535 	jp	Z, 00227$
                                   6536 ;src/main.c:1234: flags |= FLAG_REDRAW_HAND;
      001EBF F8 03                 6537 	ldhl	sp,	#3
      001EC1 7E                    6538 	ld	a, (hl)
      001EC2 F6 02                 6539 	or	a, #0x02
      001EC4 EAr6Br01              6540 	ld	(#_flags),a
                                   6541 ;src/main.c:1236: && cursor.hand_pile_idx != 0) {
      001EC7 F8 09                 6542 	ldhl	sp,	#9
      001EC9 3A                    6543 	ld	a, (hl-)
      001ECA B6                    6544 	or	a, (hl)
      001ECB 28 0B                 6545 	jr	Z, 00172$
      001ECD 01r8Dr01              6546 	ld	bc, #_cursor+5
      001ED0 0A                    6547 	ld	a, (bc)
      001ED1 B7                    6548 	or	a, a
      001ED2 28 04                 6549 	jr	Z, 00172$
                                   6550 ;src/main.c:1237: cursor.hand_pile_idx--;
      001ED4 3D                    6551 	dec	a
      001ED5 02                    6552 	ld	(bc), a
      001ED6 18 10                 6553 	jr	00173$
      001ED8                       6554 00172$:
                                   6555 ;src/main.c:1239: && cursor.hand_pile_idx < 9) {
      001ED8 F8 07                 6556 	ldhl	sp,	#7
      001EDA 3A                    6557 	ld	a, (hl-)
      001EDB B6                    6558 	or	a, (hl)
      001EDC 28 0A                 6559 	jr	Z, 00173$
      001EDE 01r8Dr01              6560 	ld	bc, #_cursor+5
      001EE1 0A                    6561 	ld	a, (bc)
      001EE2 FE 09                 6562 	cp	a, #0x09
      001EE4 30 02                 6563 	jr	NC, 00173$
                                   6564 ;src/main.c:1240: cursor.hand_pile_idx++;
      001EE6 3C                    6565 	inc	a
      001EE7 02                    6566 	ld	(bc), a
      001EE8                       6567 00173$:
                                   6568 ;src/main.c:1243: && ~flags & FLAG_PLAYING_ANIMATION) {
      001EE8 F8 05                 6569 	ldhl	sp,	#5
      001EEA 3A                    6570 	ld	a, (hl-)
      001EEB B6                    6571 	or	a, (hl)
      001EEC CAr82r21              6572 	jp	Z, 00232$
      001EEF FAr6Br01              6573 	ld	a, (#_flags)
      001EF2 06 00                 6574 	ld	b, #0x00
      001EF4 2F                    6575 	cpl
      001EF5 4F                    6576 	ld	c, a
      001EF6 78                    6577 	ld	a, b
      001EF7 2F                    6578 	cpl
      001EF8 CB 51                 6579 	bit	2, c
      001EFA CAr82r21              6580 	jp	Z,00232$
                                   6581 ;src/main.c:795: Pile *pile = IDX_PTR(piles, cursor.hand_pile_idx);
      001EFD 01r38r01              6582 	ld	bc, #_piles+0
      001F00 FAr8Dr01              6583 	ld	a, (#(_cursor + 0x0005) + 0)
      001F03 F8 0E                 6584 	ldhl	sp,	#14
      001F05 77                    6585 	ld	(hl), a
      001F06 F8 0E                 6586 	ldhl	sp,	#14
      001F08 5E                    6587 	ld	e, (hl)
      001F09 16 00                 6588 	ld	d, #0x00
      001F0B 6B                    6589 	ld	l, e
      001F0C 62                    6590 	ld	h, d
      001F0D 29                    6591 	add	hl, hl
      001F0E 29                    6592 	add	hl, hl
      001F0F 19                    6593 	add	hl, de
      001F10 09                    6594 	add	hl, bc
      001F11 4D                    6595 	ld	c, l
      001F12 44                    6596 	ld	b, h
                                   6597 ;src/main.c:796: if (cursor.hand_pile_idx == cursor.pile_idx) {
      001F13 21r8Er01              6598 	ld	hl, #_cursor + 6
      001F16 5E                    6599 	ld	e, (hl)
      001F17 F8 0E                 6600 	ldhl	sp,	#14
      001F19 7E                    6601 	ld	a, (hl)
      001F1A 93                    6602 	sub	a, e
      001F1B 20 09                 6603 	jr	NZ, 00179$
                                   6604 ;src/main.c:797: pile_append_cursor_stack(pile);
      001F1D C5                    6605 	push	bc
      001F1E CDr5Cr13              6606 	call	_pile_append_cursor_stack
      001F21 E8 02                 6607 	add	sp, #2
      001F23 C3r82r21              6608 	jp	00232$
      001F26                       6609 00179$:
                                   6610 ;src/main.c:798: } else if (!pile->height
      001F26 21 04 00              6611 	ld	hl, #0x0004
      001F29 09                    6612 	add	hl, bc
      001F2A 7E                    6613 	ld	a, (hl)
      001F2B B7                    6614 	or	a, a
      001F2C 28 2E                 6615 	jr	Z, 00177$
                                   6616 ;src/main.c:799: || RANK(pile->top->data) == RANK(cursor.held_card->data) + 1u) {
      001F2E 69                    6617 	ld	l, c
      001F2F 60                    6618 	ld	h, b
      001F30 23                    6619 	inc	hl
      001F31 23                    6620 	inc	hl
      001F32 2A                    6621 	ld	a, (hl+)
      001F33 66                    6622 	ld	h, (hl)
      001F34 6F                    6623 	ld	l, a
      001F35 23                    6624 	inc	hl
      001F36 23                    6625 	inc	hl
      001F37 7E                    6626 	ld	a, (hl)
      001F38 E6 0F                 6627 	and	a, #0x0f
      001F3A F8 0D                 6628 	ldhl	sp,	#13
      001F3C 77                    6629 	ld	(hl), a
      001F3D AF                    6630 	xor	a, a
      001F3E 23                    6631 	inc	hl
      001F3F 77                    6632 	ld	(hl), a
      001F40 21r88r01              6633 	ld	hl, #_cursor
      001F43 2A                    6634 	ld	a, (hl+)
      001F44 66                    6635 	ld	h, (hl)
      001F45 6F                    6636 	ld	l, a
      001F46 23                    6637 	inc	hl
      001F47 23                    6638 	inc	hl
      001F48 7E                    6639 	ld	a, (hl)
      001F49 E6 0F                 6640 	and	a, #0x0f
      001F4B 5F                    6641 	ld	e, a
      001F4C 16 00                 6642 	ld	d, #0x00
      001F4E 13                    6643 	inc	de
      001F4F F8 0D                 6644 	ldhl	sp,	#13
      001F51 7E                    6645 	ld	a, (hl)
      001F52 93                    6646 	sub	a, e
      001F53 C2r82r21              6647 	jp	NZ,00232$
      001F56 23                    6648 	inc	hl
      001F57 7E                    6649 	ld	a, (hl)
      001F58 92                    6650 	sub	a, d
      001F59 C2r82r21              6651 	jp	NZ,00232$
      001F5C                       6652 00177$:
                                   6653 ;src/main.c:800: pile_append_cursor_stack(pile);
      001F5C C5                    6654 	push	bc
      001F5D CDr5Cr13              6655 	call	_pile_append_cursor_stack
      001F60 E8 02                 6656 	add	sp, #2
                                   6657 ;src/main.c:801: score--;
      001F62 21r70r01              6658 	ld	hl, #_score + 1
      001F65 2B                    6659 	dec	hl
      001F66 2A                    6660 	ld	a, (hl+)
      001F67 5F                    6661 	ld	e, a
      001F68 56                    6662 	ld	d, (hl)
      001F69 1B                    6663 	dec	de
      001F6A 2B                    6664 	dec	hl
      001F6B 7B                    6665 	ld	a, e
      001F6C 22                    6666 	ld	(hl+), a
      001F6D 72                    6667 	ld	(hl), d
                                   6668 ;src/main.c:1244: cursor_place_stack();
      001F6E C3r82r21              6669 	jp	00232$
      001F71                       6670 00227$:
                                   6671 ;src/main.c:1247: flags |= FLAG_REDRAW_CURSOR;
      001F71 F8 0E                 6672 	ldhl	sp,	#14
      001F73 7E                    6673 	ld	a, (hl)
      001F74 EAr6Br01              6674 	ld	(#_flags),a
                                   6675 ;src/main.c:1248: if (new_input & J_DOWN) {
      001F77 F8 0D                 6676 	ldhl	sp,	#13
      001F79 3A                    6677 	ld	a, (hl-)
      001F7A B6                    6678 	or	a, (hl)
      001F7B 28 3D                 6679 	jr	Z, 00205$
                                   6680 ;src/main.c:1249: if (cursor.pile_idx == PILE_IDX_DECK)
      001F7D 21r8Er01              6681 	ld	hl, #_cursor + 6
      001F80 4E                    6682 	ld	c, (hl)
      001F81 79                    6683 	ld	a, c
                                   6684 ;src/main.c:1250: cursor.pile_idx = 0;
      001F82 D6 0A                 6685 	sub	a,#0x0a
      001F84 20 03                 6686 	jr	NZ, 00188$
      001F86 77                    6687 	ld	(hl),a
      001F87 18 79                 6688 	jr	00206$
      001F89                       6689 00188$:
                                   6690 ;src/main.c:1251: else if (cursor.height + 1u < piles[cursor.pile_idx].height)
      001F89 FAr8Fr01              6691 	ld	a, (#(_cursor + 0x0007) + 0)
      001F8C 16 00                 6692 	ld	d, #0x00
      001F8E 5F                    6693 	ld	e, a
      001F8F 13                    6694 	inc	de
      001F90 F8 0D                 6695 	ldhl	sp,	#13
      001F92 7B                    6696 	ld	a, e
      001F93 22                    6697 	ld	(hl+), a
      001F94 72                    6698 	ld	(hl), d
      001F95 06 00                 6699 	ld	b, #0x00
      001F97 69                    6700 	ld	l, c
      001F98 60                    6701 	ld	h, b
      001F99 29                    6702 	add	hl, hl
      001F9A 29                    6703 	add	hl, hl
      001F9B 09                    6704 	add	hl, bc
      001F9C 11r38r01              6705 	ld	de, #_piles
      001F9F 19                    6706 	add	hl, de
      001FA0 01 04 00              6707 	ld	bc, #0x0004
      001FA3 09                    6708 	add	hl, bc
      001FA4 4E                    6709 	ld	c, (hl)
      001FA5 06 00                 6710 	ld	b, #0x00
      001FA7 F8 0D                 6711 	ldhl	sp,	#13
      001FA9 7E                    6712 	ld	a, (hl)
      001FAA 91                    6713 	sub	a, c
      001FAB 23                    6714 	inc	hl
      001FAC 7E                    6715 	ld	a, (hl)
      001FAD 98                    6716 	sbc	a, b
      001FAE 30 52                 6717 	jr	NC, 00206$
                                   6718 ;src/main.c:1252: change_cursor_height(1);
      001FB0 3E 01                 6719 	ld	a, #0x01
      001FB2 F5                    6720 	push	af
      001FB3 33                    6721 	inc	sp
      001FB4 CDr9Fr0E              6722 	call	_change_cursor_height
      001FB7 33                    6723 	inc	sp
      001FB8 18 48                 6724 	jr	00206$
      001FBA                       6725 00205$:
                                   6726 ;src/main.c:1253: } else if (new_input & J_UP) {
      001FBA F8 0B                 6727 	ldhl	sp,	#11
      001FBC 3A                    6728 	ld	a, (hl-)
      001FBD B6                    6729 	or	a, (hl)
      001FBE 28 17                 6730 	jr	Z, 00203$
                                   6731 ;src/main.c:1254: if (cursor.height == 0)
      001FC0 FAr8Fr01              6732 	ld	a, (#(_cursor + 0x0007) + 0)
      001FC3 B7                    6733 	or	a, a
      001FC4 20 07                 6734 	jr	NZ, 00192$
                                   6735 ;src/main.c:1255: cursor.pile_idx = PILE_IDX_DECK;
      001FC6 21r8Er01              6736 	ld	hl, #(_cursor + 0x0006)
      001FC9 36 0A                 6737 	ld	(hl), #0x0a
      001FCB 18 35                 6738 	jr	00206$
      001FCD                       6739 00192$:
                                   6740 ;src/main.c:1257: change_cursor_height(-1);
      001FCD 3E FF                 6741 	ld	a, #0xff
      001FCF F5                    6742 	push	af
      001FD0 33                    6743 	inc	sp
      001FD1 CDr9Fr0E              6744 	call	_change_cursor_height
      001FD4 33                    6745 	inc	sp
      001FD5 18 2B                 6746 	jr	00206$
      001FD7                       6747 00203$:
                                   6748 ;src/main.c:1259: && cursor.pile_idx != 0
      001FD7 F8 09                 6749 	ldhl	sp,	#9
      001FD9 3A                    6750 	ld	a, (hl-)
      001FDA B6                    6751 	or	a, (hl)
      001FDB 28 12                 6752 	jr	Z, 00201$
      001FDD 01r8Er01              6753 	ld	bc, #_cursor+6
      001FE0 0A                    6754 	ld	a, (bc)
      001FE1 B7                    6755 	or	a, a
      001FE2 28 0B                 6756 	jr	Z, 00201$
                                   6757 ;src/main.c:1260: && cursor.pile_idx != PILE_IDX_DECK) {
      001FE4 FE 0A                 6758 	cp	a, #0x0a
      001FE6 28 07                 6759 	jr	Z, 00201$
                                   6760 ;src/main.c:1261: cursor.pile_idx--;
      001FE8 3D                    6761 	dec	a
      001FE9 02                    6762 	ld	(bc), a
                                   6763 ;src/main.c:1262: cursor_adjust_height();
      001FEA CDrDFr0C              6764 	call	_cursor_adjust_height
      001FED 18 13                 6765 	jr	00206$
      001FEF                       6766 00201$:
                                   6767 ;src/main.c:1264: && cursor.pile_idx < PILE_IDX_DECK - 1u) {
      001FEF F8 07                 6768 	ldhl	sp,	#7
      001FF1 3A                    6769 	ld	a, (hl-)
      001FF2 B6                    6770 	or	a, (hl)
      001FF3 28 0D                 6771 	jr	Z, 00206$
      001FF5 01r8Er01              6772 	ld	bc, #_cursor+6
      001FF8 0A                    6773 	ld	a, (bc)
      001FF9 FE 09                 6774 	cp	a, #0x09
      001FFB 30 05                 6775 	jr	NC, 00206$
                                   6776 ;src/main.c:1265: cursor.pile_idx++;
      001FFD 3C                    6777 	inc	a
      001FFE 02                    6778 	ld	(bc), a
                                   6779 ;src/main.c:1266: cursor_adjust_height();
      001FFF CDrDFr0C              6780 	call	_cursor_adjust_height
      002002                       6781 00206$:
                                   6782 ;src/main.c:1269: && ~flags & FLAG_PLAYING_ANIMATION) {
      002002 F8 05                 6783 	ldhl	sp,	#5
      002004 3A                    6784 	ld	a, (hl-)
      002005 B6                    6785 	or	a, (hl)
      002006 CAr82r21              6786 	jp	Z, 00232$
      002009 FAr6Br01              6787 	ld	a, (#_flags)
      00200C 06 00                 6788 	ld	b, #0x00
      00200E 2F                    6789 	cpl
      00200F 4F                    6790 	ld	c, a
      002010 78                    6791 	ld	a, b
      002011 2F                    6792 	cpl
      002012 CB 51                 6793 	bit	2, c
      002014 CAr82r21              6794 	jp	Z,00232$
                                   6795 ;src/main.c:1270: if (cursor.pile_idx == PILE_IDX_DECK && top_card_idx != 104u)
      002017 21r8Er01              6796 	ld	hl, #(_cursor + 0x0006)
      00201A 4E                    6797 	ld	c, (hl)
      00201B 79                    6798 	ld	a, c
      00201C D6 0A                 6799 	sub	a, #0x0a
      00201E C2rB8r20              6800 	jp	NZ,00223$
      002021 FAr6Ar01              6801 	ld	a, (#_top_card_idx)
      002024 D6 68                 6802 	sub	a, #0x68
      002026 CArB8r20              6803 	jp	Z,00223$
                                   6804 ;src/main.c:985: Pile *pile = IDX_PTR(piles, 0);
      002029 01r38r01              6805 	ld	bc, #_piles
                                   6806 ;src/main.c:988: for (i = 0; i < 10u; i++) {
      00202C 1E 00                 6807 	ld	e, #0x00
      00202E                       6808 00268$:
                                   6809 ;src/main.c:989: if (!pile->height)
      00202E 21 04 00              6810 	ld	hl, #0x0004
      002031 09                    6811 	add	hl, bc
      002032 7E                    6812 	ld	a, (hl)
      002033 B7                    6813 	or	a, a
      002034 CAr82r21              6814 	jp	Z, 00232$
                                   6815 ;src/main.c:991: pile++;
      002037 03                    6816 	inc	bc
      002038 03                    6817 	inc	bc
      002039 03                    6818 	inc	bc
      00203A 03                    6819 	inc	bc
      00203B 03                    6820 	inc	bc
                                   6821 ;src/main.c:988: for (i = 0; i < 10u; i++) {
      00203C 1C                    6822 	inc	e
      00203D 7B                    6823 	ld	a, e
      00203E D6 0A                 6824 	sub	a, #0x0a
      002040 38 EC                 6825 	jr	C, 00268$
                                   6826 ;src/main.c:994: pile = IDX_PTR(piles, 0);
      002042 F8 0C                 6827 	ldhl	sp,	#12
      002044 3Er38                 6828 	ld	a, #<(_piles)
      002046 22                    6829 	ld	(hl+), a
      002047 36s01                 6830 	ld	(hl), #>(_piles)
                                   6831 ;src/main.c:995: Card *deck_top = IDX_PTR(deck, top_card_idx);
      002049 21r6Ar01              6832 	ld	hl, #_top_card_idx
      00204C 4E                    6833 	ld	c, (hl)
      00204D 06 00                 6834 	ld	b, #0x00
      00204F 69                    6835 	ld	l, c
      002050 60                    6836 	ld	h, b
      002051 29                    6837 	add	hl, hl
      002052 09                    6838 	add	hl, bc
      002053 01r00r00              6839 	ld	bc,#_deck
      002056 09                    6840 	add	hl,bc
      002057 4D                    6841 	ld	c, l
      002058 44                    6842 	ld	b, h
                                   6843 ;src/main.c:996: top_card_idx += 10u;
      002059 21r6Ar01              6844 	ld	hl, #_top_card_idx
      00205C 7E                    6845 	ld	a, (hl)
      00205D C6 0A                 6846 	add	a, #0x0a
      00205F 77                    6847 	ld	(hl), a
                                   6848 ;src/main.c:999: for (i = 0; i < 10u; i++) {
      002060 F8 0E                 6849 	ldhl	sp,	#14
      002062 36 0A                 6850 	ld	(hl), #0x0a
      002064                       6851 00272$:
                                   6852 ;src/main.c:1000: pile->top->next_card = deck_top;
                                   6853 ;c
      002064 F8 0C                 6854 	ldhl	sp,#12
      002066 2A                    6855 	ld	a, (hl+)
      002067 5F                    6856 	ld	e, a
      002068 56                    6857 	ld	d, (hl)
      002069 21 02 00              6858 	ld	hl, #0x0002
      00206C 19                    6859 	add	hl, de
      00206D E5                    6860 	push	hl
      00206E 7D                    6861 	ld	a, l
      00206F F8 0C                 6862 	ldhl	sp,	#12
      002071 77                    6863 	ld	(hl), a
      002072 E1                    6864 	pop	hl
      002073 7C                    6865 	ld	a, h
      002074 F8 0B                 6866 	ldhl	sp,	#11
      002076 32                    6867 	ld	(hl-), a
      002077 2A                    6868 	ld	a, (hl+)
      002078 5F                    6869 	ld	e, a
      002079 56                    6870 	ld	d, (hl)
      00207A 1A                    6871 	ld	a, (de)
      00207B 6F                    6872 	ld	l, a
      00207C 13                    6873 	inc	de
      00207D 1A                    6874 	ld	a, (de)
      00207E 67                    6875 	ld	h, a
      00207F 79                    6876 	ld	a, c
      002080 22                    6877 	ld	(hl+), a
      002081 70                    6878 	ld	(hl), b
                                   6879 ;src/main.c:1001: pile->top = deck_top;
      002082 F8 0A                 6880 	ldhl	sp,	#10
      002084 2A                    6881 	ld	a, (hl+)
      002085 66                    6882 	ld	h, (hl)
      002086 6F                    6883 	ld	l, a
      002087 79                    6884 	ld	a, c
      002088 22                    6885 	ld	(hl+), a
      002089 70                    6886 	ld	(hl), b
                                   6887 ;src/main.c:1002: pile->height++;
                                   6888 ;c
      00208A F8 0C                 6889 	ldhl	sp,#12
      00208C 2A                    6890 	ld	a, (hl+)
      00208D 5F                    6891 	ld	e, a
      00208E 56                    6892 	ld	d, (hl)
      00208F 21 04 00              6893 	ld	hl, #0x0004
      002092 19                    6894 	add	hl, de
      002093 5D                    6895 	ld	e, l
      002094 54                    6896 	ld	d, h
      002095 1A                    6897 	ld	a, (de)
      002096 3C                    6898 	inc	a
      002097 12                    6899 	ld	(de), a
                                   6900 ;src/main.c:1003: deck_top++;
      002098 03                    6901 	inc	bc
      002099 03                    6902 	inc	bc
      00209A 03                    6903 	inc	bc
                                   6904 ;src/main.c:1004: pile++;
                                   6905 ;c
      00209B F8 0C                 6906 	ldhl	sp,#12
      00209D 2A                    6907 	ld	a, (hl+)
      00209E 5F                    6908 	ld	e, a
      00209F 56                    6909 	ld	d, (hl)
      0020A0 21 05 00              6910 	ld	hl, #0x0005
      0020A3 19                    6911 	add	hl, de
      0020A4 E5                    6912 	push	hl
      0020A5 7D                    6913 	ld	a, l
      0020A6 F8 0E                 6914 	ldhl	sp,	#14
      0020A8 77                    6915 	ld	(hl), a
      0020A9 E1                    6916 	pop	hl
      0020AA 7C                    6917 	ld	a, h
      0020AB F8 0D                 6918 	ldhl	sp,	#13
      0020AD 22                    6919 	ld	(hl+), a
                                   6920 ;src/main.c:999: for (i = 0; i < 10u; i++) {
      0020AE 35                    6921 	dec	(hl)
      0020AF 7E                    6922 	ld	a, (hl)
      0020B0 20 B2                 6923 	jr	NZ, 00272$
                                   6924 ;src/main.c:1007: dynamic_metasprite_deal();
      0020B2 CDr8Cr0B              6925 	call	_dynamic_metasprite_deal
                                   6926 ;src/main.c:1271: deal();
      0020B5 C3r82r21              6927 	jp	00232$
      0020B8                       6928 00223$:
                                   6929 ;src/main.c:769: Pile *pile = IDX_PTR(piles, cursor.pile_idx);
      0020B8 06 00                 6930 	ld	b, #0x00
      0020BA 69                    6931 	ld	l, c
      0020BB 60                    6932 	ld	h, b
      0020BC 29                    6933 	add	hl, hl
      0020BD 29                    6934 	add	hl, hl
      0020BE 09                    6935 	add	hl, bc
      0020BF 3Er38                 6936 	ld	a, #<(_piles)
      0020C1 85                    6937 	add	a, l
      0020C2 4F                    6938 	ld	c, a
      0020C3 3Es01                 6939 	ld	a, #>(_piles)
      0020C5 8C                    6940 	adc	a, h
      0020C6 47                    6941 	ld	b, a
      0020C7 F8 0A                 6942 	ldhl	sp,	#10
      0020C9 79                    6943 	ld	a, c
      0020CA 22                    6944 	ld	(hl+), a
                                   6945 ;src/main.c:770: Card *top = pile->base;
      0020CB 78                    6946 	ld	a, b
      0020CC 32                    6947 	ld	(hl-), a
      0020CD 2A                    6948 	ld	a, (hl+)
      0020CE 5F                    6949 	ld	e, a
      0020CF 56                    6950 	ld	d, (hl)
      0020D0 1A                    6951 	ld	a, (de)
      0020D1 23                    6952 	inc	hl
      0020D2 23                    6953 	inc	hl
      0020D3 22                    6954 	ld	(hl+), a
      0020D4 13                    6955 	inc	de
      0020D5 1A                    6956 	ld	a, (de)
      0020D6 77                    6957 	ld	(hl), a
                                   6958 ;src/main.c:771: for (i = 1; i < cursor.height; i++)
      0020D7 06 01                 6959 	ld	b, #0x01
      0020D9                       6960 00274$:
      0020D9 21r8Fr01              6961 	ld	hl, #(_cursor + 0x0007)
      0020DC 4E                    6962 	ld	c, (hl)
      0020DD 78                    6963 	ld	a, b
      0020DE 91                    6964 	sub	a, c
      0020DF 30 0E                 6965 	jr	NC, 00215$
                                   6966 ;src/main.c:772: top = top->next_card;
      0020E1 F8 0D                 6967 	ldhl	sp,#13
      0020E3 2A                    6968 	ld	a, (hl+)
      0020E4 5F                    6969 	ld	e, a
      0020E5 56                    6970 	ld	d, (hl)
      0020E6 1A                    6971 	ld	a, (de)
      0020E7 2B                    6972 	dec	hl
      0020E8 22                    6973 	ld	(hl+), a
      0020E9 13                    6974 	inc	de
      0020EA 1A                    6975 	ld	a, (de)
      0020EB 77                    6976 	ld	(hl), a
                                   6977 ;src/main.c:771: for (i = 1; i < cursor.height; i++)
      0020EC 04                    6978 	inc	b
      0020ED 18 EA                 6979 	jr	00274$
      0020EF                       6980 00215$:
                                   6981 ;src/main.c:773: Card *stack = cursor.height ? top->next_card : top;
      0020EF 79                    6982 	ld	a, c
      0020F0 B7                    6983 	or	a, a
      0020F1 28 0C                 6984 	jr	Z, 00278$
      0020F3 F8 0D                 6985 	ldhl	sp,#13
      0020F5 2A                    6986 	ld	a, (hl+)
      0020F6 5F                    6987 	ld	e, a
      0020F7 56                    6988 	ld	d, (hl)
      0020F8 1A                    6989 	ld	a, (de)
      0020F9 4F                    6990 	ld	c, a
      0020FA 13                    6991 	inc	de
      0020FB 1A                    6992 	ld	a, (de)
      0020FC 47                    6993 	ld	b, a
      0020FD 18 05                 6994 	jr	00279$
      0020FF                       6995 00278$:
      0020FF F8 0D                 6996 	ldhl	sp,#13
      002101 2A                    6997 	ld	a, (hl+)
      002102 4F                    6998 	ld	c, a
      002103 46                    6999 	ld	b, (hl)
      002104                       7000 00279$:
                                   7001 ;src/main.c:774: if (!(VISIBLE(stack->data) && is_stack_coherent(stack)))
      002104 59                    7002 	ld	e, c
      002105 50                    7003 	ld	d, b
      002106 13                    7004 	inc	de
      002107 13                    7005 	inc	de
      002108 1A                    7006 	ld	a, (de)
      002109 CB 77                 7007 	bit	6, a
      00210B 28 75                 7008 	jr	Z, 00232$
      00210D C5                    7009 	push	bc
      00210E C5                    7010 	push	bc
      00210F CDr98r12              7011 	call	_is_stack_coherent
      002112 E8 02                 7012 	add	sp, #2
      002114 7B                    7013 	ld	a, e
      002115 C1                    7014 	pop	bc
      002116 B7                    7015 	or	a, a
      002117 28 69                 7016 	jr	Z, 00232$
                                   7017 ;src/main.c:777: cursor.held_card = stack;
      002119 21r88r01              7018 	ld	hl, #_cursor
      00211C 79                    7019 	ld	a, c
      00211D 22                    7020 	ld	(hl+), a
      00211E 70                    7021 	ld	(hl), b
                                   7022 ;src/main.c:778: cursor.hand_pile_idx = cursor.pile_idx;
      00211F FAr8Er01              7023 	ld	a, (#(_cursor + 0x0006) + 0)
      002122 EAr8Dr01              7024 	ld	(#(_cursor + 0x0005)),a
                                   7025 ;src/main.c:779: cursor.held_stack_size = pile->height - cursor.height;
                                   7026 ;c
      002125 F8 0A                 7027 	ldhl	sp,#10
      002127 2A                    7028 	ld	a, (hl+)
      002128 5F                    7029 	ld	e, a
      002129 56                    7030 	ld	d, (hl)
      00212A 21 04 00              7031 	ld	hl, #0x0004
      00212D 19                    7032 	add	hl, de
      00212E 4D                    7033 	ld	c, l
      00212F 44                    7034 	ld	b, h
      002130 0A                    7035 	ld	a, (bc)
      002131 21r8Fr01              7036 	ld	hl, #(_cursor + 0x0007)
      002134 6E                    7037 	ld	l, (hl)
      002135 95                    7038 	sub	a, l
      002136 EAr8Cr01              7039 	ld	(#(_cursor + 0x0004)),a
                                   7040 ;src/main.c:780: pile->height = cursor.height;
      002139 FAr8Fr01              7041 	ld	a, (#(_cursor + 0x0007) + 0)
      00213C 02                    7042 	ld	(bc), a
                                   7043 ;src/main.c:781: flags |= FLAG_REDRAW_HAND;
      00213D 21r6Br01              7044 	ld	hl, #_flags
      002140 7E                    7045 	ld	a, (hl)
      002141 F6 02                 7046 	or	a, #0x02
      002143 77                    7047 	ld	(hl), a
                                   7048 ;src/main.c:782: if (cursor.height) {
      002144 FAr8Fr01              7049 	ld	a, (#(_cursor + 0x0007) + 0)
      002147 F8 0C                 7050 	ldhl	sp,	#12
      002149 77                    7051 	ld	(hl), a
                                   7052 ;src/main.c:783: pile->top = top;
      00214A F8 0A                 7053 	ldhl	sp,#10
      00214C 2A                    7054 	ld	a, (hl+)
      00214D 4F                    7055 	ld	c, a
      00214E 46                    7056 	ld	b, (hl)
      00214F 03                    7057 	inc	bc
      002150 03                    7058 	inc	bc
                                   7059 ;src/main.c:785: cursor.card_to_show = top;
                                   7060 ;src/main.c:782: if (cursor.height) {
      002151 23                    7061 	inc	hl
      002152 7E                    7062 	ld	a, (hl)
      002153 B7                    7063 	or	a, a
      002154 28 1A                 7064 	jr	Z, 00220$
                                   7065 ;src/main.c:783: pile->top = top;
      002156 23                    7066 	inc	hl
      002157 2A                    7067 	ld	a, (hl+)
      002158 02                    7068 	ld	(bc), a
      002159 03                    7069 	inc	bc
      00215A 7E                    7070 	ld	a, (hl)
      00215B 02                    7071 	ld	(bc), a
                                   7072 ;src/main.c:784: top->next_card = NULL;
      00215C 2B                    7073 	dec	hl
      00215D 2A                    7074 	ld	a, (hl+)
      00215E 66                    7075 	ld	h, (hl)
      00215F 6F                    7076 	ld	l, a
      002160 AF                    7077 	xor	a, a
      002161 22                    7078 	ld	(hl+), a
      002162 77                    7079 	ld	(hl), a
                                   7080 ;src/main.c:785: cursor.card_to_show = top;
      002163 11r8Ar01              7081 	ld	de, #(_cursor + 0x0002)
      002166 F8 0D                 7082 	ldhl	sp,	#13
      002168 7E                    7083 	ld	a, (hl)
      002169 12                    7084 	ld	(de), a
      00216A 13                    7085 	inc	de
      00216B 23                    7086 	inc	hl
      00216C 7E                    7087 	ld	a, (hl)
      00216D 12                    7088 	ld	(de), a
      00216E 18 12                 7089 	jr	00232$
      002170                       7090 00220$:
                                   7091 ;src/main.c:787: pile->base = NULL;
      002170 F8 0A                 7092 	ldhl	sp,	#10
      002172 2A                    7093 	ld	a, (hl+)
      002173 66                    7094 	ld	h, (hl)
      002174 6F                    7095 	ld	l, a
      002175 AF                    7096 	xor	a, a
      002176 22                    7097 	ld	(hl+), a
      002177 77                    7098 	ld	(hl), a
                                   7099 ;src/main.c:788: pile->top = NULL;
      002178 AF                    7100 	xor	a, a
      002179 02                    7101 	ld	(bc), a
      00217A 03                    7102 	inc	bc
      00217B 02                    7103 	ld	(bc), a
                                   7104 ;src/main.c:789: cursor.card_to_show = NULL;
      00217C 21r8Ar01              7105 	ld	hl, #(_cursor + 0x0002)
      00217F AF                    7106 	xor	a, a
      002180 22                    7107 	ld	(hl+), a
      002181 77                    7108 	ld	(hl), a
                                   7109 ;src/main.c:1277: }
      002182                       7110 00232$:
                                   7111 ;src/main.c:1279: prev_input = input;
      002182 F8 00                 7112 	ldhl	sp,	#0
      002184 7E                    7113 	ld	a, (hl)
      002185 EAr93r01              7114 	ld	(#_main_prev_input_327681_450),a
                                   7115 ;src/main.c:843: switch (flags & FLAG_GAME_STATE) {
      002188 FAr6Br01              7116 	ld	a, (#_flags)
      00218B E6 18                 7117 	and	a, #0x18
      00218D 47                    7118 	ld	b, a
      00218E 0E 00                 7119 	ld	c, #0x00
      002190 78                    7120 	ld	a, b
      002191 B7                    7121 	or	a, a
      002192 B1                    7122 	or	a, c
      002193 CAr0Dr23              7123 	jp	Z,00260$
                                   7124 ;src/main.c:847: cursor.anim_ctr++;
      002196 21r90r01              7125 	ld	hl, #_cursor + 8
      002199 56                    7126 	ld	d, (hl)
      00219A 14                    7127 	inc	d
      00219B 72                    7128 	ld	(hl), d
                                   7129 ;src/main.c:848: cursor.anim_ctr &= (1u << (CURSOR_PERIOD_LOGSCALE + 1u)) - 1u;
      00219C CB BA                 7130 	res	7, d
      00219E 72                    7131 	ld	(hl), d
                                   7132 ;src/main.c:849: UINT8 prev_anim_frame = cursor.anim_frame;
      00219F 01r91r01              7133 	ld	bc, #_cursor + 9
      0021A2 0A                    7134 	ld	a, (bc)
      0021A3 5F                    7135 	ld	e, a
                                   7136 ;src/main.c:850: cursor.anim_frame = cursor.anim_ctr >> CURSOR_PERIOD_LOGSCALE;
      0021A4 7A                    7137 	ld	a, d
      0021A5 07                    7138 	rlca
      0021A6 07                    7139 	rlca
      0021A7 E6 03                 7140 	and	a, #0x03
      0021A9 02                    7141 	ld	(bc), a
                                   7142 ;src/main.c:851: if (cursor.anim_frame != prev_anim_frame)
      0021AA 93                    7143 	sub	a, e
      0021AB 28 07                 7144 	jr	Z, 00237$
                                   7145 ;src/main.c:852: flags |= FLAG_REDRAW_CURSOR;
      0021AD 21r6Br01              7146 	ld	hl, #_flags
      0021B0 7E                    7147 	ld	a, (hl)
      0021B1 F6 01                 7148 	or	a, #0x01
      0021B3 77                    7149 	ld	(hl), a
      0021B4                       7150 00237$:
                                   7151 ;src/main.c:854: if (flags & FLAG_REDRAW_CURSOR) {
      0021B4 FAr6Br01              7152 	ld	a, (#_flags)
      0021B7 0F                    7153 	rrca
      0021B8 D2rAAr22              7154 	jp	NC,00253$
                                   7155 ;src/main.c:855: flags &= ~FLAG_REDRAW_CURSOR;
      0021BB 21r6Br01              7156 	ld	hl, #_flags
      0021BE 7E                    7157 	ld	a, (hl)
      0021BF E6 FE                 7158 	and	a, #0xfe
      0021C1 77                    7159 	ld	(hl), a
                                   7160 ;src/main.c:856: switch (flags & FLAG_GAME_STATE) {
      0021C2 7E                    7161 	ld	a, (hl)
      0021C3 E6 18                 7162 	and	a, #0x18
      0021C5 6F                    7163 	ld	l, a
      0021C6 26 00                 7164 	ld	h, #0x00
      0021C8 7D                    7165 	ld	a, l
      0021C9 D6 08                 7166 	sub	a, #0x08
      0021CB B4                    7167 	or	a, h
      0021CC 28 4D                 7168 	jr	Z, 00244$
                                   7169 ;src/main.c:862: SETTINGS_PAD_Y * 8u + cursor.pile_idx * 32u
      0021CE 11r8Er01              7170 	ld	de, #_cursor + 6
                                   7171 ;src/main.c:861: cursor.height * 16u + SETTINGS_SPLIT_X * 8u,
                                   7172 ;src/main.c:856: switch (flags & FLAG_GAME_STATE) {
      0021D1 7D                    7173 	ld	a, l
      0021D2 D6 10                 7174 	sub	a, #0x10
      0021D4 B4                    7175 	or	a, h
      0021D5 28 6E                 7176 	jr	Z, 00250$
      0021D7 7D                    7177 	ld	a, l
      0021D8 D6 18                 7178 	sub	a, #0x18
      0021DA B4                    7179 	or	a, h
      0021DB C2rAAr22              7180 	jp	NZ,00253$
                                   7181 ;src/main.c:862: SETTINGS_PAD_Y * 8u + cursor.pile_idx * 32u
      0021DE 1A                    7182 	ld	a, (de)
      0021DF CB 37                 7183 	swap	a
      0021E1 07                    7184 	rlca
      0021E2 E6 E0                 7185 	and	a, #0xe0
      0021E4 C6 08                 7186 	add	a, #0x08
      0021E6 F8 0D                 7187 	ldhl	sp,	#13
      0021E8 77                    7188 	ld	(hl), a
                                   7189 ;src/main.c:861: cursor.height * 16u + SETTINGS_SPLIT_X * 8u,
      0021E9 FAr8Fr01              7190 	ld	a, (#(_cursor + 0x0007) + 0)
      0021EC CB 37                 7191 	swap	a
      0021EE E6 F0                 7192 	and	a, #0xf0
      0021F0 C6 50                 7193 	add	a, #0x50
      0021F2 23                    7194 	inc	hl
      0021F3 77                    7195 	ld	(hl), a
                                   7196 ;src/main.c:858: move_metasprite(cursor_metasprites[cursor.anim_frame],
      0021F4 11r00r00              7197 	ld	de, #_cursor_metasprites+0
      0021F7 0A                    7198 	ld	a, (bc)
      0021F8 6F                    7199 	ld	l, a
      0021F9 26 00                 7200 	ld	h, #0x00
      0021FB 29                    7201 	add	hl, hl
      0021FC 19                    7202 	add	hl, de
      0021FD 2A                    7203 	ld	a, (hl+)
      0021FE 4E                    7204 	ld	c, (hl)
                                   7205 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      0021FF 21r00r00              7206 	ld	hl, #___current_metasprite
      002202 22                    7207 	ld	(hl+), a
      002203 71                    7208 	ld	(hl), c
                                   7209 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      002204 21r00r00              7210 	ld	hl, #___current_base_tile
      002207 36 01                 7211 	ld	(hl), #0x01
                                   7212 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      002209 F8 0D                 7213 	ldhl	sp,	#13
      00220B 7E                    7214 	ld	a, (hl)
      00220C F5                    7215 	push	af
      00220D 33                    7216 	inc	sp
      00220E 23                    7217 	inc	hl
      00220F 56                    7218 	ld	d, (hl)
      002210 1E 0C                 7219 	ld	e,#0x0c
      002212 D5                    7220 	push	de
      002213 CDr00r00              7221 	call	___move_metasprite
      002216 E8 03                 7222 	add	sp, #3
                                   7223 ;src/main.c:864: break;
      002218 C3rAAr22              7224 	jp	00253$
                                   7225 ;src/main.c:865: case FLAG_GAME_STATE_LEADERBOARD:
      00221B                       7226 00244$:
                                   7227 ;src/main.c:866: if (selected_leaderboard) {
      00221B 21r72r01              7228 	ld	hl, #_selected_leaderboard + 1
      00221E 3A                    7229 	ld	a, (hl-)
      00221F B6                    7230 	or	a, (hl)
      002220 CArAAr22              7231 	jp	Z, 00253$
                                   7232 ;src/main.c:867: set_sprite_tile(SPRITE_FRAME, OFFSET_SPRITE_CURSOR + OFFSET_CURSOR_UNDERLINE + cursor.anim_frame);
      002223 0A                    7233 	ld	a, (bc)
      002224 C6 09                 7234 	add	a, #0x09
      002226 4F                    7235 	ld	c, a
                                   7236 ;/home/wojtek/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      002227 21r32r00              7237 	ld	hl, #(_shadow_OAM + 0x0032)
      00222A 71                    7238 	ld	(hl), c
                                   7239 ;src/main.c:868: move_sprite(SPRITE_FRAME, (LEADERBOARD_NAME_X + 1u) * 8u + cursor.pile_idx * 8u, 16u + cursor.height * 8u);
      00222B FAr8Fr01              7240 	ld	a, (#(_cursor + 0x0007) + 0)
      00222E 87                    7241 	add	a, a
      00222F 87                    7242 	add	a, a
      002230 87                    7243 	add	a, a
      002231 C6 10                 7244 	add	a, #0x10
      002233 4F                    7245 	ld	c, a
      002234 FAr8Er01              7246 	ld	a, (#(_cursor + 0x0006) + 0)
      002237 87                    7247 	add	a, a
      002238 87                    7248 	add	a, a
      002239 87                    7249 	add	a, a
      00223A C6 48                 7250 	add	a, #0x48
      00223C 5F                    7251 	ld	e, a
                                   7252 ;/home/wojtek/gbdk/include/gb/gb.h:1218: OAM_item_t * itm = &shadow_OAM[nb];
      00223D 21r30r00              7253 	ld	hl, #(_shadow_OAM + 0x0030)
                                   7254 ;/home/wojtek/gbdk/include/gb/gb.h:1219: itm->y=y, itm->x=x;
      002240 79                    7255 	ld	a, c
      002241 22                    7256 	ld	(hl+), a
      002242 73                    7257 	ld	(hl), e
                                   7258 ;src/main.c:870: break;
      002243 18 65                 7259 	jr	00253$
                                   7260 ;src/main.c:871: case FLAG_GAME_STATE_INGAME:
      002245                       7261 00250$:
                                   7262 ;src/main.c:872: if (cursor.pile_idx == PILE_IDX_DECK)
      002245 1A                    7263 	ld	a, (de)
      002246 F8 0E                 7264 	ldhl	sp,	#14
      002248 77                    7265 	ld	(hl), a
                                   7266 ;src/main.c:849: UINT8 prev_anim_frame = cursor.anim_frame;
      002249 0A                    7267 	ld	a, (bc)
                                   7268 ;src/main.c:873: move_metasprite(cursor_metasprites[cursor.anim_frame],
      00224A 6F                    7269 	ld	l, a
      00224B 26 00                 7270 	ld	h, #0x00
      00224D 29                    7271 	add	hl, hl
      00224E 4D                    7272 	ld	c, l
      00224F 44                    7273 	ld	b, h
                                   7274 ;src/main.c:872: if (cursor.pile_idx == PILE_IDX_DECK)
      002250 F8 0E                 7275 	ldhl	sp,	#14
      002252 7E                    7276 	ld	a, (hl)
      002253 D6 0A                 7277 	sub	a, #0x0a
      002255 20 1F                 7278 	jr	NZ, 00248$
                                   7279 ;src/main.c:873: move_metasprite(cursor_metasprites[cursor.anim_frame],
      002257 21r00r00              7280 	ld	hl, #_cursor_metasprites
      00225A 09                    7281 	add	hl, bc
      00225B 2A                    7282 	ld	a, (hl+)
      00225C 4E                    7283 	ld	c, (hl)
                                   7284 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      00225D 21r00r00              7285 	ld	hl, #___current_metasprite
      002260 22                    7286 	ld	(hl+), a
      002261 71                    7287 	ld	(hl), c
                                   7288 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      002262 21r00r00              7289 	ld	hl, #___current_base_tile
      002265 36 01                 7290 	ld	(hl), #0x01
                                   7291 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      002267 AF                    7292 	xor	a, a
      002268 F5                    7293 	push	af
      002269 33                    7294 	inc	sp
      00226A AF                    7295 	xor	a, a
      00226B 57                    7296 	ld	d,a
      00226C 1E 0C                 7297 	ld	e,#0x0c
      00226E D5                    7298 	push	de
      00226F CDr00r00              7299 	call	___move_metasprite
      002272 E8 03                 7300 	add	sp, #3
                                   7301 ;src/main.c:878: );
      002274 18 34                 7302 	jr	00253$
      002276                       7303 00248$:
                                   7304 ;src/main.c:884: (cursor.height + 3u - scroll) * 8u
      002276 FAr8Fr01              7305 	ld	a, (#(_cursor + 0x0007) + 0)
      002279 C6 03                 7306 	add	a, #0x03
      00227B 21r6Cr01              7307 	ld	hl, #_scroll
      00227E 96                    7308 	sub	a, (hl)
      00227F 87                    7309 	add	a, a
      002280 87                    7310 	add	a, a
      002281 87                    7311 	add	a, a
      002282 F8 0D                 7312 	ldhl	sp,	#13
                                   7313 ;src/main.c:883: cursor.pile_idx * 16u,
      002284 22                    7314 	ld	(hl+), a
      002285 7E                    7315 	ld	a, (hl)
      002286 CB 37                 7316 	swap	a
      002288 E6 F0                 7317 	and	a, #0xf0
      00228A 77                    7318 	ld	(hl), a
                                   7319 ;src/main.c:880: move_metasprite(cursor_metasprites[cursor.anim_frame],
      00228B 21r00r00              7320 	ld	hl, #_cursor_metasprites
      00228E 09                    7321 	add	hl, bc
      00228F 2A                    7322 	ld	a, (hl+)
      002290 4E                    7323 	ld	c, (hl)
                                   7324 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      002291 21r00r00              7325 	ld	hl, #___current_metasprite
      002294 22                    7326 	ld	(hl+), a
      002295 71                    7327 	ld	(hl), c
                                   7328 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      002296 21r00r00              7329 	ld	hl, #___current_base_tile
      002299 36 01                 7330 	ld	(hl), #0x01
                                   7331 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      00229B F8 0D                 7332 	ldhl	sp,	#13
      00229D 7E                    7333 	ld	a, (hl)
      00229E F5                    7334 	push	af
      00229F 33                    7335 	inc	sp
      0022A0 23                    7336 	inc	hl
      0022A1 56                    7337 	ld	d, (hl)
      0022A2 1E 0C                 7338 	ld	e,#0x0c
      0022A4 D5                    7339 	push	de
      0022A5 CDr00r00              7340 	call	___move_metasprite
      0022A8 E8 03                 7341 	add	sp, #3
                                   7342 ;src/main.c:887: }
      0022AA                       7343 00253$:
                                   7344 ;src/main.c:890: if (flags & FLAG_REDRAW_HAND) {
      0022AA FAr6Br01              7345 	ld	a, (#_flags)
      0022AD CB 4F                 7346 	bit	1, a
      0022AF 28 5C                 7347 	jr	Z, 00260$
                                   7348 ;src/main.c:891: flags &= ~FLAG_REDRAW_HAND;
      0022B1 21r6Br01              7349 	ld	hl, #_flags
      0022B4 7E                    7350 	ld	a, (hl)
      0022B5 E6 FD                 7351 	and	a, #0xfd
      0022B7 77                    7352 	ld	(hl), a
                                   7353 ;src/main.c:892: if (cursor.held_card) {
      0022B8 21r88r01              7354 	ld	hl, #_cursor
      0022BB 2A                    7355 	ld	a, (hl+)
      0022BC B6                    7356 	or	a,(hl)
      0022BD 28 46                 7357 	jr	Z, 00256$
                                   7358 ;src/main.c:893: UINT8 height = piles[cursor.hand_pile_idx].height;
      0022BF 21r8Dr01              7359 	ld	hl, #_cursor + 5
      0022C2 4E                    7360 	ld	c, (hl)
      0022C3 06 00                 7361 	ld	b, #0x00
      0022C5 69                    7362 	ld	l, c
      0022C6 60                    7363 	ld	h, b
      0022C7 29                    7364 	add	hl, hl
      0022C8 29                    7365 	add	hl, hl
      0022C9 09                    7366 	add	hl, bc
      0022CA 11r38r01              7367 	ld	de, #_piles
      0022CD 19                    7368 	add	hl, de
      0022CE 23                    7369 	inc	hl
      0022CF 23                    7370 	inc	hl
      0022D0 23                    7371 	inc	hl
      0022D1 23                    7372 	inc	hl
      0022D2 46                    7373 	ld	b, (hl)
                                   7374 ;src/main.c:898: (height + !height + 2u - scroll) * 8u
      0022D3 78                    7375 	ld	a, b
      0022D4 D6 01                 7376 	sub	a,#0x01
      0022D6 3E 00                 7377 	ld	a, #0x00
      0022D8 17                    7378 	rla
      0022D9 80                    7379 	add	a, b
      0022DA C6 02                 7380 	add	a, #0x02
      0022DC 21r6Cr01              7381 	ld	hl, #_scroll
      0022DF 46                    7382 	ld	b, (hl)
      0022E0 90                    7383 	sub	a, b
      0022E1 87                    7384 	add	a, a
      0022E2 87                    7385 	add	a, a
      0022E3 87                    7386 	add	a, a
      0022E4 57                    7387 	ld	d, a
                                   7388 ;src/main.c:897: cursor.hand_pile_idx * 16u,
      0022E5 79                    7389 	ld	a, c
      0022E6 CB 37                 7390 	swap	a
      0022E8 E6 F0                 7391 	and	a, #0xf0
      0022EA 47                    7392 	ld	b, a
                                   7393 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      0022EB 21r00r00              7394 	ld	hl, #___current_metasprite
      0022EE 36r00                 7395 	ld	(hl), #<(_metasprite_sequential_2x3)
      0022F0 23                    7396 	inc	hl
      0022F1 36s00                 7397 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   7398 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      0022F3 21r00r00              7399 	ld	hl, #___current_base_tile
      0022F6 36 03                 7400 	ld	(hl), #0x03
                                   7401 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      0022F8 58                    7402 	ld	e, b
      0022F9 D5                    7403 	push	de
      0022FA 3E 06                 7404 	ld	a, #0x06
      0022FC F5                    7405 	push	af
      0022FD 33                    7406 	inc	sp
      0022FE CDr00r00              7407 	call	___move_metasprite
      002301 E8 03                 7408 	add	sp, #3
                                   7409 ;src/main.c:899: );
      002303 18 08                 7410 	jr	00260$
      002305                       7411 00256$:
                                   7412 ;src/main.c:901: metasprite_2x3_hide(SPRITE_HAND);
      002305 3E 06                 7413 	ld	a, #0x06
      002307 F5                    7414 	push	af
      002308 33                    7415 	inc	sp
      002309 CDr28r05              7416 	call	_metasprite_2x3_hide
      00230C 33                    7417 	inc	sp
                                   7418 ;src/main.c:1306: cursor_process();
      00230D                       7419 00260$:
                                   7420 ;src/main.c:739: if (dynamic_metasprite.elapsed_frames >= dynamic_metasprite.target_frames)
      00230D 21r7Cr01              7421 	ld	hl, #(_dynamic_metasprite + 0x0009)
      002310 4E                    7422 	ld	c, (hl)
      002311 21r7Br01              7423 	ld	hl, #(_dynamic_metasprite + 0x0008)
      002314 46                    7424 	ld	b, (hl)
      002315 58                    7425 	ld	e, b
      002316 79                    7426 	ld	a,c
      002317 57                    7427 	ld	d,a
      002318 90                    7428 	sub	a, b
      002319 CB 7B                 7429 	bit	7, e
      00231B 28 07                 7430 	jr	Z, 00712$
      00231D CB 7A                 7431 	bit	7, d
      00231F 20 08                 7432 	jr	NZ, 00713$
      002321 BF                    7433 	cp	a, a
      002322 18 05                 7434 	jr	00713$
      002324                       7435 00712$:
      002324 CB 7A                 7436 	bit	7, d
      002326 28 01                 7437 	jr	Z, 00713$
      002328 37                    7438 	scf
      002329                       7439 00713$:
      002329 D2rEEr23              7440 	jp	NC, 00267$
                                   7441 ;src/main.c:742: dynamic_metasprite.elapsed_frames++;
      00232C 0C                    7442 	inc	c
      00232D 21r7Cr01              7443 	ld	hl, #(_dynamic_metasprite + 0x0009)
      002330 71                    7444 	ld	(hl), c
                                   7445 ;src/main.c:747: (INT16)scroll * -8 + dynamic_metasprite.src[1] + (dynamic_metasprite.dist[1] * dynamic_metasprite.elapsed_frames / dynamic_metasprite.target_frames)
      002331 FAr6Cr01              7446 	ld	a, (#_scroll)
      002334 5F                    7447 	ld	e, a
      002335 87                    7448 	add	a, a
      002336 83                    7449 	add	a, e
      002337 87                    7450 	add	a, a
      002338 83                    7451 	add	a, e
      002339 87                    7452 	add	a, a
      00233A 83                    7453 	add	a, e
      00233B 87                    7454 	add	a, a
      00233C 83                    7455 	add	a, e
      00233D 87                    7456 	add	a, a
      00233E 83                    7457 	add	a, e
      00233F 87                    7458 	add	a, a
      002340 83                    7459 	add	a, e
      002341 87                    7460 	add	a, a
      002342 83                    7461 	add	a, e
      002343 87                    7462 	add	a, a
      002344 83                    7463 	add	a, e
      002345 87                    7464 	add	a, a
      002346 83                    7465 	add	a, e
      002347 87                    7466 	add	a, a
      002348 83                    7467 	add	a, e
      002349 87                    7468 	add	a, a
      00234A 83                    7469 	add	a, e
      00234B 87                    7470 	add	a, a
      00234C 83                    7471 	add	a, e
      00234D 87                    7472 	add	a, a
      00234E 87                    7473 	add	a, a
      00234F 87                    7474 	add	a, a
      002350 21r75r01              7475 	ld	hl, #_dynamic_metasprite + 2
      002353 5E                    7476 	ld	e, (hl)
      002354 83                    7477 	add	a, e
      002355 F8 0A                 7478 	ldhl	sp,	#10
      002357 77                    7479 	ld	(hl), a
      002358 21r79r01              7480 	ld	hl, #_dynamic_metasprite + 6
      00235B 2A                    7481 	ld	a, (hl+)
      00235C 66                    7482 	ld	h, (hl)
      00235D 6F                    7483 	ld	l, a
      00235E 79                    7484 	ld	a, c
      00235F 17                    7485 	rla
      002360 9F                    7486 	sbc	a, a
      002361 47                    7487 	ld	b, a
      002362 C5                    7488 	push	bc
      002363 C5                    7489 	push	bc
      002364 E5                    7490 	push	hl
      002365 CDr00r00              7491 	call	__mulint
      002368 E8 04                 7492 	add	sp, #4
      00236A E5                    7493 	push	hl
      00236B F8 11                 7494 	ldhl	sp,	#17
      00236D 73                    7495 	ld	(hl), e
      00236E F8 12                 7496 	ldhl	sp,	#18
      002370 72                    7497 	ld	(hl), d
      002371 E1                    7498 	pop	hl
      002372 C1                    7499 	pop	bc
      002373 FAr7Br01              7500 	ld	a, (#(_dynamic_metasprite + 0x0008) + 0)
      002376 F8 0B                 7501 	ldhl	sp,	#11
      002378 77                    7502 	ld	(hl), a
      002379 17                    7503 	rla
      00237A 9F                    7504 	sbc	a, a
      00237B 23                    7505 	inc	hl
      00237C 77                    7506 	ld	(hl), a
      00237D C5                    7507 	push	bc
      00237E 2B                    7508 	dec	hl
      00237F 2A                    7509 	ld	a, (hl+)
      002380 66                    7510 	ld	h, (hl)
      002381 6F                    7511 	ld	l, a
      002382 E5                    7512 	push	hl
      002383 F8 11                 7513 	ldhl	sp,	#17
      002385 2A                    7514 	ld	a, (hl+)
      002386 66                    7515 	ld	h, (hl)
      002387 6F                    7516 	ld	l, a
      002388 E5                    7517 	push	hl
      002389 CDr00r00              7518 	call	__divsint
      00238C E8 04                 7519 	add	sp, #4
      00238E C1                    7520 	pop	bc
      00238F 7B                    7521 	ld	a, e
      002390 F8 0A                 7522 	ldhl	sp,	#10
      002392 86                    7523 	add	a, (hl)
      002393 F8 0D                 7524 	ldhl	sp,	#13
      002395 77                    7525 	ld	(hl), a
                                   7526 ;src/main.c:746: dynamic_metasprite.src[0] + (dynamic_metasprite.dist[0] * dynamic_metasprite.elapsed_frames / dynamic_metasprite.target_frames),
      002396 FAr73r01              7527 	ld	a, (#_dynamic_metasprite + 0)
      002399 F8 0E                 7528 	ldhl	sp,	#14
      00239B 77                    7529 	ld	(hl), a
      00239C 21r77r01              7530 	ld	hl, #(_dynamic_metasprite + 0x0004)
      00239F 2A                    7531 	ld	a, (hl+)
      0023A0 66                    7532 	ld	h, (hl)
      0023A1 6F                    7533 	ld	l, a
      0023A2 C5                    7534 	push	bc
      0023A3 E5                    7535 	push	hl
      0023A4 CDr00r00              7536 	call	__mulint
      0023A7 E8 04                 7537 	add	sp, #4
      0023A9 F8 0B                 7538 	ldhl	sp,	#11
      0023AB 2A                    7539 	ld	a, (hl+)
      0023AC 66                    7540 	ld	h, (hl)
      0023AD 6F                    7541 	ld	l, a
      0023AE E5                    7542 	push	hl
      0023AF D5                    7543 	push	de
      0023B0 CDr00r00              7544 	call	__divsint
      0023B3 E8 04                 7545 	add	sp, #4
      0023B5 7B                    7546 	ld	a, e
      0023B6 F8 0E                 7547 	ldhl	sp,	#14
      0023B8 86                    7548 	add	a, (hl)
      0023B9 4F                    7549 	ld	c, a
                                   7550 ;src/main.c:744: dynamic_metasprite.metasprite_offset,
      0023BA FAr7Fr01              7551 	ld	a, (#(_dynamic_metasprite + 0x000c) + 0)
      0023BD EAr00r00              7552 	ld	(#___current_base_tile),a
                                   7553 ;src/main.c:743: move_metasprite(dynamic_metasprite.metasprite,
      0023C0 21r7Dr01              7554 	ld	hl, #_dynamic_metasprite + 10
      0023C3 2A                    7555 	ld	a, (hl+)
      0023C4 46                    7556 	ld	b, (hl)
                                   7557 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      0023C5 21r00r00              7558 	ld	hl, #___current_metasprite
      0023C8 22                    7559 	ld	(hl+), a
      0023C9 70                    7560 	ld	(hl), b
                                   7561 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      0023CA F8 0D                 7562 	ldhl	sp,	#13
      0023CC 46                    7563 	ld	b, (hl)
      0023CD C5                    7564 	push	bc
      0023CE AF                    7565 	xor	a, a
      0023CF F5                    7566 	push	af
      0023D0 33                    7567 	inc	sp
      0023D1 CDr00r00              7568 	call	___move_metasprite
      0023D4 E8 03                 7569 	add	sp, #3
                                   7570 ;src/main.c:749: if (dynamic_metasprite.elapsed_frames == dynamic_metasprite.target_frames
      0023D6 FAr7Cr01              7571 	ld	a, (#(_dynamic_metasprite + 0x0009) + 0)
      0023D9 21r7Br01              7572 	ld	hl, #(_dynamic_metasprite + 0x0008)
      0023DC 4E                    7573 	ld	c, (hl)
      0023DD 91                    7574 	sub	a, c
      0023DE 20 0E                 7575 	jr	NZ, 00267$
                                   7576 ;src/main.c:750: && dynamic_metasprite.callback)
      0023E0 21r86r01              7577 	ld	hl, #_dynamic_metasprite + 19
      0023E3 2A                    7578 	ld	a, (hl+)
      0023E4 4F                    7579 	ld	c, a
      0023E5 66                    7580 	ld	h, (hl)
      0023E6 7C                    7581 	ld	a, h
      0023E7 B1                    7582 	or	a, c
      0023E8 28 04                 7583 	jr	Z, 00267$
                                   7584 ;src/main.c:751: dynamic_metasprite.callback();
      0023EA 69                    7585 	ld	l, c
      0023EB CDr00r00              7586 	call	___sdcc_call_hl
                                   7587 ;src/main.c:1308: dynamic_metasprite_process();
      0023EE                       7588 00267$:
                                   7589 ;src/main.c:1310: wait_vbl_done();
      0023EE CDr00r00              7590 	call	_wait_vbl_done
      0023F1 C3rCDr1C              7591 	jp	00102$
                                   7592 ;src/main.c:1312: }
      0023F4 E8 0F                 7593 	add	sp, #15
      0023F6 C9                    7594 	ret
                                   7595 	.area _CODE
                                   7596 	.area _CABS (ABS)
