                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mgbz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _set_cursor_setting
                                     12 	.globl _draw_setting_frame_metasprites
                                     13 	.globl _rand
                                     14 	.globl _initrand
                                     15 	.globl _font_set
                                     16 	.globl _font_load
                                     17 	.globl _font_init
                                     18 	.globl _set_sprite_data
                                     19 	.globl _set_bkg_tile_xy
                                     20 	.globl _set_bkg_tiles
                                     21 	.globl _set_bkg_data
                                     22 	.globl _wait_vbl_done
                                     23 	.globl _joypad
                                     24 	.globl _cursor
                                     25 	.globl _dynamic_metasprite
                                     26 	.globl _score
                                     27 	.globl _settings
                                     28 	.globl _flags
                                     29 	.globl _top_card_idx
                                     30 	.globl _piles
                                     31 	.globl _deck
                                     32 	.globl _setting_pile_heights
                                     33 	.globl _menu_card_tiles
                                     34 	.globl _animation_speeds
                                     35 	.globl _clear_bkg_2x1
                                     36 	.globl _draw_card_top
                                     37 	.globl _draw_card_bottom
                                     38 	.globl _draw_card
                                     39 	.globl _draw_sequential_card
                                     40 	.globl _clear_bkg
                                     41 	.globl _draw_pile
                                     42 	.globl _draw_bkg_game
                                     43 	.globl _draw_bkg_splash_screen
                                     44 	.globl _draw_bkg_settings
                                     45 	.globl _metasprite_2x3_hide
                                     46 	.globl _set_metasprite_card
                                     47 	.globl _dynamic_metasprite_end_animation
                                     48 	.globl _dynamic_metasprite_splash_screen_callback
                                     49 	.globl _dynamic_metasprite_splash_screen
                                     50 	.globl _dynamic_metasprite_fold_pile
                                     51 	.globl _dynamic_metasprite_unfold_callback
                                     52 	.globl _dynamic_metasprite_move_stack_callback
                                     53 	.globl _dynamic_metasprite_fold_callback
                                     54 	.globl _dynamic_metasprite_fold
                                     55 	.globl _dynamic_metasprite_deal_callback
                                     56 	.globl _dynamic_metasprite_deal
                                     57 	.globl _dynamic_metasprite_process
                                     58 	.globl _cursor_adjust_height
                                     59 	.globl _cursor_grab_stack
                                     60 	.globl _cursor_place_stack
                                     61 	.globl _cursor_process
                                     62 	.globl _init_deck
                                     63 	.globl _is_stack_coherent
                                     64 	.globl _deal
                                     65 	.globl _pile_append_cursor_stack
                                     66 	.globl _start_game
                                     67 	.globl _input_process
                                     68 	.globl _main
                                     69 ;--------------------------------------------------------
                                     70 ; special function registers
                                     71 ;--------------------------------------------------------
                                     72 ;--------------------------------------------------------
                                     73 ; ram data
                                     74 ;--------------------------------------------------------
                                     75 	.area _DATA
      000000                         76 _deck::
      000000                         77 	.ds 312
      000138                         78 _piles::
      000138                         79 	.ds 50
      00016A                         80 _top_card_idx::
      00016A                         81 	.ds 1
      00016B                         82 _flags::
      00016B                         83 	.ds 1
      00016C                         84 _settings::
      00016C                         85 	.ds 1
      00016D                         86 _score::
      00016D                         87 	.ds 2
      00016F                         88 _dynamic_metasprite::
      00016F                         89 	.ds 21
      000184                         90 _cursor::
      000184                         91 	.ds 10
      00018E                         92 _input_process_prev_input_65536_323:
      00018E                         93 	.ds 1
      00018F                         94 _main_prev_input_327681_368:
      00018F                         95 	.ds 1
                                     96 ;--------------------------------------------------------
                                     97 ; absolute external ram data
                                     98 ;--------------------------------------------------------
                                     99 	.area _DABS (ABS)
                                    100 ;--------------------------------------------------------
                                    101 ; global & static initialisations
                                    102 ;--------------------------------------------------------
                                    103 	.area _HOME
                                    104 	.area _GSINIT
                                    105 	.area _GSFINAL
                                    106 	.area _GSINIT
                                    107 ;src/main.c:1000: static UINT8 prev_input = 0;
      000000 21r8Er01               108 	ld	hl, #_input_process_prev_input_65536_323
      000003 36 00                  109 	ld	(hl), #0x00
                                    110 ;src/main.c:1000: static UINT8 prev_input = 0;
      000005 21r8Fr01               111 	ld	hl, #_main_prev_input_327681_368
      000008 36 00                  112 	ld	(hl), #0x00
                                    113 ;src/main.c:157: UINT8 flags = FLAG_GAME_STATE_SPLASH;
      00000A 21r6Br01               114 	ld	hl, #_flags
      00000D 36 00                  115 	ld	(hl), #0x00
                                    116 ;src/main.c:158: UINT8 settings = SETTING_ONE_SUIT | BITMASK_SETTING_MUSIC;
      00000F 21r6Cr01               117 	ld	hl, #_settings
      000012 36 10                  118 	ld	(hl), #0x10
                                    119 ;src/main.c:160: UINT16 score = 500;
      000014 21r6Dr01               120 	ld	hl, #_score
      000017 36 F4                  121 	ld	(hl), #0xf4
      000019 23                     122 	inc	hl
      00001A 36 01                  123 	ld	(hl), #0x01
                                    124 ;src/main.c:162: struct DynamicMetaSprite dynamic_metasprite = {
      00001C 21r77r01               125 	ld	hl, #(_dynamic_metasprite + 0x0008)
      00001F 36 FF                  126 	ld	(hl), #0xff
      000021 21r78r01               127 	ld	hl, #(_dynamic_metasprite + 0x0009)
      000024 36 00                  128 	ld	(hl), #0x00
                                    129 ;src/main.c:167: struct Cursor cursor = {
      000026 21r84r01               130 	ld	hl, #_cursor
      000029 AF                     131 	xor	a, a
      00002A 22                     132 	ld	(hl+), a
      00002B 77                     133 	ld	(hl), a
      00002C 21r86r01               134 	ld	hl, #(_cursor + 0x0002)
      00002F AF                     135 	xor	a, a
      000030 22                     136 	ld	(hl+), a
      000031 77                     137 	ld	(hl), a
      000032 21r89r01               138 	ld	hl, #(_cursor + 0x0005)
      000035 36 00                  139 	ld	(hl), #0x00
      000037 21r8Ar01               140 	ld	hl, #(_cursor + 0x0006)
      00003A 36 0A                  141 	ld	(hl), #0x0a
      00003C 21r8Br01               142 	ld	hl, #(_cursor + 0x0007)
      00003F 36 00                  143 	ld	(hl), #0x00
      000041 21r8Cr01               144 	ld	hl, #(_cursor + 0x0008)
      000044 36 00                  145 	ld	(hl), #0x00
      000046 21r8Dr01               146 	ld	hl, #(_cursor + 0x0009)
      000049 36 00                  147 	ld	(hl), #0x00
                                    148 ;--------------------------------------------------------
                                    149 ; Home
                                    150 ;--------------------------------------------------------
                                    151 	.area _HOME
                                    152 	.area _HOME
                                    153 ;--------------------------------------------------------
                                    154 ; code
                                    155 ;--------------------------------------------------------
                                    156 	.area _CODE
                                    157 ;src/main.c:323: inline void clear_bkg_2x1(const UINT8 x, const UINT8 y)
                                    158 ;	---------------------------------
                                    159 ; Function clear_bkg_2x1
                                    160 ; ---------------------------------
      000000                        161 _clear_bkg_2x1::
                                    162 ;src/main.c:325: set_bkg_tile_xy(x, y, OFFSET_BKG_NONE);
      000000 AF                     163 	xor	a, a
      000001 F5                     164 	push	af
      000002 33                     165 	inc	sp
      000003 F8 04                  166 	ldhl	sp,	#4
      000005 7E                     167 	ld	a, (hl)
      000006 F5                     168 	push	af
      000007 33                     169 	inc	sp
      000008 2B                     170 	dec	hl
      000009 7E                     171 	ld	a, (hl)
      00000A F5                     172 	push	af
      00000B 33                     173 	inc	sp
      00000C CDr00r00               174 	call	_set_bkg_tile_xy
      00000F E8 03                  175 	add	sp, #3
                                    176 ;src/main.c:326: set_bkg_tile_xy(x + 1u, y, OFFSET_BKG_NONE);
      000011 F8 02                  177 	ldhl	sp,	#2
      000013 7E                     178 	ld	a, (hl)
      000014 3C                     179 	inc	a
      000015 26 00                  180 	ld	h, #0x00
      000017 E5                     181 	push	hl
      000018 33                     182 	inc	sp
      000019 F8 04                  183 	ldhl	sp,	#4
      00001B 66                     184 	ld	h, (hl)
      00001C E5                     185 	push	hl
      00001D 33                     186 	inc	sp
      00001E F5                     187 	push	af
      00001F 33                     188 	inc	sp
      000020 CDr00r00               189 	call	_set_bkg_tile_xy
      000023 E8 03                  190 	add	sp, #3
                                    191 ;src/main.c:327: }
      000025 C9                     192 	ret
      000026                        193 _animation_speeds:
      000026 10                     194 	.db #0x10	; 16
      000027 20                     195 	.db #0x20	; 32
      000028 08                     196 	.db #0x08	; 8
      000029 10                     197 	.db #0x10	; 16
      00002A 04                     198 	.db #0x04	; 4
      00002B 08                     199 	.db #0x08	; 8
      00002C                        200 _menu_card_tiles:
      00002C C1                     201 	.db #0xc1	; 193
      00002D BD                     202 	.db #0xbd	; 189
      00002E 28                     203 	.db #0x28	; 40
      00002F 29                     204 	.db #0x29	; 41
      000030 C5                     205 	.db #0xc5	; 197
      000031 C6                     206 	.db #0xc6	; 198
      000032 C1                     207 	.db #0xc1	; 193
      000033 BD                     208 	.db #0xbd	; 189
      000034 2A                     209 	.db #0x2a	; 42
      000035 2B                     210 	.db #0x2b	; 43
      000036 DC                     211 	.db #0xdc	; 220
      000037 C6                     212 	.db #0xc6	; 198
      000038 26                     213 	.db #0x26	; 38
      000039 BD                     214 	.db #0xbd	; 189
      00003A 2C                     215 	.db #0x2c	; 44
      00003B 2D                     216 	.db #0x2d	; 45
      00003C DC                     217 	.db #0xdc	; 220
      00003D 27                     218 	.db #0x27	; 39
      00003E 2E                     219 	.db #0x2e	; 46
      00003F 2F                     220 	.db #0x2f	; 47
      000040 30                     221 	.db #0x30	; 48	'0'
      000041 31                     222 	.db #0x31	; 49	'1'
      000042 32                     223 	.db #0x32	; 50	'2'
      000043 33                     224 	.db #0x33	; 51	'3'
      000044 2E                     225 	.db #0x2e	; 46
      000045 34                     226 	.db #0x34	; 52	'4'
      000046 30                     227 	.db #0x30	; 48	'0'
      000047 35                     228 	.db #0x35	; 53	'5'
      000048 32                     229 	.db #0x32	; 50	'2'
      000049 36                     230 	.db #0x36	; 54	'6'
      00004A C1                     231 	.db #0xc1	; 193
      00004B C2                     232 	.db #0xc2	; 194
      00004C 37                     233 	.db #0x37	; 55	'7'
      00004D 38                     234 	.db #0x38	; 56	'8'
      00004E C5                     235 	.db #0xc5	; 197
      00004F C6                     236 	.db #0xc6	; 198
      000050 C1                     237 	.db #0xc1	; 193
      000051 C2                     238 	.db #0xc2	; 194
      000052 39                     239 	.db #0x39	; 57	'9'
      000053 3A                     240 	.db #0x3a	; 58
      000054 C5                     241 	.db #0xc5	; 197
      000055 C6                     242 	.db #0xc6	; 198
      000056 C1                     243 	.db #0xc1	; 193
      000057 C2                     244 	.db #0xc2	; 194
      000058 3B                     245 	.db #0x3b	; 59
      000059 3C                     246 	.db #0x3c	; 60
      00005A C5                     247 	.db #0xc5	; 197
      00005B C6                     248 	.db #0xc6	; 198
      00005C                        249 _setting_pile_heights:
      00005C 03                     250 	.db #0x03	; 3
      00005D 02                     251 	.db #0x02	; 2
      00005E 03                     252 	.db #0x03	; 3
      00005F 01                     253 	.db #0x01	; 1
                                    254 ;src/main.c:329: void draw_card_top(const UINT8 x, const UINT8 y, const UINT8 card_data)
                                    255 ;	---------------------------------
                                    256 ; Function draw_card_top
                                    257 ; ---------------------------------
      000060                        258 _draw_card_top::
                                    259 ;src/main.c:331: if (VISIBLE(card_data)) {
      000060 F8 04                  260 	ldhl	sp,	#4
                                    261 ;src/main.c:333: set_bkg_tile_xy(x + 1u, y, SUIT(card_data) + OFFSET_BKG_CARD + OFFSET_CARD_SUIT);
      000062 3A                     262 	ld	a, (hl-)
      000063 4F                     263 	ld	c, a
      000064 2B                     264 	dec	hl
      000065 46                     265 	ld	b, (hl)
      000066 04                     266 	inc	b
                                    267 ;src/main.c:331: if (VISIBLE(card_data)) {
      000067 CB 71                  268 	bit	6, c
      000069 28 3F                  269 	jr	Z, 00102$
                                    270 ;src/main.c:332: set_bkg_tile_xy(x, y, RANK(card_data) + OFFSET_BKG_CARD + OFFSET_CARD_RANK);
      00006B 79                     271 	ld	a, c
      00006C E6 0F                  272 	and	a, #0x0f
      00006E C6 B0                  273 	add	a, #0xb0
      000070 F5                     274 	push	af
      000071 33                     275 	inc	sp
      000072 F8 04                  276 	ldhl	sp,	#4
      000074 7E                     277 	ld	a, (hl)
      000075 F5                     278 	push	af
      000076 33                     279 	inc	sp
      000077 2B                     280 	dec	hl
      000078 7E                     281 	ld	a, (hl)
      000079 F5                     282 	push	af
      00007A 33                     283 	inc	sp
      00007B CDr00r00               284 	call	_set_bkg_tile_xy
      00007E E8 03                  285 	add	sp, #3
                                    286 ;src/main.c:333: set_bkg_tile_xy(x + 1u, y, SUIT(card_data) + OFFSET_BKG_CARD + OFFSET_CARD_SUIT);
      000080 79                     287 	ld	a, c
      000081 0E 00                  288 	ld	c, #0x00
      000083 E6 30                  289 	and	a, #0x30
      000085 5F                     290 	ld	e, a
      000086 16 00                  291 	ld	d, #0x00
      000088 CB 3A                  292 	srl	d
      00008A CB 1B                  293 	rr	e
      00008C CB 3A                  294 	srl	d
      00008E CB 1B                  295 	rr	e
      000090 CB 3A                  296 	srl	d
      000092 CB 1B                  297 	rr	e
      000094 CB 3A                  298 	srl	d
      000096 CB 1B                  299 	rr	e
      000098 7B                     300 	ld	a, e
      000099 C6 BD                  301 	add	a, #0xbd
      00009B F5                     302 	push	af
      00009C 33                     303 	inc	sp
      00009D F8 04                  304 	ldhl	sp,	#4
      00009F 7E                     305 	ld	a, (hl)
      0000A0 F5                     306 	push	af
      0000A1 33                     307 	inc	sp
      0000A2 C5                     308 	push	bc
      0000A3 33                     309 	inc	sp
      0000A4 CDr00r00               310 	call	_set_bkg_tile_xy
      0000A7 E8 03                  311 	add	sp, #3
      0000A9 C9                     312 	ret
      0000AA                        313 00102$:
                                    314 ;src/main.c:335: set_bkg_tile_xy(x, y, OFFSET_BKG_CARD + OFFSET_CARD_BACK);
      0000AA 3E C7                  315 	ld	a, #0xc7
      0000AC F5                     316 	push	af
      0000AD 33                     317 	inc	sp
      0000AE F8 04                  318 	ldhl	sp,	#4
      0000B0 7E                     319 	ld	a, (hl)
      0000B1 F5                     320 	push	af
      0000B2 33                     321 	inc	sp
      0000B3 2B                     322 	dec	hl
      0000B4 7E                     323 	ld	a, (hl)
      0000B5 F5                     324 	push	af
      0000B6 33                     325 	inc	sp
      0000B7 CDr00r00               326 	call	_set_bkg_tile_xy
      0000BA E8 03                  327 	add	sp, #3
                                    328 ;src/main.c:336: set_bkg_tile_xy(x + 1u, y, OFFSET_BKG_CARD + OFFSET_CARD_BACK + 1u);
      0000BC 3E C8                  329 	ld	a, #0xc8
      0000BE F5                     330 	push	af
      0000BF 33                     331 	inc	sp
      0000C0 F8 04                  332 	ldhl	sp,	#4
      0000C2 7E                     333 	ld	a, (hl)
      0000C3 F5                     334 	push	af
      0000C4 33                     335 	inc	sp
      0000C5 C5                     336 	push	bc
      0000C6 33                     337 	inc	sp
      0000C7 CDr00r00               338 	call	_set_bkg_tile_xy
      0000CA E8 03                  339 	add	sp, #3
                                    340 ;src/main.c:338: }
      0000CC C9                     341 	ret
                                    342 ;src/main.c:340: void draw_card_bottom(const UINT8 x, const UINT8 y, const UINT8 card_data)
                                    343 ;	---------------------------------
                                    344 ; Function draw_card_bottom
                                    345 ; ---------------------------------
      0000CD                        346 _draw_card_bottom::
                                    347 ;src/main.c:342: set_bkg_tile_xy(x, y, OFFSET_BKG_CARD + OFFSET_CARD_BLANK + 2u);
      0000CD 3E C3                  348 	ld	a, #0xc3
      0000CF F5                     349 	push	af
      0000D0 33                     350 	inc	sp
      0000D1 F8 04                  351 	ldhl	sp,	#4
      0000D3 7E                     352 	ld	a, (hl)
      0000D4 F5                     353 	push	af
      0000D5 33                     354 	inc	sp
      0000D6 2B                     355 	dec	hl
      0000D7 7E                     356 	ld	a, (hl)
      0000D8 F5                     357 	push	af
      0000D9 33                     358 	inc	sp
      0000DA CDr00r00               359 	call	_set_bkg_tile_xy
      0000DD E8 03                  360 	add	sp, #3
                                    361 ;src/main.c:343: set_bkg_tile_xy(x + 1u, y, OFFSET_BKG_CARD + OFFSET_CARD_BLANK + 3u);
      0000DF F8 02                  362 	ldhl	sp,	#2
      0000E1 4E                     363 	ld	c, (hl)
      0000E2 0C                     364 	inc	c
      0000E3 3E C4                  365 	ld	a, #0xc4
      0000E5 F5                     366 	push	af
      0000E6 33                     367 	inc	sp
      0000E7 23                     368 	inc	hl
      0000E8 46                     369 	ld	b, (hl)
      0000E9 C5                     370 	push	bc
      0000EA CDr00r00               371 	call	_set_bkg_tile_xy
      0000ED E8 03                  372 	add	sp, #3
                                    373 ;src/main.c:344: set_bkg_tile_xy(x, y+ 1u, SUIT(card_data) + OFFSET_BKG_CARD + OFFSET_CARD_SUIT_ROT);
      0000EF F8 04                  374 	ldhl	sp,	#4
      0000F1 7E                     375 	ld	a, (hl)
      0000F2 E6 30                  376 	and	a, #0x30
      0000F4 5F                     377 	ld	e, a
      0000F5 16 00                  378 	ld	d, #0x00
      0000F7 CB 3A                  379 	srl	d
      0000F9 CB 1B                  380 	rr	e
      0000FB CB 3A                  381 	srl	d
      0000FD CB 1B                  382 	rr	e
      0000FF CB 3A                  383 	srl	d
      000101 CB 1B                  384 	rr	e
      000103 CB 3A                  385 	srl	d
      000105 CB 1B                  386 	rr	e
      000107 7B                     387 	ld	a, e
      000108 C6 DA                  388 	add	a, #0xda
      00010A 2B                     389 	dec	hl
      00010B 46                     390 	ld	b, (hl)
      00010C 04                     391 	inc	b
      00010D F5                     392 	push	af
      00010E 33                     393 	inc	sp
      00010F C5                     394 	push	bc
      000110 33                     395 	inc	sp
      000111 2B                     396 	dec	hl
      000112 7E                     397 	ld	a, (hl)
      000113 F5                     398 	push	af
      000114 33                     399 	inc	sp
      000115 CDr00r00               400 	call	_set_bkg_tile_xy
      000118 E8 03                  401 	add	sp, #3
                                    402 ;src/main.c:345: set_bkg_tile_xy(x + 1u, y+ 1u, RANK(card_data) + OFFSET_BKG_CARD + OFFSET_CARD_RANK_ROT);
      00011A F8 04                  403 	ldhl	sp,	#4
      00011C 7E                     404 	ld	a, (hl)
      00011D E6 0F                  405 	and	a, #0x0f
      00011F C6 CD                  406 	add	a, #0xcd
      000121 F5                     407 	push	af
      000122 33                     408 	inc	sp
      000123 C5                     409 	push	bc
      000124 CDr00r00               410 	call	_set_bkg_tile_xy
      000127 E8 03                  411 	add	sp, #3
                                    412 ;src/main.c:346: }
      000129 C9                     413 	ret
                                    414 ;src/main.c:348: inline void draw_card(const UINT8 x, const UINT8 y, const UINT8 card_data)
                                    415 ;	---------------------------------
                                    416 ; Function draw_card
                                    417 ; ---------------------------------
      00012A                        418 _draw_card::
                                    419 ;src/main.c:350: draw_card_top(x, y, card_data);
      00012A F8 04                  420 	ldhl	sp,	#4
      00012C 7E                     421 	ld	a, (hl)
      00012D F5                     422 	push	af
      00012E 33                     423 	inc	sp
      00012F 2B                     424 	dec	hl
      000130 7E                     425 	ld	a, (hl)
      000131 F5                     426 	push	af
      000132 33                     427 	inc	sp
      000133 2B                     428 	dec	hl
      000134 7E                     429 	ld	a, (hl)
      000135 F5                     430 	push	af
      000136 33                     431 	inc	sp
      000137 CDr60r00               432 	call	_draw_card_top
      00013A E8 03                  433 	add	sp, #3
                                    434 ;src/main.c:351: draw_card_bottom(x, y + 1u, card_data);
      00013C F8 03                  435 	ldhl	sp,	#3
      00013E 7E                     436 	ld	a, (hl)
      00013F 3C                     437 	inc	a
      000140 23                     438 	inc	hl
      000141 66                     439 	ld	h, (hl)
      000142 E5                     440 	push	hl
      000143 33                     441 	inc	sp
      000144 F5                     442 	push	af
      000145 33                     443 	inc	sp
      000146 F8 04                  444 	ldhl	sp,	#4
      000148 7E                     445 	ld	a, (hl)
      000149 F5                     446 	push	af
      00014A 33                     447 	inc	sp
      00014B CDrCDr00               448 	call	_draw_card_bottom
      00014E E8 03                  449 	add	sp, #3
                                    450 ;src/main.c:352: }
      000150 C9                     451 	ret
                                    452 ;src/main.c:354: void draw_sequential_card(const UINT8 x, const UINT8 y, const UINT8 bkg_offset)
                                    453 ;	---------------------------------
                                    454 ; Function draw_sequential_card
                                    455 ; ---------------------------------
      000151                        456 _draw_sequential_card::
                                    457 ;src/main.c:356: set_bkg_tile_xy(x, y, bkg_offset);
      000151 F8 04                  458 	ldhl	sp,	#4
      000153 7E                     459 	ld	a, (hl)
      000154 F5                     460 	push	af
      000155 33                     461 	inc	sp
      000156 2B                     462 	dec	hl
      000157 7E                     463 	ld	a, (hl)
      000158 F5                     464 	push	af
      000159 33                     465 	inc	sp
      00015A 2B                     466 	dec	hl
      00015B 7E                     467 	ld	a, (hl)
      00015C F5                     468 	push	af
      00015D 33                     469 	inc	sp
      00015E CDr00r00               470 	call	_set_bkg_tile_xy
      000161 E8 03                  471 	add	sp, #3
                                    472 ;src/main.c:357: set_bkg_tile_xy(x + 1u, y, bkg_offset + 1u);
      000163 F8 04                  473 	ldhl	sp,	#4
      000165 7E                     474 	ld	a, (hl)
      000166 3C                     475 	inc	a
      000167 2B                     476 	dec	hl
      000168 2B                     477 	dec	hl
      000169 4E                     478 	ld	c, (hl)
      00016A 0C                     479 	inc	c
      00016B F5                     480 	push	af
      00016C 33                     481 	inc	sp
      00016D 23                     482 	inc	hl
      00016E 46                     483 	ld	b, (hl)
      00016F C5                     484 	push	bc
      000170 CDr00r00               485 	call	_set_bkg_tile_xy
      000173 E8 03                  486 	add	sp, #3
                                    487 ;src/main.c:358: set_bkg_tile_xy(x, y + 1u, bkg_offset + 2u);
      000175 F8 04                  488 	ldhl	sp,	#4
      000177 7E                     489 	ld	a, (hl)
      000178 3C                     490 	inc	a
      000179 3C                     491 	inc	a
      00017A 2B                     492 	dec	hl
      00017B 46                     493 	ld	b, (hl)
      00017C 04                     494 	inc	b
      00017D F5                     495 	push	af
      00017E 33                     496 	inc	sp
      00017F C5                     497 	push	bc
      000180 33                     498 	inc	sp
      000181 2B                     499 	dec	hl
      000182 7E                     500 	ld	a, (hl)
      000183 F5                     501 	push	af
      000184 33                     502 	inc	sp
      000185 CDr00r00               503 	call	_set_bkg_tile_xy
      000188 E8 03                  504 	add	sp, #3
                                    505 ;src/main.c:359: set_bkg_tile_xy(x + 1u, y + 1u, bkg_offset + 3u);
      00018A F8 04                  506 	ldhl	sp,	#4
      00018C 7E                     507 	ld	a, (hl)
      00018D 3C                     508 	inc	a
      00018E 3C                     509 	inc	a
      00018F 3C                     510 	inc	a
      000190 F5                     511 	push	af
      000191 33                     512 	inc	sp
      000192 C5                     513 	push	bc
      000193 33                     514 	inc	sp
      000194 79                     515 	ld	a, c
      000195 F5                     516 	push	af
      000196 33                     517 	inc	sp
      000197 CDr00r00               518 	call	_set_bkg_tile_xy
      00019A E8 03                  519 	add	sp, #3
                                    520 ;src/main.c:360: set_bkg_tile_xy(x, y + 2u, bkg_offset + 4u);
      00019C F8 04                  521 	ldhl	sp,	#4
      00019E 7E                     522 	ld	a, (hl)
      00019F 3C                     523 	inc	a
      0001A0 3C                     524 	inc	a
      0001A1 3C                     525 	inc	a
      0001A2 3C                     526 	inc	a
      0001A3 2B                     527 	dec	hl
      0001A4 46                     528 	ld	b, (hl)
      0001A5 04                     529 	inc	b
      0001A6 04                     530 	inc	b
      0001A7 F5                     531 	push	af
      0001A8 33                     532 	inc	sp
      0001A9 C5                     533 	push	bc
      0001AA 33                     534 	inc	sp
      0001AB 2B                     535 	dec	hl
      0001AC 7E                     536 	ld	a, (hl)
      0001AD F5                     537 	push	af
      0001AE 33                     538 	inc	sp
      0001AF CDr00r00               539 	call	_set_bkg_tile_xy
      0001B2 E8 03                  540 	add	sp, #3
                                    541 ;src/main.c:361: set_bkg_tile_xy(x + 1u, y + 2u, bkg_offset + 5u);
      0001B4 F8 04                  542 	ldhl	sp,	#4
      0001B6 7E                     543 	ld	a, (hl)
      0001B7 C6 05                  544 	add	a, #0x05
      0001B9 F5                     545 	push	af
      0001BA 33                     546 	inc	sp
      0001BB C5                     547 	push	bc
      0001BC CDr00r00               548 	call	_set_bkg_tile_xy
      0001BF E8 03                  549 	add	sp, #3
                                    550 ;src/main.c:362: }
      0001C1 C9                     551 	ret
                                    552 ;src/main.c:365: void clear_bkg(void)
                                    553 ;	---------------------------------
                                    554 ; Function clear_bkg
                                    555 ; ---------------------------------
      0001C2                        556 _clear_bkg::
                                    557 ;src/main.c:368: for (x = 0; x < 32u; x++)
      0001C2 0E 00                  558 	ld	c, #0x00
                                    559 ;src/main.c:369: for (y = 0; y < 32u; y++)
      0001C4                        560 00109$:
      0001C4 06 00                  561 	ld	b, #0x00
      0001C6                        562 00103$:
                                    563 ;src/main.c:370: set_bkg_tile_xy(x, y, 0);
      0001C6 AF                     564 	xor	a, a
      0001C7 F5                     565 	push	af
      0001C8 33                     566 	inc	sp
      0001C9 C5                     567 	push	bc
      0001CA 33                     568 	inc	sp
      0001CB 79                     569 	ld	a, c
      0001CC F5                     570 	push	af
      0001CD 33                     571 	inc	sp
      0001CE CDr00r00               572 	call	_set_bkg_tile_xy
      0001D1 E8 03                  573 	add	sp, #3
                                    574 ;src/main.c:369: for (y = 0; y < 32u; y++)
      0001D3 04                     575 	inc	b
      0001D4 78                     576 	ld	a, b
      0001D5 D6 20                  577 	sub	a, #0x20
      0001D7 38 ED                  578 	jr	C, 00103$
                                    579 ;src/main.c:368: for (x = 0; x < 32u; x++)
      0001D9 0C                     580 	inc	c
      0001DA 79                     581 	ld	a, c
      0001DB D6 20                  582 	sub	a, #0x20
      0001DD 38 E5                  583 	jr	C, 00109$
                                    584 ;src/main.c:371: }
      0001DF C9                     585 	ret
                                    586 ;src/main.c:373: void draw_pile(Card *card, UINT8 pile_idx, UINT8 height)
                                    587 ;	---------------------------------
                                    588 ; Function draw_pile
                                    589 ; ---------------------------------
      0001E0                        590 _draw_pile::
      0001E0 E8 FD                  591 	add	sp, #-3
                                    592 ;src/main.c:375: pile_idx *= 2u;
      0001E2 F8 07                  593 	ldhl	sp,	#7
      0001E4 7E                     594 	ld	a, (hl)
      0001E5 87                     595 	add	a, a
                                    596 ;src/main.c:376: height += 3u;
      0001E6 22                     597 	ld	(hl+), a
      0001E7 34                     598 	inc	(hl)
      0001E8 34                     599 	inc	(hl)
      0001E9 34                     600 	inc	(hl)
                                    601 ;src/main.c:378: if (!card)
      0001EA 2B                     602 	dec	hl
      0001EB 2B                     603 	dec	hl
      0001EC 3A                     604 	ld	a, (hl-)
      0001ED B6                     605 	or	a, (hl)
                                    606 ;src/main.c:379: return;
                                    607 ;src/main.c:380: while (1) {
      0001EE 28 59                  608 	jr	Z, 00108$
      0001F0 F8 08                  609 	ldhl	sp,	#8
      0001F2 7E                     610 	ld	a, (hl)
      0001F3 F8 00                  611 	ldhl	sp,	#0
      0001F5 77                     612 	ld	(hl), a
      0001F6                        613 00106$:
                                    614 ;src/main.c:381: draw_card_top(pile_idx, height, card->data);
      0001F6 F8 05                  615 	ldhl	sp,	#5
      0001F8 2A                     616 	ld	a, (hl+)
      0001F9 5E                     617 	ld	e, (hl)
      0001FA F8 01                  618 	ldhl	sp,	#1
      0001FC 22                     619 	ld	(hl+), a
      0001FD 7B                     620 	ld	a, e
      0001FE 32                     621 	ld	(hl-), a
      0001FF 2A                     622 	ld	a, (hl+)
      000200 4F                     623 	ld	c, a
      000201 46                     624 	ld	b, (hl)
      000202 03                     625 	inc	bc
      000203 03                     626 	inc	bc
      000204 0A                     627 	ld	a, (bc)
      000205 C5                     628 	push	bc
      000206 F5                     629 	push	af
      000207 33                     630 	inc	sp
      000208 2B                     631 	dec	hl
      000209 2B                     632 	dec	hl
      00020A 7E                     633 	ld	a, (hl)
      00020B F5                     634 	push	af
      00020C 33                     635 	inc	sp
      00020D F8 0B                  636 	ldhl	sp,	#11
      00020F 7E                     637 	ld	a, (hl)
      000210 F5                     638 	push	af
      000211 33                     639 	inc	sp
      000212 CDr60r00               640 	call	_draw_card_top
      000215 E8 03                  641 	add	sp, #3
      000217 C1                     642 	pop	bc
                                    643 ;src/main.c:382: if (!card->next_card) {
      000218 F8 01                  644 	ldhl	sp,#1
      00021A 2A                     645 	ld	a, (hl+)
      00021B 5F                     646 	ld	e, a
      00021C 56                     647 	ld	d, (hl)
      00021D 1A                     648 	ld	a, (de)
      00021E 2B                     649 	dec	hl
      00021F 22                     650 	ld	(hl+), a
      000220 13                     651 	inc	de
      000221 1A                     652 	ld	a, (de)
                                    653 ;src/main.c:383: draw_card_bottom(pile_idx, height + 1u, card->data);
      000222 32                     654 	ld	(hl-), a
      000223 2B                     655 	dec	hl
      000224 56                     656 	ld	d, (hl)
      000225 14                     657 	inc	d
                                    658 ;src/main.c:382: if (!card->next_card) {
      000226 23                     659 	inc	hl
      000227 23                     660 	inc	hl
      000228 3A                     661 	ld	a, (hl-)
      000229 B6                     662 	or	a, (hl)
      00022A 20 11                  663 	jr	NZ, 00104$
                                    664 ;src/main.c:383: draw_card_bottom(pile_idx, height + 1u, card->data);
      00022C 0A                     665 	ld	a, (bc)
      00022D F5                     666 	push	af
      00022E 33                     667 	inc	sp
      00022F D5                     668 	push	de
      000230 33                     669 	inc	sp
      000231 F8 09                  670 	ldhl	sp,	#9
      000233 7E                     671 	ld	a, (hl)
      000234 F5                     672 	push	af
      000235 33                     673 	inc	sp
      000236 CDrCDr00               674 	call	_draw_card_bottom
      000239 E8 03                  675 	add	sp, #3
                                    676 ;src/main.c:384: break;
      00023B 18 0C                  677 	jr	00108$
      00023D                        678 00104$:
                                    679 ;src/main.c:386: height++;
      00023D F8 00                  680 	ldhl	sp,	#0
                                    681 ;src/main.c:387: card = card->next_card;
      00023F 7A                     682 	ld	a, d
      000240 22                     683 	ld	(hl+), a
      000241 2A                     684 	ld	a, (hl+)
      000242 5E                     685 	ld	e, (hl)
      000243 F8 05                  686 	ldhl	sp,	#5
      000245 22                     687 	ld	(hl+), a
      000246 73                     688 	ld	(hl), e
      000247 18 AD                  689 	jr	00106$
      000249                        690 00108$:
                                    691 ;src/main.c:389: }
      000249 E8 03                  692 	add	sp, #3
      00024B C9                     693 	ret
                                    694 ;src/main.c:391: void draw_bkg_game(void)
                                    695 ;	---------------------------------
                                    696 ; Function draw_bkg_game
                                    697 ; ---------------------------------
      00024C                        698 _draw_bkg_game::
      00024C E8 FD                  699 	add	sp, #-3
                                    700 ;src/main.c:394: Pile *pile = IDX_PTR(piles, 0);
      00024E 01r38r01               701 	ld	bc, #_piles+0
                                    702 ;src/main.c:395: for (i = 0; i < 10u; i++) {
      000251 AF                     703 	xor	a, a
      000252 F8 02                  704 	ldhl	sp,	#2
      000254 77                     705 	ld	(hl), a
      000255                        706 00102$:
                                    707 ;src/main.c:396: draw_pile(pile->base, i, 0);
      000255 59                     708 	ld	e, c
      000256 50                     709 	ld	d, b
      000257 1A                     710 	ld	a, (de)
      000258 F8 00                  711 	ldhl	sp,	#0
      00025A 22                     712 	ld	(hl+), a
      00025B 13                     713 	inc	de
      00025C 1A                     714 	ld	a, (de)
      00025D 77                     715 	ld	(hl), a
      00025E C5                     716 	push	bc
      00025F AF                     717 	xor	a, a
      000260 F5                     718 	push	af
      000261 33                     719 	inc	sp
      000262 23                     720 	inc	hl
      000263 7E                     721 	ld	a, (hl)
      000264 F5                     722 	push	af
      000265 33                     723 	inc	sp
      000266 2B                     724 	dec	hl
      000267 2B                     725 	dec	hl
      000268 2A                     726 	ld	a, (hl+)
      000269 66                     727 	ld	h, (hl)
      00026A 6F                     728 	ld	l, a
      00026B E5                     729 	push	hl
      00026C CDrE0r01               730 	call	_draw_pile
      00026F E8 04                  731 	add	sp, #4
      000271 C1                     732 	pop	bc
                                    733 ;src/main.c:397: pile++;
      000272 03                     734 	inc	bc
      000273 03                     735 	inc	bc
      000274 03                     736 	inc	bc
      000275 03                     737 	inc	bc
      000276 03                     738 	inc	bc
                                    739 ;src/main.c:395: for (i = 0; i < 10u; i++) {
      000277 F8 02                  740 	ldhl	sp,	#2
      000279 34                     741 	inc	(hl)
      00027A 7E                     742 	ld	a, (hl)
      00027B D6 0A                  743 	sub	a, #0x0a
      00027D 38 D6                  744 	jr	C, 00102$
                                    745 ;src/main.c:399: draw_sequential_card(0, 0, OFFSET_BKG_CARD + OFFSET_CARD_BACK);
      00027F 3E C7                  746 	ld	a, #0xc7
      000281 F5                     747 	push	af
      000282 33                     748 	inc	sp
      000283 AF                     749 	xor	a, a
      000284 F5                     750 	push	af
      000285 33                     751 	inc	sp
      000286 AF                     752 	xor	a, a
      000287 F5                     753 	push	af
      000288 33                     754 	inc	sp
      000289 CDr51r01               755 	call	_draw_sequential_card
      00028C E8 03                  756 	add	sp, #3
                                    757 ;src/main.c:400: }
      00028E E8 03                  758 	add	sp, #3
      000290 C9                     759 	ret
                                    760 ;src/main.c:402: void draw_bkg_splash_screen(void)
                                    761 ;	---------------------------------
                                    762 ; Function draw_bkg_splash_screen
                                    763 ; ---------------------------------
      000291                        764 _draw_bkg_splash_screen::
                                    765 ;src/main.c:404: set_bkg_tiles(5u, 10u, PUSH_TEXT_LEN, 1u, push_text);
      000291 21r00r00               766 	ld	hl, #_push_text
      000294 E5                     767 	push	hl
      000295 11 04 01               768 	ld	de, #0x0104
      000298 D5                     769 	push	de
      000299 11 05 0A               770 	ld	de, #0x0a05
      00029C D5                     771 	push	de
      00029D CDr00r00               772 	call	_set_bkg_tiles
      0002A0 E8 06                  773 	add	sp, #6
                                    774 ;src/main.c:405: set_bkg_tiles(PUSH_TEXT_LEN + 6u, 10u, START_TEXT_LEN, 1u, start_text);
      0002A2 21r00r00               775 	ld	hl, #_start_text
      0002A5 E5                     776 	push	hl
      0002A6 11 05 01               777 	ld	de, #0x0105
      0002A9 D5                     778 	push	de
      0002AA 11 0A 0A               779 	ld	de, #0x0a0a
      0002AD D5                     780 	push	de
      0002AE CDr00r00               781 	call	_set_bkg_tiles
      0002B1 E8 06                  782 	add	sp, #6
                                    783 ;src/main.c:406: set_bkg_tiles(0, 14u, COPYRIGHT_TEXT_LEN, 1u, copyright_text);
      0002B3 21r00r00               784 	ld	hl, #_copyright_text
      0002B6 E5                     785 	push	hl
      0002B7 11 14 01               786 	ld	de, #0x0114
      0002BA D5                     787 	push	de
      0002BB 3E 0E                  788 	ld	a, #0x0e
      0002BD F5                     789 	push	af
      0002BE 33                     790 	inc	sp
      0002BF AF                     791 	xor	a, a
      0002C0 F5                     792 	push	af
      0002C1 33                     793 	inc	sp
      0002C2 CDr00r00               794 	call	_set_bkg_tiles
      0002C5 E8 06                  795 	add	sp, #6
                                    796 ;src/main.c:407: dynamic_metasprite_splash_screen();
                                    797 ;src/main.c:408: }
      0002C7 C3r41r05               798 	jp  _dynamic_metasprite_splash_screen
                                    799 ;src/main.c:410: void draw_bkg_settings(void)
                                    800 ;	---------------------------------
                                    801 ; Function draw_bkg_settings
                                    802 ; ---------------------------------
      0002CA                        803 _draw_bkg_settings::
                                    804 ;src/main.c:412: set_bkg_tiles(SETTINGS_SPLIT_X - SUITS_TEXT_LEN, SETTINGS_PAD_Y + 1u, SUITS_TEXT_LEN, 1u, suits_text);
      0002CA 21r00r00               805 	ld	hl, #_suits_text
      0002CD E5                     806 	push	hl
      0002CE 11 05 01               807 	ld	de, #0x0105
      0002D1 D5                     808 	push	de
      0002D2 11 05 02               809 	ld	de, #0x0205
      0002D5 D5                     810 	push	de
      0002D6 CDr00r00               811 	call	_set_bkg_tiles
      0002D9 E8 06                  812 	add	sp, #6
                                    813 ;src/main.c:413: set_bkg_tiles(SETTINGS_SPLIT_X, SETTINGS_PAD_Y, 2u, 3u, menu_card_tiles[MENU_CARD_ONE_SUIT]);
      0002DB 21r2Cr00               814 	ld	hl, #_menu_card_tiles
      0002DE E5                     815 	push	hl
      0002DF 11 02 03               816 	ld	de, #0x0302
      0002E2 D5                     817 	push	de
      0002E3 11 0A 01               818 	ld	de, #0x010a
      0002E6 D5                     819 	push	de
      0002E7 CDr00r00               820 	call	_set_bkg_tiles
      0002EA E8 06                  821 	add	sp, #6
                                    822 ;src/main.c:414: set_bkg_tiles(SETTINGS_SPLIT_X + 2u, SETTINGS_PAD_Y, 2u, 3u, menu_card_tiles[MENU_CARD_TWO_SUIT]);
      0002EC 21r32r00               823 	ld	hl, #(_menu_card_tiles + 0x0006)
      0002EF E5                     824 	push	hl
      0002F0 11 02 03               825 	ld	de, #0x0302
      0002F3 D5                     826 	push	de
      0002F4 11 0C 01               827 	ld	de, #0x010c
      0002F7 D5                     828 	push	de
      0002F8 CDr00r00               829 	call	_set_bkg_tiles
      0002FB E8 06                  830 	add	sp, #6
                                    831 ;src/main.c:415: set_bkg_tiles(SETTINGS_SPLIT_X + 4u, SETTINGS_PAD_Y, 2u, 3u, menu_card_tiles[MENU_CARD_FOUR_SUIT]);
      0002FD 21r38r00               832 	ld	hl, #(_menu_card_tiles + 0x000c)
      000300 E5                     833 	push	hl
      000301 11 02 03               834 	ld	de, #0x0302
      000304 D5                     835 	push	de
      000305 11 0E 01               836 	ld	de, #0x010e
      000308 D5                     837 	push	de
      000309 CDr00r00               838 	call	_set_bkg_tiles
      00030C E8 06                  839 	add	sp, #6
                                    840 ;src/main.c:417: set_bkg_tiles(SETTINGS_SPLIT_X - MUSIC_TEXT_LEN, SETTINGS_PAD_Y + 5u, MUSIC_TEXT_LEN, 1u, music_text);
      00030E 21r00r00               841 	ld	hl, #_music_text
      000311 E5                     842 	push	hl
      000312 11 05 01               843 	ld	de, #0x0105
      000315 D5                     844 	push	de
      000316 11 05 06               845 	ld	de, #0x0605
      000319 D5                     846 	push	de
      00031A CDr00r00               847 	call	_set_bkg_tiles
      00031D E8 06                  848 	add	sp, #6
                                    849 ;src/main.c:418: set_bkg_tiles(SETTINGS_SPLIT_X, SETTINGS_PAD_Y + 4u, 2u, 3u, menu_card_tiles[MENU_CARD_MUSIC]);
      00031F 21r3Er00               850 	ld	hl, #(_menu_card_tiles + 0x0012)
      000322 E5                     851 	push	hl
      000323 11 02 03               852 	ld	de, #0x0302
      000326 D5                     853 	push	de
      000327 11 0A 05               854 	ld	de, #0x050a
      00032A D5                     855 	push	de
      00032B CDr00r00               856 	call	_set_bkg_tiles
      00032E E8 06                  857 	add	sp, #6
                                    858 ;src/main.c:419: set_bkg_tiles(SETTINGS_SPLIT_X + 2u, SETTINGS_PAD_Y + 4u, 2u, 3u, menu_card_tiles[MENU_CARD_NO_MUSIC]);
      000330 21r44r00               859 	ld	hl, #(_menu_card_tiles + 0x0018)
      000333 E5                     860 	push	hl
      000334 11 02 03               861 	ld	de, #0x0302
      000337 D5                     862 	push	de
      000338 11 0C 05               863 	ld	de, #0x050c
      00033B D5                     864 	push	de
      00033C CDr00r00               865 	call	_set_bkg_tiles
      00033F E8 06                  866 	add	sp, #6
                                    867 ;src/main.c:421: set_bkg_tiles(SETTINGS_SPLIT_X - SPEED_TEXT_LEN, SETTINGS_PAD_Y + 9u, SPEED_TEXT_LEN, 1u, speed_text);
      000341 21r00r00               868 	ld	hl, #_speed_text
      000344 E5                     869 	push	hl
      000345 11 05 01               870 	ld	de, #0x0105
      000348 D5                     871 	push	de
      000349 11 05 0A               872 	ld	de, #0x0a05
      00034C D5                     873 	push	de
      00034D CDr00r00               874 	call	_set_bkg_tiles
      000350 E8 06                  875 	add	sp, #6
                                    876 ;src/main.c:422: set_bkg_tiles(SETTINGS_SPLIT_X, SETTINGS_PAD_Y + 8u, 2u, 3u, menu_card_tiles[MENU_CARD_ANIMATION_SLOW]);
      000352 21r4Ar00               877 	ld	hl, #(_menu_card_tiles + 0x001e)
      000355 E5                     878 	push	hl
      000356 11 02 03               879 	ld	de, #0x0302
      000359 D5                     880 	push	de
      00035A 11 0A 09               881 	ld	de, #0x090a
      00035D D5                     882 	push	de
      00035E CDr00r00               883 	call	_set_bkg_tiles
      000361 E8 06                  884 	add	sp, #6
                                    885 ;src/main.c:423: set_bkg_tiles(SETTINGS_SPLIT_X + 2u, SETTINGS_PAD_Y + 8u, 2u, 3u, menu_card_tiles[MENU_CARD_ANIMATION_MEDIUM]);
      000363 21r50r00               886 	ld	hl, #(_menu_card_tiles + 0x0024)
      000366 E5                     887 	push	hl
      000367 11 02 03               888 	ld	de, #0x0302
      00036A D5                     889 	push	de
      00036B 11 0C 09               890 	ld	de, #0x090c
      00036E D5                     891 	push	de
      00036F CDr00r00               892 	call	_set_bkg_tiles
      000372 E8 06                  893 	add	sp, #6
                                    894 ;src/main.c:424: set_bkg_tiles(SETTINGS_SPLIT_X + 4u, SETTINGS_PAD_Y + 8u, 2u, 3u, menu_card_tiles[MENU_CARD_ANIMATION_FAST]);
      000374 21r56r00               895 	ld	hl, #(_menu_card_tiles + 0x002a)
      000377 E5                     896 	push	hl
      000378 11 02 03               897 	ld	de, #0x0302
      00037B D5                     898 	push	de
      00037C 11 0E 09               899 	ld	de, #0x090e
      00037F D5                     900 	push	de
      000380 CDr00r00               901 	call	_set_bkg_tiles
      000383 E8 06                  902 	add	sp, #6
                                    903 ;src/main.c:426: set_bkg_tiles(SETTINGS_SPLIT_X - START_TEXT_LEN, SETTINGS_PAD_Y + 13u, START_TEXT_LEN, 1u, start_text);
      000385 21r00r00               904 	ld	hl, #_start_text
      000388 E5                     905 	push	hl
      000389 11 05 01               906 	ld	de, #0x0105
      00038C D5                     907 	push	de
      00038D 11 05 0E               908 	ld	de, #0x0e05
      000390 D5                     909 	push	de
      000391 CDr00r00               910 	call	_set_bkg_tiles
      000394 E8 06                  911 	add	sp, #6
                                    912 ;src/main.c:427: draw_sequential_card(SETTINGS_SPLIT_X, SETTINGS_PAD_Y + 12u, OFFSET_BKG_CARD + OFFSET_CARD_BACK);
      000396 11 0D C7               913 	ld	de, #0xc70d
      000399 D5                     914 	push	de
      00039A 3E 0A                  915 	ld	a, #0x0a
      00039C F5                     916 	push	af
      00039D 33                     917 	inc	sp
      00039E CDr51r01               918 	call	_draw_sequential_card
      0003A1 E8 03                  919 	add	sp, #3
                                    920 ;src/main.c:428: }
      0003A3 C9                     921 	ret
                                    922 ;src/main.c:434: void metasprite_2x3_hide(const UINT8 sprite)
                                    923 ;	---------------------------------
                                    924 ; Function metasprite_2x3_hide
                                    925 ; ---------------------------------
      0003A4                        926 _metasprite_2x3_hide::
                                    927 ;src/main.c:441: );
      0003A4 F8 02                  928 	ldhl	sp,	#2
      0003A6 46                     929 	ld	b, (hl)
                                    930 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      0003A7 21r00r00               931 	ld	hl, #___current_metasprite
      0003AA 36r00                  932 	ld	(hl), #<(_metasprite_same_2x3)
      0003AC 23                     933 	inc	hl
      0003AD 36s00                  934 	ld	(hl), #>(_metasprite_same_2x3)
                                    935 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      0003AF 21r00r00               936 	ld	hl, #___current_base_tile
      0003B2 36 00                  937 	ld	(hl), #0x00
                                    938 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      0003B4 AF                     939 	xor	a, a
      0003B5 F5                     940 	push	af
      0003B6 33                     941 	inc	sp
      0003B7 AF                     942 	xor	a, a
      0003B8 F5                     943 	push	af
      0003B9 33                     944 	inc	sp
      0003BA C5                     945 	push	bc
      0003BB 33                     946 	inc	sp
      0003BC CDr00r00               947 	call	___move_metasprite
      0003BF E8 03                  948 	add	sp, #3
                                    949 ;src/main.c:441: );
                                    950 ;src/main.c:442: }
      0003C1 C9                     951 	ret
                                    952 ;src/main.c:444: void set_metasprite_card(const UINT8 card_data)
                                    953 ;	---------------------------------
                                    954 ; Function set_metasprite_card
                                    955 ; ---------------------------------
      0003C2                        956 _set_metasprite_card::
                                    957 ;src/main.c:446: metasprite_t *iter = IDX_PTR(metasprite_custom_2x3, 0);
                                    958 ;src/main.c:447: (iter++)->dtile = OFFSET_CARD_RANK + RANK(card_data);
      0003C2 F8 02                  959 	ldhl	sp,	#2
      0003C4 46                     960 	ld	b, (hl)
      0003C5 78                     961 	ld	a, b
      0003C6 E6 0F                  962 	and	a, #0x0f
      0003C8 4F                     963 	ld	c, a
      0003C9 21r02r00               964 	ld	hl, #(_metasprite_custom_2x3 + 0x0002)
      0003CC 71                     965 	ld	(hl), c
                                    966 ;src/main.c:448: (iter++)->dtile = OFFSET_CARD_SUIT + SUIT(card_data);
      0003CD 11r06r00               967 	ld	de, #(_metasprite_custom_2x3 + 0x0004) + 2
      0003D0 78                     968 	ld	a, b
      0003D1 E6 30                  969 	and	a, #0x30
      0003D3 6F                     970 	ld	l, a
      0003D4 26 00                  971 	ld	h, #0x00
      0003D6 CB 3C                  972 	srl	h
      0003D8 CB 1D                  973 	rr	l
      0003DA CB 3C                  974 	srl	h
      0003DC CB 1D                  975 	rr	l
      0003DE CB 3C                  976 	srl	h
      0003E0 CB 1D                  977 	rr	l
      0003E2 CB 3C                  978 	srl	h
      0003E4 CB 1D                  979 	rr	l
      0003E6 45                     980 	ld	b, l
      0003E7 78                     981 	ld	a, b
      0003E8 C6 0D                  982 	add	a, #0x0d
      0003EA 12                     983 	ld	(de), a
                                    984 ;src/main.c:449: (iter++)->dtile = OFFSET_CARD_BLANK + 2u;
      0003EB 21r0Ar00               985 	ld	hl, #(_metasprite_custom_2x3 + 0x000a)
      0003EE 36 13                  986 	ld	(hl), #0x13
                                    987 ;src/main.c:450: (iter++)->dtile = OFFSET_CARD_BLANK + 3u;
      0003F0 21r0Er00               988 	ld	hl, #(_metasprite_custom_2x3 + 0x000e)
      0003F3 36 14                  989 	ld	(hl), #0x14
                                    990 ;src/main.c:451: (iter++)->dtile = OFFSET_CARD_SUIT_ROT + SUIT(card_data);
      0003F5 11r12r00               991 	ld	de, #(_metasprite_custom_2x3 + 0x0010) + 2
      0003F8 78                     992 	ld	a, b
      0003F9 C6 2A                  993 	add	a, #0x2a
      0003FB 12                     994 	ld	(de), a
                                    995 ;src/main.c:452: (iter++)->dtile = OFFSET_CARD_RANK_ROT + RANK(card_data);
      0003FC 11r16r00               996 	ld	de, #(_metasprite_custom_2x3 + 0x0014) + 2
      0003FF 79                     997 	ld	a, c
      000400 C6 1D                  998 	add	a, #0x1d
      000402 12                     999 	ld	(de), a
                                   1000 ;src/main.c:453: }
      000403 C9                    1001 	ret
                                   1002 ;src/main.c:455: void draw_setting_frame_metasprites(void)
                                   1003 ;	---------------------------------
                                   1004 ; Function draw_setting_frame_metasprites
                                   1005 ; ---------------------------------
      000404                       1006 _draw_setting_frame_metasprites::
                                   1007 ;src/main.c:460: NUM_SUITS(settings) * 16u + SETTINGS_SPLIT_X * 8u,
      000404 FAr6Cr01              1008 	ld	a, (#_settings)
      000407 E6 03                 1009 	and	a, #0x03
      000409 CB 37                 1010 	swap	a
      00040B E6 F0                 1011 	and	a, #0xf0
      00040D C6 50                 1012 	add	a, #0x50
      00040F 47                    1013 	ld	b, a
                                   1014 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      000410 21r00r00              1015 	ld	hl, #___current_metasprite
      000413 36r00                 1016 	ld	(hl), #<(_metasprite_sequential_2x3)
      000415 23                    1017 	inc	hl
      000416 36s00                 1018 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   1019 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      000418 21r00r00              1020 	ld	hl, #___current_base_tile
      00041B 36 E4                 1021 	ld	(hl), #0xe4
                                   1022 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      00041D 3E 08                 1023 	ld	a, #0x08
      00041F F5                    1024 	push	af
      000420 33                    1025 	inc	sp
      000421 0E 12                 1026 	ld	c, #0x12
      000423 C5                    1027 	push	bc
      000424 CDr00r00              1028 	call	___move_metasprite
      000427 E8 03                 1029 	add	sp, #3
                                   1030 ;src/main.c:466: !MUSIC(settings) * 16u + SETTINGS_SPLIT_X * 8u,
      000429 FAr6Cr01              1031 	ld	a, (#_settings)
      00042C E6 10                 1032 	and	a, #0x10
      00042E F6 00                 1033 	or	a,#0x00
      000430 D6 01                 1034 	sub	a,#0x01
      000432 3E 00                 1035 	ld	a, #0x00
      000434 17                    1036 	rla
      000435 CB 37                 1037 	swap	a
      000437 E6 F0                 1038 	and	a, #0xf0
      000439 C6 50                 1039 	add	a, #0x50
      00043B 47                    1040 	ld	b, a
                                   1041 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      00043C 21r00r00              1042 	ld	hl, #___current_metasprite
      00043F 36r00                 1043 	ld	(hl), #<(_metasprite_sequential_2x3)
      000441 23                    1044 	inc	hl
      000442 36s00                 1045 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   1046 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      000444 21r00r00              1047 	ld	hl, #___current_base_tile
      000447 36 E4                 1048 	ld	(hl), #0xe4
                                   1049 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      000449 3E 28                 1050 	ld	a, #0x28
      00044B F5                    1051 	push	af
      00044C 33                    1052 	inc	sp
      00044D 0E 18                 1053 	ld	c, #0x18
      00044F C5                    1054 	push	bc
      000450 CDr00r00              1055 	call	___move_metasprite
      000453 E8 03                 1056 	add	sp, #3
                                   1057 ;src/main.c:472: ANIMATION_SPEED(settings) * 16u + SETTINGS_SPLIT_X * 8u,
      000455 FAr6Cr01              1058 	ld	a, (#_settings)
      000458 E6 0C                 1059 	and	a, #0x0c
      00045A 4F                    1060 	ld	c, a
      00045B 06 00                 1061 	ld	b, #0x00
      00045D CB 38                 1062 	srl	b
      00045F CB 19                 1063 	rr	c
      000461 CB 38                 1064 	srl	b
      000463 CB 19                 1065 	rr	c
      000465 79                    1066 	ld	a, c
      000466 CB 37                 1067 	swap	a
      000468 E6 F0                 1068 	and	a, #0xf0
      00046A C6 50                 1069 	add	a, #0x50
      00046C 47                    1070 	ld	b, a
                                   1071 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      00046D 21r00r00              1072 	ld	hl, #___current_metasprite
      000470 36r00                 1073 	ld	(hl), #<(_metasprite_sequential_2x3)
      000472 23                    1074 	inc	hl
      000473 36s00                 1075 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   1076 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      000475 21r00r00              1077 	ld	hl, #___current_base_tile
      000478 36 E4                 1078 	ld	(hl), #0xe4
                                   1079 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      00047A 3E 48                 1080 	ld	a, #0x48
      00047C F5                    1081 	push	af
      00047D 33                    1082 	inc	sp
      00047E 0E 1E                 1083 	ld	c, #0x1e
      000480 C5                    1084 	push	bc
      000481 CDr00r00              1085 	call	___move_metasprite
      000484 E8 03                 1086 	add	sp, #3
                                   1087 ;src/main.c:474: );
                                   1088 ;src/main.c:475: }
      000486 C9                    1089 	ret
                                   1090 ;src/main.c:490: void dynamic_metasprite_end_animation(void)
                                   1091 ;	---------------------------------
                                   1092 ; Function dynamic_metasprite_end_animation
                                   1093 ; ---------------------------------
      000487                       1094 _dynamic_metasprite_end_animation::
                                   1095 ;src/main.c:492: metasprite_2x3_hide(SPRITE_DYNAMIC);
      000487 AF                    1096 	xor	a, a
      000488 F5                    1097 	push	af
      000489 33                    1098 	inc	sp
      00048A CDrA4r03              1099 	call	_metasprite_2x3_hide
      00048D 33                    1100 	inc	sp
                                   1101 ;src/main.c:493: flags &= ~FLAG_PLAYING_ANIMATION;
      00048E 21r6Br01              1102 	ld	hl, #_flags
      000491 7E                    1103 	ld	a, (hl)
      000492 E6 FB                 1104 	and	a, #0xfb
      000494 77                    1105 	ld	(hl), a
                                   1106 ;src/main.c:494: dynamic_metasprite.target_frames = -1;
      000495 21r77r01              1107 	ld	hl, #(_dynamic_metasprite + 0x0008)
      000498 36 FF                 1108 	ld	(hl), #0xff
                                   1109 ;src/main.c:495: }
      00049A C9                    1110 	ret
                                   1111 ;src/main.c:497: void dynamic_metasprite_splash_screen_callback(void)
                                   1112 ;	---------------------------------
                                   1113 ; Function dynamic_metasprite_splash_screen_callback
                                   1114 ; ---------------------------------
      00049B                       1115 _dynamic_metasprite_splash_screen_callback::
      00049B E8 F2                 1116 	add	sp, #-14
                                   1117 ;src/main.c:499: const UINT8 offsets[] = {
      00049D F8 00                 1118 	ldhl	sp,	#0
      00049F 4D                    1119 	ld	c, l
      0004A0 44                    1120 	ld	b, h
      0004A1 AF                    1121 	xor	a, a
      0004A2 02                    1122 	ld	(bc), a
      0004A3 69                    1123 	ld	l, c
      0004A4 60                    1124 	ld	h, b
      0004A5 23                    1125 	inc	hl
      0004A6 36 06                 1126 	ld	(hl), #0x06
      0004A8 69                    1127 	ld	l, c
      0004A9 60                    1128 	ld	h, b
      0004AA 23                    1129 	inc	hl
      0004AB 23                    1130 	inc	hl
      0004AC 36 0C                 1131 	ld	(hl), #0x0c
      0004AE 69                    1132 	ld	l, c
      0004AF 60                    1133 	ld	h, b
      0004B0 23                    1134 	inc	hl
      0004B1 23                    1135 	inc	hl
      0004B2 23                    1136 	inc	hl
      0004B3 36 12                 1137 	ld	(hl), #0x12
      0004B5 21 04 00              1138 	ld	hl, #0x0004
      0004B8 09                    1139 	add	hl, bc
      0004B9 36 18                 1140 	ld	(hl), #0x18
      0004BB 21 05 00              1141 	ld	hl, #0x0005
      0004BE 09                    1142 	add	hl, bc
      0004BF 36 1E                 1143 	ld	(hl), #0x1e
      0004C1 21 06 00              1144 	ld	hl, #0x0006
      0004C4 09                    1145 	add	hl, bc
      0004C5 36 12                 1146 	ld	(hl), #0x12
      0004C7 21 07 00              1147 	ld	hl, #0x0007
      0004CA 09                    1148 	add	hl, bc
      0004CB 36 24                 1149 	ld	(hl), #0x24
      0004CD 21 08 00              1150 	ld	hl, #0x0008
      0004D0 09                    1151 	add	hl, bc
      0004D1 36 2A                 1152 	ld	(hl), #0x2a
                                   1153 ;src/main.c:510: draw_sequential_card(1u + dynamic_metasprite.data[0] * 2u, 2u, OFFSET_BKG_TITLE + offsets[dynamic_metasprite.data[0]]);
      0004D3 21r7Cr01              1154 	ld	hl, #(_dynamic_metasprite + 0x000d)
      0004D6 6E                    1155 	ld	l, (hl)
      0004D7 79                    1156 	ld	a, c
      0004D8 85                    1157 	add	a, l
      0004D9 5F                    1158 	ld	e, a
      0004DA 78                    1159 	ld	a, b
      0004DB CE 00                 1160 	adc	a, #0x00
      0004DD 57                    1161 	ld	d, a
      0004DE 1A                    1162 	ld	a, (de)
      0004DF C6 80                 1163 	add	a, #0x80
      0004E1 29                    1164 	add	hl, hl
      0004E2 2C                    1165 	inc	l
      0004E3 C5                    1166 	push	bc
      0004E4 57                    1167 	ld	d,a
      0004E5 1E 02                 1168 	ld	e,#0x02
      0004E7 D5                    1169 	push	de
      0004E8 7D                    1170 	ld	a, l
      0004E9 F5                    1171 	push	af
      0004EA 33                    1172 	inc	sp
      0004EB CDr51r01              1173 	call	_draw_sequential_card
      0004EE E8 03                 1174 	add	sp, #3
      0004F0 C1                    1175 	pop	bc
                                   1176 ;src/main.c:511: if (dynamic_metasprite.data[0] == 8u) {
      0004F1 FAr7Cr01              1177 	ld	a, (#(_dynamic_metasprite + 0x000d) + 0)
      0004F4 FE 08                 1178 	cp	a, #0x08
      0004F6 20 05                 1179 	jr	NZ, 00102$
                                   1180 ;src/main.c:512: dynamic_metasprite_end_animation();
      0004F8 CDr87r04              1181 	call	_dynamic_metasprite_end_animation
                                   1182 ;src/main.c:513: return;
      0004FB 18 41                 1183 	jr	00103$
      0004FD                       1184 00102$:
                                   1185 ;src/main.c:515: dynamic_metasprite.data[0]++;
      0004FD 3C                    1186 	inc	a
      0004FE F8 09                 1187 	ldhl	sp,	#9
      000500 77                    1188 	ld	(hl), a
      000501 11r7Cr01              1189 	ld	de, #(_dynamic_metasprite + 0x000d)
      000504 7E                    1190 	ld	a, (hl)
      000505 12                    1191 	ld	(de), a
                                   1192 ;src/main.c:516: dynamic_metasprite.elapsed_frames = 0;
      000506 21r78r01              1193 	ld	hl, #(_dynamic_metasprite + 0x0009)
      000509 36 00                 1194 	ld	(hl), #0x00
                                   1195 ;src/main.c:517: dynamic_metasprite.dist[0] += 16;
      00050B 11r73r01              1196 	ld	de, #(_dynamic_metasprite + 0x0004)
      00050E 1A                    1197 	ld	a, (de)
      00050F F8 0A                 1198 	ldhl	sp,	#10
      000511 22                    1199 	ld	(hl+), a
      000512 13                    1200 	inc	de
      000513 1A                    1201 	ld	a, (de)
                                   1202 ;c
      000514 32                    1203 	ld	(hl-), a
      000515 2A                    1204 	ld	a, (hl+)
      000516 5F                    1205 	ld	e, a
      000517 56                    1206 	ld	d, (hl)
      000518 21 10 00              1207 	ld	hl, #0x0010
      00051B 19                    1208 	add	hl, de
      00051C E5                    1209 	push	hl
      00051D 7D                    1210 	ld	a, l
      00051E F8 0E                 1211 	ldhl	sp,	#14
      000520 77                    1212 	ld	(hl), a
      000521 E1                    1213 	pop	hl
      000522 7C                    1214 	ld	a, h
      000523 F8 0D                 1215 	ldhl	sp,	#13
      000525 77                    1216 	ld	(hl), a
      000526 11r73r01              1217 	ld	de, #(_dynamic_metasprite + 0x0004)
      000529 2B                    1218 	dec	hl
      00052A 7E                    1219 	ld	a, (hl)
      00052B 12                    1220 	ld	(de), a
      00052C 13                    1221 	inc	de
      00052D 23                    1222 	inc	hl
      00052E 7E                    1223 	ld	a, (hl)
      00052F 12                    1224 	ld	(de), a
                                   1225 ;src/main.c:518: dynamic_metasprite.metasprite_offset = OFFSET_SPRITE_TITLE + offsets[dynamic_metasprite.data[0]];
      000530 F8 09                 1226 	ldhl	sp,	#9
      000532 6E                    1227 	ld	l, (hl)
      000533 26 00                 1228 	ld	h, #0x00
      000535 09                    1229 	add	hl, bc
      000536 4D                    1230 	ld	c, l
      000537 44                    1231 	ld	b, h
      000538 0A                    1232 	ld	a, (bc)
      000539 C6 80                 1233 	add	a, #0x80
      00053B EAr7Br01              1234 	ld	(#(_dynamic_metasprite + 0x000c)),a
      00053E                       1235 00103$:
                                   1236 ;src/main.c:519: }
      00053E E8 0E                 1237 	add	sp, #14
      000540 C9                    1238 	ret
                                   1239 ;src/main.c:521: inline void dynamic_metasprite_splash_screen(void)
                                   1240 ;	---------------------------------
                                   1241 ; Function dynamic_metasprite_splash_screen
                                   1242 ; ---------------------------------
      000541                       1243 _dynamic_metasprite_splash_screen::
                                   1244 ;src/main.c:523: dynamic_metasprite.src[0] = 72;
      000541 21r6Fr01              1245 	ld	hl, #_dynamic_metasprite
      000544 36 48                 1246 	ld	(hl), #0x48
      000546 23                    1247 	inc	hl
      000547 36 00                 1248 	ld	(hl), #0x00
                                   1249 ;src/main.c:524: dynamic_metasprite.src[1] = -24;
      000549 21r71r01              1250 	ld	hl, #(_dynamic_metasprite + 0x0002)
      00054C 36 E8                 1251 	ld	(hl), #0xe8
      00054E 23                    1252 	inc	hl
      00054F 36 FF                 1253 	ld	(hl), #0xff
                                   1254 ;src/main.c:525: dynamic_metasprite.dist[0] = -64;
      000551 21r73r01              1255 	ld	hl, #(_dynamic_metasprite + 0x0004)
      000554 36 C0                 1256 	ld	(hl), #0xc0
      000556 23                    1257 	inc	hl
      000557 36 FF                 1258 	ld	(hl), #0xff
                                   1259 ;src/main.c:526: dynamic_metasprite.dist[1] = 40;
      000559 21r75r01              1260 	ld	hl, #(_dynamic_metasprite + 0x0006)
      00055C 36 28                 1261 	ld	(hl), #0x28
      00055E 23                    1262 	inc	hl
      00055F 36 00                 1263 	ld	(hl), #0x00
                                   1264 ;src/main.c:527: dynamic_metasprite.target_frames = TARGET_FRAMES_SPLASH_SCREEN;
      000561 21r77r01              1265 	ld	hl, #(_dynamic_metasprite + 0x0008)
      000564 36 20                 1266 	ld	(hl), #0x20
                                   1267 ;src/main.c:528: dynamic_metasprite.elapsed_frames = 0;
      000566 21r78r01              1268 	ld	hl, #(_dynamic_metasprite + 0x0009)
      000569 36 00                 1269 	ld	(hl), #0x00
                                   1270 ;src/main.c:529: dynamic_metasprite.metasprite = metasprite_sequential_2x3;
      00056B 21r79r01              1271 	ld	hl, #(_dynamic_metasprite + 0x000a)
      00056E 36r00                 1272 	ld	(hl), #<(_metasprite_sequential_2x3)
      000570 23                    1273 	inc	hl
      000571 36s00                 1274 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   1275 ;src/main.c:530: dynamic_metasprite.metasprite_offset = OFFSET_SPRITE_TITLE + OFFSET_TITLE_S;
      000573 21r7Br01              1276 	ld	hl, #(_dynamic_metasprite + 0x000c)
      000576 36 80                 1277 	ld	(hl), #0x80
                                   1278 ;src/main.c:531: dynamic_metasprite.data[0] = 0;
      000578 21r7Cr01              1279 	ld	hl, #(_dynamic_metasprite + 0x000d)
      00057B 36 00                 1280 	ld	(hl), #0x00
                                   1281 ;src/main.c:532: dynamic_metasprite.callback = &dynamic_metasprite_splash_screen_callback;
      00057D 21r82r01              1282 	ld	hl, #(_dynamic_metasprite + 0x0013)
      000580 36r9B                 1283 	ld	(hl), #<(_dynamic_metasprite_splash_screen_callback)
      000582 23                    1284 	inc	hl
      000583 36s04                 1285 	ld	(hl), #>(_dynamic_metasprite_splash_screen_callback)
                                   1286 ;src/main.c:533: flags |= FLAG_PLAYING_ANIMATION;
      000585 21r6Br01              1287 	ld	hl, #_flags
      000588 7E                    1288 	ld	a, (hl)
      000589 F6 04                 1289 	or	a, #0x04
      00058B 77                    1290 	ld	(hl), a
                                   1291 ;src/main.c:534: }
      00058C C9                    1292 	ret
                                   1293 ;src/main.c:536: void dynamic_metasprite_fold_pile(void)
                                   1294 ;	---------------------------------
                                   1295 ; Function dynamic_metasprite_fold_pile
                                   1296 ; ---------------------------------
      00058D                       1297 _dynamic_metasprite_fold_pile::
      00058D E8 F4                 1298 	add	sp, #-12
                                   1299 ;src/main.c:538: UINT8 pile_idx = dynamic_metasprite.data[3] & 0xF;
      00058F FAr7Fr01              1300 	ld	a, (#(_dynamic_metasprite + 0x0010) + 0)
      000592 F8 0B                 1301 	ldhl	sp,	#11
      000594 77                    1302 	ld	(hl), a
      000595 F8 0B                 1303 	ldhl	sp,	#11
      000597 7E                    1304 	ld	a, (hl)
      000598 E6 0F                 1305 	and	a, #0x0f
      00059A 2B                    1306 	dec	hl
                                   1307 ;src/main.c:539: if (!pile_idx) {
      00059B 77                    1308 	ld	(hl), a
      00059C B7                    1309 	or	a, a
      00059D 20 06                 1310 	jr	NZ, 00102$
                                   1311 ;src/main.c:540: dynamic_metasprite_end_animation();
      00059F CDr87r04              1312 	call	_dynamic_metasprite_end_animation
                                   1313 ;src/main.c:541: return;
      0005A2 C3r74r06              1314 	jp	00103$
      0005A5                       1315 00102$:
                                   1316 ;src/main.c:544: Pile *pile = IDX_PTR(piles, pile_idx);
      0005A5 F8 0A                 1317 	ldhl	sp,	#10
      0005A7 4E                    1318 	ld	c, (hl)
      0005A8 06 00                 1319 	ld	b, #0x00
      0005AA 69                    1320 	ld	l, c
      0005AB 60                    1321 	ld	h, b
      0005AC 29                    1322 	add	hl, hl
      0005AD 29                    1323 	add	hl, hl
      0005AE 09                    1324 	add	hl, bc
      0005AF E5                    1325 	push	hl
      0005B0 7D                    1326 	ld	a, l
      0005B1 F8 08                 1327 	ldhl	sp,	#8
      0005B3 77                    1328 	ld	(hl), a
      0005B4 E1                    1329 	pop	hl
      0005B5 7C                    1330 	ld	a, h
      0005B6 F8 07                 1331 	ldhl	sp,	#7
      0005B8 77                    1332 	ld	(hl), a
                                   1333 ;c
      0005B9 11r38r01              1334 	ld	de, #_piles
      0005BC 2B                    1335 	dec	hl
      0005BD 2A                    1336 	ld	a, (hl+)
      0005BE 66                    1337 	ld	h, (hl)
      0005BF 6F                    1338 	ld	l, a
      0005C0 19                    1339 	add	hl, de
      0005C1 E5                    1340 	push	hl
      0005C2 7D                    1341 	ld	a, l
      0005C3 F8 0A                 1342 	ldhl	sp,	#10
      0005C5 77                    1343 	ld	(hl), a
      0005C6 E1                    1344 	pop	hl
      0005C7 7C                    1345 	ld	a, h
      0005C8 F8 09                 1346 	ldhl	sp,	#9
      0005CA 32                    1347 	ld	(hl-), a
      0005CB 2A                    1348 	ld	a, (hl+)
      0005CC 5E                    1349 	ld	e, (hl)
      0005CD F8 02                 1350 	ldhl	sp,	#2
      0005CF 22                    1351 	ld	(hl+), a
      0005D0 73                    1352 	ld	(hl), e
                                   1353 ;src/main.c:545: UINT8 x = pile_idx * 16u;
      0005D1 F8 0A                 1354 	ldhl	sp,	#10
      0005D3 7E                    1355 	ld	a, (hl)
      0005D4 CB 37                 1356 	swap	a
      0005D6 E6 F0                 1357 	and	a, #0xf0
      0005D8 F8 04                 1358 	ldhl	sp,	#4
      0005DA 77                    1359 	ld	(hl), a
                                   1360 ;src/main.c:554: dynamic_metasprite.data[3] >> 4u
      0005DB F8 0B                 1361 	ldhl	sp,	#11
      0005DD 7E                    1362 	ld	a, (hl)
      0005DE CB 37                 1363 	swap	a
      0005E0 E6 0F                 1364 	and	a, #0x0f
      0005E2 F8 05                 1365 	ldhl	sp,	#5
                                   1366 ;src/main.c:552: pile->base,
      0005E4 32                    1367 	ld	(hl-), a
      0005E5 2B                    1368 	dec	hl
      0005E6 2B                    1369 	dec	hl
      0005E7 2A                    1370 	ld	a, (hl+)
      0005E8 5F                    1371 	ld	e, a
      0005E9 56                    1372 	ld	d, (hl)
      0005EA 1A                    1373 	ld	a, (de)
      0005EB F8 06                 1374 	ldhl	sp,	#6
      0005ED 22                    1375 	ld	(hl+), a
      0005EE 13                    1376 	inc	de
      0005EF 1A                    1377 	ld	a, (de)
      0005F0 77                    1378 	ld	(hl), a
                                   1379 ;src/main.c:546: dynamic_metasprite_fold(pile->top->data,
                                   1380 ;c
      0005F1 F8 02                 1381 	ldhl	sp,#2
      0005F3 2A                    1382 	ld	a, (hl+)
      0005F4 5F                    1383 	ld	e, a
      0005F5 56                    1384 	ld	d, (hl)
      0005F6 21 02 00              1385 	ld	hl, #0x0002
      0005F9 19                    1386 	add	hl, de
      0005FA E5                    1387 	push	hl
      0005FB 7D                    1388 	ld	a, l
      0005FC F8 0A                 1389 	ldhl	sp,	#10
      0005FE 77                    1390 	ld	(hl), a
      0005FF E1                    1391 	pop	hl
      000600 7C                    1392 	ld	a, h
      000601 F8 09                 1393 	ldhl	sp,	#9
      000603 32                    1394 	ld	(hl-), a
      000604 2A                    1395 	ld	a, (hl+)
      000605 5F                    1396 	ld	e, a
      000606 56                    1397 	ld	d, (hl)
      000607 1A                    1398 	ld	a, (de)
      000608 F8 00                 1399 	ldhl	sp,	#0
      00060A 22                    1400 	ld	(hl+), a
      00060B 13                    1401 	inc	de
      00060C 1A                    1402 	ld	a, (de)
      00060D 77                    1403 	ld	(hl), a
                                   1404 ;c
      00060E D1                    1405 	pop	de
      00060F D5                    1406 	push	de
      000610 21 02 00              1407 	ld	hl, #0x0002
      000613 19                    1408 	add	hl, de
      000614 E5                    1409 	push	hl
      000615 7D                    1410 	ld	a, l
      000616 F8 0C                 1411 	ldhl	sp,	#12
      000618 77                    1412 	ld	(hl), a
      000619 E1                    1413 	pop	hl
      00061A 7C                    1414 	ld	a, h
      00061B F8 0B                 1415 	ldhl	sp,	#11
      00061D 32                    1416 	ld	(hl-), a
      00061E 2A                    1417 	ld	a, (hl+)
      00061F 5F                    1418 	ld	e, a
      000620 56                    1419 	ld	d, (hl)
      000621 1A                    1420 	ld	a, (de)
      000622 77                    1421 	ld	(hl), a
      000623 F8 05                 1422 	ldhl	sp,	#5
      000625 7E                    1423 	ld	a, (hl)
      000626 F5                    1424 	push	af
      000627 33                    1425 	inc	sp
      000628 AF                    1426 	xor	a, a
      000629 F5                    1427 	push	af
      00062A 33                    1428 	inc	sp
      00062B 23                    1429 	inc	hl
      00062C 2A                    1430 	ld	a, (hl+)
      00062D 66                    1431 	ld	h, (hl)
      00062E 6F                    1432 	ld	l, a
      00062F E5                    1433 	push	hl
      000630 3E 0D                 1434 	ld	a, #0x0d
      000632 F5                    1435 	push	af
      000633 33                    1436 	inc	sp
      000634 AF                    1437 	xor	a, a
      000635 F5                    1438 	push	af
      000636 33                    1439 	inc	sp
      000637 F8 0A                 1440 	ldhl	sp,	#10
      000639 56                    1441 	ld	d, (hl)
      00063A 1E 78                 1442 	ld	e,#0x78
      00063C D5                    1443 	push	de
      00063D 7E                    1444 	ld	a, (hl)
      00063E F5                    1445 	push	af
      00063F 33                    1446 	inc	sp
      000640 F8 14                 1447 	ldhl	sp,	#20
      000642 7E                    1448 	ld	a, (hl)
      000643 F5                    1449 	push	af
      000644 33                    1450 	inc	sp
      000645 CDrE6r08              1451 	call	_dynamic_metasprite_fold
      000648 E8 0A                 1452 	add	sp, #10
                                   1453 ;src/main.c:556: pile->base = NULL;
      00064A C1                    1454 	pop	bc
      00064B E1                    1455 	pop	hl
      00064C E5                    1456 	push	hl
      00064D C5                    1457 	push	bc
      00064E AF                    1458 	xor	a, a
      00064F 22                    1459 	ld	(hl+), a
      000650 77                    1460 	ld	(hl), a
                                   1461 ;src/main.c:557: pile->top = NULL;
      000651 F8 08                 1462 	ldhl	sp,	#8
      000653 2A                    1463 	ld	a, (hl+)
      000654 66                    1464 	ld	h, (hl)
      000655 6F                    1465 	ld	l, a
      000656 AF                    1466 	xor	a, a
      000657 22                    1467 	ld	(hl+), a
      000658 77                    1468 	ld	(hl), a
                                   1469 ;src/main.c:558: pile->height = 0;
                                   1470 ;c
      000659 F8 02                 1471 	ldhl	sp,#2
      00065B 2A                    1472 	ld	a, (hl+)
      00065C 5F                    1473 	ld	e, a
      00065D 56                    1474 	ld	d, (hl)
      00065E 21 04 00              1475 	ld	hl, #0x0004
      000661 19                    1476 	add	hl, de
      000662 E5                    1477 	push	hl
      000663 7D                    1478 	ld	a, l
      000664 F8 0C                 1479 	ldhl	sp,	#12
      000666 77                    1480 	ld	(hl), a
      000667 E1                    1481 	pop	hl
      000668 7C                    1482 	ld	a, h
      000669 F8 0B                 1483 	ldhl	sp,	#11
      00066B 32                    1484 	ld	(hl-), a
      00066C 2A                    1485 	ld	a, (hl+)
      00066D 66                    1486 	ld	h, (hl)
      00066E 6F                    1487 	ld	l, a
      00066F 36 00                 1488 	ld	(hl), #0x00
                                   1489 ;src/main.c:559: cursor_adjust_height();
      000671 CDr6Fr0B              1490 	call	_cursor_adjust_height
      000674                       1491 00103$:
                                   1492 ;src/main.c:560: }
      000674 E8 0C                 1493 	add	sp, #12
      000676 C9                    1494 	ret
                                   1495 ;src/main.c:562: void dynamic_metasprite_unfold_callback(void)
                                   1496 ;	---------------------------------
                                   1497 ; Function dynamic_metasprite_unfold_callback
                                   1498 ; ---------------------------------
      000677                       1499 _dynamic_metasprite_unfold_callback::
      000677 E8 FC                 1500 	add	sp, #-4
                                   1501 ;src/main.c:564: Card const *card = dynamic_metasprite.data_ptr;
      000679 21r80r01              1502 	ld	hl, #(_dynamic_metasprite + 0x0011)
      00067C 2A                    1503 	ld	a, (hl+)
      00067D 4F                    1504 	ld	c, a
      00067E 46                    1505 	ld	b, (hl)
                                   1506 ;src/main.c:565: if (!card->next_card) {
      00067F 59                    1507 	ld	e, c
      000680 50                    1508 	ld	d, b
      000681 1A                    1509 	ld	a, (de)
      000682 F8 00                 1510 	ldhl	sp,	#0
      000684 22                    1511 	ld	(hl+), a
      000685 13                    1512 	inc	de
      000686 1A                    1513 	ld	a, (de)
      000687 77                    1514 	ld	(hl), a
                                   1515 ;src/main.c:566: draw_card(dynamic_metasprite.data[1] / 8u, (UINT8)dynamic_metasprite.src[1] / 8u + 1u, card->data);
      000688 03                    1516 	inc	bc
      000689 03                    1517 	inc	bc
      00068A 23                    1518 	inc	hl
      00068B 79                    1519 	ld	a, c
      00068C 22                    1520 	ld	(hl+), a
                                   1521 ;src/main.c:565: if (!card->next_card) {
      00068D 78                    1522 	ld	a, b
      00068E 32                    1523 	ld	(hl-), a
      00068F 2B                    1524 	dec	hl
      000690 3A                    1525 	ld	a, (hl-)
      000691 B6                    1526 	or	a, (hl)
      000692 20 74                 1527 	jr	NZ, 00102$
                                   1528 ;src/main.c:566: draw_card(dynamic_metasprite.data[1] / 8u, (UINT8)dynamic_metasprite.src[1] / 8u + 1u, card->data);
      000694 F8 02                 1529 	ldhl	sp,#2
      000696 2A                    1530 	ld	a, (hl+)
      000697 5F                    1531 	ld	e, a
      000698 56                    1532 	ld	d, (hl)
      000699 1A                    1533 	ld	a, (de)
      00069A F8 00                 1534 	ldhl	sp,	#0
      00069C 77                    1535 	ld	(hl), a
      00069D FAr71r01              1536 	ld	a, (#(_dynamic_metasprite + 0x0002) + 0)
      0006A0 F8 03                 1537 	ldhl	sp,	#3
      0006A2 77                    1538 	ld	(hl), a
      0006A3 F8 03                 1539 	ldhl	sp,	#3
      0006A5 3A                    1540 	ld	a, (hl-)
      0006A6 77                    1541 	ld	(hl), a
      0006A7 AF                    1542 	xor	a, a
      0006A8 23                    1543 	inc	hl
      0006A9 77                    1544 	ld	(hl), a
      0006AA CB 3E                 1545 	srl	(hl)
      0006AC 2B                    1546 	dec	hl
      0006AD CB 1E                 1547 	rr	(hl)
      0006AF 23                    1548 	inc	hl
      0006B0 CB 3E                 1549 	srl	(hl)
      0006B2 2B                    1550 	dec	hl
      0006B3 CB 1E                 1551 	rr	(hl)
      0006B5 23                    1552 	inc	hl
      0006B6 CB 3E                 1553 	srl	(hl)
      0006B8 2B                    1554 	dec	hl
      0006B9 CB 1E                 1555 	rr	(hl)
      0006BB 2A                    1556 	ld	a, (hl+)
      0006BC 77                    1557 	ld	(hl), a
      0006BD 3C                    1558 	inc	a
      0006BE 2B                    1559 	dec	hl
      0006BF 2B                    1560 	dec	hl
      0006C0 77                    1561 	ld	(hl), a
      0006C1 FAr7Dr01              1562 	ld	a, (#(_dynamic_metasprite + 0x000e) + 0)
      0006C4 F8 03                 1563 	ldhl	sp,	#3
      0006C6 77                    1564 	ld	(hl), a
      0006C7 F8 03                 1565 	ldhl	sp,	#3
      0006C9 3A                    1566 	ld	a, (hl-)
      0006CA 77                    1567 	ld	(hl), a
      0006CB AF                    1568 	xor	a, a
      0006CC 23                    1569 	inc	hl
      0006CD 77                    1570 	ld	(hl), a
      0006CE CB 3E                 1571 	srl	(hl)
      0006D0 2B                    1572 	dec	hl
      0006D1 CB 1E                 1573 	rr	(hl)
      0006D3 23                    1574 	inc	hl
      0006D4 CB 3E                 1575 	srl	(hl)
      0006D6 2B                    1576 	dec	hl
      0006D7 CB 1E                 1577 	rr	(hl)
      0006D9 23                    1578 	inc	hl
      0006DA CB 3E                 1579 	srl	(hl)
      0006DC 2B                    1580 	dec	hl
      0006DD CB 1E                 1581 	rr	(hl)
      0006DF 46                    1582 	ld	b, (hl)
                                   1583 ;src/main.c:350: draw_card_top(x, y, card_data);
      0006E0 C5                    1584 	push	bc
      0006E1 2B                    1585 	dec	hl
      0006E2 2B                    1586 	dec	hl
      0006E3 7E                    1587 	ld	a, (hl)
      0006E4 F5                    1588 	push	af
      0006E5 33                    1589 	inc	sp
      0006E6 23                    1590 	inc	hl
      0006E7 7E                    1591 	ld	a, (hl)
      0006E8 F5                    1592 	push	af
      0006E9 33                    1593 	inc	sp
      0006EA C5                    1594 	push	bc
      0006EB 33                    1595 	inc	sp
      0006EC CDr60r00              1596 	call	_draw_card_top
      0006EF E8 03                 1597 	add	sp, #3
      0006F1 C1                    1598 	pop	bc
                                   1599 ;src/main.c:351: draw_card_bottom(x, y + 1u, card_data);
      0006F2 F8 01                 1600 	ldhl	sp,	#1
      0006F4 7E                    1601 	ld	a, (hl)
      0006F5 3C                    1602 	inc	a
      0006F6 2B                    1603 	dec	hl
      0006F7 66                    1604 	ld	h, (hl)
      0006F8 E5                    1605 	push	hl
      0006F9 33                    1606 	inc	sp
      0006FA F5                    1607 	push	af
      0006FB 33                    1608 	inc	sp
      0006FC C5                    1609 	push	bc
      0006FD 33                    1610 	inc	sp
      0006FE CDrCDr00              1611 	call	_draw_card_bottom
      000701 E8 03                 1612 	add	sp, #3
                                   1613 ;src/main.c:567: dynamic_metasprite_fold_pile();
      000703 CDr8Dr05              1614 	call	_dynamic_metasprite_fold_pile
                                   1615 ;src/main.c:568: return;
      000706 18 4E                 1616 	jr	00104$
      000708                       1617 00102$:
                                   1618 ;src/main.c:570: dynamic_metasprite.data_ptr = card->next_card;
      000708 C1                    1619 	pop	bc
      000709 C5                    1620 	push	bc
      00070A 21r80r01              1621 	ld	hl, #(_dynamic_metasprite + 0x0011)
      00070D 79                    1622 	ld	a, c
      00070E 22                    1623 	ld	(hl+), a
      00070F 70                    1624 	ld	(hl), b
                                   1625 ;src/main.c:571: dynamic_metasprite.src[1] += 8;
      000710 21r71r01              1626 	ld	hl, #(_dynamic_metasprite + 0x0002)
      000713 2A                    1627 	ld	a, (hl+)
      000714 4F                    1628 	ld	c, a
      000715 46                    1629 	ld	b, (hl)
      000716 21 08 00              1630 	ld	hl, #0x0008
      000719 09                    1631 	add	hl, bc
      00071A 4D                    1632 	ld	c, l
      00071B 44                    1633 	ld	b, h
      00071C 21r71r01              1634 	ld	hl, #(_dynamic_metasprite + 0x0002)
      00071F 79                    1635 	ld	a, c
      000720 22                    1636 	ld	(hl+), a
      000721 70                    1637 	ld	(hl), b
                                   1638 ;src/main.c:572: draw_card_top(dynamic_metasprite.data[1] / 8u, dynamic_metasprite.src[1] / 8u, card->data);
      000722 F8 02                 1639 	ldhl	sp,#2
      000724 2A                    1640 	ld	a, (hl+)
      000725 5F                    1641 	ld	e, a
      000726 56                    1642 	ld	d, (hl)
      000727 1A                    1643 	ld	a, (de)
      000728 77                    1644 	ld	(hl), a
      000729 CB 38                 1645 	srl	b
      00072B CB 19                 1646 	rr	c
      00072D CB 38                 1647 	srl	b
      00072F CB 19                 1648 	rr	c
      000731 CB 38                 1649 	srl	b
      000733 CB 19                 1650 	rr	c
      000735 FAr7Dr01              1651 	ld	a, (#(_dynamic_metasprite + 0x000e) + 0)
      000738 5F                    1652 	ld	e, a
      000739 16 00                 1653 	ld	d, #0x00
      00073B CB 3A                 1654 	srl	d
      00073D CB 1B                 1655 	rr	e
      00073F CB 3A                 1656 	srl	d
      000741 CB 1B                 1657 	rr	e
      000743 CB 3A                 1658 	srl	d
      000745 CB 1B                 1659 	rr	e
      000747 7E                    1660 	ld	a, (hl)
      000748 F5                    1661 	push	af
      000749 33                    1662 	inc	sp
      00074A 51                    1663 	ld	d, c
      00074B D5                    1664 	push	de
      00074C CDr60r00              1665 	call	_draw_card_top
      00074F E8 03                 1666 	add	sp, #3
                                   1667 ;src/main.c:573: dynamic_metasprite.elapsed_frames = 0;
      000751 21r78r01              1668 	ld	hl, #(_dynamic_metasprite + 0x0009)
      000754 36 00                 1669 	ld	(hl), #0x00
      000756                       1670 00104$:
                                   1671 ;src/main.c:574: }
      000756 E8 04                 1672 	add	sp, #4
      000758 C9                    1673 	ret
                                   1674 ;src/main.c:576: void dynamic_metasprite_move_stack_callback(void)
                                   1675 ;	---------------------------------
                                   1676 ; Function dynamic_metasprite_move_stack_callback
                                   1677 ; ---------------------------------
      000759                       1678 _dynamic_metasprite_move_stack_callback::
                                   1679 ;src/main.c:578: if (dynamic_metasprite.data[0] & BITMASK_DYNAMIC_METASPRITE_UNFOLD) {
      000759 FAr7Cr01              1680 	ld	a, (#(_dynamic_metasprite + 0x000d) + 0)
      00075C 07                    1681 	rlca
      00075D D2r8Dr05              1682 	jp	NC,_dynamic_metasprite_fold_pile
                                   1683 ;src/main.c:579: dynamic_metasprite.src[0] = dynamic_metasprite.data[1];
      000760 FAr7Dr01              1684 	ld	a, (#(_dynamic_metasprite + 0x000e) + 0)
      000763 4F                    1685 	ld	c, a
      000764 06 00                 1686 	ld	b, #0x00
      000766 21r6Fr01              1687 	ld	hl, #_dynamic_metasprite
      000769 79                    1688 	ld	a, c
      00076A 22                    1689 	ld	(hl+), a
                                   1690 ;src/main.c:580: dynamic_metasprite.src[1] = dynamic_metasprite.data[2] - 8u;
      00076B 78                    1691 	ld	a, b
      00076C 22                    1692 	ld	(hl+), a
      00076D 01r7Er01              1693 	ld	bc, #_dynamic_metasprite + 15
      000770 0A                    1694 	ld	a, (bc)
      000771 4F                    1695 	ld	c, a
      000772 06 00                 1696 	ld	b, #0x00
      000774 79                    1697 	ld	a, c
      000775 C6 F8                 1698 	add	a, #0xf8
      000777 4F                    1699 	ld	c, a
      000778 78                    1700 	ld	a, b
      000779 CE FF                 1701 	adc	a, #0xff
      00077B 71                    1702 	ld	(hl), c
      00077C 23                    1703 	inc	hl
      00077D 77                    1704 	ld	(hl), a
                                   1705 ;src/main.c:581: dynamic_metasprite.dist[0] = 0;
      00077E 21r73r01              1706 	ld	hl, #(_dynamic_metasprite + 0x0004)
      000781 AF                    1707 	xor	a, a
      000782 22                    1708 	ld	(hl+), a
      000783 77                    1709 	ld	(hl), a
                                   1710 ;src/main.c:582: dynamic_metasprite.dist[1] = 8;
      000784 21r75r01              1711 	ld	hl, #(_dynamic_metasprite + 0x0006)
      000787 3E 08                 1712 	ld	a, #0x08
      000789 22                    1713 	ld	(hl+), a
      00078A 36 00                 1714 	ld	(hl), #0x00
                                   1715 ;src/main.c:583: dynamic_metasprite.target_frames = animation_speeds[ANIMATION_SPEED(settings)].fold_target_frames;
      00078C 01r77r01              1716 	ld	bc, #_dynamic_metasprite + 8
      00078F FAr6Cr01              1717 	ld	a, (#_settings)
      000792 E6 0C                 1718 	and	a, #0x0c
      000794 6F                    1719 	ld	l, a
      000795 26 00                 1720 	ld	h, #0x00
      000797 CB 3C                 1721 	srl	h
      000799 CB 1D                 1722 	rr	l
      00079B CB 3C                 1723 	srl	h
      00079D CB 1D                 1724 	rr	l
      00079F 29                    1725 	add	hl, hl
      0007A0 11r26r00              1726 	ld	de, #_animation_speeds
      0007A3 19                    1727 	add	hl, de
      0007A4 7E                    1728 	ld	a, (hl)
      0007A5 02                    1729 	ld	(bc), a
                                   1730 ;src/main.c:584: dynamic_metasprite.callback = &dynamic_metasprite_unfold_callback;
      0007A6 21r82r01              1731 	ld	hl, #(_dynamic_metasprite + 0x0013)
      0007A9 36r77                 1732 	ld	(hl), #<(_dynamic_metasprite_unfold_callback)
      0007AB 23                    1733 	inc	hl
      0007AC 36s06                 1734 	ld	(hl), #>(_dynamic_metasprite_unfold_callback)
                                   1735 ;src/main.c:585: dynamic_metasprite_unfold_callback();
                                   1736 ;src/main.c:587: dynamic_metasprite_fold_pile();
                                   1737 ;src/main.c:589: }
      0007AE C3r77r06              1738 	jp	_dynamic_metasprite_unfold_callback
                                   1739 ;src/main.c:591: void dynamic_metasprite_fold_callback(void)
                                   1740 ;	---------------------------------
                                   1741 ; Function dynamic_metasprite_fold_callback
                                   1742 ; ---------------------------------
      0007B1                       1743 _dynamic_metasprite_fold_callback::
      0007B1 E8 FC                 1744 	add	sp, #-4
                                   1745 ;src/main.c:593: dynamic_metasprite.src[1] -= 8;
      0007B3 21r71r01              1746 	ld	hl, #(_dynamic_metasprite + 0x0002)
      0007B6 2A                    1747 	ld	a, (hl+)
      0007B7 4F                    1748 	ld	c, a
      0007B8 46                    1749 	ld	b, (hl)
      0007B9 79                    1750 	ld	a, c
      0007BA C6 F8                 1751 	add	a, #0xf8
      0007BC 4F                    1752 	ld	c, a
      0007BD 78                    1753 	ld	a, b
      0007BE CE FF                 1754 	adc	a, #0xff
      0007C0 47                    1755 	ld	b, a
      0007C1 21r71r01              1756 	ld	hl, #(_dynamic_metasprite + 0x0002)
      0007C4 79                    1757 	ld	a, c
      0007C5 22                    1758 	ld	(hl+), a
      0007C6 70                    1759 	ld	(hl), b
                                   1760 ;src/main.c:594: dynamic_metasprite.elapsed_frames = 0;
      0007C7 21r78r01              1761 	ld	hl, #(_dynamic_metasprite + 0x0009)
      0007CA 36 00                 1762 	ld	(hl), #0x00
                                   1763 ;src/main.c:595: clear_bkg_2x1((UINT8)dynamic_metasprite.src[0] / 8u, (UINT8)dynamic_metasprite.src[1] / 8u + 2u);
      0007CC FAr71r01              1764 	ld	a, (#(_dynamic_metasprite + 0x0002) + 0)
      0007CF 4F                    1765 	ld	c, a
      0007D0 06 00                 1766 	ld	b, #0x00
      0007D2 CB 38                 1767 	srl	b
      0007D4 CB 19                 1768 	rr	c
      0007D6 CB 38                 1769 	srl	b
      0007D8 CB 19                 1770 	rr	c
      0007DA CB 38                 1771 	srl	b
      0007DC CB 19                 1772 	rr	c
      0007DE 0C                    1773 	inc	c
      0007DF 0C                    1774 	inc	c
      0007E0 FAr6Fr01              1775 	ld	a, (#_dynamic_metasprite + 0)
      0007E3 5F                    1776 	ld	e, a
      0007E4 16 00                 1777 	ld	d, #0x00
      0007E6 CB 3A                 1778 	srl	d
      0007E8 CB 1B                 1779 	rr	e
      0007EA CB 3A                 1780 	srl	d
      0007EC CB 1B                 1781 	rr	e
      0007EE CB 3A                 1782 	srl	d
      0007F0 CB 1B                 1783 	rr	e
      0007F2 43                    1784 	ld	b, e
                                   1785 ;src/main.c:325: set_bkg_tile_xy(x, y, OFFSET_BKG_NONE);
      0007F3 AF                    1786 	xor	a, a
      0007F4 F5                    1787 	push	af
      0007F5 33                    1788 	inc	sp
      0007F6 79                    1789 	ld	a, c
      0007F7 F5                    1790 	push	af
      0007F8 33                    1791 	inc	sp
      0007F9 C5                    1792 	push	bc
      0007FA 33                    1793 	inc	sp
      0007FB CDr00r00              1794 	call	_set_bkg_tile_xy
      0007FE E8 03                 1795 	add	sp, #3
                                   1796 ;src/main.c:326: set_bkg_tile_xy(x + 1u, y, OFFSET_BKG_NONE);
      000800 04                    1797 	inc	b
      000801 AF                    1798 	xor	a, a
      000802 F5                    1799 	push	af
      000803 33                    1800 	inc	sp
      000804 79                    1801 	ld	a, c
      000805 F5                    1802 	push	af
      000806 33                    1803 	inc	sp
      000807 C5                    1804 	push	bc
      000808 33                    1805 	inc	sp
      000809 CDr00r00              1806 	call	_set_bkg_tile_xy
      00080C E8 03                 1807 	add	sp, #3
                                   1808 ;src/main.c:596: if (dynamic_metasprite.data[0] & ~BITMASK_DYNAMIC_METASPRITE_UNFOLD) {
      00080E 01r7Cr01              1809 	ld	bc, #_dynamic_metasprite + 13
      000811 0A                    1810 	ld	a, (bc)
      000812 5F                    1811 	ld	e, a
      000813 E6 7F                 1812 	and	a, #0x7f
      000815 28 06                 1813 	jr	Z, 00105$
                                   1814 ;src/main.c:597: dynamic_metasprite.data[0]--;
      000817 7B                    1815 	ld	a, e
      000818 3D                    1816 	dec	a
      000819 02                    1817 	ld	(bc), a
      00081A C3rE3r08              1818 	jp	00109$
      00081D                       1819 00105$:
                                   1820 ;src/main.c:599: if (cursor.card_to_show) {
      00081D 21r86r01              1821 	ld	hl, #(_cursor + 0x0002)
      000820 2A                    1822 	ld	a, (hl+)
      000821 4F                    1823 	ld	c, a
      000822 46                    1824 	ld	b, (hl)
                                   1825 ;src/main.c:595: clear_bkg_2x1((UINT8)dynamic_metasprite.src[0] / 8u, (UINT8)dynamic_metasprite.src[1] / 8u + 2u);
      000823 11r71r01              1826 	ld	de, #(_dynamic_metasprite + 0x0002)
      000826 1A                    1827 	ld	a, (de)
      000827 F8 02                 1828 	ldhl	sp,	#2
      000829 22                    1829 	ld	(hl+), a
      00082A 13                    1830 	inc	de
      00082B 1A                    1831 	ld	a, (de)
      00082C 77                    1832 	ld	(hl), a
      00082D 11r6Fr01              1833 	ld	de, #_dynamic_metasprite
      000830 1A                    1834 	ld	a, (de)
      000831 F8 00                 1835 	ldhl	sp,	#0
      000833 22                    1836 	ld	(hl+), a
      000834 13                    1837 	inc	de
      000835 1A                    1838 	ld	a, (de)
      000836 77                    1839 	ld	(hl), a
                                   1840 ;src/main.c:600: draw_card(dynamic_metasprite.src[0] / 8u, dynamic_metasprite.src[1] / 8u - 1u, cursor.card_to_show->data);
      000837 D1                    1841 	pop	de
      000838 D5                    1842 	push	de
      000839 23                    1843 	inc	hl
      00083A 23                    1844 	inc	hl
      00083B CB 3E                 1845 	srl	(hl)
      00083D 2B                    1846 	dec	hl
      00083E CB 1E                 1847 	rr	(hl)
      000840 23                    1848 	inc	hl
      000841 CB 3E                 1849 	srl	(hl)
      000843 2B                    1850 	dec	hl
      000844 CB 1E                 1851 	rr	(hl)
      000846 23                    1852 	inc	hl
      000847 CB 3E                 1853 	srl	(hl)
      000849 2B                    1854 	dec	hl
      00084A CB 1E                 1855 	rr	(hl)
      00084C CB 3A                 1856 	srl	d
      00084E CB 1B                 1857 	rr	e
      000850 CB 3A                 1858 	srl	d
      000852 CB 1B                 1859 	rr	e
      000854 CB 3A                 1860 	srl	d
      000856 CB 1B                 1861 	rr	e
      000858 6E                    1862 	ld	l, (hl)
                                   1863 ;src/main.c:599: if (cursor.card_to_show) {
      000859 78                    1864 	ld	a, b
      00085A B1                    1865 	or	a, c
      00085B 28 27                 1866 	jr	Z, 00102$
                                   1867 ;src/main.c:600: draw_card(dynamic_metasprite.src[0] / 8u, dynamic_metasprite.src[1] / 8u - 1u, cursor.card_to_show->data);
      00085D 03                    1868 	inc	bc
      00085E 03                    1869 	inc	bc
      00085F 0A                    1870 	ld	a, (bc)
      000860 47                    1871 	ld	b, a
      000861 55                    1872 	ld	d, l
      000862 15                    1873 	dec	d
                                   1874 ;src/main.c:350: draw_card_top(x, y, card_data);
      000863 C5                    1875 	push	bc
      000864 D5                    1876 	push	de
      000865 4A                    1877 	ld	c, d
      000866 C5                    1878 	push	bc
      000867 7B                    1879 	ld	a, e
      000868 F5                    1880 	push	af
      000869 33                    1881 	inc	sp
      00086A CDr60r00              1882 	call	_draw_card_top
      00086D E8 03                 1883 	add	sp, #3
      00086F D1                    1884 	pop	de
      000870 C1                    1885 	pop	bc
                                   1886 ;src/main.c:351: draw_card_bottom(x, y + 1u, card_data);
      000871 7A                    1887 	ld	a, d
      000872 3C                    1888 	inc	a
      000873 C5                    1889 	push	bc
      000874 33                    1890 	inc	sp
      000875 57                    1891 	ld	d,a
      000876 D5                    1892 	push	de
      000877 CDrCDr00              1893 	call	_draw_card_bottom
      00087A E8 03                 1894 	add	sp, #3
                                   1895 ;src/main.c:601: cursor.card_to_show = NULL;
      00087C 21r86r01              1896 	ld	hl, #(_cursor + 0x0002)
      00087F AF                    1897 	xor	a, a
      000880 22                    1898 	ld	(hl+), a
      000881 77                    1899 	ld	(hl), a
      000882 18 0C                 1900 	jr	00103$
      000884                       1901 00102$:
                                   1902 ;src/main.c:603: draw_sequential_card(dynamic_metasprite.src[0] / 8u, dynamic_metasprite.src[1] / 8u, OFFSET_BKG_CARD + OFFSET_CARD_OUTLINE);
      000884 3E DE                 1903 	ld	a, #0xde
      000886 F5                    1904 	push	af
      000887 7D                    1905 	ld	a, l
      000888 33                    1906 	inc	sp
      000889 57                    1907 	ld	d,a
      00088A D5                    1908 	push	de
      00088B CDr51r01              1909 	call	_draw_sequential_card
      00088E E8 03                 1910 	add	sp, #3
      000890                       1911 00103$:
                                   1912 ;src/main.c:605: dynamic_metasprite.dist[0] = (INT16)dynamic_metasprite.data[1] - dynamic_metasprite.src[0];
      000890 FAr7Dr01              1913 	ld	a, (#(_dynamic_metasprite + 0x000e) + 0)
      000893 4F                    1914 	ld	c, a
      000894 06 00                 1915 	ld	b, #0x00
      000896 21r6Fr01              1916 	ld	hl, #_dynamic_metasprite
      000899 2A                    1917 	ld	a, (hl+)
      00089A 66                    1918 	ld	h, (hl)
      00089B 6F                    1919 	ld	l, a
      00089C 79                    1920 	ld	a, c
      00089D 95                    1921 	sub	a, l
      00089E 4F                    1922 	ld	c, a
      00089F 78                    1923 	ld	a, b
      0008A0 9C                    1924 	sbc	a, h
      0008A1 47                    1925 	ld	b, a
      0008A2 21r73r01              1926 	ld	hl, #(_dynamic_metasprite + 0x0004)
      0008A5 79                    1927 	ld	a, c
      0008A6 22                    1928 	ld	(hl+), a
      0008A7 70                    1929 	ld	(hl), b
                                   1930 ;src/main.c:606: dynamic_metasprite.dist[1] = (INT16)dynamic_metasprite.data[2] - dynamic_metasprite.src[1];
      0008A8 FAr7Er01              1931 	ld	a, (#(_dynamic_metasprite + 0x000f) + 0)
      0008AB 4F                    1932 	ld	c, a
      0008AC 06 00                 1933 	ld	b, #0x00
      0008AE 21r71r01              1934 	ld	hl, #(_dynamic_metasprite + 0x0002)
      0008B1 2A                    1935 	ld	a, (hl+)
      0008B2 66                    1936 	ld	h, (hl)
      0008B3 6F                    1937 	ld	l, a
      0008B4 79                    1938 	ld	a, c
      0008B5 95                    1939 	sub	a, l
      0008B6 4F                    1940 	ld	c, a
      0008B7 78                    1941 	ld	a, b
      0008B8 9C                    1942 	sbc	a, h
      0008B9 47                    1943 	ld	b, a
      0008BA 21r75r01              1944 	ld	hl, #(_dynamic_metasprite + 0x0006)
      0008BD 79                    1945 	ld	a, c
      0008BE 22                    1946 	ld	(hl+), a
      0008BF 70                    1947 	ld	(hl), b
                                   1948 ;src/main.c:607: dynamic_metasprite.target_frames = animation_speeds[ANIMATION_SPEED(settings)].move_target_frames;
      0008C0 01r77r01              1949 	ld	bc, #_dynamic_metasprite + 8
      0008C3 FAr6Cr01              1950 	ld	a, (#_settings)
      0008C6 E6 0C                 1951 	and	a, #0x0c
      0008C8 6F                    1952 	ld	l, a
      0008C9 26 00                 1953 	ld	h, #0x00
      0008CB CB 3C                 1954 	srl	h
      0008CD CB 1D                 1955 	rr	l
      0008CF CB 3C                 1956 	srl	h
      0008D1 CB 1D                 1957 	rr	l
      0008D3 29                    1958 	add	hl, hl
      0008D4 11r26r00              1959 	ld	de, #_animation_speeds
      0008D7 19                    1960 	add	hl, de
      0008D8 23                    1961 	inc	hl
      0008D9 7E                    1962 	ld	a, (hl)
      0008DA 02                    1963 	ld	(bc), a
                                   1964 ;src/main.c:608: dynamic_metasprite.callback = &dynamic_metasprite_move_stack_callback;
      0008DB 21r82r01              1965 	ld	hl, #(_dynamic_metasprite + 0x0013)
      0008DE 36r59                 1966 	ld	(hl), #<(_dynamic_metasprite_move_stack_callback)
      0008E0 23                    1967 	inc	hl
      0008E1 36s07                 1968 	ld	(hl), #>(_dynamic_metasprite_move_stack_callback)
      0008E3                       1969 00109$:
                                   1970 ;src/main.c:611: }
      0008E3 E8 04                 1971 	add	sp, #4
      0008E5 C9                    1972 	ret
                                   1973 ;src/main.c:613: void dynamic_metasprite_fold(const UINT8 top_card_data, const UINT8 src_x, const UINT8 src_y, const UINT8 dest_x, const UINT8 dest_y, const UINT8 stack_height, const Card *base_card, const UINT8 unfold, const UINT8 piles_to_clear)
                                   1974 ;	---------------------------------
                                   1975 ; Function dynamic_metasprite_fold
                                   1976 ; ---------------------------------
      0008E6                       1977 _dynamic_metasprite_fold::
                                   1978 ;src/main.c:615: set_metasprite_card(top_card_data);
      0008E6 F8 02                 1979 	ldhl	sp,	#2
      0008E8 7E                    1980 	ld	a, (hl)
      0008E9 F5                    1981 	push	af
      0008EA 33                    1982 	inc	sp
      0008EB CDrC2r03              1983 	call	_set_metasprite_card
      0008EE 33                    1984 	inc	sp
                                   1985 ;src/main.c:617: dynamic_metasprite.metasprite = metasprite_custom_2x3;
      0008EF 21r79r01              1986 	ld	hl, #(_dynamic_metasprite + 0x000a)
      0008F2 36r00                 1987 	ld	(hl), #<(_metasprite_custom_2x3)
      0008F4 23                    1988 	inc	hl
      0008F5 36s00                 1989 	ld	(hl), #>(_metasprite_custom_2x3)
                                   1990 ;src/main.c:618: dynamic_metasprite.metasprite_offset = OFFSET_SPRITE_CARD;
      0008F7 21r7Br01              1991 	ld	hl, #(_dynamic_metasprite + 0x000c)
      0008FA 36 B0                 1992 	ld	(hl), #0xb0
                                   1993 ;src/main.c:620: dynamic_metasprite.data[0] = (stack_height - 1u) | unfold;
      0008FC 01r7Cr01              1994 	ld	bc, #_dynamic_metasprite + 13
      0008FF F8 07                 1995 	ldhl	sp,	#7
      000901 7E                    1996 	ld	a, (hl)
      000902 3D                    1997 	dec	a
      000903 F8 0A                 1998 	ldhl	sp,	#10
      000905 B6                    1999 	or	a, (hl)
      000906 02                    2000 	ld	(bc), a
                                   2001 ;src/main.c:621: dynamic_metasprite.data[1] = dest_x;
      000907 11r7Dr01              2002 	ld	de, #(_dynamic_metasprite + 0x000e)
      00090A F8 05                 2003 	ldhl	sp,	#5
      00090C 7E                    2004 	ld	a, (hl)
      00090D 12                    2005 	ld	(de), a
                                   2006 ;src/main.c:622: dynamic_metasprite.data[2] = dest_y;
      00090E 11r7Er01              2007 	ld	de, #(_dynamic_metasprite + 0x000f)
      000911 23                    2008 	inc	hl
      000912 7E                    2009 	ld	a, (hl)
      000913 12                    2010 	ld	(de), a
                                   2011 ;src/main.c:623: dynamic_metasprite.data[3] = piles_to_clear;
      000914 11r7Fr01              2012 	ld	de, #(_dynamic_metasprite + 0x0010)
      000917 F8 0B                 2013 	ldhl	sp,	#11
      000919 7E                    2014 	ld	a, (hl)
      00091A 12                    2015 	ld	(de), a
                                   2016 ;src/main.c:624: dynamic_metasprite.data_ptr = base_card;
      00091B 2B                    2017 	dec	hl
      00091C 2B                    2018 	dec	hl
      00091D 2B                    2019 	dec	hl
      00091E 2A                    2020 	ld	a, (hl+)
      00091F 4F                    2021 	ld	c, a
      000920 46                    2022 	ld	b, (hl)
      000921 21r80r01              2023 	ld	hl, #(_dynamic_metasprite + 0x0011)
      000924 79                    2024 	ld	a, c
      000925 22                    2025 	ld	(hl+), a
      000926 70                    2026 	ld	(hl), b
                                   2027 ;src/main.c:626: dynamic_metasprite.src[0] = src_x;
      000927 F8 03                 2028 	ldhl	sp,	#3
      000929 4E                    2029 	ld	c, (hl)
      00092A 06 00                 2030 	ld	b, #0x00
      00092C 21r6Fr01              2031 	ld	hl, #_dynamic_metasprite
      00092F 79                    2032 	ld	a, c
      000930 22                    2033 	ld	(hl+), a
      000931 70                    2034 	ld	(hl), b
                                   2035 ;src/main.c:627: dynamic_metasprite.src[1] = src_y + 8u;
      000932 F8 04                 2036 	ldhl	sp,	#4
      000934 4E                    2037 	ld	c, (hl)
      000935 06 00                 2038 	ld	b, #0x00
      000937 79                    2039 	ld	a, c
      000938 C6 08                 2040 	add	a, #0x08
      00093A 4F                    2041 	ld	c, a
      00093B 30 01                 2042 	jr	NC, 00110$
      00093D 04                    2043 	inc	b
      00093E                       2044 00110$:
      00093E 21r71r01              2045 	ld	hl, #(_dynamic_metasprite + 0x0002)
      000941 79                    2046 	ld	a, c
      000942 22                    2047 	ld	(hl+), a
      000943 70                    2048 	ld	(hl), b
                                   2049 ;src/main.c:629: flags |= FLAG_PLAYING_ANIMATION;
      000944 21r6Br01              2050 	ld	hl, #_flags
      000947 7E                    2051 	ld	a, (hl)
      000948 F6 04                 2052 	or	a, #0x04
      00094A 77                    2053 	ld	(hl), a
                                   2054 ;src/main.c:631: if (stack_height > 1) {
      00094B 3E 01                 2055 	ld	a, #0x01
      00094D F8 07                 2056 	ldhl	sp,	#7
      00094F 96                    2057 	sub	a, (hl)
      000950 D2rB1r07              2058 	jp	NC,_dynamic_metasprite_fold_callback
                                   2059 ;src/main.c:632: dynamic_metasprite.dist[0] = 0;
      000953 21r73r01              2060 	ld	hl, #(_dynamic_metasprite + 0x0004)
      000956 AF                    2061 	xor	a, a
      000957 22                    2062 	ld	(hl+), a
      000958 77                    2063 	ld	(hl), a
                                   2064 ;src/main.c:633: dynamic_metasprite.dist[1] = -8;
      000959 21r75r01              2065 	ld	hl, #(_dynamic_metasprite + 0x0006)
      00095C 3E F8                 2066 	ld	a, #0xf8
      00095E 22                    2067 	ld	(hl+), a
      00095F 36 FF                 2068 	ld	(hl), #0xff
                                   2069 ;src/main.c:634: dynamic_metasprite.target_frames = animation_speeds[ANIMATION_SPEED(settings)].fold_target_frames;
      000961 01r77r01              2070 	ld	bc, #_dynamic_metasprite + 8
      000964 FAr6Cr01              2071 	ld	a, (#_settings)
      000967 E6 0C                 2072 	and	a, #0x0c
      000969 6F                    2073 	ld	l, a
      00096A 26 00                 2074 	ld	h, #0x00
      00096C CB 3C                 2075 	srl	h
      00096E CB 1D                 2076 	rr	l
      000970 CB 3C                 2077 	srl	h
      000972 CB 1D                 2078 	rr	l
      000974 29                    2079 	add	hl, hl
      000975 11r26r00              2080 	ld	de, #_animation_speeds
      000978 19                    2081 	add	hl, de
      000979 7E                    2082 	ld	a, (hl)
      00097A 02                    2083 	ld	(bc), a
                                   2084 ;src/main.c:635: dynamic_metasprite.callback = &dynamic_metasprite_fold_callback;
      00097B 21r82r01              2085 	ld	hl, #(_dynamic_metasprite + 0x0013)
      00097E 36rB1                 2086 	ld	(hl), #<(_dynamic_metasprite_fold_callback)
      000980 23                    2087 	inc	hl
      000981 36s07                 2088 	ld	(hl), #>(_dynamic_metasprite_fold_callback)
                                   2089 ;src/main.c:637: dynamic_metasprite_fold_callback();
                                   2090 ;src/main.c:638: }
      000983 C3rB1r07              2091 	jp  _dynamic_metasprite_fold_callback
                                   2092 ;src/main.c:640: void dynamic_metasprite_deal_callback(void)
                                   2093 ;	---------------------------------
                                   2094 ; Function dynamic_metasprite_deal_callback
                                   2095 ; ---------------------------------
      000986                       2096 _dynamic_metasprite_deal_callback::
      000986 E8 FC                 2097 	add	sp, #-4
                                   2098 ;src/main.c:642: Pile *pile = IDX_PTR(piles, dynamic_metasprite.data[0]);
      000988 21r7Cr01              2099 	ld	hl, #(_dynamic_metasprite + 0x000d)
      00098B 4E                    2100 	ld	c, (hl)
      00098C 06 00                 2101 	ld	b, #0x00
      00098E 69                    2102 	ld	l, c
      00098F 60                    2103 	ld	h, b
      000990 29                    2104 	add	hl, hl
      000991 29                    2105 	add	hl, hl
      000992 09                    2106 	add	hl, bc
      000993 3Er38                 2107 	ld	a, #<(_piles)
      000995 85                    2108 	add	a, l
      000996 47                    2109 	ld	b, a
      000997 3Es01                 2110 	ld	a, #>(_piles)
      000999 8C                    2111 	adc	a, h
      00099A F8 00                 2112 	ldhl	sp,	#0
      00099C 70                    2113 	ld	(hl), b
      00099D 23                    2114 	inc	hl
      00099E 77                    2115 	ld	(hl), a
                                   2116 ;src/main.c:643: draw_card(dynamic_metasprite.data[0] * 2u, 2u + pile->height, pile->top->data);
      00099F E1                    2117 	pop	hl
      0009A0 E5                    2118 	push	hl
      0009A1 23                    2119 	inc	hl
      0009A2 23                    2120 	inc	hl
      0009A3 2A                    2121 	ld	a, (hl+)
      0009A4 66                    2122 	ld	h, (hl)
      0009A5 6F                    2123 	ld	l, a
      0009A6 23                    2124 	inc	hl
      0009A7 23                    2125 	inc	hl
      0009A8 46                    2126 	ld	b, (hl)
                                   2127 ;c
      0009A9 D1                    2128 	pop	de
      0009AA D5                    2129 	push	de
      0009AB 21 04 00              2130 	ld	hl, #0x0004
      0009AE 19                    2131 	add	hl, de
      0009AF 5D                    2132 	ld	e, l
      0009B0 54                    2133 	ld	d, h
      0009B1 1A                    2134 	ld	a, (de)
      0009B2 C6 02                 2135 	add	a, #0x02
      0009B4 57                    2136 	ld	d, a
      0009B5 CB 21                 2137 	sla	c
                                   2138 ;src/main.c:350: draw_card_top(x, y, card_data);
      0009B7 C5                    2139 	push	bc
      0009B8 D5                    2140 	push	de
      0009B9 C5                    2141 	push	bc
      0009BA 33                    2142 	inc	sp
      0009BB 59                    2143 	ld	e, c
      0009BC D5                    2144 	push	de
      0009BD CDr60r00              2145 	call	_draw_card_top
      0009C0 E8 03                 2146 	add	sp, #3
      0009C2 D1                    2147 	pop	de
      0009C3 C1                    2148 	pop	bc
                                   2149 ;src/main.c:351: draw_card_bottom(x, y + 1u, card_data);
      0009C4 14                    2150 	inc	d
      0009C5 C5                    2151 	push	bc
      0009C6 33                    2152 	inc	sp
      0009C7 59                    2153 	ld	e, c
      0009C8 D5                    2154 	push	de
      0009C9 CDrCDr00              2155 	call	_draw_card_bottom
      0009CC E8 03                 2156 	add	sp, #3
                                   2157 ;src/main.c:644: if (dynamic_metasprite.data[0] == 9u) {
      0009CE 21r7Cr01              2158 	ld	hl, #(_dynamic_metasprite + 0x000d)
      0009D1 4E                    2159 	ld	c, (hl)
      0009D2 79                    2160 	ld	a, c
      0009D3 D6 09                 2161 	sub	a, #0x09
      0009D5 20 1B                 2162 	jr	NZ, 00104$
                                   2163 ;src/main.c:645: if (top_card_idx == 104u)
      0009D7 FAr6Ar01              2164 	ld	a, (#_top_card_idx)
      0009DA D6 68                 2165 	sub	a, #0x68
      0009DC 20 0F                 2166 	jr	NZ, 00102$
                                   2167 ;src/main.c:646: draw_sequential_card(0, 0, OFFSET_BKG_CARD + OFFSET_CARD_OUTLINE);
      0009DE 3E DE                 2168 	ld	a, #0xde
      0009E0 F5                    2169 	push	af
      0009E1 33                    2170 	inc	sp
      0009E2 AF                    2171 	xor	a, a
      0009E3 F5                    2172 	push	af
      0009E4 33                    2173 	inc	sp
      0009E5 AF                    2174 	xor	a, a
      0009E6 F5                    2175 	push	af
      0009E7 33                    2176 	inc	sp
      0009E8 CDr51r01              2177 	call	_draw_sequential_card
      0009EB E8 03                 2178 	add	sp, #3
      0009ED                       2179 00102$:
                                   2180 ;src/main.c:647: dynamic_metasprite_end_animation();
      0009ED CDr87r04              2181 	call	_dynamic_metasprite_end_animation
                                   2182 ;src/main.c:648: return;
      0009F0 18 48                 2183 	jr	00106$
      0009F2                       2184 00104$:
                                   2185 ;src/main.c:650: pile++;
                                   2186 ;c
      0009F2 D1                    2187 	pop	de
      0009F3 D5                    2188 	push	de
      0009F4 21 05 00              2189 	ld	hl, #0x0005
      0009F7 19                    2190 	add	hl, de
      0009F8 E5                    2191 	push	hl
      0009F9 7D                    2192 	ld	a, l
      0009FA F8 04                 2193 	ldhl	sp,	#4
      0009FC 77                    2194 	ld	(hl), a
      0009FD E1                    2195 	pop	hl
      0009FE 7C                    2196 	ld	a, h
      0009FF F8 03                 2197 	ldhl	sp,	#3
      000A01 77                    2198 	ld	(hl), a
                                   2199 ;src/main.c:651: dynamic_metasprite.data[0]++;
      000A02 0C                    2200 	inc	c
      000A03 21r7Cr01              2201 	ld	hl, #(_dynamic_metasprite + 0x000d)
      000A06 71                    2202 	ld	(hl), c
                                   2203 ;src/main.c:652: dynamic_metasprite.dist[0] += 16;
      000A07 21r73r01              2204 	ld	hl, #(_dynamic_metasprite + 0x0004)
      000A0A 2A                    2205 	ld	a, (hl+)
      000A0B 4F                    2206 	ld	c, a
      000A0C 46                    2207 	ld	b, (hl)
      000A0D 21 10 00              2208 	ld	hl, #0x0010
      000A10 09                    2209 	add	hl, bc
      000A11 4D                    2210 	ld	c, l
      000A12 44                    2211 	ld	b, h
      000A13 21r73r01              2212 	ld	hl, #(_dynamic_metasprite + 0x0004)
      000A16 79                    2213 	ld	a, c
      000A17 22                    2214 	ld	(hl+), a
      000A18 70                    2215 	ld	(hl), b
                                   2216 ;src/main.c:653: dynamic_metasprite.dist[1] = (INT16)(2u + pile->height) * 8;
                                   2217 ;c
      000A19 F8 02                 2218 	ldhl	sp,#2
      000A1B 2A                    2219 	ld	a, (hl+)
      000A1C 5F                    2220 	ld	e, a
      000A1D 56                    2221 	ld	d, (hl)
      000A1E 21 04 00              2222 	ld	hl, #0x0004
      000A21 19                    2223 	add	hl, de
      000A22 4D                    2224 	ld	c, l
      000A23 44                    2225 	ld	b, h
      000A24 0A                    2226 	ld	a, (bc)
      000A25 6F                    2227 	ld	l, a
      000A26 26 00                 2228 	ld	h, #0x00
      000A28 23                    2229 	inc	hl
      000A29 23                    2230 	inc	hl
      000A2A 29                    2231 	add	hl, hl
      000A2B 29                    2232 	add	hl, hl
      000A2C 29                    2233 	add	hl, hl
      000A2D 4D                    2234 	ld	c, l
      000A2E 44                    2235 	ld	b, h
      000A2F 21r75r01              2236 	ld	hl, #(_dynamic_metasprite + 0x0006)
      000A32 79                    2237 	ld	a, c
      000A33 22                    2238 	ld	(hl+), a
      000A34 70                    2239 	ld	(hl), b
                                   2240 ;src/main.c:654: dynamic_metasprite.elapsed_frames = 0;
      000A35 21r78r01              2241 	ld	hl, #(_dynamic_metasprite + 0x0009)
      000A38 36 00                 2242 	ld	(hl), #0x00
      000A3A                       2243 00106$:
                                   2244 ;src/main.c:655: }
      000A3A E8 04                 2245 	add	sp, #4
      000A3C C9                    2246 	ret
                                   2247 ;src/main.c:657: void dynamic_metasprite_deal(void)
                                   2248 ;	---------------------------------
                                   2249 ; Function dynamic_metasprite_deal
                                   2250 ; ---------------------------------
      000A3D                       2251 _dynamic_metasprite_deal::
                                   2252 ;src/main.c:659: Pile *pile = IDX_PTR(piles, 0);
                                   2253 ;src/main.c:660: dynamic_metasprite.src[0] = 0;
      000A3D 21r6Fr01              2254 	ld	hl, #_dynamic_metasprite
      000A40 AF                    2255 	xor	a, a
      000A41 22                    2256 	ld	(hl+), a
      000A42 77                    2257 	ld	(hl), a
                                   2258 ;src/main.c:661: dynamic_metasprite.src[1] = 0;
      000A43 21r71r01              2259 	ld	hl, #(_dynamic_metasprite + 0x0002)
      000A46 AF                    2260 	xor	a, a
      000A47 22                    2261 	ld	(hl+), a
      000A48 77                    2262 	ld	(hl), a
                                   2263 ;src/main.c:662: dynamic_metasprite.dist[0] = 0;
      000A49 21r73r01              2264 	ld	hl, #(_dynamic_metasprite + 0x0004)
      000A4C AF                    2265 	xor	a, a
      000A4D 22                    2266 	ld	(hl+), a
      000A4E 77                    2267 	ld	(hl), a
                                   2268 ;src/main.c:663: dynamic_metasprite.dist[1] = (INT16)(2u + pile->height) * 8;
      000A4F FAr3Cr01              2269 	ld	a, (#(_piles + 0x0004) + 0)
      000A52 26 00                 2270 	ld	h, #0x00
      000A54 6F                    2271 	ld	l, a
      000A55 23                    2272 	inc	hl
      000A56 23                    2273 	inc	hl
      000A57 29                    2274 	add	hl, hl
      000A58 29                    2275 	add	hl, hl
      000A59 29                    2276 	add	hl, hl
      000A5A 4D                    2277 	ld	c, l
      000A5B 44                    2278 	ld	b, h
      000A5C 21r75r01              2279 	ld	hl, #(_dynamic_metasprite + 0x0006)
      000A5F 79                    2280 	ld	a, c
      000A60 22                    2281 	ld	(hl+), a
      000A61 70                    2282 	ld	(hl), b
                                   2283 ;src/main.c:664: dynamic_metasprite.elapsed_frames = 0;
      000A62 21r78r01              2284 	ld	hl, #(_dynamic_metasprite + 0x0009)
      000A65 36 00                 2285 	ld	(hl), #0x00
                                   2286 ;src/main.c:665: dynamic_metasprite.target_frames = animation_speeds[ANIMATION_SPEED(settings)].move_target_frames;
      000A67 FAr6Cr01              2287 	ld	a, (#_settings)
      000A6A 0E 00                 2288 	ld	c, #0x00
      000A6C E6 0C                 2289 	and	a, #0x0c
      000A6E 6F                    2290 	ld	l, a
      000A6F 26 00                 2291 	ld	h, #0x00
      000A71 CB 3C                 2292 	srl	h
      000A73 CB 1D                 2293 	rr	l
      000A75 CB 3C                 2294 	srl	h
      000A77 CB 1D                 2295 	rr	l
      000A79 29                    2296 	add	hl, hl
      000A7A 11r26r00              2297 	ld	de, #_animation_speeds
      000A7D 19                    2298 	add	hl, de
      000A7E 23                    2299 	inc	hl
      000A7F 7E                    2300 	ld	a, (hl)
      000A80 EAr77r01              2301 	ld	(#(_dynamic_metasprite + 0x0008)),a
                                   2302 ;src/main.c:666: dynamic_metasprite.metasprite = metasprite_sequential_2x3;
      000A83 21r79r01              2303 	ld	hl, #(_dynamic_metasprite + 0x000a)
      000A86 36r00                 2304 	ld	(hl), #<(_metasprite_sequential_2x3)
      000A88 23                    2305 	inc	hl
      000A89 36s00                 2306 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   2307 ;src/main.c:667: dynamic_metasprite.metasprite_offset = OFFSET_SPRITE_CARD + OFFSET_CARD_BACK;
      000A8B 21r7Br01              2308 	ld	hl, #(_dynamic_metasprite + 0x000c)
      000A8E 36 C7                 2309 	ld	(hl), #0xc7
                                   2310 ;src/main.c:668: dynamic_metasprite.data[0] = 0;
      000A90 21r7Cr01              2311 	ld	hl, #(_dynamic_metasprite + 0x000d)
      000A93 36 00                 2312 	ld	(hl), #0x00
                                   2313 ;src/main.c:669: dynamic_metasprite.callback = &dynamic_metasprite_deal_callback;
      000A95 21r82r01              2314 	ld	hl, #(_dynamic_metasprite + 0x0013)
      000A98 36r86                 2315 	ld	(hl), #<(_dynamic_metasprite_deal_callback)
      000A9A 23                    2316 	inc	hl
      000A9B 36s09                 2317 	ld	(hl), #>(_dynamic_metasprite_deal_callback)
                                   2318 ;src/main.c:670: flags |= FLAG_PLAYING_ANIMATION;
      000A9D 21r6Br01              2319 	ld	hl, #_flags
      000AA0 7E                    2320 	ld	a, (hl)
      000AA1 F6 04                 2321 	or	a, #0x04
      000AA3 77                    2322 	ld	(hl), a
                                   2323 ;src/main.c:671: }
      000AA4 C9                    2324 	ret
                                   2325 ;src/main.c:673: inline void dynamic_metasprite_process(void)
                                   2326 ;	---------------------------------
                                   2327 ; Function dynamic_metasprite_process
                                   2328 ; ---------------------------------
      000AA5                       2329 _dynamic_metasprite_process::
      000AA5 E8 FB                 2330 	add	sp, #-5
                                   2331 ;src/main.c:675: if (dynamic_metasprite.elapsed_frames >= dynamic_metasprite.target_frames)
      000AA7 21r78r01              2332 	ld	hl, #(_dynamic_metasprite + 0x0009)
      000AAA 4E                    2333 	ld	c, (hl)
      000AAB 21r77r01              2334 	ld	hl, #(_dynamic_metasprite + 0x0008)
      000AAE 46                    2335 	ld	b, (hl)
      000AAF 58                    2336 	ld	e, b
      000AB0 79                    2337 	ld	a,c
      000AB1 57                    2338 	ld	d,a
      000AB2 90                    2339 	sub	a, b
      000AB3 CB 7B                 2340 	bit	7, e
      000AB5 28 07                 2341 	jr	Z, 00124$
      000AB7 CB 7A                 2342 	bit	7, d
      000AB9 20 08                 2343 	jr	NZ, 00125$
      000ABB BF                    2344 	cp	a, a
      000ABC 18 05                 2345 	jr	00125$
      000ABE                       2346 00124$:
      000ABE CB 7A                 2347 	bit	7, d
      000AC0 28 01                 2348 	jr	Z, 00125$
      000AC2 37                    2349 	scf
      000AC3                       2350 00125$:
                                   2351 ;src/main.c:676: return;
      000AC3 D2r6Cr0B              2352 	jp	NC,00107$
                                   2353 ;src/main.c:678: dynamic_metasprite.elapsed_frames++;
      000AC6 0C                    2354 	inc	c
      000AC7 21r78r01              2355 	ld	hl, #(_dynamic_metasprite + 0x0009)
      000ACA 71                    2356 	ld	(hl), c
                                   2357 ;src/main.c:683: dynamic_metasprite.src[1] + (dynamic_metasprite.dist[1] * dynamic_metasprite.elapsed_frames / dynamic_metasprite.target_frames)
      000ACB FAr71r01              2358 	ld	a, (#(_dynamic_metasprite + 0x0002) + 0)
      000ACE F8 00                 2359 	ldhl	sp,	#0
      000AD0 77                    2360 	ld	(hl), a
      000AD1 21r75r01              2361 	ld	hl, #(_dynamic_metasprite + 0x0006)
      000AD4 2A                    2362 	ld	a, (hl+)
      000AD5 66                    2363 	ld	h, (hl)
      000AD6 6F                    2364 	ld	l, a
      000AD7 79                    2365 	ld	a, c
      000AD8 17                    2366 	rla
      000AD9 9F                    2367 	sbc	a, a
      000ADA 47                    2368 	ld	b, a
      000ADB C5                    2369 	push	bc
      000ADC C5                    2370 	push	bc
      000ADD E5                    2371 	push	hl
      000ADE CDr00r00              2372 	call	__mulint
      000AE1 E8 04                 2373 	add	sp, #4
      000AE3 E5                    2374 	push	hl
      000AE4 F8 07                 2375 	ldhl	sp,	#7
      000AE6 73                    2376 	ld	(hl), e
      000AE7 F8 08                 2377 	ldhl	sp,	#8
      000AE9 72                    2378 	ld	(hl), d
      000AEA E1                    2379 	pop	hl
      000AEB C1                    2380 	pop	bc
      000AEC FAr77r01              2381 	ld	a, (#(_dynamic_metasprite + 0x0008) + 0)
      000AEF F8 01                 2382 	ldhl	sp,	#1
      000AF1 77                    2383 	ld	(hl), a
      000AF2 17                    2384 	rla
      000AF3 9F                    2385 	sbc	a, a
      000AF4 23                    2386 	inc	hl
      000AF5 77                    2387 	ld	(hl), a
      000AF6 C5                    2388 	push	bc
      000AF7 2B                    2389 	dec	hl
      000AF8 2A                    2390 	ld	a, (hl+)
      000AF9 66                    2391 	ld	h, (hl)
      000AFA 6F                    2392 	ld	l, a
      000AFB E5                    2393 	push	hl
      000AFC F8 07                 2394 	ldhl	sp,	#7
      000AFE 2A                    2395 	ld	a, (hl+)
      000AFF 66                    2396 	ld	h, (hl)
      000B00 6F                    2397 	ld	l, a
      000B01 E5                    2398 	push	hl
      000B02 CDr00r00              2399 	call	__divsint
      000B05 E8 04                 2400 	add	sp, #4
      000B07 C1                    2401 	pop	bc
      000B08 7B                    2402 	ld	a, e
      000B09 F8 00                 2403 	ldhl	sp,	#0
      000B0B 86                    2404 	add	a, (hl)
      000B0C F8 03                 2405 	ldhl	sp,	#3
      000B0E 77                    2406 	ld	(hl), a
                                   2407 ;src/main.c:682: dynamic_metasprite.src[0] + (dynamic_metasprite.dist[0] * dynamic_metasprite.elapsed_frames / dynamic_metasprite.target_frames),
      000B0F FAr6Fr01              2408 	ld	a, (#_dynamic_metasprite + 0)
      000B12 F8 04                 2409 	ldhl	sp,	#4
      000B14 77                    2410 	ld	(hl), a
      000B15 21r73r01              2411 	ld	hl, #(_dynamic_metasprite + 0x0004)
      000B18 2A                    2412 	ld	a, (hl+)
      000B19 66                    2413 	ld	h, (hl)
      000B1A 6F                    2414 	ld	l, a
      000B1B C5                    2415 	push	bc
      000B1C E5                    2416 	push	hl
      000B1D CDr00r00              2417 	call	__mulint
      000B20 E8 04                 2418 	add	sp, #4
      000B22 F8 01                 2419 	ldhl	sp,	#1
      000B24 2A                    2420 	ld	a, (hl+)
      000B25 66                    2421 	ld	h, (hl)
      000B26 6F                    2422 	ld	l, a
      000B27 E5                    2423 	push	hl
      000B28 D5                    2424 	push	de
      000B29 CDr00r00              2425 	call	__divsint
      000B2C E8 04                 2426 	add	sp, #4
      000B2E 7B                    2427 	ld	a, e
      000B2F F8 04                 2428 	ldhl	sp,	#4
      000B31 86                    2429 	add	a, (hl)
      000B32 47                    2430 	ld	b, a
                                   2431 ;src/main.c:680: dynamic_metasprite.metasprite_offset,
      000B33 FAr7Br01              2432 	ld	a, (#(_dynamic_metasprite + 0x000c) + 0)
      000B36 EAr00r00              2433 	ld	(#___current_base_tile),a
                                   2434 ;src/main.c:679: move_metasprite(dynamic_metasprite.metasprite,
      000B39 21r79r01              2435 	ld	hl, #(_dynamic_metasprite + 0x000a)
      000B3C 2A                    2436 	ld	a, (hl+)
      000B3D 66                    2437 	ld	h, (hl)
                                   2438 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      000B3E EAr00r00              2439 	ld	(___current_metasprite), a
      000B41 7C                    2440 	ld	a, h
      000B42 EAr01r00              2441 	ld	(___current_metasprite + 1), a
                                   2442 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      000B45 F8 03                 2443 	ldhl	sp,	#3
      000B47 7E                    2444 	ld	a, (hl)
      000B48 F5                    2445 	push	af
      000B49 33                    2446 	inc	sp
      000B4A C5                    2447 	push	bc
      000B4B 33                    2448 	inc	sp
      000B4C AF                    2449 	xor	a, a
      000B4D F5                    2450 	push	af
      000B4E 33                    2451 	inc	sp
      000B4F CDr00r00              2452 	call	___move_metasprite
      000B52 E8 03                 2453 	add	sp, #3
                                   2454 ;src/main.c:685: if (dynamic_metasprite.elapsed_frames == dynamic_metasprite.target_frames
      000B54 FAr78r01              2455 	ld	a, (#(_dynamic_metasprite + 0x0009) + 0)
      000B57 21r77r01              2456 	ld	hl, #(_dynamic_metasprite + 0x0008)
      000B5A 4E                    2457 	ld	c, (hl)
      000B5B 91                    2458 	sub	a, c
      000B5C 20 0E                 2459 	jr	NZ, 00107$
                                   2460 ;src/main.c:686: && dynamic_metasprite.callback)
      000B5E 21r82r01              2461 	ld	hl, #(_dynamic_metasprite + 0x0013)
      000B61 2A                    2462 	ld	a, (hl+)
      000B62 4F                    2463 	ld	c, a
      000B63 66                    2464 	ld	h, (hl)
      000B64 7C                    2465 	ld	a, h
      000B65 B1                    2466 	or	a, c
      000B66 28 04                 2467 	jr	Z, 00107$
                                   2468 ;src/main.c:687: dynamic_metasprite.callback();
      000B68 69                    2469 	ld	l, c
      000B69 CDr00r00              2470 	call	___sdcc_call_hl
      000B6C                       2471 00107$:
                                   2472 ;src/main.c:688: }
      000B6C E8 05                 2473 	add	sp, #5
      000B6E C9                    2474 	ret
                                   2475 ;src/main.c:695: void cursor_adjust_height(void)
                                   2476 ;	---------------------------------
                                   2477 ; Function cursor_adjust_height
                                   2478 ; ---------------------------------
      000B6F                       2479 _cursor_adjust_height::
                                   2480 ;src/main.c:697: Pile *pile = IDX_PTR(piles, cursor.pile_idx);
      000B6F 01r38r01              2481 	ld	bc, #_piles+0
      000B72 FAr8Ar01              2482 	ld	a, (#(_cursor + 0x0006) + 0)
      000B75 5F                    2483 	ld	e, a
      000B76 16 00                 2484 	ld	d, #0x00
      000B78 6B                    2485 	ld	l, e
      000B79 62                    2486 	ld	h, d
      000B7A 29                    2487 	add	hl, hl
      000B7B 29                    2488 	add	hl, hl
      000B7C 19                    2489 	add	hl, de
      000B7D 09                    2490 	add	hl, bc
                                   2491 ;src/main.c:698: if (cursor.height >= pile->height)
      000B7E 01r8Br01              2492 	ld	bc, #_cursor + 7
      000B81 0A                    2493 	ld	a, (bc)
      000B82 57                    2494 	ld	d, a
      000B83 23                    2495 	inc	hl
      000B84 23                    2496 	inc	hl
      000B85 23                    2497 	inc	hl
      000B86 23                    2498 	inc	hl
      000B87 5E                    2499 	ld	e, (hl)
      000B88 7A                    2500 	ld	a, d
      000B89 93                    2501 	sub	a, e
      000B8A D8                    2502 	ret	C
                                   2503 ;src/main.c:699: cursor.height = pile->height - !!pile->height;
      000B8B 7B                    2504 	ld	a, e
      000B8C D6 01                 2505 	sub	a,#0x01
      000B8E 3E 00                 2506 	ld	a, #0x00
      000B90 17                    2507 	rla
      000B91 EE 01                 2508 	xor	a, #0x01
      000B93 57                    2509 	ld	d, a
      000B94 7B                    2510 	ld	a, e
      000B95 92                    2511 	sub	a, d
      000B96 02                    2512 	ld	(bc), a
                                   2513 ;src/main.c:700: }
      000B97 C9                    2514 	ret
                                   2515 ;src/main.c:702: inline void cursor_grab_stack(void)
                                   2516 ;	---------------------------------
                                   2517 ; Function cursor_grab_stack
                                   2518 ; ---------------------------------
      000B98                       2519 _cursor_grab_stack::
      000B98 E8 F9                 2520 	add	sp, #-7
                                   2521 ;src/main.c:705: Pile *pile = IDX_PTR(piles, cursor.pile_idx);
      000B9A 01r38r01              2522 	ld	bc, #_piles+0
      000B9D FAr8Ar01              2523 	ld	a, (#(_cursor + 0x0006) + 0)
      000BA0 5F                    2524 	ld	e, a
      000BA1 16 00                 2525 	ld	d, #0x00
      000BA3 6B                    2526 	ld	l, e
      000BA4 62                    2527 	ld	h, d
      000BA5 29                    2528 	add	hl, hl
      000BA6 29                    2529 	add	hl, hl
      000BA7 19                    2530 	add	hl, de
      000BA8 09                    2531 	add	hl, bc
      000BA9 4D                    2532 	ld	c, l
      000BAA 7C                    2533 	ld	a, h
      000BAB F8 02                 2534 	ldhl	sp,	#2
      000BAD 71                    2535 	ld	(hl), c
      000BAE 23                    2536 	inc	hl
                                   2537 ;src/main.c:706: Card *top = pile->base;
      000BAF 32                    2538 	ld	(hl-), a
      000BB0 2A                    2539 	ld	a, (hl+)
      000BB1 5F                    2540 	ld	e, a
      000BB2 56                    2541 	ld	d, (hl)
      000BB3 1A                    2542 	ld	a, (de)
      000BB4 23                    2543 	inc	hl
      000BB5 23                    2544 	inc	hl
      000BB6 22                    2545 	ld	(hl+), a
      000BB7 13                    2546 	inc	de
      000BB8 1A                    2547 	ld	a, (de)
      000BB9 77                    2548 	ld	(hl), a
                                   2549 ;src/main.c:707: for (i = 1; i < cursor.height; i++)
      000BBA 06 01                 2550 	ld	b, #0x01
      000BBC                       2551 00109$:
      000BBC 21r8Br01              2552 	ld	hl, #(_cursor + 0x0007)
      000BBF 4E                    2553 	ld	c, (hl)
      000BC0 78                    2554 	ld	a, b
      000BC1 91                    2555 	sub	a, c
      000BC2 30 0E                 2556 	jr	NC, 00101$
                                   2557 ;src/main.c:708: top = top->next_card;
      000BC4 F8 05                 2558 	ldhl	sp,#5
      000BC6 2A                    2559 	ld	a, (hl+)
      000BC7 5F                    2560 	ld	e, a
      000BC8 56                    2561 	ld	d, (hl)
      000BC9 1A                    2562 	ld	a, (de)
      000BCA 2B                    2563 	dec	hl
      000BCB 22                    2564 	ld	(hl+), a
      000BCC 13                    2565 	inc	de
      000BCD 1A                    2566 	ld	a, (de)
      000BCE 77                    2567 	ld	(hl), a
                                   2568 ;src/main.c:707: for (i = 1; i < cursor.height; i++)
      000BCF 04                    2569 	inc	b
      000BD0 18 EA                 2570 	jr	00109$
      000BD2                       2571 00101$:
                                   2572 ;src/main.c:709: Card *stack = cursor.height ? top->next_card : top;
      000BD2 79                    2573 	ld	a, c
      000BD3 B7                    2574 	or	a, a
      000BD4 28 0E                 2575 	jr	Z, 00113$
      000BD6 F8 05                 2576 	ldhl	sp,#5
      000BD8 2A                    2577 	ld	a, (hl+)
      000BD9 5F                    2578 	ld	e, a
      000BDA 56                    2579 	ld	d, (hl)
      000BDB 1A                    2580 	ld	a, (de)
      000BDC F8 00                 2581 	ldhl	sp,	#0
      000BDE 22                    2582 	ld	(hl+), a
      000BDF 13                    2583 	inc	de
      000BE0 1A                    2584 	ld	a, (de)
      000BE1 77                    2585 	ld	(hl), a
      000BE2 18 08                 2586 	jr	00114$
      000BE4                       2587 00113$:
      000BE4 F8 05                 2588 	ldhl	sp,	#5
      000BE6 2A                    2589 	ld	a, (hl+)
      000BE7 5E                    2590 	ld	e, (hl)
      000BE8 F8 00                 2591 	ldhl	sp,	#0
      000BEA 22                    2592 	ld	(hl+), a
      000BEB 73                    2593 	ld	(hl), e
      000BEC                       2594 00114$:
      000BEC C1                    2595 	pop	bc
      000BED C5                    2596 	push	bc
                                   2597 ;src/main.c:710: if (!(VISIBLE(stack->data) && is_stack_coherent(stack)))
      000BEE 59                    2598 	ld	e, c
      000BEF 50                    2599 	ld	d, b
      000BF0 13                    2600 	inc	de
      000BF1 13                    2601 	inc	de
      000BF2 1A                    2602 	ld	a, (de)
      000BF3 CB 77                 2603 	bit	6, a
      000BF5 28 6F                 2604 	jr	Z, 00111$
      000BF7 C5                    2605 	push	bc
      000BF8 C5                    2606 	push	bc
      000BF9 CDr54r10              2607 	call	_is_stack_coherent
      000BFC E8 02                 2608 	add	sp, #2
      000BFE 7B                    2609 	ld	a, e
      000BFF C1                    2610 	pop	bc
      000C00 B7                    2611 	or	a, a
                                   2612 ;src/main.c:711: return;
      000C01 28 63                 2613 	jr	Z, 00111$
                                   2614 ;src/main.c:713: cursor.held_card = stack;
      000C03 21r84r01              2615 	ld	hl, #_cursor
      000C06 79                    2616 	ld	a, c
      000C07 22                    2617 	ld	(hl+), a
      000C08 70                    2618 	ld	(hl), b
                                   2619 ;src/main.c:714: cursor.hand_pile_idx = cursor.pile_idx;
      000C09 01r89r01              2620 	ld	bc, #_cursor + 5
      000C0C FAr8Ar01              2621 	ld	a, (#(_cursor + 0x0006) + 0)
      000C0F 02                    2622 	ld	(bc), a
                                   2623 ;src/main.c:715: cursor.held_stack_size = pile->height - cursor.height;
                                   2624 ;c
      000C10 F8 02                 2625 	ldhl	sp,#2
      000C12 2A                    2626 	ld	a, (hl+)
      000C13 5F                    2627 	ld	e, a
      000C14 56                    2628 	ld	d, (hl)
      000C15 21 04 00              2629 	ld	hl, #0x0004
      000C18 19                    2630 	add	hl, de
      000C19 4D                    2631 	ld	c, l
      000C1A 44                    2632 	ld	b, h
      000C1B 0A                    2633 	ld	a, (bc)
      000C1C 21r8Br01              2634 	ld	hl, #(_cursor + 0x0007)
      000C1F 6E                    2635 	ld	l, (hl)
      000C20 95                    2636 	sub	a, l
      000C21 EAr88r01              2637 	ld	(#(_cursor + 0x0004)),a
                                   2638 ;src/main.c:716: pile->height = cursor.height;
      000C24 FAr8Br01              2639 	ld	a, (#(_cursor + 0x0007) + 0)
      000C27 02                    2640 	ld	(bc), a
                                   2641 ;src/main.c:717: if (cursor.height) {
      000C28 FAr8Br01              2642 	ld	a, (#(_cursor + 0x0007) + 0)
      000C2B F8 04                 2643 	ldhl	sp,	#4
      000C2D 77                    2644 	ld	(hl), a
                                   2645 ;src/main.c:718: pile->top = top;
      000C2E F8 02                 2646 	ldhl	sp,#2
      000C30 2A                    2647 	ld	a, (hl+)
      000C31 4F                    2648 	ld	c, a
      000C32 46                    2649 	ld	b, (hl)
      000C33 03                    2650 	inc	bc
      000C34 03                    2651 	inc	bc
                                   2652 ;src/main.c:720: cursor.card_to_show = top;
                                   2653 ;src/main.c:717: if (cursor.height) {
      000C35 23                    2654 	inc	hl
      000C36 7E                    2655 	ld	a, (hl)
      000C37 B7                    2656 	or	a, a
      000C38 28 1A                 2657 	jr	Z, 00106$
                                   2658 ;src/main.c:718: pile->top = top;
      000C3A 23                    2659 	inc	hl
      000C3B 2A                    2660 	ld	a, (hl+)
      000C3C 02                    2661 	ld	(bc), a
      000C3D 03                    2662 	inc	bc
      000C3E 7E                    2663 	ld	a, (hl)
      000C3F 02                    2664 	ld	(bc), a
                                   2665 ;src/main.c:719: top->next_card = NULL;
      000C40 2B                    2666 	dec	hl
      000C41 2A                    2667 	ld	a, (hl+)
      000C42 66                    2668 	ld	h, (hl)
      000C43 6F                    2669 	ld	l, a
      000C44 AF                    2670 	xor	a, a
      000C45 22                    2671 	ld	(hl+), a
      000C46 77                    2672 	ld	(hl), a
                                   2673 ;src/main.c:720: cursor.card_to_show = top;
      000C47 11r86r01              2674 	ld	de, #(_cursor + 0x0002)
      000C4A F8 05                 2675 	ldhl	sp,	#5
      000C4C 7E                    2676 	ld	a, (hl)
      000C4D 12                    2677 	ld	(de), a
      000C4E 13                    2678 	inc	de
      000C4F 23                    2679 	inc	hl
      000C50 7E                    2680 	ld	a, (hl)
      000C51 12                    2681 	ld	(de), a
      000C52 18 12                 2682 	jr	00111$
      000C54                       2683 00106$:
                                   2684 ;src/main.c:722: pile->base = NULL;
      000C54 F8 02                 2685 	ldhl	sp,	#2
      000C56 2A                    2686 	ld	a, (hl+)
      000C57 66                    2687 	ld	h, (hl)
      000C58 6F                    2688 	ld	l, a
      000C59 AF                    2689 	xor	a, a
      000C5A 22                    2690 	ld	(hl+), a
      000C5B 77                    2691 	ld	(hl), a
                                   2692 ;src/main.c:723: pile->top = NULL;
      000C5C AF                    2693 	xor	a, a
      000C5D 02                    2694 	ld	(bc), a
      000C5E 03                    2695 	inc	bc
      000C5F 02                    2696 	ld	(bc), a
                                   2697 ;src/main.c:724: cursor.card_to_show = NULL;
      000C60 21r86r01              2698 	ld	hl, #(_cursor + 0x0002)
      000C63 AF                    2699 	xor	a, a
      000C64 22                    2700 	ld	(hl+), a
      000C65 77                    2701 	ld	(hl), a
      000C66                       2702 00111$:
                                   2703 ;src/main.c:726: }
      000C66 E8 07                 2704 	add	sp, #7
      000C68 C9                    2705 	ret
                                   2706 ;src/main.c:728: inline void cursor_place_stack(void)
                                   2707 ;	---------------------------------
                                   2708 ; Function cursor_place_stack
                                   2709 ; ---------------------------------
      000C69                       2710 _cursor_place_stack::
      000C69 E8 FE                 2711 	add	sp, #-2
                                   2712 ;src/main.c:730: Pile *pile = IDX_PTR(piles, cursor.hand_pile_idx);
      000C6B 01r38r01              2713 	ld	bc, #_piles+0
      000C6E FAr89r01              2714 	ld	a, (#(_cursor + 0x0005) + 0)
      000C71 F8 01                 2715 	ldhl	sp,	#1
      000C73 77                    2716 	ld	(hl), a
      000C74 F8 01                 2717 	ldhl	sp,	#1
      000C76 5E                    2718 	ld	e, (hl)
      000C77 16 00                 2719 	ld	d, #0x00
      000C79 6B                    2720 	ld	l, e
      000C7A 62                    2721 	ld	h, d
      000C7B 29                    2722 	add	hl, hl
      000C7C 29                    2723 	add	hl, hl
      000C7D 19                    2724 	add	hl, de
      000C7E 09                    2725 	add	hl, bc
      000C7F 4D                    2726 	ld	c, l
      000C80 44                    2727 	ld	b, h
                                   2728 ;src/main.c:731: if (cursor.hand_pile_idx == cursor.pile_idx) {
      000C81 21r8Ar01              2729 	ld	hl, #_cursor + 6
      000C84 5E                    2730 	ld	e, (hl)
      000C85 F8 01                 2731 	ldhl	sp,	#1
      000C87 7E                    2732 	ld	a, (hl)
      000C88 93                    2733 	sub	a, e
      000C89 20 08                 2734 	jr	NZ, 00105$
                                   2735 ;src/main.c:732: pile_append_cursor_stack(pile);
      000C8B C5                    2736 	push	bc
      000C8C CDr18r11              2737 	call	_pile_append_cursor_stack
      000C8F E8 02                 2738 	add	sp, #2
      000C91 18 46                 2739 	jr	00107$
      000C93                       2740 00105$:
                                   2741 ;src/main.c:733: } else if (!pile->height
      000C93 21 04 00              2742 	ld	hl, #0x0004
      000C96 09                    2743 	add	hl, bc
      000C97 7E                    2744 	ld	a, (hl)
      000C98 B7                    2745 	or	a, a
      000C99 28 2C                 2746 	jr	Z, 00101$
                                   2747 ;src/main.c:734: || RANK(pile->top->data) == RANK(cursor.held_card->data) + 1u) {
      000C9B 69                    2748 	ld	l, c
      000C9C 60                    2749 	ld	h, b
      000C9D 23                    2750 	inc	hl
      000C9E 23                    2751 	inc	hl
      000C9F 2A                    2752 	ld	a, (hl+)
      000CA0 66                    2753 	ld	h, (hl)
      000CA1 6F                    2754 	ld	l, a
      000CA2 23                    2755 	inc	hl
      000CA3 23                    2756 	inc	hl
      000CA4 7E                    2757 	ld	a, (hl)
      000CA5 E6 0F                 2758 	and	a, #0x0f
      000CA7 F8 00                 2759 	ldhl	sp,	#0
      000CA9 77                    2760 	ld	(hl), a
      000CAA AF                    2761 	xor	a, a
      000CAB 23                    2762 	inc	hl
      000CAC 77                    2763 	ld	(hl), a
      000CAD 21r84r01              2764 	ld	hl, #_cursor
      000CB0 2A                    2765 	ld	a, (hl+)
      000CB1 66                    2766 	ld	h, (hl)
      000CB2 6F                    2767 	ld	l, a
      000CB3 23                    2768 	inc	hl
      000CB4 23                    2769 	inc	hl
      000CB5 7E                    2770 	ld	a, (hl)
      000CB6 E6 0F                 2771 	and	a, #0x0f
      000CB8 16 00                 2772 	ld	d, #0x00
      000CBA 5F                    2773 	ld	e, a
      000CBB 13                    2774 	inc	de
      000CBC F8 00                 2775 	ldhl	sp,	#0
      000CBE 7E                    2776 	ld	a, (hl)
      000CBF 93                    2777 	sub	a, e
      000CC0 20 17                 2778 	jr	NZ, 00107$
      000CC2 23                    2779 	inc	hl
      000CC3 7E                    2780 	ld	a, (hl)
      000CC4 92                    2781 	sub	a, d
      000CC5 20 12                 2782 	jr	NZ, 00107$
      000CC7                       2783 00101$:
                                   2784 ;src/main.c:735: pile_append_cursor_stack(pile);
      000CC7 C5                    2785 	push	bc
      000CC8 CDr18r11              2786 	call	_pile_append_cursor_stack
      000CCB E8 02                 2787 	add	sp, #2
                                   2788 ;src/main.c:736: score--;
      000CCD 21r6Er01              2789 	ld	hl, #_score + 1
      000CD0 2B                    2790 	dec	hl
      000CD1 2A                    2791 	ld	a, (hl+)
      000CD2 5F                    2792 	ld	e, a
      000CD3 56                    2793 	ld	d, (hl)
      000CD4 1B                    2794 	dec	de
      000CD5 2B                    2795 	dec	hl
      000CD6 7B                    2796 	ld	a, e
      000CD7 22                    2797 	ld	(hl+), a
      000CD8 72                    2798 	ld	(hl), d
      000CD9                       2799 00107$:
                                   2800 ;src/main.c:738: }
      000CD9 E8 02                 2801 	add	sp, #2
      000CDB C9                    2802 	ret
                                   2803 ;src/main.c:740: inline void cursor_process(void)
                                   2804 ;	---------------------------------
                                   2805 ; Function cursor_process
                                   2806 ; ---------------------------------
      000CDC                       2807 _cursor_process::
      000CDC 3B                    2808 	dec	sp
                                   2809 ;src/main.c:742: switch (flags & FLAG_GAME_STATE) {
      000CDD FAr6Br01              2810 	ld	a, (#_flags)
      000CE0 E6 18                 2811 	and	a, #0x18
      000CE2 4F                    2812 	ld	c, a
      000CE3 06 00                 2813 	ld	b, #0x00
      000CE5 79                    2814 	ld	a, c
      000CE6 B7                    2815 	or	a, a
      000CE7 B0                    2816 	or	a, b
      000CE8 CAr2Dr0E              2817 	jp	Z,00122$
                                   2818 ;src/main.c:744: return;
      000CEB 18 00                 2819 	jr	00102$
                                   2820 ;src/main.c:745: }
      000CED                       2821 00102$:
                                   2822 ;src/main.c:746: cursor.anim_ctr++;
      000CED 21r8Cr01              2823 	ld	hl, #_cursor + 8
      000CF0 46                    2824 	ld	b, (hl)
      000CF1 04                    2825 	inc	b
      000CF2 70                    2826 	ld	(hl), b
                                   2827 ;src/main.c:747: cursor.anim_ctr &= (1u << (CURSOR_PERIOD_LOGSCALE + 1u)) - 1u;
      000CF3 CB B8                 2828 	res	7, b
      000CF5 70                    2829 	ld	(hl), b
                                   2830 ;src/main.c:748: UINT8 prev_anim_frame = cursor.anim_frame;
      000CF6 21r8Dr01              2831 	ld	hl, #(_cursor + 0x0009)
      000CF9 4E                    2832 	ld	c, (hl)
                                   2833 ;src/main.c:749: cursor.anim_frame = cursor.anim_ctr >> CURSOR_PERIOD_LOGSCALE;
      000CFA 78                    2834 	ld	a, b
      000CFB 07                    2835 	rlca
      000CFC 07                    2836 	rlca
      000CFD E6 03                 2837 	and	a, #0x03
      000CFF EAr8Dr01              2838 	ld	(#(_cursor + 0x0009)),a
                                   2839 ;src/main.c:750: if (cursor.anim_frame != prev_anim_frame)
      000D02 91                    2840 	sub	a, c
      000D03 28 07                 2841 	jr	Z, 00104$
                                   2842 ;src/main.c:751: flags |= FLAG_REDRAW_CURSOR;
      000D05 21r6Br01              2843 	ld	hl, #_flags
      000D08 7E                    2844 	ld	a, (hl)
      000D09 F6 01                 2845 	or	a, #0x01
      000D0B 77                    2846 	ld	(hl), a
      000D0C                       2847 00104$:
                                   2848 ;src/main.c:753: if (flags & FLAG_REDRAW_CURSOR) {
      000D0C FAr6Br01              2849 	ld	a, (#_flags)
      000D0F 0F                    2850 	rrca
      000D10 D2rCFr0D              2851 	jp	NC,00112$
                                   2852 ;src/main.c:754: flags &= ~FLAG_REDRAW_CURSOR;
      000D13 21r6Br01              2853 	ld	hl, #_flags
      000D16 7E                    2854 	ld	a, (hl)
      000D17 E6 FE                 2855 	and	a, #0xfe
                                   2856 ;src/main.c:755: switch (flags & FLAG_GAME_STATE) {
      000D19 77                    2857 	ld	(hl), a
      000D1A E6 18                 2858 	and	a, #0x18
      000D1C 5F                    2859 	ld	e, a
      000D1D 16 00                 2860 	ld	d, #0x00
                                   2861 ;src/main.c:761: SETTINGS_PAD_Y * 8u + cursor.pile_idx * 32u
      000D1F 21r8Ar01              2862 	ld	hl, #_cursor + 6
                                   2863 ;src/main.c:760: cursor.height * 16u + SETTINGS_SPLIT_X * 8u,
      000D22 01r8Br01              2864 	ld	bc, #_cursor + 7
                                   2865 ;src/main.c:755: switch (flags & FLAG_GAME_STATE) {
      000D25 7B                    2866 	ld	a, e
      000D26 D6 10                 2867 	sub	a, #0x10
      000D28 B2                    2868 	or	a, d
      000D29 28 43                 2869 	jr	Z, 00106$
      000D2B 7B                    2870 	ld	a, e
      000D2C D6 18                 2871 	sub	a, #0x18
      000D2E B2                    2872 	or	a, d
      000D2F C2rCFr0D              2873 	jp	NZ,00112$
                                   2874 ;src/main.c:761: SETTINGS_PAD_Y * 8u + cursor.pile_idx * 32u
      000D32 7E                    2875 	ld	a, (hl)
      000D33 CB 37                 2876 	swap	a
      000D35 07                    2877 	rlca
      000D36 E6 E0                 2878 	and	a, #0xe0
      000D38 C6 08                 2879 	add	a, #0x08
      000D3A F8 00                 2880 	ldhl	sp,	#0
      000D3C 77                    2881 	ld	(hl), a
                                   2882 ;src/main.c:760: cursor.height * 16u + SETTINGS_SPLIT_X * 8u,
      000D3D 0A                    2883 	ld	a, (bc)
      000D3E CB 37                 2884 	swap	a
      000D40 E6 F0                 2885 	and	a, #0xf0
      000D42 C6 50                 2886 	add	a, #0x50
      000D44 4F                    2887 	ld	c, a
                                   2888 ;src/main.c:757: move_metasprite(cursor_metasprites[cursor.anim_frame],
      000D45 FAr8Dr01              2889 	ld	a, (#(_cursor + 0x0009) + 0)
      000D48 26 00                 2890 	ld	h, #0x00
      000D4A 6F                    2891 	ld	l, a
      000D4B 29                    2892 	add	hl, hl
      000D4C 11r00r00              2893 	ld	de, #_cursor_metasprites
      000D4F 19                    2894 	add	hl, de
      000D50 2A                    2895 	ld	a, (hl+)
      000D51 66                    2896 	ld	h, (hl)
                                   2897 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      000D52 EAr00r00              2898 	ld	(___current_metasprite), a
      000D55 7C                    2899 	ld	a, h
      000D56 EAr01r00              2900 	ld	(___current_metasprite + 1), a
                                   2901 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      000D59 21r00r00              2902 	ld	hl, #___current_base_tile
      000D5C 36 01                 2903 	ld	(hl), #0x01
                                   2904 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      000D5E F8 00                 2905 	ldhl	sp,	#0
      000D60 7E                    2906 	ld	a, (hl)
      000D61 F5                    2907 	push	af
      000D62 33                    2908 	inc	sp
      000D63 51                    2909 	ld	d, c
      000D64 1E 0C                 2910 	ld	e,#0x0c
      000D66 D5                    2911 	push	de
      000D67 CDr00r00              2912 	call	___move_metasprite
      000D6A E8 03                 2913 	add	sp, #3
                                   2914 ;src/main.c:763: break;
      000D6C 18 61                 2915 	jr	00112$
                                   2916 ;src/main.c:764: case FLAG_GAME_STATE_INGAME:
      000D6E                       2917 00106$:
                                   2918 ;src/main.c:765: if (cursor.pile_idx == PILE_IDX_DECK)
      000D6E 7E                    2919 	ld	a, (hl)
      000D6F F8 00                 2920 	ldhl	sp,	#0
      000D71 77                    2921 	ld	(hl), a
                                   2922 ;src/main.c:748: UINT8 prev_anim_frame = cursor.anim_frame;
      000D72 FAr8Dr01              2923 	ld	a, (#(_cursor + 0x0009) + 0)
                                   2924 ;src/main.c:766: move_metasprite(cursor_metasprites[cursor.anim_frame],
      000D75 6F                    2925 	ld	l, a
      000D76 26 00                 2926 	ld	h, #0x00
      000D78 29                    2927 	add	hl, hl
      000D79 5D                    2928 	ld	e, l
      000D7A 54                    2929 	ld	d, h
                                   2930 ;src/main.c:765: if (cursor.pile_idx == PILE_IDX_DECK)
      000D7B F8 00                 2931 	ldhl	sp,	#0
      000D7D 7E                    2932 	ld	a, (hl)
      000D7E D6 0A                 2933 	sub	a, #0x0a
      000D80 20 21                 2934 	jr	NZ, 00108$
                                   2935 ;src/main.c:766: move_metasprite(cursor_metasprites[cursor.anim_frame],
      000D82 21r00r00              2936 	ld	hl, #_cursor_metasprites
      000D85 19                    2937 	add	hl, de
      000D86 2A                    2938 	ld	a, (hl+)
      000D87 4F                    2939 	ld	c, a
      000D88 46                    2940 	ld	b, (hl)
                                   2941 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      000D89 21r00r00              2942 	ld	hl, #___current_metasprite
      000D8C 79                    2943 	ld	a, c
      000D8D 22                    2944 	ld	(hl+), a
      000D8E 70                    2945 	ld	(hl), b
                                   2946 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      000D8F 21r00r00              2947 	ld	hl, #___current_base_tile
      000D92 36 01                 2948 	ld	(hl), #0x01
                                   2949 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      000D94 AF                    2950 	xor	a, a
      000D95 F5                    2951 	push	af
      000D96 33                    2952 	inc	sp
      000D97 AF                    2953 	xor	a, a
      000D98 57                    2954 	ld	d,a
      000D99 1E 0C                 2955 	ld	e,#0x0c
      000D9B D5                    2956 	push	de
      000D9C CDr00r00              2957 	call	___move_metasprite
      000D9F E8 03                 2958 	add	sp, #3
                                   2959 ;src/main.c:771: );
      000DA1 18 2C                 2960 	jr	00112$
      000DA3                       2961 00108$:
                                   2962 ;src/main.c:777: (cursor.height + 3u) * 8u
      000DA3 0A                    2963 	ld	a, (bc)
      000DA4 C6 03                 2964 	add	a, #0x03
      000DA6 87                    2965 	add	a, a
      000DA7 87                    2966 	add	a, a
      000DA8 87                    2967 	add	a, a
      000DA9 4F                    2968 	ld	c, a
                                   2969 ;src/main.c:776: cursor.pile_idx * 16u,
      000DAA F8 00                 2970 	ldhl	sp,	#0
      000DAC 7E                    2971 	ld	a, (hl)
      000DAD CB 37                 2972 	swap	a
      000DAF E6 F0                 2973 	and	a, #0xf0
      000DB1 47                    2974 	ld	b, a
                                   2975 ;src/main.c:773: move_metasprite(cursor_metasprites[cursor.anim_frame],
      000DB2 21r00r00              2976 	ld	hl, #_cursor_metasprites
      000DB5 19                    2977 	add	hl, de
      000DB6 2A                    2978 	ld	a, (hl+)
      000DB7 66                    2979 	ld	h, (hl)
                                   2980 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      000DB8 EAr00r00              2981 	ld	(___current_metasprite), a
      000DBB 7C                    2982 	ld	a, h
      000DBC EAr01r00              2983 	ld	(___current_metasprite + 1), a
                                   2984 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      000DBF 21r00r00              2985 	ld	hl, #___current_base_tile
      000DC2 36 01                 2986 	ld	(hl), #0x01
                                   2987 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      000DC4 79                    2988 	ld	a, c
      000DC5 F5                    2989 	push	af
      000DC6 33                    2990 	inc	sp
      000DC7 0E 0C                 2991 	ld	c, #0x0c
      000DC9 C5                    2992 	push	bc
      000DCA CDr00r00              2993 	call	___move_metasprite
      000DCD E8 03                 2994 	add	sp, #3
                                   2995 ;src/main.c:780: }
      000DCF                       2996 00112$:
                                   2997 ;src/main.c:783: if (flags & FLAG_REDRAW_HAND) {
      000DCF FAr6Br01              2998 	ld	a, (#_flags)
      000DD2 CB 4F                 2999 	bit	1, a
      000DD4 28 57                 3000 	jr	Z, 00122$
                                   3001 ;src/main.c:784: flags &= ~FLAG_REDRAW_HAND;
      000DD6 21r6Br01              3002 	ld	hl, #_flags
      000DD9 7E                    3003 	ld	a, (hl)
      000DDA E6 FD                 3004 	and	a, #0xfd
      000DDC 77                    3005 	ld	(hl), a
                                   3006 ;src/main.c:785: if (cursor.held_card) {
      000DDD 21r84r01              3007 	ld	hl, #_cursor
      000DE0 2A                    3008 	ld	a, (hl+)
      000DE1 B6                    3009 	or	a,(hl)
      000DE2 28 41                 3010 	jr	Z, 00114$
                                   3011 ;src/main.c:786: UINT8 height = piles[cursor.hand_pile_idx].height;
      000DE4 21r89r01              3012 	ld	hl, #(_cursor + 0x0005)
      000DE7 4E                    3013 	ld	c, (hl)
      000DE8 06 00                 3014 	ld	b, #0x00
      000DEA 69                    3015 	ld	l, c
      000DEB 60                    3016 	ld	h, b
      000DEC 29                    3017 	add	hl, hl
      000DED 29                    3018 	add	hl, hl
      000DEE 09                    3019 	add	hl, bc
      000DEF 11r38r01              3020 	ld	de, #_piles
      000DF2 19                    3021 	add	hl, de
      000DF3 23                    3022 	inc	hl
      000DF4 23                    3023 	inc	hl
      000DF5 23                    3024 	inc	hl
      000DF6 23                    3025 	inc	hl
      000DF7 5E                    3026 	ld	e, (hl)
                                   3027 ;src/main.c:791: (height + !height + 2u) * 8u
      000DF8 7B                    3028 	ld	a, e
      000DF9 D6 01                 3029 	sub	a,#0x01
      000DFB 3E 00                 3030 	ld	a, #0x00
      000DFD 17                    3031 	rla
      000DFE 83                    3032 	add	a, e
      000DFF C6 02                 3033 	add	a, #0x02
      000E01 87                    3034 	add	a, a
      000E02 87                    3035 	add	a, a
      000E03 87                    3036 	add	a, a
      000E04 47                    3037 	ld	b, a
                                   3038 ;src/main.c:790: cursor.hand_pile_idx * 16u,
      000E05 79                    3039 	ld	a, c
      000E06 CB 37                 3040 	swap	a
      000E08 E6 F0                 3041 	and	a, #0xf0
      000E0A 57                    3042 	ld	d, a
                                   3043 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      000E0B 21r00r00              3044 	ld	hl, #___current_metasprite
      000E0E 36r00                 3045 	ld	(hl), #<(_metasprite_sequential_2x3)
      000E10 23                    3046 	inc	hl
      000E11 36s00                 3047 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   3048 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      000E13 21r00r00              3049 	ld	hl, #___current_base_tile
      000E16 36 03                 3050 	ld	(hl), #0x03
                                   3051 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      000E18 4A                    3052 	ld	c, d
      000E19 C5                    3053 	push	bc
      000E1A 3E 06                 3054 	ld	a, #0x06
      000E1C F5                    3055 	push	af
      000E1D 33                    3056 	inc	sp
      000E1E CDr00r00              3057 	call	___move_metasprite
      000E21 E8 03                 3058 	add	sp, #3
                                   3059 ;src/main.c:792: );
      000E23 18 08                 3060 	jr	00122$
      000E25                       3061 00114$:
                                   3062 ;src/main.c:794: metasprite_2x3_hide(SPRITE_HAND);
      000E25 3E 06                 3063 	ld	a, #0x06
      000E27 F5                    3064 	push	af
      000E28 33                    3065 	inc	sp
      000E29 CDrA4r03              3066 	call	_metasprite_2x3_hide
      000E2C 33                    3067 	inc	sp
      000E2D                       3068 00122$:
                                   3069 ;src/main.c:797: }
      000E2D 33                    3070 	inc	sp
      000E2E C9                    3071 	ret
                                   3072 ;src/main.c:803: void init_deck(void)
                                   3073 ;	---------------------------------
                                   3074 ; Function init_deck
                                   3075 ; ---------------------------------
      000E2F                       3076 _init_deck::
      000E2F E8 F0                 3077 	add	sp, #-16
                                   3078 ;src/main.c:805: Card *card = IDX_PTR(deck, 0);
      000E31 01r00r00              3079 	ld	bc, #_deck
                                   3080 ;src/main.c:811: UINT8 suit_increment = 4u >> NUM_SUITS(settings);
      000E34 FAr6Cr01              3081 	ld	a, (#_settings)
      000E37 E6 03                 3082 	and	a, #0x03
      000E39 6F                    3083 	ld	l, a
      000E3A 11 04 00              3084 	ld	de, #0x0004
      000E3D 2C                    3085 	inc	l
      000E3E 18 04                 3086 	jr	00210$
      000E40                       3087 00209$:
      000E40 CB 3A                 3088 	srl	d
      000E42 CB 1B                 3089 	rr	e
      000E44                       3090 00210$:
      000E44 2D                    3091 	dec	l
      000E45 20 F9                 3092 	jr	NZ, 00209$
      000E47 F8 05                 3093 	ldhl	sp,	#5
      000E49 73                    3094 	ld	(hl), e
                                   3095 ;src/main.c:812: UINT8 i_max = suit_increment * 2u;
      000E4A 7E                    3096 	ld	a, (hl)
      000E4B 87                    3097 	add	a, a
      000E4C 23                    3098 	inc	hl
      000E4D 77                    3099 	ld	(hl), a
                                   3100 ;src/main.c:813: for (suit = 0; suit < 4u; suit += suit_increment) {
      000E4E AF                    3101 	xor	a, a
      000E4F F8 0B                 3102 	ldhl	sp,	#11
      000E51 77                    3103 	ld	(hl), a
                                   3104 ;src/main.c:814: for (rank = 0; rank < 13u; rank++) {
      000E52                       3105 00131$:
      000E52 F8 0B                 3106 	ldhl	sp,	#11
      000E54 7E                    3107 	ld	a, (hl)
      000E55 CB 37                 3108 	swap	a
      000E57 E6 F0                 3109 	and	a, #0xf0
      000E59 F8 07                 3110 	ldhl	sp,	#7
      000E5B 77                    3111 	ld	(hl), a
      000E5C AF                    3112 	xor	a, a
      000E5D F8 0C                 3113 	ldhl	sp,	#12
      000E5F 77                    3114 	ld	(hl), a
                                   3115 ;src/main.c:815: for (i = 0; i < i_max; i++) {
      000E60                       3116 00130$:
      000E60 F8 0C                 3117 	ldhl	sp,	#12
      000E62 7E                    3118 	ld	a, (hl)
      000E63 F8 07                 3119 	ldhl	sp,	#7
      000E65 B6                    3120 	or	a, (hl)
      000E66 23                    3121 	inc	hl
      000E67 77                    3122 	ld	(hl), a
      000E68 F8 0D                 3123 	ldhl	sp,	#13
      000E6A 79                    3124 	ld	a, c
      000E6B 22                    3125 	ld	(hl+), a
      000E6C 70                    3126 	ld	(hl), b
      000E6D AF                    3127 	xor	a, a
      000E6E 23                    3128 	inc	hl
      000E6F 77                    3129 	ld	(hl), a
      000E70                       3130 00112$:
      000E70 F8 0F                 3131 	ldhl	sp,	#15
      000E72 7E                    3132 	ld	a, (hl)
      000E73 F8 06                 3133 	ldhl	sp,	#6
      000E75 96                    3134 	sub	a, (hl)
      000E76 30 30                 3135 	jr	NC, 00143$
                                   3136 ;src/main.c:816: card->data = rank | (suit << BIT_OFFSET_CARD_SUIT);
                                   3137 ;c
      000E78 F8 0D                 3138 	ldhl	sp,#13
      000E7A 2A                    3139 	ld	a, (hl+)
      000E7B 5F                    3140 	ld	e, a
      000E7C 56                    3141 	ld	d, (hl)
      000E7D 21 02 00              3142 	ld	hl, #0x0002
      000E80 19                    3143 	add	hl, de
      000E81 E5                    3144 	push	hl
      000E82 7D                    3145 	ld	a, l
      000E83 F8 0B                 3146 	ldhl	sp,	#11
      000E85 77                    3147 	ld	(hl), a
      000E86 E1                    3148 	pop	hl
      000E87 7C                    3149 	ld	a, h
      000E88 F8 0A                 3150 	ldhl	sp,	#10
      000E8A 32                    3151 	ld	(hl-), a
      000E8B 2A                    3152 	ld	a, (hl+)
      000E8C 5F                    3153 	ld	e, a
      000E8D 3A                    3154 	ld	a, (hl-)
      000E8E 57                    3155 	ld	d, a
      000E8F 2B                    3156 	dec	hl
      000E90 7E                    3157 	ld	a, (hl)
      000E91 12                    3158 	ld	(de), a
                                   3159 ;src/main.c:817: card++;
                                   3160 ;c
      000E92 F8 0D                 3161 	ldhl	sp,#13
      000E94 2A                    3162 	ld	a, (hl+)
      000E95 5F                    3163 	ld	e, a
      000E96 56                    3164 	ld	d, (hl)
      000E97 21 03 00              3165 	ld	hl, #0x0003
      000E9A 19                    3166 	add	hl, de
      000E9B E5                    3167 	push	hl
      000E9C 7D                    3168 	ld	a, l
      000E9D F8 0F                 3169 	ldhl	sp,	#15
      000E9F 77                    3170 	ld	(hl), a
      000EA0 E1                    3171 	pop	hl
      000EA1 7C                    3172 	ld	a, h
      000EA2 F8 0E                 3173 	ldhl	sp,	#14
                                   3174 ;src/main.c:815: for (i = 0; i < i_max; i++) {
      000EA4 22                    3175 	ld	(hl+), a
      000EA5 34                    3176 	inc	(hl)
      000EA6 18 C8                 3177 	jr	00112$
      000EA8                       3178 00143$:
      000EA8 F8 0D                 3179 	ldhl	sp,#13
      000EAA 2A                    3180 	ld	a, (hl+)
      000EAB 4F                    3181 	ld	c, a
                                   3182 ;src/main.c:814: for (rank = 0; rank < 13u; rank++) {
      000EAC 3A                    3183 	ld	a, (hl-)
      000EAD 47                    3184 	ld	b, a
      000EAE 2B                    3185 	dec	hl
      000EAF 34                    3186 	inc	(hl)
      000EB0 7E                    3187 	ld	a, (hl)
      000EB1 D6 0D                 3188 	sub	a, #0x0d
      000EB3 38 AB                 3189 	jr	C, 00130$
                                   3190 ;src/main.c:813: for (suit = 0; suit < 4u; suit += suit_increment) {
      000EB5 2B                    3191 	dec	hl
      000EB6 7E                    3192 	ld	a, (hl)
      000EB7 F8 05                 3193 	ldhl	sp,	#5
      000EB9 86                    3194 	add	a, (hl)
      000EBA F8 0B                 3195 	ldhl	sp,	#11
      000EBC 77                    3196 	ld	(hl), a
      000EBD D6 04                 3197 	sub	a, #0x04
      000EBF 38 91                 3198 	jr	C, 00131$
                                   3199 ;src/main.c:823: card = IDX_PTR(deck, 103u);
      000EC1 23                    3200 	inc	hl
      000EC2 23                    3201 	inc	hl
      000EC3 3Er35                 3202 	ld	a, #<((_deck + 0x0135))
      000EC5 22                    3203 	ld	(hl+), a
      000EC6 36s01                 3204 	ld	(hl), #>((_deck + 0x0135))
                                   3205 ;src/main.c:824: for (i = 103u; i; i--) {
      000EC8 F8 02                 3206 	ldhl	sp,	#2
      000ECA 7D                    3207 	ld	a, l
      000ECB 54                    3208 	ld	d, h
      000ECC F8 07                 3209 	ldhl	sp,	#7
      000ECE 22                    3210 	ld	(hl+), a
      000ECF 7A                    3211 	ld	a, d
      000ED0 32                    3212 	ld	(hl-), a
      000ED1 2A                    3213 	ld	a, (hl+)
      000ED2 5E                    3214 	ld	e, (hl)
      000ED3 23                    3215 	inc	hl
      000ED4 22                    3216 	ld	(hl+), a
      000ED5 73                    3217 	ld	(hl), e
      000ED6 F8 0F                 3218 	ldhl	sp,	#15
      000ED8 36 67                 3219 	ld	(hl), #0x67
      000EDA                       3220 00118$:
                                   3221 ;src/main.c:825: Card *swap = IDX_PTR(deck, (UINT8)rand() % i);
      000EDA CDr00r00              3222 	call	_rand
      000EDD 7B                    3223 	ld	a, e
      000EDE F8 0F                 3224 	ldhl	sp,	#15
      000EE0 66                    3225 	ld	h, (hl)
      000EE1 E5                    3226 	push	hl
      000EE2 33                    3227 	inc	sp
      000EE3 F5                    3228 	push	af
      000EE4 33                    3229 	inc	sp
      000EE5 CDr00r00              3230 	call	__moduchar
      000EE8 E8 02                 3231 	add	sp, #2
      000EEA 4B                    3232 	ld	c, e
      000EEB 06 00                 3233 	ld	b, #0x00
      000EED 69                    3234 	ld	l, c
      000EEE 60                    3235 	ld	h, b
      000EEF 29                    3236 	add	hl, hl
      000EF0 09                    3237 	add	hl, bc
      000EF1 7D                    3238 	ld	a, l
      000EF2 C6r00                 3239 	add	a, #<(_deck)
      000EF4 4F                    3240 	ld	c, a
      000EF5 7C                    3241 	ld	a, h
      000EF6 CEs00                 3242 	adc	a, #>(_deck)
      000EF8 47                    3243 	ld	b, a
      000EF9 F8 0B                 3244 	ldhl	sp,	#11
      000EFB 79                    3245 	ld	a, c
      000EFC 22                    3246 	ld	(hl+), a
                                   3247 ;src/main.c:827: temp = *card;
      000EFD 78                    3248 	ld	a, b
      000EFE 22                    3249 	ld	(hl+), a
      000EFF 2A                    3250 	ld	a, (hl+)
      000F00 5F                    3251 	ld	e, a
      000F01 56                    3252 	ld	d, (hl)
      000F02 F8 07                 3253 	ldhl	sp,#7
      000F04 2A                    3254 	ld	a, (hl+)
      000F05 4F                    3255 	ld	c, a
      000F06 46                    3256 	ld	b, (hl)
      000F07 21 03 00              3257 	ld	hl, #0x0003
      000F0A E5                    3258 	push	hl
      000F0B D5                    3259 	push	de
      000F0C C5                    3260 	push	bc
      000F0D CDr00r00              3261 	call	___memcpy
      000F10 E8 06                 3262 	add	sp, #6
                                   3263 ;src/main.c:828: *card = *swap;
      000F12 F8 0B                 3264 	ldhl	sp,#11
      000F14 2A                    3265 	ld	a, (hl+)
      000F15 5F                    3266 	ld	e, a
      000F16 2A                    3267 	ld	a, (hl+)
      000F17 57                    3268 	ld	d, a
      000F18 2A                    3269 	ld	a, (hl+)
      000F19 4F                    3270 	ld	c, a
      000F1A 46                    3271 	ld	b, (hl)
      000F1B 21 03 00              3272 	ld	hl, #0x0003
      000F1E E5                    3273 	push	hl
      000F1F D5                    3274 	push	de
      000F20 C5                    3275 	push	bc
      000F21 CDr00r00              3276 	call	___memcpy
      000F24 E8 06                 3277 	add	sp, #6
                                   3278 ;src/main.c:829: *swap = temp;
      000F26 F8 09                 3279 	ldhl	sp,#9
      000F28 2A                    3280 	ld	a, (hl+)
      000F29 5F                    3281 	ld	e, a
      000F2A 2A                    3282 	ld	a, (hl+)
      000F2B 57                    3283 	ld	d, a
      000F2C 2A                    3284 	ld	a, (hl+)
      000F2D 4F                    3285 	ld	c, a
      000F2E 46                    3286 	ld	b, (hl)
      000F2F 21 03 00              3287 	ld	hl, #0x0003
      000F32 E5                    3288 	push	hl
      000F33 D5                    3289 	push	de
      000F34 C5                    3290 	push	bc
      000F35 CDr00r00              3291 	call	___memcpy
      000F38 E8 06                 3292 	add	sp, #6
                                   3293 ;src/main.c:830: card--;
      000F3A F8 0D                 3294 	ldhl	sp,#13
      000F3C 2A                    3295 	ld	a, (hl+)
      000F3D 5F                    3296 	ld	e, a
      000F3E 56                    3297 	ld	d, (hl)
      000F3F 21 03 00              3298 	ld	hl, #0x0003
      000F42 7B                    3299 	ld	a, e
      000F43 95                    3300 	sub	a, l
      000F44 5F                    3301 	ld	e, a
      000F45 7A                    3302 	ld	a, d
      000F46 9C                    3303 	sbc	a, h
      000F47 F8 0E                 3304 	ldhl	sp,	#14
      000F49 32                    3305 	ld	(hl-), a
                                   3306 ;src/main.c:824: for (i = 103u; i; i--) {
      000F4A 7B                    3307 	ld	a, e
      000F4B 22                    3308 	ld	(hl+), a
      000F4C 23                    3309 	inc	hl
      000F4D 35                    3310 	dec	(hl)
      000F4E 20 8A                 3311 	jr	NZ, 00118$
                                   3312 ;src/main.c:834: card = IDX_PTR(deck, 0);
      000F50 01r00r00              3313 	ld	bc, #_deck
                                   3314 ;src/main.c:835: for (i = 0; i < 44u; i++) {
      000F53 AF                    3315 	xor	a, a
      000F54 77                    3316 	ld	(hl), a
      000F55                       3317 00120$:
                                   3318 ;src/main.c:836: card->next_card = IDX_PTR(deck, i + 10u);
      000F55 F8 0F                 3319 	ldhl	sp,	#15
      000F57 5E                    3320 	ld	e, (hl)
      000F58 16 00                 3321 	ld	d, #0x00
      000F5A 6B                    3322 	ld	l, e
      000F5B 62                    3323 	ld	h, d
      000F5C 29                    3324 	add	hl, hl
      000F5D 19                    3325 	add	hl, de
      000F5E 11r00r00              3326 	ld	de, #_deck
      000F61 19                    3327 	add	hl, de
      000F62 11 1E 00              3328 	ld	de, #0x001e
      000F65 19                    3329 	add	hl, de
      000F66 5D                    3330 	ld	e, l
      000F67 54                    3331 	ld	d, h
      000F68 69                    3332 	ld	l, c
      000F69 60                    3333 	ld	h, b
      000F6A 7B                    3334 	ld	a, e
      000F6B 22                    3335 	ld	(hl+), a
      000F6C 72                    3336 	ld	(hl), d
                                   3337 ;src/main.c:837: card++;
      000F6D 03                    3338 	inc	bc
      000F6E 03                    3339 	inc	bc
      000F6F 03                    3340 	inc	bc
                                   3341 ;src/main.c:835: for (i = 0; i < 44u; i++) {
      000F70 F8 0F                 3342 	ldhl	sp,	#15
      000F72 34                    3343 	inc	(hl)
      000F73 7E                    3344 	ld	a, (hl)
      000F74 D6 2C                 3345 	sub	a, #0x2c
      000F76 38 DD                 3346 	jr	C, 00120$
      000F78 5E                    3347 	ld	e, (hl)
      000F79                       3348 00123$:
                                   3349 ;src/main.c:839: for (; i < 104u; i++) {
      000F79 7B                    3350 	ld	a, e
      000F7A D6 68                 3351 	sub	a, #0x68
      000F7C 30 11                 3352 	jr	NC, 00106$
                                   3353 ;src/main.c:840: card->data |= BITMASK_CARD_VISIBLE;
      000F7E 69                    3354 	ld	l, c
      000F7F 60                    3355 	ld	h, b
      000F80 23                    3356 	inc	hl
      000F81 23                    3357 	inc	hl
      000F82 CB F6                 3358 	set	6, (hl)
                                   3359 ;src/main.c:841: card->next_card = NULL;
      000F84 69                    3360 	ld	l, c
      000F85 60                    3361 	ld	h, b
      000F86 AF                    3362 	xor	a, a
      000F87 22                    3363 	ld	(hl+), a
      000F88 77                    3364 	ld	(hl), a
                                   3365 ;src/main.c:842: card++;
      000F89 03                    3366 	inc	bc
      000F8A 03                    3367 	inc	bc
      000F8B 03                    3368 	inc	bc
                                   3369 ;src/main.c:839: for (; i < 104u; i++) {
      000F8C 1C                    3370 	inc	e
      000F8D 18 EA                 3371 	jr	00123$
      000F8F                       3372 00106$:
                                   3373 ;src/main.c:845: card = IDX_PTR(deck, 0);
      000F8F F8 0B                 3374 	ldhl	sp,	#11
      000F91 3Er00                 3375 	ld	a, #<(_deck)
      000F93 22                    3376 	ld	(hl+), a
                                   3377 ;src/main.c:846: Pile *pile = IDX_PTR(piles, 0);
      000F94 3Es00                 3378 	ld	a, #>(_deck)
      000F96 22                    3379 	ld	(hl+), a
      000F97 3Er38                 3380 	ld	a, #<(_piles)
      000F99 22                    3381 	ld	(hl+), a
      000F9A 36s01                 3382 	ld	(hl), #>(_piles)
                                   3383 ;src/main.c:847: for (i = 0; i < 10; i++) {
      000F9C AF                    3384 	xor	a, a
      000F9D 23                    3385 	inc	hl
      000F9E 77                    3386 	ld	(hl), a
      000F9F                       3387 00125$:
                                   3388 ;src/main.c:848: pile->base = card;
      000F9F F8 0D                 3389 	ldhl	sp,#13
      000FA1 2A                    3390 	ld	a, (hl+)
      000FA2 5F                    3391 	ld	e, a
      000FA3 56                    3392 	ld	d, (hl)
      000FA4 F8 0B                 3393 	ldhl	sp,	#11
      000FA6 7E                    3394 	ld	a, (hl)
      000FA7 12                    3395 	ld	(de), a
      000FA8 13                    3396 	inc	de
      000FA9 23                    3397 	inc	hl
      000FAA 7E                    3398 	ld	a, (hl)
      000FAB 12                    3399 	ld	(de), a
                                   3400 ;src/main.c:850: pile->top = IDX_PTR(deck, 50u + i);
                                   3401 ;c
      000FAC 23                    3402 	inc	hl
      000FAD 2A                    3403 	ld	a, (hl+)
      000FAE 5F                    3404 	ld	e, a
      000FAF 56                    3405 	ld	d, (hl)
      000FB0 21 02 00              3406 	ld	hl, #0x0002
      000FB3 19                    3407 	add	hl, de
      000FB4 E5                    3408 	push	hl
      000FB5 7D                    3409 	ld	a, l
      000FB6 F8 07                 3410 	ldhl	sp,	#7
      000FB8 77                    3411 	ld	(hl), a
      000FB9 E1                    3412 	pop	hl
      000FBA 7C                    3413 	ld	a, h
      000FBB F8 06                 3414 	ldhl	sp,	#6
      000FBD 77                    3415 	ld	(hl), a
      000FBE F8 0F                 3416 	ldhl	sp,	#15
      000FC0 4E                    3417 	ld	c, (hl)
      000FC1 06 00                 3418 	ld	b, #0x00
      000FC3 69                    3419 	ld	l, c
      000FC4 60                    3420 	ld	h, b
      000FC5 29                    3421 	add	hl, hl
      000FC6 09                    3422 	add	hl, bc
      000FC7 33                    3423 	inc	sp
      000FC8 33                    3424 	inc	sp
      000FC9 E5                    3425 	push	hl
                                   3426 ;src/main.c:851: pile->height = 6u;
                                   3427 ;c
      000FCA F8 0D                 3428 	ldhl	sp,#13
      000FCC 2A                    3429 	ld	a, (hl+)
      000FCD 5F                    3430 	ld	e, a
      000FCE 56                    3431 	ld	d, (hl)
      000FCF 21 04 00              3432 	ld	hl, #0x0004
      000FD2 19                    3433 	add	hl, de
      000FD3 E5                    3434 	push	hl
      000FD4 7D                    3435 	ld	a, l
      000FD5 F8 09                 3436 	ldhl	sp,	#9
      000FD7 77                    3437 	ld	(hl), a
      000FD8 E1                    3438 	pop	hl
      000FD9 7C                    3439 	ld	a, h
      000FDA F8 08                 3440 	ldhl	sp,	#8
      000FDC 77                    3441 	ld	(hl), a
                                   3442 ;src/main.c:849: if (i < 4u) {
      000FDD F8 0F                 3443 	ldhl	sp,	#15
      000FDF 7E                    3444 	ld	a, (hl)
      000FE0 D6 04                 3445 	sub	a, #0x04
      000FE2 30 26                 3446 	jr	NC, 00108$
                                   3447 ;src/main.c:850: pile->top = IDX_PTR(deck, 50u + i);
                                   3448 ;c
      000FE4 D1                    3449 	pop	de
      000FE5 D5                    3450 	push	de
      000FE6 21r96r00              3451 	ld	hl, #(_deck + 0x0096)
      000FE9 19                    3452 	add	hl, de
      000FEA E5                    3453 	push	hl
      000FEB 7D                    3454 	ld	a, l
      000FEC F8 0B                 3455 	ldhl	sp,	#11
      000FEE 77                    3456 	ld	(hl), a
      000FEF E1                    3457 	pop	hl
      000FF0 7C                    3458 	ld	a, h
      000FF1 F8 0A                 3459 	ldhl	sp,	#10
      000FF3 77                    3460 	ld	(hl), a
      000FF4 F8 05                 3461 	ldhl	sp,#5
      000FF6 2A                    3462 	ld	a, (hl+)
      000FF7 5F                    3463 	ld	e, a
      000FF8 56                    3464 	ld	d, (hl)
      000FF9 F8 09                 3465 	ldhl	sp,	#9
      000FFB 7E                    3466 	ld	a, (hl)
      000FFC 12                    3467 	ld	(de), a
      000FFD 13                    3468 	inc	de
      000FFE 23                    3469 	inc	hl
      000FFF 7E                    3470 	ld	a, (hl)
      001000 12                    3471 	ld	(de), a
                                   3472 ;src/main.c:851: pile->height = 6u;
      001001 F8 07                 3473 	ldhl	sp,	#7
      001003 2A                    3474 	ld	a, (hl+)
      001004 66                    3475 	ld	h, (hl)
      001005 6F                    3476 	ld	l, a
      001006 36 06                 3477 	ld	(hl), #0x06
      001008 18 17                 3478 	jr	00109$
      00100A                       3479 00108$:
                                   3480 ;src/main.c:853: pile->top = IDX_PTR(deck, 40u + i);
                                   3481 ;c
      00100A 11r78r00              3482 	ld	de, #(_deck + 0x0078)
      00100D E1                    3483 	pop	hl
      00100E E5                    3484 	push	hl
      00100F 19                    3485 	add	hl, de
      001010 4D                    3486 	ld	c, l
      001011 44                    3487 	ld	b, h
      001012 F8 05                 3488 	ldhl	sp,	#5
      001014 2A                    3489 	ld	a, (hl+)
      001015 66                    3490 	ld	h, (hl)
      001016 6F                    3491 	ld	l, a
      001017 79                    3492 	ld	a, c
      001018 22                    3493 	ld	(hl+), a
      001019 70                    3494 	ld	(hl), b
                                   3495 ;src/main.c:854: pile->height = 5u;
      00101A F8 07                 3496 	ldhl	sp,	#7
      00101C 2A                    3497 	ld	a, (hl+)
      00101D 66                    3498 	ld	h, (hl)
      00101E 6F                    3499 	ld	l, a
      00101F 36 05                 3500 	ld	(hl), #0x05
      001021                       3501 00109$:
                                   3502 ;src/main.c:857: card++;
                                   3503 ;c
      001021 F8 0B                 3504 	ldhl	sp,#11
      001023 2A                    3505 	ld	a, (hl+)
      001024 5F                    3506 	ld	e, a
      001025 56                    3507 	ld	d, (hl)
      001026 21 03 00              3508 	ld	hl, #0x0003
      001029 19                    3509 	add	hl, de
      00102A E5                    3510 	push	hl
      00102B 7D                    3511 	ld	a, l
      00102C F8 0D                 3512 	ldhl	sp,	#13
      00102E 77                    3513 	ld	(hl), a
      00102F E1                    3514 	pop	hl
      001030 7C                    3515 	ld	a, h
      001031 F8 0C                 3516 	ldhl	sp,	#12
                                   3517 ;src/main.c:858: pile++;
                                   3518 ;c
      001033 22                    3519 	ld	(hl+), a
      001034 2A                    3520 	ld	a, (hl+)
      001035 5F                    3521 	ld	e, a
      001036 56                    3522 	ld	d, (hl)
      001037 21 05 00              3523 	ld	hl, #0x0005
      00103A 19                    3524 	add	hl, de
      00103B E5                    3525 	push	hl
      00103C 7D                    3526 	ld	a, l
      00103D F8 0F                 3527 	ldhl	sp,	#15
      00103F 77                    3528 	ld	(hl), a
      001040 E1                    3529 	pop	hl
      001041 7C                    3530 	ld	a, h
      001042 F8 0E                 3531 	ldhl	sp,	#14
                                   3532 ;src/main.c:847: for (i = 0; i < 10; i++) {
      001044 22                    3533 	ld	(hl+), a
      001045 34                    3534 	inc	(hl)
      001046 7E                    3535 	ld	a, (hl)
      001047 D6 0A                 3536 	sub	a, #0x0a
      001049 DAr9Fr0F              3537 	jp	C, 00125$
                                   3538 ;src/main.c:861: top_card_idx = 54u;
      00104C 21r6Ar01              3539 	ld	hl, #_top_card_idx
      00104F 36 36                 3540 	ld	(hl), #0x36
                                   3541 ;src/main.c:862: }
      001051 E8 10                 3542 	add	sp, #16
      001053 C9                    3543 	ret
                                   3544 ;src/main.c:864: UINT8 is_stack_coherent(Card *card)
                                   3545 ;	---------------------------------
                                   3546 ; Function is_stack_coherent
                                   3547 ; ---------------------------------
      001054                       3548 _is_stack_coherent::
      001054 E8 FE                 3549 	add	sp, #-2
                                   3550 ;src/main.c:866: while (card->next_card) {
      001056                       3551 00103$:
      001056 F8 04                 3552 	ldhl	sp,#4
      001058 2A                    3553 	ld	a, (hl+)
      001059 4F                    3554 	ld	c, a
      00105A 46                    3555 	ld	b, (hl)
      00105B 59                    3556 	ld	e, c
      00105C 50                    3557 	ld	d, b
      00105D 1A                    3558 	ld	a, (de)
      00105E F8 00                 3559 	ldhl	sp,	#0
      001060 22                    3560 	ld	(hl+), a
      001061 13                    3561 	inc	de
      001062 1A                    3562 	ld	a, (de)
      001063 77                    3563 	ld	(hl), a
      001064 3A                    3564 	ld	a, (hl-)
      001065 B6                    3565 	or	a, (hl)
      001066 28 27                 3566 	jr	Z, 00105$
                                   3567 ;src/main.c:867: UINT8 prev_data = card->data;
      001068 03                    3568 	inc	bc
      001069 03                    3569 	inc	bc
      00106A 78                    3570 	ld	a, b
      00106B 69                    3571 	ld	l, c
      00106C 67                    3572 	ld	h, a
      00106D 4E                    3573 	ld	c, (hl)
                                   3574 ;src/main.c:868: card = card->next_card;
      00106E F8 00                 3575 	ldhl	sp,	#0
      001070 2A                    3576 	ld	a, (hl+)
      001071 5E                    3577 	ld	e, (hl)
      001072 F8 04                 3578 	ldhl	sp,	#4
      001074 22                    3579 	ld	(hl+), a
                                   3580 ;src/main.c:869: if (prev_data != card->data + 1u)
      001075 7B                    3581 	ld	a, e
      001076 32                    3582 	ld	(hl-), a
      001077 2A                    3583 	ld	a, (hl+)
      001078 5F                    3584 	ld	e, a
      001079 56                    3585 	ld	d, (hl)
      00107A 13                    3586 	inc	de
      00107B 13                    3587 	inc	de
      00107C 1A                    3588 	ld	a, (de)
      00107D 5F                    3589 	ld	e, a
      00107E 16 00                 3590 	ld	d, #0x00
      001080 13                    3591 	inc	de
      001081 06 00                 3592 	ld	b, #0x00
      001083 79                    3593 	ld	a, c
      001084 93                    3594 	sub	a, e
      001085 20 04                 3595 	jr	NZ, 00123$
      001087 78                    3596 	ld	a, b
      001088 92                    3597 	sub	a, d
      001089 28 CB                 3598 	jr	Z, 00103$
      00108B                       3599 00123$:
                                   3600 ;src/main.c:870: return 0u;
      00108B 1E 00                 3601 	ld	e, #0x00
      00108D 18 02                 3602 	jr	00106$
      00108F                       3603 00105$:
                                   3604 ;src/main.c:872: return 1u;
      00108F 1E 01                 3605 	ld	e, #0x01
      001091                       3606 00106$:
                                   3607 ;src/main.c:873: }
      001091 E8 02                 3608 	add	sp, #2
      001093 C9                    3609 	ret
                                   3610 ;src/main.c:875: inline void deal(void)
                                   3611 ;	---------------------------------
                                   3612 ; Function deal
                                   3613 ; ---------------------------------
      001094                       3614 _deal::
      001094 E8 FB                 3615 	add	sp, #-5
                                   3616 ;src/main.c:878: Pile *pile = IDX_PTR(piles, 0);
      001096 01r38r01              3617 	ld	bc, #_piles
                                   3618 ;src/main.c:881: for (i = 0; i < 10u; i++) {
      001099 1E 00                 3619 	ld	e, #0x00
      00109B                       3620 00105$:
                                   3621 ;src/main.c:882: if (!pile->height)
      00109B 21 04 00              3622 	ld	hl, #0x0004
      00109E 09                    3623 	add	hl, bc
      00109F 7E                    3624 	ld	a, (hl)
      0010A0 B7                    3625 	or	a, a
                                   3626 ;src/main.c:883: return;
      0010A1 28 72                 3627 	jr	Z, 00110$
                                   3628 ;src/main.c:884: pile++;
      0010A3 03                    3629 	inc	bc
      0010A4 03                    3630 	inc	bc
      0010A5 03                    3631 	inc	bc
      0010A6 03                    3632 	inc	bc
      0010A7 03                    3633 	inc	bc
                                   3634 ;src/main.c:881: for (i = 0; i < 10u; i++) {
      0010A8 1C                    3635 	inc	e
      0010A9 7B                    3636 	ld	a, e
      0010AA D6 0A                 3637 	sub	a, #0x0a
      0010AC 38 ED                 3638 	jr	C, 00105$
                                   3639 ;src/main.c:887: pile = IDX_PTR(piles, 0);
      0010AE F8 02                 3640 	ldhl	sp,	#2
      0010B0 3Er38                 3641 	ld	a, #<(_piles)
      0010B2 22                    3642 	ld	(hl+), a
      0010B3 36s01                 3643 	ld	(hl), #>(_piles)
                                   3644 ;src/main.c:888: Card *deck_top = IDX_PTR(deck, top_card_idx);
      0010B5 21r6Ar01              3645 	ld	hl, #_top_card_idx
      0010B8 4E                    3646 	ld	c, (hl)
      0010B9 06 00                 3647 	ld	b, #0x00
      0010BB 69                    3648 	ld	l, c
      0010BC 60                    3649 	ld	h, b
      0010BD 29                    3650 	add	hl, hl
      0010BE 09                    3651 	add	hl, bc
      0010BF 01r00r00              3652 	ld	bc,#_deck
      0010C2 09                    3653 	add	hl,bc
      0010C3 4D                    3654 	ld	c, l
      0010C4 44                    3655 	ld	b, h
                                   3656 ;src/main.c:889: top_card_idx += 10u;
      0010C5 21r6Ar01              3657 	ld	hl, #_top_card_idx
      0010C8 7E                    3658 	ld	a, (hl)
      0010C9 C6 0A                 3659 	add	a, #0x0a
      0010CB 77                    3660 	ld	(hl), a
                                   3661 ;src/main.c:892: for (i = 0; i < 10u; i++) {
      0010CC F8 04                 3662 	ldhl	sp,	#4
      0010CE 36 0A                 3663 	ld	(hl), #0x0a
      0010D0                       3664 00109$:
                                   3665 ;src/main.c:893: pile->top->next_card = deck_top;
                                   3666 ;c
      0010D0 F8 02                 3667 	ldhl	sp,#2
      0010D2 2A                    3668 	ld	a, (hl+)
      0010D3 5F                    3669 	ld	e, a
      0010D4 56                    3670 	ld	d, (hl)
      0010D5 21 02 00              3671 	ld	hl, #0x0002
      0010D8 19                    3672 	add	hl, de
      0010D9 33                    3673 	inc	sp
      0010DA 33                    3674 	inc	sp
      0010DB 5D                    3675 	ld	e, l
      0010DC 54                    3676 	ld	d, h
      0010DD D5                    3677 	push	de
      0010DE 1A                    3678 	ld	a, (de)
      0010DF 6F                    3679 	ld	l, a
      0010E0 13                    3680 	inc	de
      0010E1 1A                    3681 	ld	a, (de)
      0010E2 67                    3682 	ld	h, a
      0010E3 79                    3683 	ld	a, c
      0010E4 22                    3684 	ld	(hl+), a
      0010E5 70                    3685 	ld	(hl), b
                                   3686 ;src/main.c:894: pile->top = deck_top;
      0010E6 E1                    3687 	pop	hl
      0010E7 E5                    3688 	push	hl
      0010E8 79                    3689 	ld	a, c
      0010E9 22                    3690 	ld	(hl+), a
      0010EA 70                    3691 	ld	(hl), b
                                   3692 ;src/main.c:895: pile->height++;
                                   3693 ;c
      0010EB F8 02                 3694 	ldhl	sp,#2
      0010ED 2A                    3695 	ld	a, (hl+)
      0010EE 5F                    3696 	ld	e, a
      0010EF 56                    3697 	ld	d, (hl)
      0010F0 21 04 00              3698 	ld	hl, #0x0004
      0010F3 19                    3699 	add	hl, de
      0010F4 5D                    3700 	ld	e, l
      0010F5 54                    3701 	ld	d, h
      0010F6 1A                    3702 	ld	a, (de)
      0010F7 3C                    3703 	inc	a
      0010F8 12                    3704 	ld	(de), a
                                   3705 ;src/main.c:896: deck_top++;
      0010F9 03                    3706 	inc	bc
      0010FA 03                    3707 	inc	bc
      0010FB 03                    3708 	inc	bc
                                   3709 ;src/main.c:897: pile++;
                                   3710 ;c
      0010FC F8 02                 3711 	ldhl	sp,#2
      0010FE 2A                    3712 	ld	a, (hl+)
      0010FF 5F                    3713 	ld	e, a
      001100 56                    3714 	ld	d, (hl)
      001101 21 05 00              3715 	ld	hl, #0x0005
      001104 19                    3716 	add	hl, de
      001105 E5                    3717 	push	hl
      001106 7D                    3718 	ld	a, l
      001107 F8 04                 3719 	ldhl	sp,	#4
      001109 77                    3720 	ld	(hl), a
      00110A E1                    3721 	pop	hl
      00110B 7C                    3722 	ld	a, h
      00110C F8 03                 3723 	ldhl	sp,	#3
      00110E 22                    3724 	ld	(hl+), a
                                   3725 ;src/main.c:892: for (i = 0; i < 10u; i++) {
      00110F 35                    3726 	dec	(hl)
      001110 20 BE                 3727 	jr	NZ, 00109$
                                   3728 ;src/main.c:900: dynamic_metasprite_deal();
      001112 CDr3Dr0A              3729 	call	_dynamic_metasprite_deal
      001115                       3730 00110$:
                                   3731 ;src/main.c:901: }
      001115 E8 05                 3732 	add	sp, #5
      001117 C9                    3733 	ret
                                   3734 ;src/main.c:903: void pile_append_cursor_stack(Pile *pile)
                                   3735 ;	---------------------------------
                                   3736 ; Function pile_append_cursor_stack
                                   3737 ; ---------------------------------
      001118                       3738 _pile_append_cursor_stack::
      001118 E8 F3                 3739 	add	sp, #-13
                                   3740 ;src/main.c:905: if (pile->height)
      00111A F8 0F                 3741 	ldhl	sp,	#15
      00111C 2A                    3742 	ld	a, (hl+)
      00111D 5E                    3743 	ld	e, (hl)
      00111E F8 00                 3744 	ldhl	sp,	#0
      001120 22                    3745 	ld	(hl+), a
      001121 73                    3746 	ld	(hl), e
                                   3747 ;c
      001122 D1                    3748 	pop	de
      001123 D5                    3749 	push	de
      001124 21 04 00              3750 	ld	hl, #0x0004
      001127 19                    3751 	add	hl, de
      001128 E5                    3752 	push	hl
      001129 7D                    3753 	ld	a, l
      00112A F8 04                 3754 	ldhl	sp,	#4
      00112C 77                    3755 	ld	(hl), a
      00112D E1                    3756 	pop	hl
      00112E 7C                    3757 	ld	a, h
      00112F F8 03                 3758 	ldhl	sp,	#3
      001131 32                    3759 	ld	(hl-), a
      001132 2A                    3760 	ld	a, (hl+)
      001133 5F                    3761 	ld	e, a
      001134 56                    3762 	ld	d, (hl)
      001135 1A                    3763 	ld	a, (de)
      001136 F8 0C                 3764 	ldhl	sp,	#12
      001138 77                    3765 	ld	(hl), a
                                   3766 ;src/main.c:906: pile->top->next_card = cursor.held_card;
                                   3767 ;c
      001139 D1                    3768 	pop	de
      00113A D5                    3769 	push	de
      00113B 21 02 00              3770 	ld	hl, #0x0002
      00113E 19                    3771 	add	hl, de
      00113F E5                    3772 	push	hl
      001140 7D                    3773 	ld	a, l
      001141 F8 06                 3774 	ldhl	sp,	#6
      001143 77                    3775 	ld	(hl), a
      001144 E1                    3776 	pop	hl
      001145 7C                    3777 	ld	a, h
      001146 F8 05                 3778 	ldhl	sp,	#5
      001148 77                    3779 	ld	(hl), a
                                   3780 ;src/main.c:905: if (pile->height)
      001149 F8 0C                 3781 	ldhl	sp,	#12
      00114B 7E                    3782 	ld	a, (hl)
      00114C B7                    3783 	or	a, a
      00114D 28 1C                 3784 	jr	Z, 00102$
                                   3785 ;src/main.c:906: pile->top->next_card = cursor.held_card;
      00114F F8 04                 3786 	ldhl	sp,#4
      001151 2A                    3787 	ld	a, (hl+)
      001152 5F                    3788 	ld	e, a
      001153 56                    3789 	ld	d, (hl)
      001154 1A                    3790 	ld	a, (de)
      001155 F8 0B                 3791 	ldhl	sp,	#11
      001157 22                    3792 	ld	(hl+), a
      001158 13                    3793 	inc	de
      001159 1A                    3794 	ld	a, (de)
      00115A 77                    3795 	ld	(hl), a
      00115B 21r84r01              3796 	ld	hl, #_cursor
      00115E 2A                    3797 	ld	a, (hl+)
      00115F 4F                    3798 	ld	c, a
      001160 46                    3799 	ld	b, (hl)
      001161 F8 0B                 3800 	ldhl	sp,	#11
      001163 2A                    3801 	ld	a, (hl+)
      001164 66                    3802 	ld	h, (hl)
      001165 6F                    3803 	ld	l, a
      001166 79                    3804 	ld	a, c
      001167 22                    3805 	ld	(hl+), a
      001168 70                    3806 	ld	(hl), b
      001169 18 13                 3807 	jr	00103$
      00116B                       3808 00102$:
                                   3809 ;src/main.c:908: pile->base = cursor.held_card;
      00116B 11r84r01              3810 	ld	de, #_cursor
      00116E 1A                    3811 	ld	a, (de)
      00116F F8 0B                 3812 	ldhl	sp,	#11
      001171 22                    3813 	ld	(hl+), a
      001172 13                    3814 	inc	de
      001173 1A                    3815 	ld	a, (de)
      001174 77                    3816 	ld	(hl), a
      001175 D1                    3817 	pop	de
      001176 D5                    3818 	push	de
      001177 2B                    3819 	dec	hl
      001178 7E                    3820 	ld	a, (hl)
      001179 12                    3821 	ld	(de), a
      00117A 13                    3822 	inc	de
      00117B 23                    3823 	inc	hl
      00117C 7E                    3824 	ld	a, (hl)
      00117D 12                    3825 	ld	(de), a
      00117E                       3826 00103$:
                                   3827 ;src/main.c:910: Pile *src_pile = IDX_PTR(piles, cursor.pile_idx);
      00117E 01r38r01              3828 	ld	bc, #_piles+0
      001181 FAr8Ar01              3829 	ld	a, (#(_cursor + 0x0006) + 0)
      001184 5F                    3830 	ld	e, a
      001185 16 00                 3831 	ld	d, #0x00
      001187 6B                    3832 	ld	l, e
      001188 62                    3833 	ld	h, d
      001189 29                    3834 	add	hl, hl
      00118A 29                    3835 	add	hl, hl
      00118B 19                    3836 	add	hl, de
      00118C 09                    3837 	add	hl, bc
      00118D 4D                    3838 	ld	c, l
      00118E 7C                    3839 	ld	a, h
      00118F F8 06                 3840 	ldhl	sp,	#6
      001191 71                    3841 	ld	(hl), c
      001192 23                    3842 	inc	hl
      001193 77                    3843 	ld	(hl), a
                                   3844 ;src/main.c:911: Card *top_card = cursor.held_card;
      001194 11r84r01              3845 	ld	de, #_cursor
      001197 1A                    3846 	ld	a, (de)
      001198 23                    3847 	inc	hl
      001199 22                    3848 	ld	(hl+), a
      00119A 13                    3849 	inc	de
      00119B 1A                    3850 	ld	a, (de)
      00119C 77                    3851 	ld	(hl), a
                                   3852 ;src/main.c:912: while (top_card->next_card)
      00119D                       3853 00104$:
      00119D F8 08                 3854 	ldhl	sp,#8
      00119F 2A                    3855 	ld	a, (hl+)
      0011A0 5F                    3856 	ld	e, a
      0011A1 56                    3857 	ld	d, (hl)
      0011A2 1A                    3858 	ld	a, (de)
      0011A3 23                    3859 	inc	hl
      0011A4 23                    3860 	inc	hl
      0011A5 22                    3861 	ld	(hl+), a
      0011A6 13                    3862 	inc	de
      0011A7 1A                    3863 	ld	a, (de)
      0011A8 77                    3864 	ld	(hl), a
      0011A9 3A                    3865 	ld	a, (hl-)
      0011AA B6                    3866 	or	a, (hl)
      0011AB 28 08                 3867 	jr	Z, 00106$
                                   3868 ;src/main.c:913: top_card = top_card->next_card;
      0011AD 2A                    3869 	ld	a, (hl+)
      0011AE 5E                    3870 	ld	e, (hl)
      0011AF F8 08                 3871 	ldhl	sp,	#8
      0011B1 22                    3872 	ld	(hl+), a
      0011B2 73                    3873 	ld	(hl), e
      0011B3 18 E8                 3874 	jr	00104$
      0011B5                       3875 00106$:
                                   3876 ;src/main.c:914: pile->top = top_card;
      0011B5 F8 04                 3877 	ldhl	sp,#4
      0011B7 2A                    3878 	ld	a, (hl+)
      0011B8 5F                    3879 	ld	e, a
      0011B9 56                    3880 	ld	d, (hl)
      0011BA F8 08                 3881 	ldhl	sp,	#8
      0011BC 7E                    3882 	ld	a, (hl)
      0011BD 12                    3883 	ld	(de), a
      0011BE 13                    3884 	inc	de
      0011BF 23                    3885 	inc	hl
      0011C0 7E                    3886 	ld	a, (hl)
      0011C1 12                    3887 	ld	(de), a
                                   3888 ;src/main.c:915: cursor.height = pile->height - !!pile->height;
      0011C2 F8 02                 3889 	ldhl	sp,#2
      0011C4 2A                    3890 	ld	a, (hl+)
      0011C5 5F                    3891 	ld	e, a
      0011C6 56                    3892 	ld	d, (hl)
      0011C7 1A                    3893 	ld	a, (de)
      0011C8 47                    3894 	ld	b, a
      0011C9 D6 01                 3895 	sub	a,#0x01
      0011CB 3E 00                 3896 	ld	a, #0x00
      0011CD 17                    3897 	rla
      0011CE EE 01                 3898 	xor	a, #0x01
      0011D0 4F                    3899 	ld	c, a
      0011D1 78                    3900 	ld	a, b
      0011D2 91                    3901 	sub	a, c
      0011D3 EAr8Br01              3902 	ld	(#(_cursor + 0x0007)),a
                                   3903 ;src/main.c:916: pile->height += cursor.held_stack_size;
      0011D6 F8 02                 3904 	ldhl	sp,#2
      0011D8 2A                    3905 	ld	a, (hl+)
      0011D9 5F                    3906 	ld	e, a
      0011DA 56                    3907 	ld	d, (hl)
      0011DB 1A                    3908 	ld	a, (de)
      0011DC 4F                    3909 	ld	c, a
      0011DD FAr88r01              3910 	ld	a, (#(_cursor + 0x0004) + 0)
      0011E0 81                    3911 	add	a, c
      0011E1 4F                    3912 	ld	c, a
      0011E2 2B                    3913 	dec	hl
      0011E3 2A                    3914 	ld	a, (hl+)
      0011E4 66                    3915 	ld	h, (hl)
      0011E5 6F                    3916 	ld	l, a
      0011E6 71                    3917 	ld	(hl), c
                                   3918 ;src/main.c:917: if (cursor.hand_pile_idx != cursor.pile_idx) {
      0011E7 FAr89r01              3919 	ld	a, (#(_cursor + 0x0005) + 0)
      0011EA 21r8Ar01              3920 	ld	hl, #(_cursor + 0x0006)
      0011ED 4E                    3921 	ld	c, (hl)
      0011EE 91                    3922 	sub	a, c
      0011EF CArE9r12              3923 	jp	Z,00116$
                                   3924 ;src/main.c:918: UINT8 piles_to_clear = 0;
      0011F2 AF                    3925 	xor	a, a
      0011F3 F8 0C                 3926 	ldhl	sp,	#12
      0011F5 77                    3927 	ld	(hl), a
                                   3928 ;src/main.c:919: if (src_pile->height == 13u && is_stack_coherent(src_pile->base)) {
                                   3929 ;c
      0011F6 F8 06                 3930 	ldhl	sp,#6
      0011F8 2A                    3931 	ld	a, (hl+)
      0011F9 5F                    3932 	ld	e, a
      0011FA 56                    3933 	ld	d, (hl)
      0011FB 21 04 00              3934 	ld	hl, #0x0004
      0011FE 19                    3935 	add	hl, de
      0011FF E5                    3936 	push	hl
      001200 7D                    3937 	ld	a, l
      001201 F8 0C                 3938 	ldhl	sp,	#12
      001203 77                    3939 	ld	(hl), a
      001204 E1                    3940 	pop	hl
      001205 7C                    3941 	ld	a, h
      001206 F8 0B                 3942 	ldhl	sp,	#11
      001208 32                    3943 	ld	(hl-), a
      001209 2A                    3944 	ld	a, (hl+)
      00120A 5F                    3945 	ld	e, a
      00120B 56                    3946 	ld	d, (hl)
      00120C 1A                    3947 	ld	a, (de)
      00120D D6 0D                 3948 	sub	a, #0x0d
      00120F 20 1A                 3949 	jr	NZ, 00108$
      001211 F8 06                 3950 	ldhl	sp,#6
      001213 2A                    3951 	ld	a, (hl+)
      001214 5F                    3952 	ld	e, a
      001215 56                    3953 	ld	d, (hl)
      001216 1A                    3954 	ld	a, (de)
      001217 4F                    3955 	ld	c, a
      001218 13                    3956 	inc	de
      001219 1A                    3957 	ld	a, (de)
      00121A 47                    3958 	ld	b, a
      00121B C5                    3959 	push	bc
      00121C CDr54r10              3960 	call	_is_stack_coherent
      00121F E8 02                 3961 	add	sp, #2
      001221 7B                    3962 	ld	a, e
      001222 B7                    3963 	or	a, a
      001223 28 06                 3964 	jr	Z, 00108$
                                   3965 ;src/main.c:920: piles_to_clear = cursor.pile_idx;
      001225 FAr8Ar01              3966 	ld	a, (#(_cursor + 0x0006) + 0)
      001228 F8 0C                 3967 	ldhl	sp,	#12
      00122A 77                    3968 	ld	(hl), a
      00122B                       3969 00108$:
                                   3970 ;src/main.c:922: if (pile->height == 13u && is_stack_coherent(pile->base)) {
      00122B F8 02                 3971 	ldhl	sp,#2
      00122D 2A                    3972 	ld	a, (hl+)
      00122E 5F                    3973 	ld	e, a
      00122F 56                    3974 	ld	d, (hl)
      001230 1A                    3975 	ld	a, (de)
      001231 D6 0D                 3976 	sub	a, #0x0d
      001233 20 32                 3977 	jr	NZ, 00111$
      001235 D1                    3978 	pop	de
      001236 D5                    3979 	push	de
      001237 1A                    3980 	ld	a, (de)
      001238 4F                    3981 	ld	c, a
      001239 13                    3982 	inc	de
      00123A 1A                    3983 	ld	a, (de)
      00123B 47                    3984 	ld	b, a
      00123C C5                    3985 	push	bc
      00123D CDr54r10              3986 	call	_is_stack_coherent
      001240 E8 02                 3987 	add	sp, #2
      001242 7B                    3988 	ld	a, e
      001243 B7                    3989 	or	a, a
      001244 28 21                 3990 	jr	Z, 00111$
                                   3991 ;src/main.c:923: cursor.height = 0;
      001246 21r8Br01              3992 	ld	hl, #(_cursor + 0x0007)
      001249 36 00                 3993 	ld	(hl), #0x00
                                   3994 ;src/main.c:917: if (cursor.hand_pile_idx != cursor.pile_idx) {
      00124B FAr89r01              3995 	ld	a, (#(_cursor + 0x0005) + 0)
      00124E F8 07                 3996 	ldhl	sp,	#7
      001250 77                    3997 	ld	(hl), a
                                   3998 ;src/main.c:924: piles_to_clear |= piles_to_clear ? cursor.hand_pile_idx << 4u : cursor.hand_pile_idx;
      001251 F8 0C                 3999 	ldhl	sp,	#12
      001253 7E                    4000 	ld	a, (hl)
      001254 B7                    4001 	or	a, a
      001255 28 09                 4002 	jr	Z, 00119$
      001257 F8 07                 4003 	ldhl	sp,	#7
      001259 7E                    4004 	ld	a, (hl)
      00125A CB 37                 4005 	swap	a
      00125C E6 F0                 4006 	and	a, #0xf0
      00125E 18 03                 4007 	jr	00120$
      001260                       4008 00119$:
      001260 F8 07                 4009 	ldhl	sp,	#7
      001262 7E                    4010 	ld	a, (hl)
      001263                       4011 00120$:
      001263 F8 0C                 4012 	ldhl	sp,	#12
      001265 B6                    4013 	or	a, (hl)
      001266 77                    4014 	ld	(hl), a
      001267                       4015 00111$:
                                   4016 ;src/main.c:927: if (cursor.card_to_show)
      001267 11r86r01              4017 	ld	de, #(_cursor + 0x0002)
      00126A 1A                    4018 	ld	a, (de)
      00126B F8 06                 4019 	ldhl	sp,	#6
      00126D 22                    4020 	ld	(hl+), a
      00126E 13                    4021 	inc	de
      00126F 1A                    4022 	ld	a, (de)
      001270 77                    4023 	ld	(hl), a
      001271 3A                    4024 	ld	a, (hl-)
      001272 B6                    4025 	or	a, (hl)
      001273 28 07                 4026 	jr	Z, 00114$
                                   4027 ;src/main.c:928: cursor.card_to_show->data |= BITMASK_CARD_VISIBLE;
      001275 2A                    4028 	ld	a, (hl+)
      001276 66                    4029 	ld	h, (hl)
      001277 6F                    4030 	ld	l, a
      001278 23                    4031 	inc	hl
      001279 23                    4032 	inc	hl
      00127A CB F6                 4033 	set	6, (hl)
      00127C                       4034 00114$:
                                   4035 ;src/main.c:934: cursor.held_card,
      00127C 11r84r01              4036 	ld	de, #_cursor
      00127F 1A                    4037 	ld	a, (de)
      001280 F8 06                 4038 	ldhl	sp,	#6
      001282 22                    4039 	ld	(hl+), a
      001283 13                    4040 	inc	de
      001284 1A                    4041 	ld	a, (de)
      001285 77                    4042 	ld	(hl), a
                                   4043 ;src/main.c:933: cursor.held_stack_size,
      001286 21r88r01              4044 	ld	hl, #(_cursor + 0x0004)
      001289 4E                    4045 	ld	c, (hl)
                                   4046 ;src/main.c:932: (pile->height + 3u - cursor.held_stack_size) * 8u,
      00128A F8 02                 4047 	ldhl	sp,#2
      00128C 2A                    4048 	ld	a, (hl+)
      00128D 5F                    4049 	ld	e, a
      00128E 56                    4050 	ld	d, (hl)
      00128F 1A                    4051 	ld	a, (de)
      001290 C6 03                 4052 	add	a, #0x03
      001292 91                    4053 	sub	a, c
      001293 87                    4054 	add	a, a
      001294 87                    4055 	add	a, a
      001295 87                    4056 	add	a, a
      001296 23                    4057 	inc	hl
      001297 77                    4058 	ld	(hl), a
                                   4059 ;src/main.c:931: (src_pile->height + 2u + cursor.held_stack_size) * 8u, cursor.hand_pile_idx * 16u,
      001298 FAr89r01              4060 	ld	a, (#(_cursor + 0x0005) + 0)
      00129B CB 37                 4061 	swap	a
      00129D E6 F0                 4062 	and	a, #0xf0
      00129F 23                    4063 	inc	hl
      0012A0 77                    4064 	ld	(hl), a
      0012A1 F8 0A                 4065 	ldhl	sp,#10
      0012A3 2A                    4066 	ld	a, (hl+)
      0012A4 5F                    4067 	ld	e, a
      0012A5 56                    4068 	ld	d, (hl)
      0012A6 1A                    4069 	ld	a, (de)
      0012A7 C6 02                 4070 	add	a, #0x02
      0012A9 81                    4071 	add	a, c
      0012AA 87                    4072 	add	a, a
      0012AB 87                    4073 	add	a, a
      0012AC 87                    4074 	add	a, a
      0012AD 77                    4075 	ld	(hl), a
                                   4076 ;src/main.c:930: cursor.pile_idx * 16u,
      0012AE FAr8Ar01              4077 	ld	a, (#(_cursor + 0x0006) + 0)
      0012B1 CB 37                 4078 	swap	a
      0012B3 E6 F0                 4079 	and	a, #0xf0
                                   4080 ;src/main.c:929: dynamic_metasprite_fold(top_card->data,
      0012B5 F8 08                 4081 	ldhl	sp,	#8
      0012B7 F5                    4082 	push	af
      0012B8 2A                    4083 	ld	a, (hl+)
      0012B9 66                    4084 	ld	h, (hl)
      0012BA 6F                    4085 	ld	l, a
      0012BB F1                    4086 	pop	af
      0012BC 23                    4087 	inc	hl
      0012BD 23                    4088 	inc	hl
      0012BE 5E                    4089 	ld	e, (hl)
      0012BF F8 0C                 4090 	ldhl	sp,	#12
      0012C1 66                    4091 	ld	h, (hl)
      0012C2 E5                    4092 	push	hl
      0012C3 33                    4093 	inc	sp
      0012C4 26 80                 4094 	ld	h, #0x80
      0012C6 E5                    4095 	push	hl
      0012C7 33                    4096 	inc	sp
      0012C8 F8 08                 4097 	ldhl	sp,	#8
      0012CA F5                    4098 	push	af
      0012CB 2A                    4099 	ld	a, (hl+)
      0012CC 66                    4100 	ld	h, (hl)
      0012CD 6F                    4101 	ld	l, a
      0012CE F1                    4102 	pop	af
      0012CF E5                    4103 	push	hl
      0012D0 61                    4104 	ld	h, c
      0012D1 E5                    4105 	push	hl
      0012D2 33                    4106 	inc	sp
      0012D3 F8 09                 4107 	ldhl	sp,	#9
      0012D5 66                    4108 	ld	h, (hl)
      0012D6 E5                    4109 	push	hl
      0012D7 33                    4110 	inc	sp
      0012D8 F8 0B                 4111 	ldhl	sp,	#11
      0012DA 66                    4112 	ld	h, (hl)
      0012DB E5                    4113 	push	hl
      0012DC 33                    4114 	inc	sp
      0012DD F8 12                 4115 	ldhl	sp,	#18
      0012DF 66                    4116 	ld	h, (hl)
      0012E0 E5                    4117 	push	hl
      0012E1 33                    4118 	inc	sp
      0012E2 57                    4119 	ld	d,a
      0012E3 D5                    4120 	push	de
      0012E4 CDrE6r08              4121 	call	_dynamic_metasprite_fold
      0012E7 E8 0A                 4122 	add	sp, #10
      0012E9                       4123 00116$:
                                   4124 ;src/main.c:940: cursor.held_card = NULL;
      0012E9 21r84r01              4125 	ld	hl, #_cursor
      0012EC AF                    4126 	xor	a, a
      0012ED 22                    4127 	ld	(hl+), a
      0012EE 77                    4128 	ld	(hl), a
                                   4129 ;src/main.c:941: cursor.pile_idx = cursor.hand_pile_idx;
      0012EF FAr89r01              4130 	ld	a, (#(_cursor + 0x0005) + 0)
      0012F2 EAr8Ar01              4131 	ld	(#(_cursor + 0x0006)),a
                                   4132 ;src/main.c:942: flags |= FLAG_REDRAW_CURSOR;
      0012F5 21r6Br01              4133 	ld	hl, #_flags
      0012F8 7E                    4134 	ld	a, (hl)
      0012F9 F6 01                 4135 	or	a, #0x01
      0012FB 77                    4136 	ld	(hl), a
                                   4137 ;src/main.c:943: }
      0012FC E8 0D                 4138 	add	sp, #13
      0012FE C9                    4139 	ret
                                   4140 ;src/main.c:949: void set_cursor_setting(void)
                                   4141 ;	---------------------------------
                                   4142 ; Function set_cursor_setting
                                   4143 ; ---------------------------------
      0012FF                       4144 _set_cursor_setting::
                                   4145 ;src/main.c:951: switch (cursor.pile_idx) {
      0012FF 21r8Ar01              4146 	ld	hl, #_cursor + 6
      001302 4E                    4147 	ld	c, (hl)
                                   4148 ;src/main.c:954: settings |= cursor.height;
      001303 11r8Br01              4149 	ld	de, #_cursor + 7
                                   4150 ;src/main.c:951: switch (cursor.pile_idx) {
      001306 79                    4151 	ld	a, c
      001307 B7                    4152 	or	a, a
      001308 28 0E                 4153 	jr	Z, 00101$
      00130A 79                    4154 	ld	a, c
      00130B 3D                    4155 	dec	a
      00130C 28 17                 4156 	jr	Z, 00102$
      00130E 79                    4157 	ld	a,c
      00130F FE 02                 4158 	cp	a,#0x02
      001311 28 28                 4159 	jr	Z, 00103$
      001313 D6 03                 4160 	sub	a, #0x03
      001315 28 33                 4161 	jr	Z, 00104$
      001317 C9                    4162 	ret
                                   4163 ;src/main.c:952: case 0u:
      001318                       4164 00101$:
                                   4165 ;src/main.c:953: settings &= ~BITMASK_SETTING_NUM_SUITS;
      001318 21r6Cr01              4166 	ld	hl, #_settings
      00131B 7E                    4167 	ld	a, (hl)
      00131C E6 FC                 4168 	and	a, #0xfc
      00131E 77                    4169 	ld	(hl), a
                                   4170 ;src/main.c:954: settings |= cursor.height;
      00131F 1A                    4171 	ld	a, (de)
      001320 B6                    4172 	or	a, (hl)
      001321 77                    4173 	ld	(hl), a
                                   4174 ;src/main.c:955: draw_setting_frame_metasprites();
                                   4175 ;src/main.c:956: break;
      001322 C3r04r04              4176 	jp  _draw_setting_frame_metasprites
                                   4177 ;src/main.c:957: case 1u:
      001325                       4178 00102$:
                                   4179 ;src/main.c:958: settings &= ~BITMASK_SETTING_MUSIC;
      001325 21r6Cr01              4180 	ld	hl, #_settings
      001328 7E                    4181 	ld	a, (hl)
      001329 E6 EF                 4182 	and	a, #0xef
      00132B 77                    4183 	ld	(hl), a
                                   4184 ;src/main.c:959: settings |= !cursor.height << BIT_OFFSET_SETTING_MUSIC;
      00132C 1A                    4185 	ld	a, (de)
      00132D D6 01                 4186 	sub	a,#0x01
      00132F 3E 00                 4187 	ld	a, #0x00
      001331 17                    4188 	rla
      001332 CB 37                 4189 	swap	a
      001334 E6 F0                 4190 	and	a, #0xf0
      001336 B6                    4191 	or	a, (hl)
      001337 77                    4192 	ld	(hl), a
                                   4193 ;src/main.c:960: draw_setting_frame_metasprites();
                                   4194 ;src/main.c:961: break;
      001338 C3r04r04              4195 	jp  _draw_setting_frame_metasprites
                                   4196 ;src/main.c:962: case 2u:
      00133B                       4197 00103$:
                                   4198 ;src/main.c:963: settings &= ~BITMASK_SETTING_ANIMATION_SPEED;
      00133B 21r6Cr01              4199 	ld	hl, #_settings
      00133E 7E                    4200 	ld	a, (hl)
      00133F E6 F3                 4201 	and	a, #0xf3
      001341 77                    4202 	ld	(hl), a
                                   4203 ;src/main.c:964: settings |= cursor.height << BIT_OFFSET_SETTING_ANIMATION_SPEED;
      001342 1A                    4204 	ld	a, (de)
      001343 87                    4205 	add	a, a
      001344 87                    4206 	add	a, a
      001345 B6                    4207 	or	a, (hl)
      001346 77                    4208 	ld	(hl), a
                                   4209 ;src/main.c:965: draw_setting_frame_metasprites();
                                   4210 ;src/main.c:966: break;
      001347 C3r04r04              4211 	jp  _draw_setting_frame_metasprites
                                   4212 ;src/main.c:967: case 3u:
      00134A                       4213 00104$:
                                   4214 ;src/main.c:968: start_game();
      00134A CDr66r13              4215 	call	_start_game
                                   4216 ;src/main.c:969: metasprite_2x3_hide(SPRITE_FRAME_1);
      00134D 3E 12                 4217 	ld	a, #0x12
      00134F F5                    4218 	push	af
      001350 33                    4219 	inc	sp
      001351 CDrA4r03              4220 	call	_metasprite_2x3_hide
      001354 33                    4221 	inc	sp
                                   4222 ;src/main.c:970: metasprite_2x3_hide(SPRITE_FRAME_2);
      001355 3E 18                 4223 	ld	a, #0x18
      001357 F5                    4224 	push	af
      001358 33                    4225 	inc	sp
      001359 CDrA4r03              4226 	call	_metasprite_2x3_hide
      00135C 33                    4227 	inc	sp
                                   4228 ;src/main.c:971: metasprite_2x3_hide(SPRITE_FRAME_3);
      00135D 3E 1E                 4229 	ld	a, #0x1e
      00135F F5                    4230 	push	af
      001360 33                    4231 	inc	sp
      001361 CDrA4r03              4232 	call	_metasprite_2x3_hide
      001364 33                    4233 	inc	sp
                                   4234 ;src/main.c:973: }
                                   4235 ;src/main.c:974: }
      001365 C9                    4236 	ret
                                   4237 ;src/main.c:976: void start_game(void)
                                   4238 ;	---------------------------------
                                   4239 ; Function start_game
                                   4240 ; ---------------------------------
      001366                       4241 _start_game::
                                   4242 ;src/main.c:978: flags &= ~FLAG_GAME_STATE;
      001366 21r6Br01              4243 	ld	hl, #_flags
      001369 7E                    4244 	ld	a, (hl)
      00136A E6 E7                 4245 	and	a, #0xe7
                                   4246 ;src/main.c:979: flags |= FLAG_GAME_STATE_INGAME | FLAG_REDRAW_CURSOR;
      00136C 77                    4247 	ld	(hl), a
      00136D F6 11                 4248 	or	a, #0x11
      00136F 77                    4249 	ld	(hl), a
                                   4250 ;src/main.c:980: cursor.pile_idx = 0;
      001370 21r8Ar01              4251 	ld	hl, #(_cursor + 0x0006)
      001373 36 00                 4252 	ld	(hl), #0x00
                                   4253 ;src/main.c:981: cursor.height = 0;
      001375 21r8Br01              4254 	ld	hl, #(_cursor + 0x0007)
      001378 36 00                 4255 	ld	(hl), #0x00
                                   4256 ;src/main.c:982: init_deck();
      00137A CDr2Fr0E              4257 	call	_init_deck
                                   4258 ;src/main.c:983: clear_bkg();
      00137D CDrC2r01              4259 	call	_clear_bkg
                                   4260 ;src/main.c:984: draw_bkg_game();
                                   4261 ;src/main.c:985: }
      001380 C3r4Cr02              4262 	jp  _draw_bkg_game
                                   4263 ;src/main.c:998: inline void input_process(void)
                                   4264 ;	---------------------------------
                                   4265 ; Function input_process
                                   4266 ; ---------------------------------
      001383                       4267 _input_process::
      001383 E8 F2                 4268 	add	sp, #-14
                                   4269 ;src/main.c:1001: UINT8 input = joypad();
      001385 CDr00r00              4270 	call	_joypad
      001388 F8 00                 4271 	ldhl	sp,	#0
      00138A 73                    4272 	ld	(hl), e
                                   4273 ;src/main.c:1002: UINT8 new_input = input & ~prev_input;
      00138B FAr8Er01              4274 	ld	a, (#_input_process_prev_input_65536_323)
      00138E 2F                    4275 	cpl
      00138F F8 00                 4276 	ldhl	sp,	#0
      001391 A6                    4277 	and	a, (hl)
      001392 23                    4278 	inc	hl
      001393 77                    4279 	ld	(hl), a
                                   4280 ;src/main.c:1003: if (new_input) {
      001394 7E                    4281 	ld	a, (hl)
      001395 B7                    4282 	or	a, a
      001396 CArB6r17              4283 	jp	Z, 00170$
                                   4284 ;src/main.c:1004: switch (flags & FLAG_GAME_STATE) {
      001399 21r6Br01              4285 	ld	hl, #_flags
      00139C 7E                    4286 	ld	a, (hl)
      00139D E6 18                 4287 	and	a, #0x18
      00139F 4F                    4288 	ld	c, a
      0013A0 06 00                 4289 	ld	b, #0x00
      0013A2 79                    4290 	ld	a, c
      0013A3 B7                    4291 	or	a, a
      0013A4 B0                    4292 	or	a, b
      0013A5 28 51                 4293 	jr	Z, 00101$
                                   4294 ;src/main.c:1007: if (flags & FLAG_PLAYING_ANIMATION)
      0013A7 7E                    4295 	ld	a, (hl)
      0013A8 F8 02                 4296 	ldhl	sp,	#2
                                   4297 ;src/main.c:1016: && cursor.height) {
      0013AA 32                    4298 	ld	(hl-), a
      0013AB 7E                    4299 	ld	a, (hl)
      0013AC E6 02                 4300 	and	a, #0x02
      0013AE 23                    4301 	inc	hl
      0013AF 23                    4302 	inc	hl
      0013B0 77                    4303 	ld	(hl), a
      0013B1 AF                    4304 	xor	a, a
      0013B2 23                    4305 	inc	hl
      0013B3 77                    4306 	ld	(hl), a
                                   4307 ;src/main.c:1019: && cursor.height + 1u < setting_pile_heights[cursor.pile_idx]) {
      0013B4 F8 01                 4308 	ldhl	sp,	#1
      0013B6 7E                    4309 	ld	a, (hl)
      0013B7 E6 01                 4310 	and	a, #0x01
      0013B9 F8 05                 4311 	ldhl	sp,	#5
      0013BB 77                    4312 	ld	(hl), a
      0013BC AF                    4313 	xor	a, a
      0013BD 23                    4314 	inc	hl
      0013BE 77                    4315 	ld	(hl), a
                                   4316 ;src/main.c:1022: && cursor.pile_idx) {
      0013BF F8 01                 4317 	ldhl	sp,	#1
      0013C1 7E                    4318 	ld	a, (hl)
      0013C2 E6 04                 4319 	and	a, #0x04
      0013C4 F8 07                 4320 	ldhl	sp,	#7
      0013C6 77                    4321 	ld	(hl), a
      0013C7 AF                    4322 	xor	a, a
      0013C8 23                    4323 	inc	hl
      0013C9 77                    4324 	ld	(hl), a
                                   4325 ;src/main.c:1026: && cursor.pile_idx < NUM_SETTING_PILES - 1u) {
      0013CA F8 01                 4326 	ldhl	sp,	#1
      0013CC 7E                    4327 	ld	a, (hl)
      0013CD E6 08                 4328 	and	a, #0x08
      0013CF F8 09                 4329 	ldhl	sp,	#9
      0013D1 77                    4330 	ld	(hl), a
      0013D2 AF                    4331 	xor	a, a
      0013D3 23                    4332 	inc	hl
      0013D4 77                    4333 	ld	(hl), a
                                   4334 ;src/main.c:1030: if (new_input & J_A) {
      0013D5 F8 01                 4335 	ldhl	sp,	#1
      0013D7 7E                    4336 	ld	a, (hl)
      0013D8 E6 10                 4337 	and	a, #0x10
      0013DA F8 0B                 4338 	ldhl	sp,	#11
      0013DC 77                    4339 	ld	(hl), a
      0013DD AF                    4340 	xor	a, a
      0013DE 23                    4341 	inc	hl
      0013DF 77                    4342 	ld	(hl), a
                                   4343 ;src/main.c:1012: flags |= FLAG_REDRAW_CURSOR;
      0013E0 F8 02                 4344 	ldhl	sp,	#2
      0013E2 7E                    4345 	ld	a, (hl)
      0013E3 F6 01                 4346 	or	a, #0x01
      0013E5 F8 0D                 4347 	ldhl	sp,	#13
      0013E7 77                    4348 	ld	(hl), a
                                   4349 ;src/main.c:1004: switch (flags & FLAG_GAME_STATE) {
      0013E8 79                    4350 	ld	a, c
      0013E9 D6 10                 4351 	sub	a, #0x10
      0013EB B0                    4352 	or	a, b
      0013EC CArFAr14              4353 	jp	Z,00125$
      0013EF 79                    4354 	ld	a, c
      0013F0 D6 18                 4355 	sub	a, #0x18
      0013F2 B0                    4356 	or	a, b
      0013F3 28 39                 4357 	jr	Z, 00104$
      0013F5 C3rB6r17              4358 	jp	00170$
                                   4359 ;src/main.c:1005: case FLAG_GAME_STATE_SPLASH:
      0013F8                       4360 00101$:
                                   4361 ;src/main.c:1006: initrand(DIV_REG);
      0013F8 F0r00                 4362 	ldh	a, (_DIV_REG+0)
      0013FA 4F                    4363 	ld	c, a
      0013FB 06 00                 4364 	ld	b, #0x00
      0013FD C5                    4365 	push	bc
      0013FE CDr00r00              4366 	call	_initrand
      001401 E8 02                 4367 	add	sp, #2
                                   4368 ;src/main.c:1007: if (flags & FLAG_PLAYING_ANIMATION)
      001403 FAr6Br01              4369 	ld	a, (#_flags)
      001406 CB 57                 4370 	bit	2, a
      001408 28 03                 4371 	jr	Z, 00103$
                                   4372 ;src/main.c:1008: dynamic_metasprite_end_animation();
      00140A CDr87r04              4373 	call	_dynamic_metasprite_end_animation
      00140D                       4374 00103$:
                                   4375 ;src/main.c:989: flags &= ~FLAG_GAME_STATE;
      00140D 21r6Br01              4376 	ld	hl, #_flags
      001410 7E                    4377 	ld	a, (hl)
      001411 E6 E7                 4378 	and	a, #0xe7
      001413 77                    4379 	ld	(hl), a
                                   4380 ;src/main.c:990: flags |= FLAG_GAME_STATE_SETTINGS | FLAG_REDRAW_CURSOR;
      001414 7E                    4381 	ld	a, (hl)
      001415 F6 19                 4382 	or	a, #0x19
      001417 77                    4383 	ld	(hl), a
                                   4384 ;src/main.c:991: cursor.pile_idx = 0;
      001418 21r8Ar01              4385 	ld	hl, #(_cursor + 0x0006)
      00141B 36 00                 4386 	ld	(hl), #0x00
                                   4387 ;src/main.c:992: cursor.height = 0;
      00141D 21r8Br01              4388 	ld	hl, #(_cursor + 0x0007)
      001420 36 00                 4389 	ld	(hl), #0x00
                                   4390 ;src/main.c:993: draw_setting_frame_metasprites();
      001422 CDr04r04              4391 	call	_draw_setting_frame_metasprites
                                   4392 ;src/main.c:994: clear_bkg();
      001425 CDrC2r01              4393 	call	_clear_bkg
                                   4394 ;src/main.c:995: draw_bkg_settings();
      001428 CDrCAr02              4395 	call	_draw_bkg_settings
                                   4396 ;src/main.c:1010: break;
      00142B C3rB6r17              4397 	jp	00170$
                                   4398 ;src/main.c:1011: case FLAG_GAME_STATE_SETTINGS:
      00142E                       4399 00104$:
                                   4400 ;src/main.c:1012: flags |= FLAG_REDRAW_CURSOR;
      00142E F8 0D                 4401 	ldhl	sp,	#13
      001430 7E                    4402 	ld	a, (hl)
      001431 EAr6Br01              4403 	ld	(#_flags),a
                                   4404 ;src/main.c:1013: if (new_input & J_START) {
      001434 F8 01                 4405 	ldhl	sp,	#1
      001436 CB 7E                 4406 	bit	7, (hl)
      001438 28 06                 4407 	jr	Z, 00121$
                                   4408 ;src/main.c:1014: start_game();
      00143A CDr66r13              4409 	call	_start_game
      00143D C3rEDr14              4410 	jp	00122$
      001440                       4411 00121$:
                                   4412 ;src/main.c:1016: && cursor.height) {
      001440 F8 04                 4413 	ldhl	sp,	#4
      001442 3A                    4414 	ld	a, (hl-)
      001443 B6                    4415 	or	a, (hl)
      001444 28 0C                 4416 	jr	Z, 00117$
      001446 01r8Br01              4417 	ld	bc, #_cursor+7
      001449 0A                    4418 	ld	a, (bc)
      00144A B7                    4419 	or	a, a
      00144B 28 05                 4420 	jr	Z, 00117$
                                   4421 ;src/main.c:1017: cursor.height--;
      00144D 3D                    4422 	dec	a
      00144E 02                    4423 	ld	(bc), a
      00144F C3rEDr14              4424 	jp	00122$
      001452                       4425 00117$:
                                   4426 ;src/main.c:1019: && cursor.height + 1u < setting_pile_heights[cursor.pile_idx]) {
      001452 F8 06                 4427 	ldhl	sp,	#6
      001454 3A                    4428 	ld	a, (hl-)
      001455 B6                    4429 	or	a, (hl)
      001456 28 5D                 4430 	jr	Z, 00113$
      001458 FAr8Br01              4431 	ld	a, (#(_cursor + 0x0007) + 0)
      00145B F8 02                 4432 	ldhl	sp,	#2
      00145D 77                    4433 	ld	(hl), a
      00145E F8 02                 4434 	ldhl	sp,	#2
      001460 7E                    4435 	ld	a, (hl)
      001461 F8 05                 4436 	ldhl	sp,	#5
      001463 77                    4437 	ld	(hl), a
      001464 AF                    4438 	xor	a, a
      001465 23                    4439 	inc	hl
                                   4440 ;c
      001466 32                    4441 	ld	(hl-), a
      001467 2A                    4442 	ld	a, (hl+)
      001468 5F                    4443 	ld	e, a
      001469 56                    4444 	ld	d, (hl)
      00146A 6B                    4445 	ld	l, e
      00146B 62                    4446 	ld	h, d
      00146C 23                    4447 	inc	hl
      00146D E5                    4448 	push	hl
      00146E 7D                    4449 	ld	a, l
      00146F F8 05                 4450 	ldhl	sp,	#5
      001471 77                    4451 	ld	(hl), a
      001472 E1                    4452 	pop	hl
      001473 7C                    4453 	ld	a, h
      001474 F8 04                 4454 	ldhl	sp,	#4
      001476 77                    4455 	ld	(hl), a
      001477 FAr8Ar01              4456 	ld	a, (#(_cursor + 0x0006) + 0)
      00147A F8 0D                 4457 	ldhl	sp,	#13
      00147C 77                    4458 	ld	(hl), a
                                   4459 ;c
      00147D F8 0D                 4460 	ldhl	sp,	#13
      00147F 5E                    4461 	ld	e, (hl)
      001480 16 00                 4462 	ld	d, #0x00
      001482 21r5Cr00              4463 	ld	hl, #_setting_pile_heights
      001485 19                    4464 	add	hl, de
      001486 E5                    4465 	push	hl
      001487 7D                    4466 	ld	a, l
      001488 F8 07                 4467 	ldhl	sp,	#7
      00148A 77                    4468 	ld	(hl), a
      00148B E1                    4469 	pop	hl
      00148C 7C                    4470 	ld	a, h
      00148D F8 06                 4471 	ldhl	sp,	#6
      00148F 32                    4472 	ld	(hl-), a
      001490 2A                    4473 	ld	a, (hl+)
      001491 5F                    4474 	ld	e, a
      001492 56                    4475 	ld	d, (hl)
      001493 1A                    4476 	ld	a, (de)
      001494 F8 0D                 4477 	ldhl	sp,	#13
      001496 77                    4478 	ld	(hl), a
      001497 7E                    4479 	ld	a, (hl)
      001498 F8 05                 4480 	ldhl	sp,	#5
      00149A 77                    4481 	ld	(hl), a
      00149B AF                    4482 	xor	a, a
      00149C 23                    4483 	inc	hl
      00149D 77                    4484 	ld	(hl), a
      00149E F8 03                 4485 	ldhl	sp,	#3
      0014A0 5D                    4486 	ld	e, l
      0014A1 54                    4487 	ld	d, h
      0014A2 F8 05                 4488 	ldhl	sp,	#5
      0014A4 1A                    4489 	ld	a, (de)
      0014A5 96                    4490 	sub	a, (hl)
      0014A6 23                    4491 	inc	hl
      0014A7 13                    4492 	inc	de
      0014A8 1A                    4493 	ld	a, (de)
      0014A9 9E                    4494 	sbc	a, (hl)
      0014AA 30 09                 4495 	jr	NC, 00113$
                                   4496 ;src/main.c:1020: cursor.height++;
      0014AC F8 02                 4497 	ldhl	sp,	#2
      0014AE 7E                    4498 	ld	a, (hl)
      0014AF 3C                    4499 	inc	a
      0014B0 EAr8Br01              4500 	ld	(#(_cursor + 0x0007)),a
      0014B3 18 38                 4501 	jr	00122$
      0014B5                       4502 00113$:
                                   4503 ;src/main.c:1022: && cursor.pile_idx) {
      0014B5 F8 08                 4504 	ldhl	sp,	#8
      0014B7 3A                    4505 	ld	a, (hl-)
      0014B8 B6                    4506 	or	a, (hl)
      0014B9 28 17                 4507 	jr	Z, 00109$
      0014BB FAr8Ar01              4508 	ld	a, (#(_cursor + 0x0006) + 0)
      0014BE B7                    4509 	or	a, a
      0014BF 28 11                 4510 	jr	Z, 00109$
                                   4511 ;src/main.c:1023: cursor.pile_idx--;
      0014C1 C6 FF                 4512 	add	a, #0xff
      0014C3 F8 0D                 4513 	ldhl	sp,	#13
      0014C5 77                    4514 	ld	(hl), a
      0014C6 11r8Ar01              4515 	ld	de, #(_cursor + 0x0006)
      0014C9 7E                    4516 	ld	a, (hl)
      0014CA 12                    4517 	ld	(de), a
                                   4518 ;src/main.c:1024: cursor.height = 0;
      0014CB 21r8Br01              4519 	ld	hl, #(_cursor + 0x0007)
      0014CE 36 00                 4520 	ld	(hl), #0x00
      0014D0 18 1B                 4521 	jr	00122$
      0014D2                       4522 00109$:
                                   4523 ;src/main.c:1026: && cursor.pile_idx < NUM_SETTING_PILES - 1u) {
      0014D2 F8 0A                 4524 	ldhl	sp,	#10
      0014D4 3A                    4525 	ld	a, (hl-)
      0014D5 B6                    4526 	or	a, (hl)
      0014D6 28 15                 4527 	jr	Z, 00122$
      0014D8 FAr8Ar01              4528 	ld	a, (#(_cursor + 0x0006) + 0)
      0014DB FE 03                 4529 	cp	a, #0x03
      0014DD 30 0E                 4530 	jr	NC, 00122$
                                   4531 ;src/main.c:1027: cursor.pile_idx++;
      0014DF 3C                    4532 	inc	a
      0014E0 F8 0D                 4533 	ldhl	sp,	#13
      0014E2 77                    4534 	ld	(hl), a
      0014E3 11r8Ar01              4535 	ld	de, #(_cursor + 0x0006)
      0014E6 7E                    4536 	ld	a, (hl)
      0014E7 12                    4537 	ld	(de), a
                                   4538 ;src/main.c:1028: cursor.height = 0;
      0014E8 21r8Br01              4539 	ld	hl, #(_cursor + 0x0007)
      0014EB 36 00                 4540 	ld	(hl), #0x00
      0014ED                       4541 00122$:
                                   4542 ;src/main.c:1030: if (new_input & J_A) {
      0014ED F8 0C                 4543 	ldhl	sp,	#12
      0014EF 3A                    4544 	ld	a, (hl-)
      0014F0 B6                    4545 	or	a, (hl)
      0014F1 CArB6r17              4546 	jp	Z, 00170$
                                   4547 ;src/main.c:1031: set_cursor_setting();
      0014F4 CDrFFr12              4548 	call	_set_cursor_setting
                                   4549 ;src/main.c:1033: break;
      0014F7 C3rB6r17              4550 	jp	00170$
                                   4551 ;src/main.c:1034: case FLAG_GAME_STATE_INGAME:
      0014FA                       4552 00125$:
                                   4553 ;src/main.c:1035: if (cursor.held_card) {
      0014FA 21r84r01              4554 	ld	hl, #_cursor
      0014FD 2A                    4555 	ld	a, (hl+)
      0014FE B6                    4556 	or	a,(hl)
      0014FF CArB4r15              4557 	jp	Z, 00166$
                                   4558 ;src/main.c:1036: flags |= FLAG_REDRAW_HAND;
      001502 F8 02                 4559 	ldhl	sp,	#2
      001504 7E                    4560 	ld	a, (hl)
      001505 F6 02                 4561 	or	a, #0x02
      001507 EAr6Br01              4562 	ld	(#_flags),a
                                   4563 ;src/main.c:1038: && cursor.hand_pile_idx != 0) {
      00150A F8 04                 4564 	ldhl	sp,	#4
      00150C 3A                    4565 	ld	a, (hl-)
      00150D B6                    4566 	or	a, (hl)
      00150E 28 0B                 4567 	jr	Z, 00130$
      001510 01r89r01              4568 	ld	bc, #_cursor+5
      001513 0A                    4569 	ld	a, (bc)
      001514 B7                    4570 	or	a, a
      001515 28 04                 4571 	jr	Z, 00130$
                                   4572 ;src/main.c:1039: cursor.hand_pile_idx--;
      001517 3D                    4573 	dec	a
      001518 02                    4574 	ld	(bc), a
      001519 18 10                 4575 	jr	00131$
      00151B                       4576 00130$:
                                   4577 ;src/main.c:1041: && cursor.hand_pile_idx < 9) {
      00151B F8 06                 4578 	ldhl	sp,	#6
      00151D 3A                    4579 	ld	a, (hl-)
      00151E B6                    4580 	or	a, (hl)
      00151F 28 0A                 4581 	jr	Z, 00131$
      001521 01r89r01              4582 	ld	bc, #_cursor+5
      001524 0A                    4583 	ld	a, (bc)
      001525 FE 09                 4584 	cp	a, #0x09
      001527 30 02                 4585 	jr	NC, 00131$
                                   4586 ;src/main.c:1042: cursor.hand_pile_idx++;
      001529 3C                    4587 	inc	a
      00152A 02                    4588 	ld	(bc), a
      00152B                       4589 00131$:
                                   4590 ;src/main.c:1045: && ~flags & FLAG_PLAYING_ANIMATION) {
      00152B F8 0C                 4591 	ldhl	sp,	#12
      00152D 3A                    4592 	ld	a, (hl-)
      00152E B6                    4593 	or	a, (hl)
      00152F CArB6r17              4594 	jp	Z, 00170$
      001532 FAr6Br01              4595 	ld	a, (#_flags)
      001535 06 00                 4596 	ld	b, #0x00
      001537 2F                    4597 	cpl
      001538 4F                    4598 	ld	c, a
      001539 78                    4599 	ld	a, b
      00153A 2F                    4600 	cpl
      00153B CB 51                 4601 	bit	2, c
      00153D CArB6r17              4602 	jp	Z,00170$
                                   4603 ;src/main.c:730: Pile *pile = IDX_PTR(piles, cursor.hand_pile_idx);
      001540 01r38r01              4604 	ld	bc, #_piles+0
      001543 FAr89r01              4605 	ld	a, (#(_cursor + 0x0005) + 0)
      001546 F8 0D                 4606 	ldhl	sp,	#13
      001548 77                    4607 	ld	(hl), a
      001549 F8 0D                 4608 	ldhl	sp,	#13
      00154B 5E                    4609 	ld	e, (hl)
      00154C 16 00                 4610 	ld	d, #0x00
      00154E 6B                    4611 	ld	l, e
      00154F 62                    4612 	ld	h, d
      001550 29                    4613 	add	hl, hl
      001551 29                    4614 	add	hl, hl
      001552 19                    4615 	add	hl, de
      001553 09                    4616 	add	hl, bc
      001554 4D                    4617 	ld	c, l
      001555 44                    4618 	ld	b, h
                                   4619 ;src/main.c:731: if (cursor.hand_pile_idx == cursor.pile_idx) {
      001556 21r8Ar01              4620 	ld	hl, #_cursor + 6
      001559 5E                    4621 	ld	e, (hl)
      00155A F8 0D                 4622 	ldhl	sp,	#13
      00155C 7E                    4623 	ld	a, (hl)
      00155D 93                    4624 	sub	a, e
      00155E 20 09                 4625 	jr	NZ, 00176$
                                   4626 ;src/main.c:732: pile_append_cursor_stack(pile);
      001560 C5                    4627 	push	bc
      001561 CDr18r11              4628 	call	_pile_append_cursor_stack
      001564 E8 02                 4629 	add	sp, #2
      001566 C3rB6r17              4630 	jp	00170$
      001569                       4631 00176$:
                                   4632 ;src/main.c:733: } else if (!pile->height
      001569 21 04 00              4633 	ld	hl, #0x0004
      00156C 09                    4634 	add	hl, bc
      00156D 7E                    4635 	ld	a, (hl)
      00156E B7                    4636 	or	a, a
      00156F 28 2E                 4637 	jr	Z, 00174$
                                   4638 ;src/main.c:734: || RANK(pile->top->data) == RANK(cursor.held_card->data) + 1u) {
      001571 69                    4639 	ld	l, c
      001572 60                    4640 	ld	h, b
      001573 23                    4641 	inc	hl
      001574 23                    4642 	inc	hl
      001575 2A                    4643 	ld	a, (hl+)
      001576 66                    4644 	ld	h, (hl)
      001577 6F                    4645 	ld	l, a
      001578 23                    4646 	inc	hl
      001579 23                    4647 	inc	hl
      00157A 7E                    4648 	ld	a, (hl)
      00157B E6 0F                 4649 	and	a, #0x0f
      00157D F8 0C                 4650 	ldhl	sp,	#12
      00157F 77                    4651 	ld	(hl), a
      001580 AF                    4652 	xor	a, a
      001581 23                    4653 	inc	hl
      001582 77                    4654 	ld	(hl), a
      001583 21r84r01              4655 	ld	hl, #_cursor
      001586 2A                    4656 	ld	a, (hl+)
      001587 66                    4657 	ld	h, (hl)
      001588 6F                    4658 	ld	l, a
      001589 23                    4659 	inc	hl
      00158A 23                    4660 	inc	hl
      00158B 7E                    4661 	ld	a, (hl)
      00158C E6 0F                 4662 	and	a, #0x0f
      00158E 5F                    4663 	ld	e, a
      00158F 16 00                 4664 	ld	d, #0x00
      001591 13                    4665 	inc	de
      001592 F8 0C                 4666 	ldhl	sp,	#12
      001594 7E                    4667 	ld	a, (hl)
      001595 93                    4668 	sub	a, e
      001596 C2rB6r17              4669 	jp	NZ,00170$
      001599 23                    4670 	inc	hl
      00159A 7E                    4671 	ld	a, (hl)
      00159B 92                    4672 	sub	a, d
      00159C C2rB6r17              4673 	jp	NZ,00170$
      00159F                       4674 00174$:
                                   4675 ;src/main.c:735: pile_append_cursor_stack(pile);
      00159F C5                    4676 	push	bc
      0015A0 CDr18r11              4677 	call	_pile_append_cursor_stack
      0015A3 E8 02                 4678 	add	sp, #2
                                   4679 ;src/main.c:736: score--;
      0015A5 21r6Er01              4680 	ld	hl, #_score + 1
      0015A8 2B                    4681 	dec	hl
      0015A9 2A                    4682 	ld	a, (hl+)
      0015AA 5F                    4683 	ld	e, a
      0015AB 56                    4684 	ld	d, (hl)
      0015AC 1B                    4685 	dec	de
      0015AD 2B                    4686 	dec	hl
      0015AE 7B                    4687 	ld	a, e
      0015AF 22                    4688 	ld	(hl+), a
      0015B0 72                    4689 	ld	(hl), d
                                   4690 ;src/main.c:1046: cursor_place_stack();
      0015B1 C3rB6r17              4691 	jp	00170$
      0015B4                       4692 00166$:
                                   4693 ;src/main.c:1049: flags |= FLAG_REDRAW_CURSOR;
      0015B4 F8 0D                 4694 	ldhl	sp,	#13
      0015B6 7E                    4695 	ld	a, (hl)
      0015B7 EAr6Br01              4696 	ld	(#_flags),a
                                   4697 ;src/main.c:1050: if (new_input & J_DOWN) {
      0015BA F8 0A                 4698 	ldhl	sp,	#10
      0015BC 3A                    4699 	ld	a, (hl-)
      0015BD B6                    4700 	or	a, (hl)
      0015BE 28 3C                 4701 	jr	Z, 00156$
                                   4702 ;src/main.c:1051: if (cursor.pile_idx == PILE_IDX_DECK)
      0015C0 21r8Ar01              4703 	ld	hl, #_cursor + 6
      0015C3 46                    4704 	ld	b, (hl)
      0015C4 78                    4705 	ld	a, b
                                   4706 ;src/main.c:1052: cursor.pile_idx = 0;
      0015C5 D6 0A                 4707 	sub	a,#0x0a
      0015C7 20 03                 4708 	jr	NZ, 00139$
      0015C9 77                    4709 	ld	(hl),a
      0015CA 18 73                 4710 	jr	00157$
      0015CC                       4711 00139$:
                                   4712 ;src/main.c:1053: else if (cursor.height + 1u < piles[cursor.pile_idx].height)
      0015CC 21r8Br01              4713 	ld	hl, #(_cursor + 0x0007)
      0015CF 4E                    4714 	ld	c, (hl)
      0015D0 59                    4715 	ld	e, c
      0015D1 16 00                 4716 	ld	d, #0x00
      0015D3 13                    4717 	inc	de
      0015D4 F8 09                 4718 	ldhl	sp,	#9
      0015D6 7B                    4719 	ld	a, e
      0015D7 22                    4720 	ld	(hl+), a
      0015D8 72                    4721 	ld	(hl), d
      0015D9 58                    4722 	ld	e, b
      0015DA 16 00                 4723 	ld	d, #0x00
      0015DC 6B                    4724 	ld	l, e
      0015DD 62                    4725 	ld	h, d
      0015DE 29                    4726 	add	hl, hl
      0015DF 29                    4727 	add	hl, hl
      0015E0 19                    4728 	add	hl, de
      0015E1 11r38r01              4729 	ld	de, #_piles
      0015E4 19                    4730 	add	hl, de
      0015E5 23                    4731 	inc	hl
      0015E6 23                    4732 	inc	hl
      0015E7 23                    4733 	inc	hl
      0015E8 23                    4734 	inc	hl
      0015E9 5E                    4735 	ld	e, (hl)
      0015EA 06 00                 4736 	ld	b, #0x00
      0015EC F8 09                 4737 	ldhl	sp,	#9
      0015EE 7E                    4738 	ld	a, (hl)
      0015EF 93                    4739 	sub	a, e
      0015F0 23                    4740 	inc	hl
      0015F1 7E                    4741 	ld	a, (hl)
      0015F2 98                    4742 	sbc	a, b
      0015F3 30 4A                 4743 	jr	NC, 00157$
                                   4744 ;src/main.c:1054: cursor.height++;
      0015F5 0C                    4745 	inc	c
      0015F6 21r8Br01              4746 	ld	hl, #(_cursor + 0x0007)
      0015F9 71                    4747 	ld	(hl), c
      0015FA 18 43                 4748 	jr	00157$
      0015FC                       4749 00156$:
                                   4750 ;src/main.c:1055: } else if (new_input & J_UP) {
      0015FC F8 08                 4751 	ldhl	sp,	#8
      0015FE 3A                    4752 	ld	a, (hl-)
      0015FF B6                    4753 	or	a, (hl)
      001600 28 12                 4754 	jr	Z, 00153$
                                   4755 ;src/main.c:1056: if (cursor.height == 0)
      001602 01r8Br01              4756 	ld	bc, #_cursor + 7
      001605 0A                    4757 	ld	a, (bc)
      001606 B7                    4758 	or	a, a
      001607 20 07                 4759 	jr	NZ, 00142$
                                   4760 ;src/main.c:1057: cursor.pile_idx = PILE_IDX_DECK;
      001609 21r8Ar01              4761 	ld	hl, #(_cursor + 0x0006)
      00160C 36 0A                 4762 	ld	(hl), #0x0a
      00160E 18 2F                 4763 	jr	00157$
      001610                       4764 00142$:
                                   4765 ;src/main.c:1059: cursor.height--;
      001610 3D                    4766 	dec	a
      001611 02                    4767 	ld	(bc), a
      001612 18 2B                 4768 	jr	00157$
      001614                       4769 00153$:
                                   4770 ;src/main.c:1061: && cursor.pile_idx != 0
      001614 F8 04                 4771 	ldhl	sp,	#4
      001616 3A                    4772 	ld	a, (hl-)
      001617 B6                    4773 	or	a, (hl)
      001618 28 12                 4774 	jr	Z, 00148$
      00161A 01r8Ar01              4775 	ld	bc, #_cursor+6
      00161D 0A                    4776 	ld	a, (bc)
      00161E B7                    4777 	or	a, a
      00161F 28 0B                 4778 	jr	Z, 00148$
                                   4779 ;src/main.c:1062: && cursor.pile_idx != PILE_IDX_DECK) {
      001621 FE 0A                 4780 	cp	a, #0x0a
      001623 28 07                 4781 	jr	Z, 00148$
                                   4782 ;src/main.c:1063: cursor.pile_idx--;
      001625 3D                    4783 	dec	a
      001626 02                    4784 	ld	(bc), a
                                   4785 ;src/main.c:1064: cursor_adjust_height();
      001627 CDr6Fr0B              4786 	call	_cursor_adjust_height
      00162A 18 13                 4787 	jr	00157$
      00162C                       4788 00148$:
                                   4789 ;src/main.c:1066: && cursor.pile_idx < PILE_IDX_DECK - 1u) {
      00162C F8 06                 4790 	ldhl	sp,	#6
      00162E 3A                    4791 	ld	a, (hl-)
      00162F B6                    4792 	or	a, (hl)
      001630 28 0D                 4793 	jr	Z, 00157$
      001632 01r8Ar01              4794 	ld	bc, #_cursor+6
      001635 0A                    4795 	ld	a, (bc)
      001636 FE 09                 4796 	cp	a, #0x09
      001638 30 05                 4797 	jr	NC, 00157$
                                   4798 ;src/main.c:1067: cursor.pile_idx++;
      00163A 3C                    4799 	inc	a
      00163B 02                    4800 	ld	(bc), a
                                   4801 ;src/main.c:1068: cursor_adjust_height();
      00163C CDr6Fr0B              4802 	call	_cursor_adjust_height
      00163F                       4803 00157$:
                                   4804 ;src/main.c:1071: && ~flags & FLAG_PLAYING_ANIMATION) {
      00163F F8 0C                 4805 	ldhl	sp,	#12
      001641 3A                    4806 	ld	a, (hl-)
      001642 B6                    4807 	or	a, (hl)
      001643 CArB6r17              4808 	jp	Z, 00170$
      001646 FAr6Br01              4809 	ld	a, (#_flags)
      001649 06 00                 4810 	ld	b, #0x00
      00164B 2F                    4811 	cpl
      00164C 4F                    4812 	ld	c, a
      00164D 78                    4813 	ld	a, b
      00164E 2F                    4814 	cpl
      00164F CB 51                 4815 	bit	2, c
      001651 CArB6r17              4816 	jp	Z,00170$
                                   4817 ;src/main.c:1072: if (cursor.pile_idx == PILE_IDX_DECK && top_card_idx != 104u)
      001654 21r8Ar01              4818 	ld	hl, #(_cursor + 0x0006)
      001657 4E                    4819 	ld	c, (hl)
      001658 79                    4820 	ld	a, c
      001659 D6 0A                 4821 	sub	a, #0x0a
      00165B C2rF5r16              4822 	jp	NZ,00159$
      00165E FAr6Ar01              4823 	ld	a, (#_top_card_idx)
      001661 D6 68                 4824 	sub	a, #0x68
      001663 CArF5r16              4825 	jp	Z,00159$
                                   4826 ;src/main.c:878: Pile *pile = IDX_PTR(piles, 0);
      001666 01r38r01              4827 	ld	bc, #_piles
                                   4828 ;src/main.c:881: for (i = 0; i < 10u; i++) {
      001669 1E 00                 4829 	ld	e, #0x00
      00166B                       4830 00192$:
                                   4831 ;src/main.c:882: if (!pile->height)
      00166B 21 04 00              4832 	ld	hl, #0x0004
      00166E 09                    4833 	add	hl, bc
      00166F 7E                    4834 	ld	a, (hl)
      001670 B7                    4835 	or	a, a
      001671 CArB6r17              4836 	jp	Z, 00170$
                                   4837 ;src/main.c:884: pile++;
      001674 03                    4838 	inc	bc
      001675 03                    4839 	inc	bc
      001676 03                    4840 	inc	bc
      001677 03                    4841 	inc	bc
      001678 03                    4842 	inc	bc
                                   4843 ;src/main.c:881: for (i = 0; i < 10u; i++) {
      001679 1C                    4844 	inc	e
      00167A 7B                    4845 	ld	a, e
      00167B D6 0A                 4846 	sub	a, #0x0a
      00167D 38 EC                 4847 	jr	C, 00192$
                                   4848 ;src/main.c:887: pile = IDX_PTR(piles, 0);
      00167F F8 0B                 4849 	ldhl	sp,	#11
      001681 3Er38                 4850 	ld	a, #<(_piles)
      001683 22                    4851 	ld	(hl+), a
      001684 36s01                 4852 	ld	(hl), #>(_piles)
                                   4853 ;src/main.c:888: Card *deck_top = IDX_PTR(deck, top_card_idx);
      001686 21r6Ar01              4854 	ld	hl, #_top_card_idx
      001689 4E                    4855 	ld	c, (hl)
      00168A 06 00                 4856 	ld	b, #0x00
      00168C 69                    4857 	ld	l, c
      00168D 60                    4858 	ld	h, b
      00168E 29                    4859 	add	hl, hl
      00168F 09                    4860 	add	hl, bc
      001690 01r00r00              4861 	ld	bc,#_deck
      001693 09                    4862 	add	hl,bc
      001694 4D                    4863 	ld	c, l
      001695 44                    4864 	ld	b, h
                                   4865 ;src/main.c:889: top_card_idx += 10u;
      001696 21r6Ar01              4866 	ld	hl, #_top_card_idx
      001699 7E                    4867 	ld	a, (hl)
      00169A C6 0A                 4868 	add	a, #0x0a
      00169C 77                    4869 	ld	(hl), a
                                   4870 ;src/main.c:892: for (i = 0; i < 10u; i++) {
      00169D F8 0D                 4871 	ldhl	sp,	#13
      00169F 36 0A                 4872 	ld	(hl), #0x0a
      0016A1                       4873 00196$:
                                   4874 ;src/main.c:893: pile->top->next_card = deck_top;
                                   4875 ;c
      0016A1 F8 0B                 4876 	ldhl	sp,#11
      0016A3 2A                    4877 	ld	a, (hl+)
      0016A4 5F                    4878 	ld	e, a
      0016A5 56                    4879 	ld	d, (hl)
      0016A6 21 02 00              4880 	ld	hl, #0x0002
      0016A9 19                    4881 	add	hl, de
      0016AA E5                    4882 	push	hl
      0016AB 7D                    4883 	ld	a, l
      0016AC F8 0B                 4884 	ldhl	sp,	#11
      0016AE 77                    4885 	ld	(hl), a
      0016AF E1                    4886 	pop	hl
      0016B0 7C                    4887 	ld	a, h
      0016B1 F8 0A                 4888 	ldhl	sp,	#10
      0016B3 32                    4889 	ld	(hl-), a
      0016B4 2A                    4890 	ld	a, (hl+)
      0016B5 5F                    4891 	ld	e, a
      0016B6 56                    4892 	ld	d, (hl)
      0016B7 1A                    4893 	ld	a, (de)
      0016B8 6F                    4894 	ld	l, a
      0016B9 13                    4895 	inc	de
      0016BA 1A                    4896 	ld	a, (de)
      0016BB 67                    4897 	ld	h, a
      0016BC 79                    4898 	ld	a, c
      0016BD 22                    4899 	ld	(hl+), a
      0016BE 70                    4900 	ld	(hl), b
                                   4901 ;src/main.c:894: pile->top = deck_top;
      0016BF F8 09                 4902 	ldhl	sp,	#9
      0016C1 2A                    4903 	ld	a, (hl+)
      0016C2 66                    4904 	ld	h, (hl)
      0016C3 6F                    4905 	ld	l, a
      0016C4 79                    4906 	ld	a, c
      0016C5 22                    4907 	ld	(hl+), a
      0016C6 70                    4908 	ld	(hl), b
                                   4909 ;src/main.c:895: pile->height++;
                                   4910 ;c
      0016C7 F8 0B                 4911 	ldhl	sp,#11
      0016C9 2A                    4912 	ld	a, (hl+)
      0016CA 5F                    4913 	ld	e, a
      0016CB 56                    4914 	ld	d, (hl)
      0016CC 21 04 00              4915 	ld	hl, #0x0004
      0016CF 19                    4916 	add	hl, de
      0016D0 5D                    4917 	ld	e, l
      0016D1 54                    4918 	ld	d, h
      0016D2 1A                    4919 	ld	a, (de)
      0016D3 3C                    4920 	inc	a
      0016D4 12                    4921 	ld	(de), a
                                   4922 ;src/main.c:896: deck_top++;
      0016D5 03                    4923 	inc	bc
      0016D6 03                    4924 	inc	bc
      0016D7 03                    4925 	inc	bc
                                   4926 ;src/main.c:897: pile++;
                                   4927 ;c
      0016D8 F8 0B                 4928 	ldhl	sp,#11
      0016DA 2A                    4929 	ld	a, (hl+)
      0016DB 5F                    4930 	ld	e, a
      0016DC 56                    4931 	ld	d, (hl)
      0016DD 21 05 00              4932 	ld	hl, #0x0005
      0016E0 19                    4933 	add	hl, de
      0016E1 E5                    4934 	push	hl
      0016E2 7D                    4935 	ld	a, l
      0016E3 F8 0D                 4936 	ldhl	sp,	#13
      0016E5 77                    4937 	ld	(hl), a
      0016E6 E1                    4938 	pop	hl
      0016E7 7C                    4939 	ld	a, h
      0016E8 F8 0C                 4940 	ldhl	sp,	#12
      0016EA 22                    4941 	ld	(hl+), a
                                   4942 ;src/main.c:892: for (i = 0; i < 10u; i++) {
      0016EB 35                    4943 	dec	(hl)
      0016EC 7E                    4944 	ld	a, (hl)
      0016ED 20 B2                 4945 	jr	NZ, 00196$
                                   4946 ;src/main.c:900: dynamic_metasprite_deal();
      0016EF CDr3Dr0A              4947 	call	_dynamic_metasprite_deal
                                   4948 ;src/main.c:1073: deal();
      0016F2 C3rB6r17              4949 	jp	00170$
      0016F5                       4950 00159$:
                                   4951 ;src/main.c:705: Pile *pile = IDX_PTR(piles, cursor.pile_idx);
      0016F5 06 00                 4952 	ld	b, #0x00
      0016F7 69                    4953 	ld	l, c
      0016F8 60                    4954 	ld	h, b
      0016F9 29                    4955 	add	hl, hl
      0016FA 29                    4956 	add	hl, hl
      0016FB 09                    4957 	add	hl, bc
      0016FC 3Er38                 4958 	ld	a, #<(_piles)
      0016FE 85                    4959 	add	a, l
      0016FF 4F                    4960 	ld	c, a
      001700 3Es01                 4961 	ld	a, #>(_piles)
      001702 8C                    4962 	adc	a, h
      001703 F8 09                 4963 	ldhl	sp,	#9
      001705 71                    4964 	ld	(hl), c
      001706 23                    4965 	inc	hl
                                   4966 ;src/main.c:706: Card *top = pile->base;
      001707 32                    4967 	ld	(hl-), a
      001708 2A                    4968 	ld	a, (hl+)
      001709 5F                    4969 	ld	e, a
      00170A 56                    4970 	ld	d, (hl)
      00170B 1A                    4971 	ld	a, (de)
      00170C 23                    4972 	inc	hl
      00170D 23                    4973 	inc	hl
      00170E 22                    4974 	ld	(hl+), a
      00170F 13                    4975 	inc	de
      001710 1A                    4976 	ld	a, (de)
      001711 77                    4977 	ld	(hl), a
                                   4978 ;src/main.c:707: for (i = 1; i < cursor.height; i++)
      001712 06 01                 4979 	ld	b, #0x01
      001714                       4980 00198$:
      001714 21r8Br01              4981 	ld	hl, #(_cursor + 0x0007)
      001717 4E                    4982 	ld	c, (hl)
      001718 78                    4983 	ld	a, b
      001719 91                    4984 	sub	a, c
      00171A 30 0E                 4985 	jr	NC, 00184$
                                   4986 ;src/main.c:708: top = top->next_card;
      00171C F8 0C                 4987 	ldhl	sp,#12
      00171E 2A                    4988 	ld	a, (hl+)
      00171F 5F                    4989 	ld	e, a
      001720 56                    4990 	ld	d, (hl)
      001721 1A                    4991 	ld	a, (de)
      001722 2B                    4992 	dec	hl
      001723 22                    4993 	ld	(hl+), a
      001724 13                    4994 	inc	de
      001725 1A                    4995 	ld	a, (de)
      001726 77                    4996 	ld	(hl), a
                                   4997 ;src/main.c:707: for (i = 1; i < cursor.height; i++)
      001727 04                    4998 	inc	b
      001728 18 EA                 4999 	jr	00198$
      00172A                       5000 00184$:
                                   5001 ;src/main.c:709: Card *stack = cursor.height ? top->next_card : top;
      00172A 79                    5002 	ld	a, c
      00172B B7                    5003 	or	a, a
      00172C 28 0C                 5004 	jr	Z, 00202$
      00172E F8 0C                 5005 	ldhl	sp,#12
      001730 2A                    5006 	ld	a, (hl+)
      001731 5F                    5007 	ld	e, a
      001732 56                    5008 	ld	d, (hl)
      001733 1A                    5009 	ld	a, (de)
      001734 4F                    5010 	ld	c, a
      001735 13                    5011 	inc	de
      001736 1A                    5012 	ld	a, (de)
      001737 47                    5013 	ld	b, a
      001738 18 05                 5014 	jr	00203$
      00173A                       5015 00202$:
      00173A F8 0C                 5016 	ldhl	sp,#12
      00173C 2A                    5017 	ld	a, (hl+)
      00173D 4F                    5018 	ld	c, a
      00173E 46                    5019 	ld	b, (hl)
      00173F                       5020 00203$:
                                   5021 ;src/main.c:710: if (!(VISIBLE(stack->data) && is_stack_coherent(stack)))
      00173F 59                    5022 	ld	e, c
      001740 50                    5023 	ld	d, b
      001741 13                    5024 	inc	de
      001742 13                    5025 	inc	de
      001743 1A                    5026 	ld	a, (de)
      001744 CB 77                 5027 	bit	6, a
      001746 28 6E                 5028 	jr	Z, 00170$
      001748 C5                    5029 	push	bc
      001749 C5                    5030 	push	bc
      00174A CDr54r10              5031 	call	_is_stack_coherent
      00174D E8 02                 5032 	add	sp, #2
      00174F 7B                    5033 	ld	a, e
      001750 C1                    5034 	pop	bc
      001751 B7                    5035 	or	a, a
      001752 28 62                 5036 	jr	Z, 00170$
                                   5037 ;src/main.c:713: cursor.held_card = stack;
      001754 21r84r01              5038 	ld	hl, #_cursor
      001757 79                    5039 	ld	a, c
      001758 22                    5040 	ld	(hl+), a
      001759 70                    5041 	ld	(hl), b
                                   5042 ;src/main.c:714: cursor.hand_pile_idx = cursor.pile_idx;
      00175A FAr8Ar01              5043 	ld	a, (#(_cursor + 0x0006) + 0)
      00175D EAr89r01              5044 	ld	(#(_cursor + 0x0005)),a
                                   5045 ;src/main.c:715: cursor.held_stack_size = pile->height - cursor.height;
                                   5046 ;c
      001760 F8 09                 5047 	ldhl	sp,#9
      001762 2A                    5048 	ld	a, (hl+)
      001763 5F                    5049 	ld	e, a
      001764 56                    5050 	ld	d, (hl)
      001765 21 04 00              5051 	ld	hl, #0x0004
      001768 19                    5052 	add	hl, de
      001769 4D                    5053 	ld	c, l
      00176A 44                    5054 	ld	b, h
      00176B 0A                    5055 	ld	a, (bc)
      00176C 21r8Br01              5056 	ld	hl, #(_cursor + 0x0007)
      00176F 6E                    5057 	ld	l, (hl)
      001770 95                    5058 	sub	a, l
      001771 EAr88r01              5059 	ld	(#(_cursor + 0x0004)),a
                                   5060 ;src/main.c:716: pile->height = cursor.height;
      001774 FAr8Br01              5061 	ld	a, (#(_cursor + 0x0007) + 0)
      001777 02                    5062 	ld	(bc), a
                                   5063 ;src/main.c:717: if (cursor.height) {
      001778 FAr8Br01              5064 	ld	a, (#(_cursor + 0x0007) + 0)
      00177B F8 0B                 5065 	ldhl	sp,	#11
      00177D 77                    5066 	ld	(hl), a
                                   5067 ;src/main.c:718: pile->top = top;
      00177E F8 09                 5068 	ldhl	sp,#9
      001780 2A                    5069 	ld	a, (hl+)
      001781 4F                    5070 	ld	c, a
      001782 46                    5071 	ld	b, (hl)
      001783 03                    5072 	inc	bc
      001784 03                    5073 	inc	bc
                                   5074 ;src/main.c:720: cursor.card_to_show = top;
                                   5075 ;src/main.c:717: if (cursor.height) {
      001785 23                    5076 	inc	hl
      001786 7E                    5077 	ld	a, (hl)
      001787 B7                    5078 	or	a, a
      001788 28 1A                 5079 	jr	Z, 00189$
                                   5080 ;src/main.c:718: pile->top = top;
      00178A 23                    5081 	inc	hl
      00178B 2A                    5082 	ld	a, (hl+)
      00178C 02                    5083 	ld	(bc), a
      00178D 03                    5084 	inc	bc
      00178E 7E                    5085 	ld	a, (hl)
      00178F 02                    5086 	ld	(bc), a
                                   5087 ;src/main.c:719: top->next_card = NULL;
      001790 2B                    5088 	dec	hl
      001791 2A                    5089 	ld	a, (hl+)
      001792 66                    5090 	ld	h, (hl)
      001793 6F                    5091 	ld	l, a
      001794 AF                    5092 	xor	a, a
      001795 22                    5093 	ld	(hl+), a
      001796 77                    5094 	ld	(hl), a
                                   5095 ;src/main.c:720: cursor.card_to_show = top;
      001797 11r86r01              5096 	ld	de, #(_cursor + 0x0002)
      00179A F8 0C                 5097 	ldhl	sp,	#12
      00179C 7E                    5098 	ld	a, (hl)
      00179D 12                    5099 	ld	(de), a
      00179E 13                    5100 	inc	de
      00179F 23                    5101 	inc	hl
      0017A0 7E                    5102 	ld	a, (hl)
      0017A1 12                    5103 	ld	(de), a
      0017A2 18 12                 5104 	jr	00170$
      0017A4                       5105 00189$:
                                   5106 ;src/main.c:722: pile->base = NULL;
      0017A4 F8 09                 5107 	ldhl	sp,	#9
      0017A6 2A                    5108 	ld	a, (hl+)
      0017A7 66                    5109 	ld	h, (hl)
      0017A8 6F                    5110 	ld	l, a
      0017A9 AF                    5111 	xor	a, a
      0017AA 22                    5112 	ld	(hl+), a
      0017AB 77                    5113 	ld	(hl), a
                                   5114 ;src/main.c:723: pile->top = NULL;
      0017AC AF                    5115 	xor	a, a
      0017AD 02                    5116 	ld	(bc), a
      0017AE 03                    5117 	inc	bc
      0017AF 02                    5118 	ld	(bc), a
                                   5119 ;src/main.c:724: cursor.card_to_show = NULL;
      0017B0 21r86r01              5120 	ld	hl, #(_cursor + 0x0002)
      0017B3 AF                    5121 	xor	a, a
      0017B4 22                    5122 	ld	(hl+), a
      0017B5 77                    5123 	ld	(hl), a
                                   5124 ;src/main.c:1079: }
      0017B6                       5125 00170$:
                                   5126 ;src/main.c:1081: prev_input = input;
      0017B6 F8 00                 5127 	ldhl	sp,	#0
      0017B8 7E                    5128 	ld	a, (hl)
      0017B9 EAr8Er01              5129 	ld	(#_input_process_prev_input_65536_323),a
                                   5130 ;src/main.c:1082: }
      0017BC E8 0E                 5131 	add	sp, #14
      0017BE C9                    5132 	ret
                                   5133 ;src/main.c:1084: void main(void)
                                   5134 ;	---------------------------------
                                   5135 ; Function main
                                   5136 ; ---------------------------------
      0017BF                       5137 _main::
      0017BF E8 F2                 5138 	add	sp, #-14
                                   5139 ;src/main.c:1086: font_init();
      0017C1 CDr00r00              5140 	call	_font_init
                                   5141 ;src/main.c:1087: font_t font = font_load(font_min);
      0017C4 21r00r00              5142 	ld	hl, #_font_min
      0017C7 E5                    5143 	push	hl
      0017C8 CDr00r00              5144 	call	_font_load
      0017CB E8 02                 5145 	add	sp, #2
                                   5146 ;src/main.c:1088: font_set(font);
      0017CD D5                    5147 	push	de
      0017CE CDr00r00              5148 	call	_font_set
      0017D1 E8 02                 5149 	add	sp, #2
                                   5150 ;src/main.c:1089: set_bkg_data(OFFSET_BKG_FONT_ADDON, N_FONT_ADDON, font_addon);
      0017D3 21r00r00              5151 	ld	hl, #_font_addon
      0017D6 E5                    5152 	push	hl
      0017D7 11 25 01              5153 	ld	de, #0x0125
      0017DA D5                    5154 	push	de
      0017DB CDr00r00              5155 	call	_set_bkg_data
      0017DE E8 04                 5156 	add	sp, #4
                                   5157 ;src/main.c:1091: set_bkg_data(OFFSET_BKG_TITLE, N_TITLE, title_textures);
      0017E0 21r00r00              5158 	ld	hl, #_title_textures
      0017E3 E5                    5159 	push	hl
      0017E4 11 80 30              5160 	ld	de, #0x3080
      0017E7 D5                    5161 	push	de
      0017E8 CDr00r00              5162 	call	_set_bkg_data
      0017EB E8 04                 5163 	add	sp, #4
                                   5164 ;src/main.c:1092: set_bkg_data(OFFSET_BKG_CARD, N_CARD, card_textures);
      0017ED 21r00r00              5165 	ld	hl, #_card_textures
      0017F0 E5                    5166 	push	hl
      0017F1 11 B0 3A              5167 	ld	de, #0x3ab0
      0017F4 D5                    5168 	push	de
      0017F5 CDr00r00              5169 	call	_set_bkg_data
      0017F8 E8 04                 5170 	add	sp, #4
                                   5171 ;src/main.c:1093: set_bkg_data(OFFSET_BKG_CARD_ADDON, N_CARD_ADDON, card_addon);
      0017FA 21r00r00              5172 	ld	hl, #_card_addon
      0017FD E5                    5173 	push	hl
      0017FE 11 26 17              5174 	ld	de, #0x1726
      001801 D5                    5175 	push	de
      001802 CDr00r00              5176 	call	_set_bkg_data
      001805 E8 04                 5177 	add	sp, #4
                                   5178 ;src/main.c:1094: set_sprite_data(OFFSET_SPRITE_CURSOR, N_CURSOR, cursor_textures);
      001807 21r00r00              5179 	ld	hl, #_cursor_textures
      00180A E5                    5180 	push	hl
      00180B 11 01 08              5181 	ld	de, #0x0801
      00180E D5                    5182 	push	de
      00180F CDr00r00              5183 	call	_set_sprite_data
      001812 E8 04                 5184 	add	sp, #4
                                   5185 ;src/main.c:1096: draw_bkg_splash_screen();
      001814 CDr91r02              5186 	call	_draw_bkg_splash_screen
                                   5187 ;src/main.c:1098: SHOW_BKG;
      001817 F0r00                 5188 	ldh	a, (_LCDC_REG+0)
      001819 F6 01                 5189 	or	a, #0x01
      00181B E0r00                 5190 	ldh	(_LCDC_REG+0),a
                                   5191 ;src/main.c:1099: SHOW_SPRITES;
      00181D F0r00                 5192 	ldh	a, (_LCDC_REG+0)
      00181F F6 02                 5193 	or	a, #0x02
      001821 E0r00                 5194 	ldh	(_LCDC_REG+0),a
                                   5195 ;src/main.c:1101: while (1) {
      001823                       5196 00102$:
                                   5197 ;src/main.c:1001: UINT8 input = joypad();
      001823 CDr00r00              5198 	call	_joypad
      001826 F8 00                 5199 	ldhl	sp,	#0
      001828 73                    5200 	ld	(hl), e
                                   5201 ;src/main.c:1002: UINT8 new_input = input & ~prev_input;
      001829 FAr8Fr01              5202 	ld	a, (#_main_prev_input_327681_368)
      00182C 2F                    5203 	cpl
      00182D F8 00                 5204 	ldhl	sp,	#0
      00182F A6                    5205 	and	a, (hl)
      001830 23                    5206 	inc	hl
      001831 77                    5207 	ld	(hl), a
                                   5208 ;src/main.c:1003: if (new_input) {
      001832 7E                    5209 	ld	a, (hl)
      001833 B7                    5210 	or	a, a
      001834 CAr54r1C              5211 	jp	Z, 00194$
                                   5212 ;src/main.c:1004: switch (flags & FLAG_GAME_STATE) {
      001837 21r6Br01              5213 	ld	hl, #_flags
      00183A 7E                    5214 	ld	a, (hl)
      00183B E6 18                 5215 	and	a, #0x18
      00183D 4F                    5216 	ld	c, a
      00183E 06 00                 5217 	ld	b, #0x00
      001840 79                    5218 	ld	a, c
      001841 B7                    5219 	or	a, a
      001842 B0                    5220 	or	a, b
      001843 28 51                 5221 	jr	Z, 00104$
                                   5222 ;src/main.c:1007: if (flags & FLAG_PLAYING_ANIMATION)
      001845 7E                    5223 	ld	a, (hl)
      001846 F8 02                 5224 	ldhl	sp,	#2
                                   5225 ;src/main.c:1016: && cursor.height) {
      001848 32                    5226 	ld	(hl-), a
      001849 7E                    5227 	ld	a, (hl)
      00184A E6 02                 5228 	and	a, #0x02
      00184C 23                    5229 	inc	hl
      00184D 23                    5230 	inc	hl
      00184E 77                    5231 	ld	(hl), a
      00184F AF                    5232 	xor	a, a
      001850 23                    5233 	inc	hl
      001851 77                    5234 	ld	(hl), a
                                   5235 ;src/main.c:1019: && cursor.height + 1u < setting_pile_heights[cursor.pile_idx]) {
      001852 F8 01                 5236 	ldhl	sp,	#1
      001854 7E                    5237 	ld	a, (hl)
      001855 E6 01                 5238 	and	a, #0x01
      001857 F8 05                 5239 	ldhl	sp,	#5
      001859 77                    5240 	ld	(hl), a
      00185A AF                    5241 	xor	a, a
      00185B 23                    5242 	inc	hl
      00185C 77                    5243 	ld	(hl), a
                                   5244 ;src/main.c:1022: && cursor.pile_idx) {
      00185D F8 01                 5245 	ldhl	sp,	#1
      00185F 7E                    5246 	ld	a, (hl)
      001860 E6 04                 5247 	and	a, #0x04
      001862 F8 07                 5248 	ldhl	sp,	#7
      001864 77                    5249 	ld	(hl), a
      001865 AF                    5250 	xor	a, a
      001866 23                    5251 	inc	hl
      001867 77                    5252 	ld	(hl), a
                                   5253 ;src/main.c:1026: && cursor.pile_idx < NUM_SETTING_PILES - 1u) {
      001868 F8 01                 5254 	ldhl	sp,	#1
      00186A 7E                    5255 	ld	a, (hl)
      00186B E6 08                 5256 	and	a, #0x08
      00186D F8 09                 5257 	ldhl	sp,	#9
      00186F 77                    5258 	ld	(hl), a
      001870 AF                    5259 	xor	a, a
      001871 23                    5260 	inc	hl
      001872 77                    5261 	ld	(hl), a
                                   5262 ;src/main.c:1030: if (new_input & J_A) {
      001873 F8 01                 5263 	ldhl	sp,	#1
      001875 7E                    5264 	ld	a, (hl)
      001876 E6 10                 5265 	and	a, #0x10
      001878 F8 0B                 5266 	ldhl	sp,	#11
      00187A 77                    5267 	ld	(hl), a
      00187B AF                    5268 	xor	a, a
      00187C 23                    5269 	inc	hl
      00187D 77                    5270 	ld	(hl), a
                                   5271 ;src/main.c:1012: flags |= FLAG_REDRAW_CURSOR;
      00187E F8 02                 5272 	ldhl	sp,	#2
      001880 7E                    5273 	ld	a, (hl)
      001881 F6 01                 5274 	or	a, #0x01
      001883 F8 0D                 5275 	ldhl	sp,	#13
      001885 77                    5276 	ld	(hl), a
                                   5277 ;src/main.c:1004: switch (flags & FLAG_GAME_STATE) {
      001886 79                    5278 	ld	a, c
      001887 D6 10                 5279 	sub	a, #0x10
      001889 B0                    5280 	or	a, b
      00188A CAr98r19              5281 	jp	Z,00191$
      00188D 79                    5282 	ld	a, c
      00188E D6 18                 5283 	sub	a, #0x18
      001890 B0                    5284 	or	a, b
      001891 28 39                 5285 	jr	Z, 00108$
      001893 C3r54r1C              5286 	jp	00194$
                                   5287 ;src/main.c:1005: case FLAG_GAME_STATE_SPLASH:
      001896                       5288 00104$:
                                   5289 ;src/main.c:1006: initrand(DIV_REG);
      001896 F0r00                 5290 	ldh	a, (_DIV_REG+0)
      001898 4F                    5291 	ld	c, a
      001899 06 00                 5292 	ld	b, #0x00
      00189B C5                    5293 	push	bc
      00189C CDr00r00              5294 	call	_initrand
      00189F E8 02                 5295 	add	sp, #2
                                   5296 ;src/main.c:1007: if (flags & FLAG_PLAYING_ANIMATION)
      0018A1 FAr6Br01              5297 	ld	a, (#_flags)
      0018A4 CB 57                 5298 	bit	2, a
      0018A6 28 03                 5299 	jr	Z, 00106$
                                   5300 ;src/main.c:1008: dynamic_metasprite_end_animation();
      0018A8 CDr87r04              5301 	call	_dynamic_metasprite_end_animation
      0018AB                       5302 00106$:
                                   5303 ;src/main.c:989: flags &= ~FLAG_GAME_STATE;
      0018AB 21r6Br01              5304 	ld	hl, #_flags
      0018AE 7E                    5305 	ld	a, (hl)
      0018AF E6 E7                 5306 	and	a, #0xe7
      0018B1 77                    5307 	ld	(hl), a
                                   5308 ;src/main.c:990: flags |= FLAG_GAME_STATE_SETTINGS | FLAG_REDRAW_CURSOR;
      0018B2 7E                    5309 	ld	a, (hl)
      0018B3 F6 19                 5310 	or	a, #0x19
      0018B5 77                    5311 	ld	(hl), a
                                   5312 ;src/main.c:991: cursor.pile_idx = 0;
      0018B6 21r8Ar01              5313 	ld	hl, #(_cursor + 0x0006)
      0018B9 36 00                 5314 	ld	(hl), #0x00
                                   5315 ;src/main.c:992: cursor.height = 0;
      0018BB 21r8Br01              5316 	ld	hl, #(_cursor + 0x0007)
      0018BE 36 00                 5317 	ld	(hl), #0x00
                                   5318 ;src/main.c:993: draw_setting_frame_metasprites();
      0018C0 CDr04r04              5319 	call	_draw_setting_frame_metasprites
                                   5320 ;src/main.c:994: clear_bkg();
      0018C3 CDrC2r01              5321 	call	_clear_bkg
                                   5322 ;src/main.c:995: draw_bkg_settings();
      0018C6 CDrCAr02              5323 	call	_draw_bkg_settings
                                   5324 ;src/main.c:1010: break;
      0018C9 C3r54r1C              5325 	jp	00194$
                                   5326 ;src/main.c:1011: case FLAG_GAME_STATE_SETTINGS:
      0018CC                       5327 00108$:
                                   5328 ;src/main.c:1012: flags |= FLAG_REDRAW_CURSOR;
      0018CC F8 0D                 5329 	ldhl	sp,	#13
      0018CE 7E                    5330 	ld	a, (hl)
      0018CF EAr6Br01              5331 	ld	(#_flags),a
                                   5332 ;src/main.c:1013: if (new_input & J_START) {
      0018D2 F8 01                 5333 	ldhl	sp,	#1
      0018D4 CB 7E                 5334 	bit	7, (hl)
      0018D6 28 06                 5335 	jr	Z, 00125$
                                   5336 ;src/main.c:1014: start_game();
      0018D8 CDr66r13              5337 	call	_start_game
      0018DB C3r8Br19              5338 	jp	00126$
      0018DE                       5339 00125$:
                                   5340 ;src/main.c:1016: && cursor.height) {
      0018DE F8 04                 5341 	ldhl	sp,	#4
      0018E0 3A                    5342 	ld	a, (hl-)
      0018E1 B6                    5343 	or	a, (hl)
      0018E2 28 0C                 5344 	jr	Z, 00123$
      0018E4 01r8Br01              5345 	ld	bc, #_cursor+7
      0018E7 0A                    5346 	ld	a, (bc)
      0018E8 B7                    5347 	or	a, a
      0018E9 28 05                 5348 	jr	Z, 00123$
                                   5349 ;src/main.c:1017: cursor.height--;
      0018EB 3D                    5350 	dec	a
      0018EC 02                    5351 	ld	(bc), a
      0018ED C3r8Br19              5352 	jp	00126$
      0018F0                       5353 00123$:
                                   5354 ;src/main.c:1019: && cursor.height + 1u < setting_pile_heights[cursor.pile_idx]) {
      0018F0 F8 06                 5355 	ldhl	sp,	#6
      0018F2 3A                    5356 	ld	a, (hl-)
      0018F3 B6                    5357 	or	a, (hl)
      0018F4 28 5D                 5358 	jr	Z, 00121$
      0018F6 FAr8Br01              5359 	ld	a, (#(_cursor + 0x0007) + 0)
      0018F9 F8 02                 5360 	ldhl	sp,	#2
      0018FB 77                    5361 	ld	(hl), a
      0018FC F8 02                 5362 	ldhl	sp,	#2
      0018FE 7E                    5363 	ld	a, (hl)
      0018FF F8 05                 5364 	ldhl	sp,	#5
      001901 77                    5365 	ld	(hl), a
      001902 AF                    5366 	xor	a, a
      001903 23                    5367 	inc	hl
                                   5368 ;c
      001904 32                    5369 	ld	(hl-), a
      001905 2A                    5370 	ld	a, (hl+)
      001906 5F                    5371 	ld	e, a
      001907 56                    5372 	ld	d, (hl)
      001908 6B                    5373 	ld	l, e
      001909 62                    5374 	ld	h, d
      00190A 23                    5375 	inc	hl
      00190B E5                    5376 	push	hl
      00190C 7D                    5377 	ld	a, l
      00190D F8 05                 5378 	ldhl	sp,	#5
      00190F 77                    5379 	ld	(hl), a
      001910 E1                    5380 	pop	hl
      001911 7C                    5381 	ld	a, h
      001912 F8 04                 5382 	ldhl	sp,	#4
      001914 77                    5383 	ld	(hl), a
      001915 FAr8Ar01              5384 	ld	a, (#(_cursor + 0x0006) + 0)
      001918 F8 0D                 5385 	ldhl	sp,	#13
      00191A 77                    5386 	ld	(hl), a
                                   5387 ;c
      00191B F8 0D                 5388 	ldhl	sp,	#13
      00191D 5E                    5389 	ld	e, (hl)
      00191E 16 00                 5390 	ld	d, #0x00
      001920 21r5Cr00              5391 	ld	hl, #_setting_pile_heights
      001923 19                    5392 	add	hl, de
      001924 E5                    5393 	push	hl
      001925 7D                    5394 	ld	a, l
      001926 F8 07                 5395 	ldhl	sp,	#7
      001928 77                    5396 	ld	(hl), a
      001929 E1                    5397 	pop	hl
      00192A 7C                    5398 	ld	a, h
      00192B F8 06                 5399 	ldhl	sp,	#6
      00192D 32                    5400 	ld	(hl-), a
      00192E 2A                    5401 	ld	a, (hl+)
      00192F 5F                    5402 	ld	e, a
      001930 56                    5403 	ld	d, (hl)
      001931 1A                    5404 	ld	a, (de)
      001932 F8 0D                 5405 	ldhl	sp,	#13
      001934 77                    5406 	ld	(hl), a
      001935 7E                    5407 	ld	a, (hl)
      001936 F8 05                 5408 	ldhl	sp,	#5
      001938 77                    5409 	ld	(hl), a
      001939 AF                    5410 	xor	a, a
      00193A 23                    5411 	inc	hl
      00193B 77                    5412 	ld	(hl), a
      00193C F8 03                 5413 	ldhl	sp,	#3
      00193E 5D                    5414 	ld	e, l
      00193F 54                    5415 	ld	d, h
      001940 F8 05                 5416 	ldhl	sp,	#5
      001942 1A                    5417 	ld	a, (de)
      001943 96                    5418 	sub	a, (hl)
      001944 23                    5419 	inc	hl
      001945 13                    5420 	inc	de
      001946 1A                    5421 	ld	a, (de)
      001947 9E                    5422 	sbc	a, (hl)
      001948 30 09                 5423 	jr	NC, 00121$
                                   5424 ;src/main.c:1020: cursor.height++;
      00194A F8 02                 5425 	ldhl	sp,	#2
      00194C 7E                    5426 	ld	a, (hl)
      00194D 3C                    5427 	inc	a
      00194E EAr8Br01              5428 	ld	(#(_cursor + 0x0007)),a
      001951 18 38                 5429 	jr	00126$
      001953                       5430 00121$:
                                   5431 ;src/main.c:1022: && cursor.pile_idx) {
      001953 F8 08                 5432 	ldhl	sp,	#8
      001955 3A                    5433 	ld	a, (hl-)
      001956 B6                    5434 	or	a, (hl)
      001957 28 17                 5435 	jr	Z, 00119$
      001959 FAr8Ar01              5436 	ld	a, (#(_cursor + 0x0006) + 0)
      00195C B7                    5437 	or	a, a
      00195D 28 11                 5438 	jr	Z, 00119$
                                   5439 ;src/main.c:1023: cursor.pile_idx--;
      00195F C6 FF                 5440 	add	a, #0xff
      001961 F8 0D                 5441 	ldhl	sp,	#13
      001963 77                    5442 	ld	(hl), a
      001964 11r8Ar01              5443 	ld	de, #(_cursor + 0x0006)
      001967 7E                    5444 	ld	a, (hl)
      001968 12                    5445 	ld	(de), a
                                   5446 ;src/main.c:1024: cursor.height = 0;
      001969 21r8Br01              5447 	ld	hl, #(_cursor + 0x0007)
      00196C 36 00                 5448 	ld	(hl), #0x00
      00196E 18 1B                 5449 	jr	00126$
      001970                       5450 00119$:
                                   5451 ;src/main.c:1026: && cursor.pile_idx < NUM_SETTING_PILES - 1u) {
      001970 F8 0A                 5452 	ldhl	sp,	#10
      001972 3A                    5453 	ld	a, (hl-)
      001973 B6                    5454 	or	a, (hl)
      001974 28 15                 5455 	jr	Z, 00126$
      001976 FAr8Ar01              5456 	ld	a, (#(_cursor + 0x0006) + 0)
      001979 FE 03                 5457 	cp	a, #0x03
      00197B 30 0E                 5458 	jr	NC, 00126$
                                   5459 ;src/main.c:1027: cursor.pile_idx++;
      00197D 3C                    5460 	inc	a
      00197E F8 0D                 5461 	ldhl	sp,	#13
      001980 77                    5462 	ld	(hl), a
      001981 11r8Ar01              5463 	ld	de, #(_cursor + 0x0006)
      001984 7E                    5464 	ld	a, (hl)
      001985 12                    5465 	ld	(de), a
                                   5466 ;src/main.c:1028: cursor.height = 0;
      001986 21r8Br01              5467 	ld	hl, #(_cursor + 0x0007)
      001989 36 00                 5468 	ld	(hl), #0x00
      00198B                       5469 00126$:
                                   5470 ;src/main.c:1030: if (new_input & J_A) {
      00198B F8 0C                 5471 	ldhl	sp,	#12
      00198D 3A                    5472 	ld	a, (hl-)
      00198E B6                    5473 	or	a, (hl)
      00198F CAr54r1C              5474 	jp	Z, 00194$
                                   5475 ;src/main.c:1031: set_cursor_setting();
      001992 CDrFFr12              5476 	call	_set_cursor_setting
                                   5477 ;src/main.c:1033: break;
      001995 C3r54r1C              5478 	jp	00194$
                                   5479 ;src/main.c:1034: case FLAG_GAME_STATE_INGAME:
      001998                       5480 00191$:
                                   5481 ;src/main.c:1035: if (cursor.held_card) {
      001998 21r84r01              5482 	ld	hl, #_cursor
      00199B 2A                    5483 	ld	a, (hl+)
      00199C B6                    5484 	or	a,(hl)
      00199D CAr52r1A              5485 	jp	Z, 00189$
                                   5486 ;src/main.c:1036: flags |= FLAG_REDRAW_HAND;
      0019A0 F8 02                 5487 	ldhl	sp,	#2
      0019A2 7E                    5488 	ld	a, (hl)
      0019A3 F6 02                 5489 	or	a, #0x02
      0019A5 EAr6Br01              5490 	ld	(#_flags),a
                                   5491 ;src/main.c:1038: && cursor.hand_pile_idx != 0) {
      0019A8 F8 04                 5492 	ldhl	sp,	#4
      0019AA 3A                    5493 	ld	a, (hl-)
      0019AB B6                    5494 	or	a, (hl)
      0019AC 28 0B                 5495 	jr	Z, 00134$
      0019AE 01r89r01              5496 	ld	bc, #_cursor+5
      0019B1 0A                    5497 	ld	a, (bc)
      0019B2 B7                    5498 	or	a, a
      0019B3 28 04                 5499 	jr	Z, 00134$
                                   5500 ;src/main.c:1039: cursor.hand_pile_idx--;
      0019B5 3D                    5501 	dec	a
      0019B6 02                    5502 	ld	(bc), a
      0019B7 18 10                 5503 	jr	00135$
      0019B9                       5504 00134$:
                                   5505 ;src/main.c:1041: && cursor.hand_pile_idx < 9) {
      0019B9 F8 06                 5506 	ldhl	sp,	#6
      0019BB 3A                    5507 	ld	a, (hl-)
      0019BC B6                    5508 	or	a, (hl)
      0019BD 28 0A                 5509 	jr	Z, 00135$
      0019BF 01r89r01              5510 	ld	bc, #_cursor+5
      0019C2 0A                    5511 	ld	a, (bc)
      0019C3 FE 09                 5512 	cp	a, #0x09
      0019C5 30 02                 5513 	jr	NC, 00135$
                                   5514 ;src/main.c:1042: cursor.hand_pile_idx++;
      0019C7 3C                    5515 	inc	a
      0019C8 02                    5516 	ld	(bc), a
      0019C9                       5517 00135$:
                                   5518 ;src/main.c:1045: && ~flags & FLAG_PLAYING_ANIMATION) {
      0019C9 F8 0C                 5519 	ldhl	sp,	#12
      0019CB 3A                    5520 	ld	a, (hl-)
      0019CC B6                    5521 	or	a, (hl)
      0019CD CAr54r1C              5522 	jp	Z, 00194$
      0019D0 FAr6Br01              5523 	ld	a, (#_flags)
      0019D3 06 00                 5524 	ld	b, #0x00
      0019D5 2F                    5525 	cpl
      0019D6 4F                    5526 	ld	c, a
      0019D7 78                    5527 	ld	a, b
      0019D8 2F                    5528 	cpl
      0019D9 CB 51                 5529 	bit	2, c
      0019DB CAr54r1C              5530 	jp	Z,00194$
                                   5531 ;src/main.c:730: Pile *pile = IDX_PTR(piles, cursor.hand_pile_idx);
      0019DE 01r38r01              5532 	ld	bc, #_piles+0
      0019E1 FAr89r01              5533 	ld	a, (#(_cursor + 0x0005) + 0)
      0019E4 F8 0D                 5534 	ldhl	sp,	#13
      0019E6 77                    5535 	ld	(hl), a
      0019E7 F8 0D                 5536 	ldhl	sp,	#13
      0019E9 5E                    5537 	ld	e, (hl)
      0019EA 16 00                 5538 	ld	d, #0x00
      0019EC 6B                    5539 	ld	l, e
      0019ED 62                    5540 	ld	h, d
      0019EE 29                    5541 	add	hl, hl
      0019EF 29                    5542 	add	hl, hl
      0019F0 19                    5543 	add	hl, de
      0019F1 09                    5544 	add	hl, bc
      0019F2 4D                    5545 	ld	c, l
      0019F3 44                    5546 	ld	b, h
                                   5547 ;src/main.c:731: if (cursor.hand_pile_idx == cursor.pile_idx) {
      0019F4 21r8Ar01              5548 	ld	hl, #_cursor + 6
      0019F7 5E                    5549 	ld	e, (hl)
      0019F8 F8 0D                 5550 	ldhl	sp,	#13
      0019FA 7E                    5551 	ld	a, (hl)
      0019FB 93                    5552 	sub	a, e
      0019FC 20 09                 5553 	jr	NZ, 00141$
                                   5554 ;src/main.c:732: pile_append_cursor_stack(pile);
      0019FE C5                    5555 	push	bc
      0019FF CDr18r11              5556 	call	_pile_append_cursor_stack
      001A02 E8 02                 5557 	add	sp, #2
      001A04 C3r54r1C              5558 	jp	00194$
      001A07                       5559 00141$:
                                   5560 ;src/main.c:733: } else if (!pile->height
      001A07 21 04 00              5561 	ld	hl, #0x0004
      001A0A 09                    5562 	add	hl, bc
      001A0B 7E                    5563 	ld	a, (hl)
      001A0C B7                    5564 	or	a, a
      001A0D 28 2E                 5565 	jr	Z, 00139$
                                   5566 ;src/main.c:734: || RANK(pile->top->data) == RANK(cursor.held_card->data) + 1u) {
      001A0F 69                    5567 	ld	l, c
      001A10 60                    5568 	ld	h, b
      001A11 23                    5569 	inc	hl
      001A12 23                    5570 	inc	hl
      001A13 2A                    5571 	ld	a, (hl+)
      001A14 66                    5572 	ld	h, (hl)
      001A15 6F                    5573 	ld	l, a
      001A16 23                    5574 	inc	hl
      001A17 23                    5575 	inc	hl
      001A18 7E                    5576 	ld	a, (hl)
      001A19 E6 0F                 5577 	and	a, #0x0f
      001A1B F8 0C                 5578 	ldhl	sp,	#12
      001A1D 77                    5579 	ld	(hl), a
      001A1E AF                    5580 	xor	a, a
      001A1F 23                    5581 	inc	hl
      001A20 77                    5582 	ld	(hl), a
      001A21 21r84r01              5583 	ld	hl, #_cursor
      001A24 2A                    5584 	ld	a, (hl+)
      001A25 66                    5585 	ld	h, (hl)
      001A26 6F                    5586 	ld	l, a
      001A27 23                    5587 	inc	hl
      001A28 23                    5588 	inc	hl
      001A29 7E                    5589 	ld	a, (hl)
      001A2A E6 0F                 5590 	and	a, #0x0f
      001A2C 5F                    5591 	ld	e, a
      001A2D 16 00                 5592 	ld	d, #0x00
      001A2F 13                    5593 	inc	de
      001A30 F8 0C                 5594 	ldhl	sp,	#12
      001A32 7E                    5595 	ld	a, (hl)
      001A33 93                    5596 	sub	a, e
      001A34 C2r54r1C              5597 	jp	NZ,00194$
      001A37 23                    5598 	inc	hl
      001A38 7E                    5599 	ld	a, (hl)
      001A39 92                    5600 	sub	a, d
      001A3A C2r54r1C              5601 	jp	NZ,00194$
      001A3D                       5602 00139$:
                                   5603 ;src/main.c:735: pile_append_cursor_stack(pile);
      001A3D C5                    5604 	push	bc
      001A3E CDr18r11              5605 	call	_pile_append_cursor_stack
      001A41 E8 02                 5606 	add	sp, #2
                                   5607 ;src/main.c:736: score--;
      001A43 21r6Er01              5608 	ld	hl, #_score + 1
      001A46 2B                    5609 	dec	hl
      001A47 2A                    5610 	ld	a, (hl+)
      001A48 5F                    5611 	ld	e, a
      001A49 56                    5612 	ld	d, (hl)
      001A4A 1B                    5613 	dec	de
      001A4B 2B                    5614 	dec	hl
      001A4C 7B                    5615 	ld	a, e
      001A4D 22                    5616 	ld	(hl+), a
      001A4E 72                    5617 	ld	(hl), d
                                   5618 ;src/main.c:1046: cursor_place_stack();
      001A4F C3r54r1C              5619 	jp	00194$
      001A52                       5620 00189$:
                                   5621 ;src/main.c:1049: flags |= FLAG_REDRAW_CURSOR;
      001A52 F8 0D                 5622 	ldhl	sp,	#13
      001A54 7E                    5623 	ld	a, (hl)
      001A55 EAr6Br01              5624 	ld	(#_flags),a
                                   5625 ;src/main.c:1050: if (new_input & J_DOWN) {
      001A58 F8 0A                 5626 	ldhl	sp,	#10
      001A5A 3A                    5627 	ld	a, (hl-)
      001A5B B6                    5628 	or	a, (hl)
      001A5C 28 3C                 5629 	jr	Z, 00167$
                                   5630 ;src/main.c:1051: if (cursor.pile_idx == PILE_IDX_DECK)
      001A5E 21r8Ar01              5631 	ld	hl, #_cursor + 6
      001A61 46                    5632 	ld	b, (hl)
      001A62 78                    5633 	ld	a, b
                                   5634 ;src/main.c:1052: cursor.pile_idx = 0;
      001A63 D6 0A                 5635 	sub	a,#0x0a
      001A65 20 03                 5636 	jr	NZ, 00150$
      001A67 77                    5637 	ld	(hl),a
      001A68 18 73                 5638 	jr	00168$
      001A6A                       5639 00150$:
                                   5640 ;src/main.c:1053: else if (cursor.height + 1u < piles[cursor.pile_idx].height)
      001A6A 21r8Br01              5641 	ld	hl, #(_cursor + 0x0007)
      001A6D 4E                    5642 	ld	c, (hl)
      001A6E 59                    5643 	ld	e, c
      001A6F 16 00                 5644 	ld	d, #0x00
      001A71 13                    5645 	inc	de
      001A72 F8 09                 5646 	ldhl	sp,	#9
      001A74 7B                    5647 	ld	a, e
      001A75 22                    5648 	ld	(hl+), a
      001A76 72                    5649 	ld	(hl), d
      001A77 58                    5650 	ld	e, b
      001A78 16 00                 5651 	ld	d, #0x00
      001A7A 6B                    5652 	ld	l, e
      001A7B 62                    5653 	ld	h, d
      001A7C 29                    5654 	add	hl, hl
      001A7D 29                    5655 	add	hl, hl
      001A7E 19                    5656 	add	hl, de
      001A7F 11r38r01              5657 	ld	de, #_piles
      001A82 19                    5658 	add	hl, de
      001A83 23                    5659 	inc	hl
      001A84 23                    5660 	inc	hl
      001A85 23                    5661 	inc	hl
      001A86 23                    5662 	inc	hl
      001A87 5E                    5663 	ld	e, (hl)
      001A88 06 00                 5664 	ld	b, #0x00
      001A8A F8 09                 5665 	ldhl	sp,	#9
      001A8C 7E                    5666 	ld	a, (hl)
      001A8D 93                    5667 	sub	a, e
      001A8E 23                    5668 	inc	hl
      001A8F 7E                    5669 	ld	a, (hl)
      001A90 98                    5670 	sbc	a, b
      001A91 30 4A                 5671 	jr	NC, 00168$
                                   5672 ;src/main.c:1054: cursor.height++;
      001A93 0C                    5673 	inc	c
      001A94 21r8Br01              5674 	ld	hl, #(_cursor + 0x0007)
      001A97 71                    5675 	ld	(hl), c
      001A98 18 43                 5676 	jr	00168$
      001A9A                       5677 00167$:
                                   5678 ;src/main.c:1055: } else if (new_input & J_UP) {
      001A9A F8 08                 5679 	ldhl	sp,	#8
      001A9C 3A                    5680 	ld	a, (hl-)
      001A9D B6                    5681 	or	a, (hl)
      001A9E 28 12                 5682 	jr	Z, 00165$
                                   5683 ;src/main.c:1056: if (cursor.height == 0)
      001AA0 01r8Br01              5684 	ld	bc, #_cursor + 7
      001AA3 0A                    5685 	ld	a, (bc)
      001AA4 B7                    5686 	or	a, a
      001AA5 20 07                 5687 	jr	NZ, 00154$
                                   5688 ;src/main.c:1057: cursor.pile_idx = PILE_IDX_DECK;
      001AA7 21r8Ar01              5689 	ld	hl, #(_cursor + 0x0006)
      001AAA 36 0A                 5690 	ld	(hl), #0x0a
      001AAC 18 2F                 5691 	jr	00168$
      001AAE                       5692 00154$:
                                   5693 ;src/main.c:1059: cursor.height--;
      001AAE 3D                    5694 	dec	a
      001AAF 02                    5695 	ld	(bc), a
      001AB0 18 2B                 5696 	jr	00168$
      001AB2                       5697 00165$:
                                   5698 ;src/main.c:1061: && cursor.pile_idx != 0
      001AB2 F8 04                 5699 	ldhl	sp,	#4
      001AB4 3A                    5700 	ld	a, (hl-)
      001AB5 B6                    5701 	or	a, (hl)
      001AB6 28 12                 5702 	jr	Z, 00163$
      001AB8 01r8Ar01              5703 	ld	bc, #_cursor+6
      001ABB 0A                    5704 	ld	a, (bc)
      001ABC B7                    5705 	or	a, a
      001ABD 28 0B                 5706 	jr	Z, 00163$
                                   5707 ;src/main.c:1062: && cursor.pile_idx != PILE_IDX_DECK) {
      001ABF FE 0A                 5708 	cp	a, #0x0a
      001AC1 28 07                 5709 	jr	Z, 00163$
                                   5710 ;src/main.c:1063: cursor.pile_idx--;
      001AC3 3D                    5711 	dec	a
      001AC4 02                    5712 	ld	(bc), a
                                   5713 ;src/main.c:1064: cursor_adjust_height();
      001AC5 CDr6Fr0B              5714 	call	_cursor_adjust_height
      001AC8 18 13                 5715 	jr	00168$
      001ACA                       5716 00163$:
                                   5717 ;src/main.c:1066: && cursor.pile_idx < PILE_IDX_DECK - 1u) {
      001ACA F8 06                 5718 	ldhl	sp,	#6
      001ACC 3A                    5719 	ld	a, (hl-)
      001ACD B6                    5720 	or	a, (hl)
      001ACE 28 0D                 5721 	jr	Z, 00168$
      001AD0 01r8Ar01              5722 	ld	bc, #_cursor+6
      001AD3 0A                    5723 	ld	a, (bc)
      001AD4 FE 09                 5724 	cp	a, #0x09
      001AD6 30 05                 5725 	jr	NC, 00168$
                                   5726 ;src/main.c:1067: cursor.pile_idx++;
      001AD8 3C                    5727 	inc	a
      001AD9 02                    5728 	ld	(bc), a
                                   5729 ;src/main.c:1068: cursor_adjust_height();
      001ADA CDr6Fr0B              5730 	call	_cursor_adjust_height
      001ADD                       5731 00168$:
                                   5732 ;src/main.c:1071: && ~flags & FLAG_PLAYING_ANIMATION) {
      001ADD F8 0C                 5733 	ldhl	sp,	#12
      001ADF 3A                    5734 	ld	a, (hl-)
      001AE0 B6                    5735 	or	a, (hl)
      001AE1 CAr54r1C              5736 	jp	Z, 00194$
      001AE4 FAr6Br01              5737 	ld	a, (#_flags)
      001AE7 06 00                 5738 	ld	b, #0x00
      001AE9 2F                    5739 	cpl
      001AEA 4F                    5740 	ld	c, a
      001AEB 78                    5741 	ld	a, b
      001AEC 2F                    5742 	cpl
      001AED CB 51                 5743 	bit	2, c
      001AEF CAr54r1C              5744 	jp	Z,00194$
                                   5745 ;src/main.c:1072: if (cursor.pile_idx == PILE_IDX_DECK && top_card_idx != 104u)
      001AF2 21r8Ar01              5746 	ld	hl, #(_cursor + 0x0006)
      001AF5 4E                    5747 	ld	c, (hl)
      001AF6 79                    5748 	ld	a, c
      001AF7 D6 0A                 5749 	sub	a, #0x0a
      001AF9 C2r93r1B              5750 	jp	NZ,00185$
      001AFC FAr6Ar01              5751 	ld	a, (#_top_card_idx)
      001AFF D6 68                 5752 	sub	a, #0x68
      001B01 CAr93r1B              5753 	jp	Z,00185$
                                   5754 ;src/main.c:878: Pile *pile = IDX_PTR(piles, 0);
      001B04 01r38r01              5755 	ld	bc, #_piles
                                   5756 ;src/main.c:881: for (i = 0; i < 10u; i++) {
      001B07 1E 00                 5757 	ld	e, #0x00
      001B09                       5758 00225$:
                                   5759 ;src/main.c:882: if (!pile->height)
      001B09 21 04 00              5760 	ld	hl, #0x0004
      001B0C 09                    5761 	add	hl, bc
      001B0D 7E                    5762 	ld	a, (hl)
      001B0E B7                    5763 	or	a, a
      001B0F CAr54r1C              5764 	jp	Z, 00194$
                                   5765 ;src/main.c:884: pile++;
      001B12 03                    5766 	inc	bc
      001B13 03                    5767 	inc	bc
      001B14 03                    5768 	inc	bc
      001B15 03                    5769 	inc	bc
      001B16 03                    5770 	inc	bc
                                   5771 ;src/main.c:881: for (i = 0; i < 10u; i++) {
      001B17 1C                    5772 	inc	e
      001B18 7B                    5773 	ld	a, e
      001B19 D6 0A                 5774 	sub	a, #0x0a
      001B1B 38 EC                 5775 	jr	C, 00225$
                                   5776 ;src/main.c:887: pile = IDX_PTR(piles, 0);
      001B1D F8 0B                 5777 	ldhl	sp,	#11
      001B1F 3Er38                 5778 	ld	a, #<(_piles)
      001B21 22                    5779 	ld	(hl+), a
      001B22 36s01                 5780 	ld	(hl), #>(_piles)
                                   5781 ;src/main.c:888: Card *deck_top = IDX_PTR(deck, top_card_idx);
      001B24 21r6Ar01              5782 	ld	hl, #_top_card_idx
      001B27 4E                    5783 	ld	c, (hl)
      001B28 06 00                 5784 	ld	b, #0x00
      001B2A 69                    5785 	ld	l, c
      001B2B 60                    5786 	ld	h, b
      001B2C 29                    5787 	add	hl, hl
      001B2D 09                    5788 	add	hl, bc
      001B2E 01r00r00              5789 	ld	bc,#_deck
      001B31 09                    5790 	add	hl,bc
      001B32 4D                    5791 	ld	c, l
      001B33 44                    5792 	ld	b, h
                                   5793 ;src/main.c:889: top_card_idx += 10u;
      001B34 21r6Ar01              5794 	ld	hl, #_top_card_idx
      001B37 7E                    5795 	ld	a, (hl)
      001B38 C6 0A                 5796 	add	a, #0x0a
      001B3A 77                    5797 	ld	(hl), a
                                   5798 ;src/main.c:892: for (i = 0; i < 10u; i++) {
      001B3B F8 0D                 5799 	ldhl	sp,	#13
      001B3D 36 0A                 5800 	ld	(hl), #0x0a
      001B3F                       5801 00229$:
                                   5802 ;src/main.c:893: pile->top->next_card = deck_top;
                                   5803 ;c
      001B3F F8 0B                 5804 	ldhl	sp,#11
      001B41 2A                    5805 	ld	a, (hl+)
      001B42 5F                    5806 	ld	e, a
      001B43 56                    5807 	ld	d, (hl)
      001B44 21 02 00              5808 	ld	hl, #0x0002
      001B47 19                    5809 	add	hl, de
      001B48 E5                    5810 	push	hl
      001B49 7D                    5811 	ld	a, l
      001B4A F8 0B                 5812 	ldhl	sp,	#11
      001B4C 77                    5813 	ld	(hl), a
      001B4D E1                    5814 	pop	hl
      001B4E 7C                    5815 	ld	a, h
      001B4F F8 0A                 5816 	ldhl	sp,	#10
      001B51 32                    5817 	ld	(hl-), a
      001B52 2A                    5818 	ld	a, (hl+)
      001B53 5F                    5819 	ld	e, a
      001B54 56                    5820 	ld	d, (hl)
      001B55 1A                    5821 	ld	a, (de)
      001B56 6F                    5822 	ld	l, a
      001B57 13                    5823 	inc	de
      001B58 1A                    5824 	ld	a, (de)
      001B59 67                    5825 	ld	h, a
      001B5A 79                    5826 	ld	a, c
      001B5B 22                    5827 	ld	(hl+), a
      001B5C 70                    5828 	ld	(hl), b
                                   5829 ;src/main.c:894: pile->top = deck_top;
      001B5D F8 09                 5830 	ldhl	sp,	#9
      001B5F 2A                    5831 	ld	a, (hl+)
      001B60 66                    5832 	ld	h, (hl)
      001B61 6F                    5833 	ld	l, a
      001B62 79                    5834 	ld	a, c
      001B63 22                    5835 	ld	(hl+), a
      001B64 70                    5836 	ld	(hl), b
                                   5837 ;src/main.c:895: pile->height++;
                                   5838 ;c
      001B65 F8 0B                 5839 	ldhl	sp,#11
      001B67 2A                    5840 	ld	a, (hl+)
      001B68 5F                    5841 	ld	e, a
      001B69 56                    5842 	ld	d, (hl)
      001B6A 21 04 00              5843 	ld	hl, #0x0004
      001B6D 19                    5844 	add	hl, de
      001B6E 5D                    5845 	ld	e, l
      001B6F 54                    5846 	ld	d, h
      001B70 1A                    5847 	ld	a, (de)
      001B71 3C                    5848 	inc	a
      001B72 12                    5849 	ld	(de), a
                                   5850 ;src/main.c:896: deck_top++;
      001B73 03                    5851 	inc	bc
      001B74 03                    5852 	inc	bc
      001B75 03                    5853 	inc	bc
                                   5854 ;src/main.c:897: pile++;
                                   5855 ;c
      001B76 F8 0B                 5856 	ldhl	sp,#11
      001B78 2A                    5857 	ld	a, (hl+)
      001B79 5F                    5858 	ld	e, a
      001B7A 56                    5859 	ld	d, (hl)
      001B7B 21 05 00              5860 	ld	hl, #0x0005
      001B7E 19                    5861 	add	hl, de
      001B7F E5                    5862 	push	hl
      001B80 7D                    5863 	ld	a, l
      001B81 F8 0D                 5864 	ldhl	sp,	#13
      001B83 77                    5865 	ld	(hl), a
      001B84 E1                    5866 	pop	hl
      001B85 7C                    5867 	ld	a, h
      001B86 F8 0C                 5868 	ldhl	sp,	#12
      001B88 22                    5869 	ld	(hl+), a
                                   5870 ;src/main.c:892: for (i = 0; i < 10u; i++) {
      001B89 35                    5871 	dec	(hl)
      001B8A 7E                    5872 	ld	a, (hl)
      001B8B 20 B2                 5873 	jr	NZ, 00229$
                                   5874 ;src/main.c:900: dynamic_metasprite_deal();
      001B8D CDr3Dr0A              5875 	call	_dynamic_metasprite_deal
                                   5876 ;src/main.c:1073: deal();
      001B90 C3r54r1C              5877 	jp	00194$
      001B93                       5878 00185$:
                                   5879 ;src/main.c:705: Pile *pile = IDX_PTR(piles, cursor.pile_idx);
      001B93 06 00                 5880 	ld	b, #0x00
      001B95 69                    5881 	ld	l, c
      001B96 60                    5882 	ld	h, b
      001B97 29                    5883 	add	hl, hl
      001B98 29                    5884 	add	hl, hl
      001B99 09                    5885 	add	hl, bc
      001B9A 3Er38                 5886 	ld	a, #<(_piles)
      001B9C 85                    5887 	add	a, l
      001B9D 4F                    5888 	ld	c, a
      001B9E 3Es01                 5889 	ld	a, #>(_piles)
      001BA0 8C                    5890 	adc	a, h
      001BA1 F8 09                 5891 	ldhl	sp,	#9
      001BA3 71                    5892 	ld	(hl), c
      001BA4 23                    5893 	inc	hl
                                   5894 ;src/main.c:706: Card *top = pile->base;
      001BA5 32                    5895 	ld	(hl-), a
      001BA6 2A                    5896 	ld	a, (hl+)
      001BA7 5F                    5897 	ld	e, a
      001BA8 56                    5898 	ld	d, (hl)
      001BA9 1A                    5899 	ld	a, (de)
      001BAA 23                    5900 	inc	hl
      001BAB 23                    5901 	inc	hl
      001BAC 22                    5902 	ld	(hl+), a
      001BAD 13                    5903 	inc	de
      001BAE 1A                    5904 	ld	a, (de)
      001BAF 77                    5905 	ld	(hl), a
                                   5906 ;src/main.c:707: for (i = 1; i < cursor.height; i++)
      001BB0 06 01                 5907 	ld	b, #0x01
      001BB2                       5908 00231$:
      001BB2 21r8Br01              5909 	ld	hl, #(_cursor + 0x0007)
      001BB5 4E                    5910 	ld	c, (hl)
      001BB6 78                    5911 	ld	a, b
      001BB7 91                    5912 	sub	a, c
      001BB8 30 0E                 5913 	jr	NC, 00177$
                                   5914 ;src/main.c:708: top = top->next_card;
      001BBA F8 0C                 5915 	ldhl	sp,#12
      001BBC 2A                    5916 	ld	a, (hl+)
      001BBD 5F                    5917 	ld	e, a
      001BBE 56                    5918 	ld	d, (hl)
      001BBF 1A                    5919 	ld	a, (de)
      001BC0 2B                    5920 	dec	hl
      001BC1 22                    5921 	ld	(hl+), a
      001BC2 13                    5922 	inc	de
      001BC3 1A                    5923 	ld	a, (de)
      001BC4 77                    5924 	ld	(hl), a
                                   5925 ;src/main.c:707: for (i = 1; i < cursor.height; i++)
      001BC5 04                    5926 	inc	b
      001BC6 18 EA                 5927 	jr	00231$
      001BC8                       5928 00177$:
                                   5929 ;src/main.c:709: Card *stack = cursor.height ? top->next_card : top;
      001BC8 79                    5930 	ld	a, c
      001BC9 B7                    5931 	or	a, a
      001BCA 28 0C                 5932 	jr	Z, 00235$
      001BCC F8 0C                 5933 	ldhl	sp,#12
      001BCE 2A                    5934 	ld	a, (hl+)
      001BCF 5F                    5935 	ld	e, a
      001BD0 56                    5936 	ld	d, (hl)
      001BD1 1A                    5937 	ld	a, (de)
      001BD2 4F                    5938 	ld	c, a
      001BD3 13                    5939 	inc	de
      001BD4 1A                    5940 	ld	a, (de)
      001BD5 47                    5941 	ld	b, a
      001BD6 18 05                 5942 	jr	00236$
      001BD8                       5943 00235$:
      001BD8 F8 0C                 5944 	ldhl	sp,#12
      001BDA 2A                    5945 	ld	a, (hl+)
      001BDB 4F                    5946 	ld	c, a
      001BDC 46                    5947 	ld	b, (hl)
      001BDD                       5948 00236$:
                                   5949 ;src/main.c:710: if (!(VISIBLE(stack->data) && is_stack_coherent(stack)))
      001BDD 59                    5950 	ld	e, c
      001BDE 50                    5951 	ld	d, b
      001BDF 13                    5952 	inc	de
      001BE0 13                    5953 	inc	de
      001BE1 1A                    5954 	ld	a, (de)
      001BE2 CB 77                 5955 	bit	6, a
      001BE4 28 6E                 5956 	jr	Z, 00194$
      001BE6 C5                    5957 	push	bc
      001BE7 C5                    5958 	push	bc
      001BE8 CDr54r10              5959 	call	_is_stack_coherent
      001BEB E8 02                 5960 	add	sp, #2
      001BED 7B                    5961 	ld	a, e
      001BEE C1                    5962 	pop	bc
      001BEF B7                    5963 	or	a, a
      001BF0 28 62                 5964 	jr	Z, 00194$
                                   5965 ;src/main.c:713: cursor.held_card = stack;
      001BF2 21r84r01              5966 	ld	hl, #_cursor
      001BF5 79                    5967 	ld	a, c
      001BF6 22                    5968 	ld	(hl+), a
      001BF7 70                    5969 	ld	(hl), b
                                   5970 ;src/main.c:714: cursor.hand_pile_idx = cursor.pile_idx;
      001BF8 FAr8Ar01              5971 	ld	a, (#(_cursor + 0x0006) + 0)
      001BFB EAr89r01              5972 	ld	(#(_cursor + 0x0005)),a
                                   5973 ;src/main.c:715: cursor.held_stack_size = pile->height - cursor.height;
                                   5974 ;c
      001BFE F8 09                 5975 	ldhl	sp,#9
      001C00 2A                    5976 	ld	a, (hl+)
      001C01 5F                    5977 	ld	e, a
      001C02 56                    5978 	ld	d, (hl)
      001C03 21 04 00              5979 	ld	hl, #0x0004
      001C06 19                    5980 	add	hl, de
      001C07 4D                    5981 	ld	c, l
      001C08 44                    5982 	ld	b, h
      001C09 0A                    5983 	ld	a, (bc)
      001C0A 21r8Br01              5984 	ld	hl, #(_cursor + 0x0007)
      001C0D 6E                    5985 	ld	l, (hl)
      001C0E 95                    5986 	sub	a, l
      001C0F EAr88r01              5987 	ld	(#(_cursor + 0x0004)),a
                                   5988 ;src/main.c:716: pile->height = cursor.height;
      001C12 FAr8Br01              5989 	ld	a, (#(_cursor + 0x0007) + 0)
      001C15 02                    5990 	ld	(bc), a
                                   5991 ;src/main.c:717: if (cursor.height) {
      001C16 FAr8Br01              5992 	ld	a, (#(_cursor + 0x0007) + 0)
      001C19 F8 0B                 5993 	ldhl	sp,	#11
      001C1B 77                    5994 	ld	(hl), a
                                   5995 ;src/main.c:718: pile->top = top;
      001C1C F8 09                 5996 	ldhl	sp,#9
      001C1E 2A                    5997 	ld	a, (hl+)
      001C1F 4F                    5998 	ld	c, a
      001C20 46                    5999 	ld	b, (hl)
      001C21 03                    6000 	inc	bc
      001C22 03                    6001 	inc	bc
                                   6002 ;src/main.c:720: cursor.card_to_show = top;
                                   6003 ;src/main.c:717: if (cursor.height) {
      001C23 23                    6004 	inc	hl
      001C24 7E                    6005 	ld	a, (hl)
      001C25 B7                    6006 	or	a, a
      001C26 28 1A                 6007 	jr	Z, 00182$
                                   6008 ;src/main.c:718: pile->top = top;
      001C28 23                    6009 	inc	hl
      001C29 2A                    6010 	ld	a, (hl+)
      001C2A 02                    6011 	ld	(bc), a
      001C2B 03                    6012 	inc	bc
      001C2C 7E                    6013 	ld	a, (hl)
      001C2D 02                    6014 	ld	(bc), a
                                   6015 ;src/main.c:719: top->next_card = NULL;
      001C2E 2B                    6016 	dec	hl
      001C2F 2A                    6017 	ld	a, (hl+)
      001C30 66                    6018 	ld	h, (hl)
      001C31 6F                    6019 	ld	l, a
      001C32 AF                    6020 	xor	a, a
      001C33 22                    6021 	ld	(hl+), a
      001C34 77                    6022 	ld	(hl), a
                                   6023 ;src/main.c:720: cursor.card_to_show = top;
      001C35 11r86r01              6024 	ld	de, #(_cursor + 0x0002)
      001C38 F8 0C                 6025 	ldhl	sp,	#12
      001C3A 7E                    6026 	ld	a, (hl)
      001C3B 12                    6027 	ld	(de), a
      001C3C 13                    6028 	inc	de
      001C3D 23                    6029 	inc	hl
      001C3E 7E                    6030 	ld	a, (hl)
      001C3F 12                    6031 	ld	(de), a
      001C40 18 12                 6032 	jr	00194$
      001C42                       6033 00182$:
                                   6034 ;src/main.c:722: pile->base = NULL;
      001C42 F8 09                 6035 	ldhl	sp,	#9
      001C44 2A                    6036 	ld	a, (hl+)
      001C45 66                    6037 	ld	h, (hl)
      001C46 6F                    6038 	ld	l, a
      001C47 AF                    6039 	xor	a, a
      001C48 22                    6040 	ld	(hl+), a
      001C49 77                    6041 	ld	(hl), a
                                   6042 ;src/main.c:723: pile->top = NULL;
      001C4A AF                    6043 	xor	a, a
      001C4B 02                    6044 	ld	(bc), a
      001C4C 03                    6045 	inc	bc
      001C4D 02                    6046 	ld	(bc), a
                                   6047 ;src/main.c:724: cursor.card_to_show = NULL;
      001C4E 21r86r01              6048 	ld	hl, #(_cursor + 0x0002)
      001C51 AF                    6049 	xor	a, a
      001C52 22                    6050 	ld	(hl+), a
      001C53 77                    6051 	ld	(hl), a
                                   6052 ;src/main.c:1079: }
      001C54                       6053 00194$:
                                   6054 ;src/main.c:1081: prev_input = input;
      001C54 F8 00                 6055 	ldhl	sp,	#0
      001C56 7E                    6056 	ld	a, (hl)
      001C57 EAr8Fr01              6057 	ld	(#_main_prev_input_327681_368),a
                                   6058 ;src/main.c:742: switch (flags & FLAG_GAME_STATE) {
      001C5A FAr6Br01              6059 	ld	a, (#_flags)
      001C5D E6 18                 6060 	and	a, #0x18
      001C5F 47                    6061 	ld	b, a
      001C60 0E 00                 6062 	ld	c, #0x00
      001C62 78                    6063 	ld	a, b
      001C63 B7                    6064 	or	a, a
      001C64 B1                    6065 	or	a, c
      001C65 CArA5r1D              6066 	jp	Z,00217$
                                   6067 ;src/main.c:746: cursor.anim_ctr++;
      001C68 21r8Cr01              6068 	ld	hl, #_cursor + 8
      001C6B 56                    6069 	ld	d, (hl)
      001C6C 14                    6070 	inc	d
      001C6D 72                    6071 	ld	(hl), d
                                   6072 ;src/main.c:747: cursor.anim_ctr &= (1u << (CURSOR_PERIOD_LOGSCALE + 1u)) - 1u;
      001C6E CB BA                 6073 	res	7, d
      001C70 72                    6074 	ld	(hl), d
                                   6075 ;src/main.c:748: UINT8 prev_anim_frame = cursor.anim_frame;
      001C71 01r8Dr01              6076 	ld	bc, #_cursor + 9
      001C74 0A                    6077 	ld	a, (bc)
      001C75 5F                    6078 	ld	e, a
                                   6079 ;src/main.c:749: cursor.anim_frame = cursor.anim_ctr >> CURSOR_PERIOD_LOGSCALE;
      001C76 7A                    6080 	ld	a, d
      001C77 07                    6081 	rlca
      001C78 07                    6082 	rlca
      001C79 E6 03                 6083 	and	a, #0x03
      001C7B 02                    6084 	ld	(bc), a
                                   6085 ;src/main.c:750: if (cursor.anim_frame != prev_anim_frame)
      001C7C 93                    6086 	sub	a, e
      001C7D 28 07                 6087 	jr	Z, 00199$
                                   6088 ;src/main.c:751: flags |= FLAG_REDRAW_CURSOR;
      001C7F 21r6Br01              6089 	ld	hl, #_flags
      001C82 7E                    6090 	ld	a, (hl)
      001C83 F6 01                 6091 	or	a, #0x01
      001C85 77                    6092 	ld	(hl), a
      001C86                       6093 00199$:
                                   6094 ;src/main.c:753: if (flags & FLAG_REDRAW_CURSOR) {
      001C86 FAr6Br01              6095 	ld	a, (#_flags)
      001C89 0F                    6096 	rrca
      001C8A D2r47r1D              6097 	jp	NC,00210$
                                   6098 ;src/main.c:754: flags &= ~FLAG_REDRAW_CURSOR;
      001C8D 21r6Br01              6099 	ld	hl, #_flags
      001C90 7E                    6100 	ld	a, (hl)
      001C91 E6 FE                 6101 	and	a, #0xfe
      001C93 77                    6102 	ld	(hl), a
                                   6103 ;src/main.c:755: switch (flags & FLAG_GAME_STATE) {
      001C94 7E                    6104 	ld	a, (hl)
      001C95 E6 18                 6105 	and	a, #0x18
      001C97 6F                    6106 	ld	l, a
      001C98 26 00                 6107 	ld	h, #0x00
                                   6108 ;src/main.c:761: SETTINGS_PAD_Y * 8u + cursor.pile_idx * 32u
      001C9A 11r8Ar01              6109 	ld	de, #_cursor + 6
                                   6110 ;src/main.c:760: cursor.height * 16u + SETTINGS_SPLIT_X * 8u,
                                   6111 ;src/main.c:755: switch (flags & FLAG_GAME_STATE) {
      001C9D 7D                    6112 	ld	a, l
      001C9E D6 10                 6113 	sub	a, #0x10
      001CA0 B4                    6114 	or	a, h
      001CA1 28 43                 6115 	jr	Z, 00207$
      001CA3 7D                    6116 	ld	a, l
      001CA4 D6 18                 6117 	sub	a, #0x18
      001CA6 B4                    6118 	or	a, h
      001CA7 C2r47r1D              6119 	jp	NZ,00210$
                                   6120 ;src/main.c:761: SETTINGS_PAD_Y * 8u + cursor.pile_idx * 32u
      001CAA 1A                    6121 	ld	a, (de)
      001CAB CB 37                 6122 	swap	a
      001CAD 07                    6123 	rlca
      001CAE E6 E0                 6124 	and	a, #0xe0
      001CB0 C6 08                 6125 	add	a, #0x08
      001CB2 F8 0C                 6126 	ldhl	sp,	#12
      001CB4 77                    6127 	ld	(hl), a
                                   6128 ;src/main.c:760: cursor.height * 16u + SETTINGS_SPLIT_X * 8u,
      001CB5 FAr8Br01              6129 	ld	a, (#(_cursor + 0x0007) + 0)
      001CB8 CB 37                 6130 	swap	a
      001CBA E6 F0                 6131 	and	a, #0xf0
      001CBC C6 50                 6132 	add	a, #0x50
      001CBE 23                    6133 	inc	hl
      001CBF 77                    6134 	ld	(hl), a
                                   6135 ;src/main.c:757: move_metasprite(cursor_metasprites[cursor.anim_frame],
      001CC0 11r00r00              6136 	ld	de, #_cursor_metasprites+0
      001CC3 0A                    6137 	ld	a, (bc)
      001CC4 6F                    6138 	ld	l, a
      001CC5 26 00                 6139 	ld	h, #0x00
      001CC7 29                    6140 	add	hl, hl
      001CC8 19                    6141 	add	hl, de
      001CC9 2A                    6142 	ld	a, (hl+)
      001CCA 4E                    6143 	ld	c, (hl)
                                   6144 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      001CCB 21r00r00              6145 	ld	hl, #___current_metasprite
      001CCE 22                    6146 	ld	(hl+), a
      001CCF 71                    6147 	ld	(hl), c
                                   6148 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      001CD0 21r00r00              6149 	ld	hl, #___current_base_tile
      001CD3 36 01                 6150 	ld	(hl), #0x01
                                   6151 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      001CD5 F8 0C                 6152 	ldhl	sp,	#12
      001CD7 7E                    6153 	ld	a, (hl)
      001CD8 F5                    6154 	push	af
      001CD9 33                    6155 	inc	sp
      001CDA 23                    6156 	inc	hl
      001CDB 56                    6157 	ld	d, (hl)
      001CDC 1E 0C                 6158 	ld	e,#0x0c
      001CDE D5                    6159 	push	de
      001CDF CDr00r00              6160 	call	___move_metasprite
      001CE2 E8 03                 6161 	add	sp, #3
                                   6162 ;src/main.c:763: break;
      001CE4 18 61                 6163 	jr	00210$
                                   6164 ;src/main.c:764: case FLAG_GAME_STATE_INGAME:
      001CE6                       6165 00207$:
                                   6166 ;src/main.c:765: if (cursor.pile_idx == PILE_IDX_DECK)
      001CE6 1A                    6167 	ld	a, (de)
      001CE7 F8 0D                 6168 	ldhl	sp,	#13
      001CE9 77                    6169 	ld	(hl), a
                                   6170 ;src/main.c:748: UINT8 prev_anim_frame = cursor.anim_frame;
      001CEA 0A                    6171 	ld	a, (bc)
                                   6172 ;src/main.c:766: move_metasprite(cursor_metasprites[cursor.anim_frame],
      001CEB 6F                    6173 	ld	l, a
      001CEC 26 00                 6174 	ld	h, #0x00
      001CEE 29                    6175 	add	hl, hl
      001CEF 4D                    6176 	ld	c, l
      001CF0 44                    6177 	ld	b, h
                                   6178 ;src/main.c:765: if (cursor.pile_idx == PILE_IDX_DECK)
      001CF1 F8 0D                 6179 	ldhl	sp,	#13
      001CF3 7E                    6180 	ld	a, (hl)
      001CF4 D6 0A                 6181 	sub	a, #0x0a
      001CF6 20 1F                 6182 	jr	NZ, 00205$
                                   6183 ;src/main.c:766: move_metasprite(cursor_metasprites[cursor.anim_frame],
      001CF8 21r00r00              6184 	ld	hl, #_cursor_metasprites
      001CFB 09                    6185 	add	hl, bc
      001CFC 2A                    6186 	ld	a, (hl+)
      001CFD 4E                    6187 	ld	c, (hl)
                                   6188 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      001CFE 21r00r00              6189 	ld	hl, #___current_metasprite
      001D01 22                    6190 	ld	(hl+), a
      001D02 71                    6191 	ld	(hl), c
                                   6192 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      001D03 21r00r00              6193 	ld	hl, #___current_base_tile
      001D06 36 01                 6194 	ld	(hl), #0x01
                                   6195 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      001D08 AF                    6196 	xor	a, a
      001D09 F5                    6197 	push	af
      001D0A 33                    6198 	inc	sp
      001D0B AF                    6199 	xor	a, a
      001D0C 57                    6200 	ld	d,a
      001D0D 1E 0C                 6201 	ld	e,#0x0c
      001D0F D5                    6202 	push	de
      001D10 CDr00r00              6203 	call	___move_metasprite
      001D13 E8 03                 6204 	add	sp, #3
                                   6205 ;src/main.c:771: );
      001D15 18 30                 6206 	jr	00210$
      001D17                       6207 00205$:
                                   6208 ;src/main.c:777: (cursor.height + 3u) * 8u
      001D17 FAr8Br01              6209 	ld	a, (#(_cursor + 0x0007) + 0)
      001D1A C6 03                 6210 	add	a, #0x03
      001D1C 87                    6211 	add	a, a
      001D1D 87                    6212 	add	a, a
      001D1E 87                    6213 	add	a, a
      001D1F F8 0C                 6214 	ldhl	sp,	#12
                                   6215 ;src/main.c:776: cursor.pile_idx * 16u,
      001D21 22                    6216 	ld	(hl+), a
      001D22 7E                    6217 	ld	a, (hl)
      001D23 CB 37                 6218 	swap	a
      001D25 E6 F0                 6219 	and	a, #0xf0
      001D27 77                    6220 	ld	(hl), a
                                   6221 ;src/main.c:773: move_metasprite(cursor_metasprites[cursor.anim_frame],
      001D28 21r00r00              6222 	ld	hl, #_cursor_metasprites
      001D2B 09                    6223 	add	hl, bc
      001D2C 2A                    6224 	ld	a, (hl+)
      001D2D 4E                    6225 	ld	c, (hl)
                                   6226 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      001D2E 21r00r00              6227 	ld	hl, #___current_metasprite
      001D31 22                    6228 	ld	(hl+), a
      001D32 71                    6229 	ld	(hl), c
                                   6230 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      001D33 21r00r00              6231 	ld	hl, #___current_base_tile
      001D36 36 01                 6232 	ld	(hl), #0x01
                                   6233 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      001D38 F8 0C                 6234 	ldhl	sp,	#12
      001D3A 7E                    6235 	ld	a, (hl)
      001D3B F5                    6236 	push	af
      001D3C 33                    6237 	inc	sp
      001D3D 23                    6238 	inc	hl
      001D3E 56                    6239 	ld	d, (hl)
      001D3F 1E 0C                 6240 	ld	e,#0x0c
      001D41 D5                    6241 	push	de
      001D42 CDr00r00              6242 	call	___move_metasprite
      001D45 E8 03                 6243 	add	sp, #3
                                   6244 ;src/main.c:780: }
      001D47                       6245 00210$:
                                   6246 ;src/main.c:783: if (flags & FLAG_REDRAW_HAND) {
      001D47 FAr6Br01              6247 	ld	a, (#_flags)
      001D4A CB 4F                 6248 	bit	1, a
      001D4C 28 57                 6249 	jr	Z, 00217$
                                   6250 ;src/main.c:784: flags &= ~FLAG_REDRAW_HAND;
      001D4E 21r6Br01              6251 	ld	hl, #_flags
      001D51 7E                    6252 	ld	a, (hl)
      001D52 E6 FD                 6253 	and	a, #0xfd
      001D54 77                    6254 	ld	(hl), a
                                   6255 ;src/main.c:785: if (cursor.held_card) {
      001D55 21r84r01              6256 	ld	hl, #_cursor
      001D58 2A                    6257 	ld	a, (hl+)
      001D59 B6                    6258 	or	a,(hl)
      001D5A 28 41                 6259 	jr	Z, 00213$
                                   6260 ;src/main.c:786: UINT8 height = piles[cursor.hand_pile_idx].height;
      001D5C 21r89r01              6261 	ld	hl, #_cursor + 5
      001D5F 4E                    6262 	ld	c, (hl)
      001D60 06 00                 6263 	ld	b, #0x00
      001D62 69                    6264 	ld	l, c
      001D63 60                    6265 	ld	h, b
      001D64 29                    6266 	add	hl, hl
      001D65 29                    6267 	add	hl, hl
      001D66 09                    6268 	add	hl, bc
      001D67 11r38r01              6269 	ld	de, #_piles
      001D6A 19                    6270 	add	hl, de
      001D6B 23                    6271 	inc	hl
      001D6C 23                    6272 	inc	hl
      001D6D 23                    6273 	inc	hl
      001D6E 23                    6274 	inc	hl
      001D6F 46                    6275 	ld	b, (hl)
                                   6276 ;src/main.c:791: (height + !height + 2u) * 8u
      001D70 78                    6277 	ld	a, b
      001D71 D6 01                 6278 	sub	a,#0x01
      001D73 3E 00                 6279 	ld	a, #0x00
      001D75 17                    6280 	rla
      001D76 80                    6281 	add	a, b
      001D77 C6 02                 6282 	add	a, #0x02
      001D79 87                    6283 	add	a, a
      001D7A 87                    6284 	add	a, a
      001D7B 87                    6285 	add	a, a
      001D7C 57                    6286 	ld	d, a
                                   6287 ;src/main.c:790: cursor.hand_pile_idx * 16u,
      001D7D 79                    6288 	ld	a, c
      001D7E CB 37                 6289 	swap	a
      001D80 E6 F0                 6290 	and	a, #0xf0
      001D82 47                    6291 	ld	b, a
                                   6292 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      001D83 21r00r00              6293 	ld	hl, #___current_metasprite
      001D86 36r00                 6294 	ld	(hl), #<(_metasprite_sequential_2x3)
      001D88 23                    6295 	inc	hl
      001D89 36s00                 6296 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   6297 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      001D8B 21r00r00              6298 	ld	hl, #___current_base_tile
      001D8E 36 03                 6299 	ld	(hl), #0x03
                                   6300 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      001D90 58                    6301 	ld	e, b
      001D91 D5                    6302 	push	de
      001D92 3E 06                 6303 	ld	a, #0x06
      001D94 F5                    6304 	push	af
      001D95 33                    6305 	inc	sp
      001D96 CDr00r00              6306 	call	___move_metasprite
      001D99 E8 03                 6307 	add	sp, #3
                                   6308 ;src/main.c:792: );
      001D9B 18 08                 6309 	jr	00217$
      001D9D                       6310 00213$:
                                   6311 ;src/main.c:794: metasprite_2x3_hide(SPRITE_HAND);
      001D9D 3E 06                 6312 	ld	a, #0x06
      001D9F F5                    6313 	push	af
      001DA0 33                    6314 	inc	sp
      001DA1 CDrA4r03              6315 	call	_metasprite_2x3_hide
      001DA4 33                    6316 	inc	sp
                                   6317 ;src/main.c:1104: cursor_process();
      001DA5                       6318 00217$:
                                   6319 ;src/main.c:675: if (dynamic_metasprite.elapsed_frames >= dynamic_metasprite.target_frames)
      001DA5 FAr78r01              6320 	ld	a, (#(_dynamic_metasprite + 0x0009) + 0)
      001DA8 F8 0D                 6321 	ldhl	sp,	#13
      001DAA 77                    6322 	ld	(hl), a
      001DAB 21r77r01              6323 	ld	hl, #(_dynamic_metasprite + 0x0008)
      001DAE 4E                    6324 	ld	c, (hl)
      001DAF 59                    6325 	ld	e, c
      001DB0 F8 0D                 6326 	ldhl	sp,	#13
      001DB2 56                    6327 	ld	d, (hl)
      001DB3 7E                    6328 	ld	a, (hl)
      001DB4 91                    6329 	sub	a, c
      001DB5 CB 7B                 6330 	bit	7, e
      001DB7 28 07                 6331 	jr	Z, 00571$
      001DB9 CB 7A                 6332 	bit	7, d
      001DBB 20 08                 6333 	jr	NZ, 00572$
      001DBD BF                    6334 	cp	a, a
      001DBE 18 05                 6335 	jr	00572$
      001DC0                       6336 00571$:
      001DC0 CB 7A                 6337 	bit	7, d
      001DC2 28 01                 6338 	jr	Z, 00572$
      001DC4 37                    6339 	scf
      001DC5                       6340 00572$:
      001DC5 D2r6Fr1E              6341 	jp	NC, 00224$
                                   6342 ;src/main.c:678: dynamic_metasprite.elapsed_frames++;
      001DC8 F8 0D                 6343 	ldhl	sp,	#13
      001DCA 7E                    6344 	ld	a, (hl)
      001DCB 3C                    6345 	inc	a
      001DCC 2B                    6346 	dec	hl
      001DCD 77                    6347 	ld	(hl), a
      001DCE 11r78r01              6348 	ld	de, #(_dynamic_metasprite + 0x0009)
      001DD1 7E                    6349 	ld	a, (hl)
      001DD2 12                    6350 	ld	(de), a
                                   6351 ;src/main.c:683: dynamic_metasprite.src[1] + (dynamic_metasprite.dist[1] * dynamic_metasprite.elapsed_frames / dynamic_metasprite.target_frames)
      001DD3 FAr71r01              6352 	ld	a, (#(_dynamic_metasprite + 0x0002) + 0)
      001DD6 F8 0D                 6353 	ldhl	sp,	#13
      001DD8 77                    6354 	ld	(hl), a
      001DD9 21r75r01              6355 	ld	hl, #_dynamic_metasprite + 6
      001DDC 2A                    6356 	ld	a, (hl+)
      001DDD 4F                    6357 	ld	c, a
      001DDE 46                    6358 	ld	b, (hl)
      001DDF F8 0C                 6359 	ldhl	sp,	#12
      001DE1 7E                    6360 	ld	a, (hl)
      001DE2 F8 08                 6361 	ldhl	sp,	#8
      001DE4 77                    6362 	ld	(hl), a
      001DE5 17                    6363 	rla
      001DE6 9F                    6364 	sbc	a, a
      001DE7 23                    6365 	inc	hl
      001DE8 32                    6366 	ld	(hl-), a
      001DE9 2A                    6367 	ld	a, (hl+)
      001DEA 66                    6368 	ld	h, (hl)
      001DEB 6F                    6369 	ld	l, a
      001DEC E5                    6370 	push	hl
      001DED C5                    6371 	push	bc
      001DEE CDr00r00              6372 	call	__mulint
      001DF1 E8 04                 6373 	add	sp, #4
      001DF3 4B                    6374 	ld	c, e
      001DF4 42                    6375 	ld	b, d
      001DF5 FAr77r01              6376 	ld	a, (#(_dynamic_metasprite + 0x0008) + 0)
      001DF8 F8 0A                 6377 	ldhl	sp,	#10
      001DFA 77                    6378 	ld	(hl), a
      001DFB 17                    6379 	rla
      001DFC 9F                    6380 	sbc	a, a
      001DFD 23                    6381 	inc	hl
      001DFE 32                    6382 	ld	(hl-), a
      001DFF 2A                    6383 	ld	a, (hl+)
      001E00 66                    6384 	ld	h, (hl)
      001E01 6F                    6385 	ld	l, a
      001E02 E5                    6386 	push	hl
      001E03 C5                    6387 	push	bc
      001E04 CDr00r00              6388 	call	__divsint
      001E07 E8 04                 6389 	add	sp, #4
      001E09 7B                    6390 	ld	a, e
      001E0A F8 0D                 6391 	ldhl	sp,	#13
      001E0C 86                    6392 	add	a, (hl)
      001E0D 2B                    6393 	dec	hl
      001E0E 77                    6394 	ld	(hl), a
                                   6395 ;src/main.c:682: dynamic_metasprite.src[0] + (dynamic_metasprite.dist[0] * dynamic_metasprite.elapsed_frames / dynamic_metasprite.target_frames),
      001E0F FAr6Fr01              6396 	ld	a, (#_dynamic_metasprite + 0)
      001E12 F8 0D                 6397 	ldhl	sp,	#13
      001E14 77                    6398 	ld	(hl), a
      001E15 21r73r01              6399 	ld	hl, #(_dynamic_metasprite + 0x0004)
      001E18 2A                    6400 	ld	a, (hl+)
      001E19 4F                    6401 	ld	c, a
      001E1A 46                    6402 	ld	b, (hl)
      001E1B F8 08                 6403 	ldhl	sp,	#8
      001E1D 2A                    6404 	ld	a, (hl+)
      001E1E 66                    6405 	ld	h, (hl)
      001E1F 6F                    6406 	ld	l, a
      001E20 E5                    6407 	push	hl
      001E21 C5                    6408 	push	bc
      001E22 CDr00r00              6409 	call	__mulint
      001E25 E8 04                 6410 	add	sp, #4
      001E27 F8 0A                 6411 	ldhl	sp,	#10
      001E29 2A                    6412 	ld	a, (hl+)
      001E2A 66                    6413 	ld	h, (hl)
      001E2B 6F                    6414 	ld	l, a
      001E2C E5                    6415 	push	hl
      001E2D D5                    6416 	push	de
      001E2E CDr00r00              6417 	call	__divsint
      001E31 E8 04                 6418 	add	sp, #4
      001E33 7B                    6419 	ld	a, e
      001E34 F8 0D                 6420 	ldhl	sp,	#13
      001E36 86                    6421 	add	a, (hl)
      001E37 47                    6422 	ld	b, a
                                   6423 ;src/main.c:680: dynamic_metasprite.metasprite_offset,
      001E38 FAr7Br01              6424 	ld	a, (#(_dynamic_metasprite + 0x000c) + 0)
      001E3B EAr00r00              6425 	ld	(#___current_base_tile),a
                                   6426 ;src/main.c:679: move_metasprite(dynamic_metasprite.metasprite,
      001E3E 21r79r01              6427 	ld	hl, #_dynamic_metasprite + 10
      001E41 2A                    6428 	ld	a, (hl+)
      001E42 4E                    6429 	ld	c, (hl)
                                   6430 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      001E43 21r00r00              6431 	ld	hl, #___current_metasprite
      001E46 22                    6432 	ld	(hl+), a
      001E47 71                    6433 	ld	(hl), c
                                   6434 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      001E48 F8 0C                 6435 	ldhl	sp,	#12
      001E4A 7E                    6436 	ld	a, (hl)
      001E4B F5                    6437 	push	af
      001E4C 33                    6438 	inc	sp
      001E4D C5                    6439 	push	bc
      001E4E 33                    6440 	inc	sp
      001E4F AF                    6441 	xor	a, a
      001E50 F5                    6442 	push	af
      001E51 33                    6443 	inc	sp
      001E52 CDr00r00              6444 	call	___move_metasprite
      001E55 E8 03                 6445 	add	sp, #3
                                   6446 ;src/main.c:685: if (dynamic_metasprite.elapsed_frames == dynamic_metasprite.target_frames
      001E57 FAr78r01              6447 	ld	a, (#(_dynamic_metasprite + 0x0009) + 0)
      001E5A 21r77r01              6448 	ld	hl, #(_dynamic_metasprite + 0x0008)
      001E5D 4E                    6449 	ld	c, (hl)
      001E5E 91                    6450 	sub	a, c
      001E5F 20 0E                 6451 	jr	NZ, 00224$
                                   6452 ;src/main.c:686: && dynamic_metasprite.callback)
      001E61 21r82r01              6453 	ld	hl, #_dynamic_metasprite + 19
      001E64 2A                    6454 	ld	a, (hl+)
      001E65 4F                    6455 	ld	c, a
      001E66 66                    6456 	ld	h, (hl)
      001E67 7C                    6457 	ld	a, h
      001E68 B1                    6458 	or	a, c
      001E69 28 04                 6459 	jr	Z, 00224$
                                   6460 ;src/main.c:687: dynamic_metasprite.callback();
      001E6B 69                    6461 	ld	l, c
      001E6C CDr00r00              6462 	call	___sdcc_call_hl
                                   6463 ;src/main.c:1106: dynamic_metasprite_process();
      001E6F                       6464 00224$:
                                   6465 ;src/main.c:1108: wait_vbl_done();
      001E6F CDr00r00              6466 	call	_wait_vbl_done
      001E72 C3r23r18              6467 	jp	00102$
                                   6468 ;src/main.c:1110: }
      001E75 E8 0E                 6469 	add	sp, #14
      001E77 C9                    6470 	ret
                                   6471 	.area _CODE
                                   6472 	.area _CABS (ABS)
