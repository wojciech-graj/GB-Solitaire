                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mgbz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _pile_append_cursor_stack
                                     13 	.globl _dynamic_metasprite_deal
                                     14 	.globl _dynamic_metasprite_deal_callback
                                     15 	.globl _cursor_adjust_height
                                     16 	.globl _draw_background
                                     17 	.globl _draw_card
                                     18 	.globl _draw_pile
                                     19 	.globl _init_deck
                                     20 	.globl _metasprite_2x3_hide
                                     21 	.globl _rand
                                     22 	.globl _initrand
                                     23 	.globl _set_sprite_data
                                     24 	.globl _set_bkg_tile_xy
                                     25 	.globl _set_bkg_data
                                     26 	.globl _get_bkg_xy_addr
                                     27 	.globl _wait_vbl_done
                                     28 	.globl _joypad
                                     29 	.globl _cursor
                                     30 	.globl _dynamic_metasprite
                                     31 	.globl _score
                                     32 	.globl _top_card_idx
                                     33 	.globl _piles
                                     34 	.globl _deck
                                     35 ;--------------------------------------------------------
                                     36 ; special function registers
                                     37 ;--------------------------------------------------------
                                     38 ;--------------------------------------------------------
                                     39 ; ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area _DATA
      000000                         42 _deck::
      000000                         43 	.ds 312
      000138                         44 _piles::
      000138                         45 	.ds 50
      00016A                         46 _top_card_idx::
      00016A                         47 	.ds 1
      00016B                         48 _score::
      00016B                         49 	.ds 2
      00016D                         50 _dynamic_metasprite::
      00016D                         51 	.ds 14
      00017B                         52 _cursor::
      00017B                         53 	.ds 11
      000186                         54 _input_process_prev_input_65536_182:
      000186                         55 	.ds 1
      000187                         56 _main_prev_input_327680_236:
      000187                         57 	.ds 1
                                     58 ;--------------------------------------------------------
                                     59 ; absolute external ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area _DABS (ABS)
                                     62 ;--------------------------------------------------------
                                     63 ; global & static initialisations
                                     64 ;--------------------------------------------------------
                                     65 	.area _HOME
                                     66 	.area _GSINIT
                                     67 	.area _GSFINAL
                                     68 	.area _GSINIT
                                     69 ;src/main.c:378: static UINT8 prev_input = 0;
      000000 21r86r01                70 	ld	hl, #_input_process_prev_input_65536_182
      000003 36 00                   71 	ld	(hl), #0x00
      000005 21r87r01                72 	ld	hl, #_main_prev_input_327680_236
      000008 36 00                   73 	ld	(hl), #0x00
                                     74 ;src/main.c:103: UINT16 score = 500;
      00000A 21r6Br01                75 	ld	hl, #_score
      00000D 36 F4                   76 	ld	(hl), #0xf4
      00000F 23                      77 	inc	hl
      000010 36 01                   78 	ld	(hl), #0x01
                                     79 ;src/main.c:105: DynamicMetaSprite dynamic_metasprite = {
      000012 21r73r01                80 	ld	hl, #(_dynamic_metasprite + 0x0006)
      000015 36 FF                   81 	ld	(hl), #0xff
      000017 21r74r01                82 	ld	hl, #(_dynamic_metasprite + 0x0007)
      00001A 36 00                   83 	ld	(hl), #0x00
                                     84 ;src/main.c:110: Cursor cursor = {
      00001C 21r7Br01                85 	ld	hl, #_cursor
      00001F AF                      86 	xor	a, a
      000020 22                      87 	ld	(hl+), a
      000021 77                      88 	ld	(hl), a
      000022 21r7Dr01                89 	ld	hl, #(_cursor + 0x0002)
      000025 AF                      90 	xor	a, a
      000026 22                      91 	ld	(hl+), a
      000027 77                      92 	ld	(hl), a
      000028 21r80r01                93 	ld	hl, #(_cursor + 0x0005)
      00002B 36 00                   94 	ld	(hl), #0x00
      00002D 21r81r01                95 	ld	hl, #(_cursor + 0x0006)
      000030 36 0A                   96 	ld	(hl), #0x0a
      000032 21r82r01                97 	ld	hl, #(_cursor + 0x0007)
      000035 36 00                   98 	ld	(hl), #0x00
      000037 21r83r01                99 	ld	hl, #(_cursor + 0x0008)
      00003A 36 00                  100 	ld	(hl), #0x00
      00003C 21r84r01               101 	ld	hl, #(_cursor + 0x0009)
      00003F 36 00                  102 	ld	(hl), #0x00
      000041 21r85r01               103 	ld	hl, #(_cursor + 0x000a)
      000044 36 01                  104 	ld	(hl), #0x01
                                    105 ;--------------------------------------------------------
                                    106 ; Home
                                    107 ;--------------------------------------------------------
                                    108 	.area _HOME
                                    109 	.area _HOME
                                    110 ;--------------------------------------------------------
                                    111 ; code
                                    112 ;--------------------------------------------------------
                                    113 	.area _CODE
                                    114 ;src/main.c:121: void metasprite_2x3_hide(UINT8 sprite)
                                    115 ;	---------------------------------
                                    116 ; Function metasprite_2x3_hide
                                    117 ; ---------------------------------
      000000                        118 _metasprite_2x3_hide::
                                    119 ;src/main.c:128: );
      000000 F8 02                  120 	ldhl	sp,	#2
      000002 46                     121 	ld	b, (hl)
                                    122 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      000003 21r00r00               123 	ld	hl, #___current_metasprite
      000006 36r00                  124 	ld	(hl), #<(_metasprite_same_2x3)
      000008 23                     125 	inc	hl
      000009 36s00                  126 	ld	(hl), #>(_metasprite_same_2x3)
                                    127 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      00000B 21r00r00               128 	ld	hl, #___current_base_tile
      00000E 36 00                  129 	ld	(hl), #0x00
                                    130 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      000010 AF                     131 	xor	a, a
      000011 F5                     132 	push	af
      000012 33                     133 	inc	sp
      000013 AF                     134 	xor	a, a
      000014 F5                     135 	push	af
      000015 33                     136 	inc	sp
      000016 C5                     137 	push	bc
      000017 33                     138 	inc	sp
      000018 CDr00r00               139 	call	___move_metasprite
      00001B E8 03                  140 	add	sp, #3
                                    141 ;src/main.c:128: );
                                    142 ;src/main.c:129: }
      00001D C9                     143 	ret
                                    144 ;src/main.c:132: void init_deck(void)
                                    145 ;	---------------------------------
                                    146 ; Function init_deck
                                    147 ; ---------------------------------
      00001E                        148 _init_deck::
      00001E E8 F0                  149 	add	sp, #-16
                                    150 ;src/main.c:134: Card *card = IDX_PTR(deck, 0);
      000020 01r00r00               151 	ld	bc, #_deck
                                    152 ;src/main.c:139: for (suit = 0; suit < 4u; suit++) {
      000023 AF                     153 	xor	a, a
      000024 F8 0B                  154 	ldhl	sp,	#11
      000026 77                     155 	ld	(hl), a
                                    156 ;src/main.c:140: for (rank = 0; rank < 13u; rank++) {
      000027                        157 00131$:
      000027 F8 0B                  158 	ldhl	sp,	#11
      000029 7E                     159 	ld	a, (hl)
      00002A CB 37                  160 	swap	a
      00002C E6 F0                  161 	and	a, #0xf0
      00002E F8 07                  162 	ldhl	sp,	#7
      000030 77                     163 	ld	(hl), a
      000031 AF                     164 	xor	a, a
      000032 F8 0C                  165 	ldhl	sp,	#12
      000034 77                     166 	ld	(hl), a
                                    167 ;src/main.c:141: for (i = 0; i < 2u; i++) {
      000035                        168 00129$:
      000035 F8 0C                  169 	ldhl	sp,	#12
      000037 7E                     170 	ld	a, (hl)
      000038 F8 07                  171 	ldhl	sp,	#7
      00003A B6                     172 	or	a, (hl)
      00003B 23                     173 	inc	hl
      00003C 77                     174 	ld	(hl), a
      00003D F8 0D                  175 	ldhl	sp,	#13
      00003F 79                     176 	ld	a, c
      000040 22                     177 	ld	(hl+), a
      000041 78                     178 	ld	a, b
      000042 22                     179 	ld	(hl+), a
      000043 36 02                  180 	ld	(hl), #0x02
      000045                        181 00113$:
                                    182 ;src/main.c:142: card->data = rank | (suit << BIT_OFFSET_DATA_SUIT);
                                    183 ;c
      000045 F8 0D                  184 	ldhl	sp,#13
      000047 2A                     185 	ld	a, (hl+)
      000048 5F                     186 	ld	e, a
      000049 56                     187 	ld	d, (hl)
      00004A 21 02 00               188 	ld	hl, #0x0002
      00004D 19                     189 	add	hl, de
      00004E E5                     190 	push	hl
      00004F 7D                     191 	ld	a, l
      000050 F8 0B                  192 	ldhl	sp,	#11
      000052 77                     193 	ld	(hl), a
      000053 E1                     194 	pop	hl
      000054 7C                     195 	ld	a, h
      000055 F8 0A                  196 	ldhl	sp,	#10
      000057 32                     197 	ld	(hl-), a
      000058 2A                     198 	ld	a, (hl+)
      000059 5F                     199 	ld	e, a
      00005A 3A                     200 	ld	a, (hl-)
      00005B 57                     201 	ld	d, a
      00005C 2B                     202 	dec	hl
      00005D 7E                     203 	ld	a, (hl)
      00005E 12                     204 	ld	(de), a
                                    205 ;src/main.c:143: card++;
                                    206 ;c
      00005F F8 0D                  207 	ldhl	sp,#13
      000061 2A                     208 	ld	a, (hl+)
      000062 5F                     209 	ld	e, a
      000063 56                     210 	ld	d, (hl)
      000064 21 03 00               211 	ld	hl, #0x0003
      000067 19                     212 	add	hl, de
      000068 E5                     213 	push	hl
      000069 7D                     214 	ld	a, l
      00006A F8 0F                  215 	ldhl	sp,	#15
      00006C 77                     216 	ld	(hl), a
      00006D E1                     217 	pop	hl
      00006E 7C                     218 	ld	a, h
      00006F F8 0E                  219 	ldhl	sp,	#14
      000071 22                     220 	ld	(hl+), a
                                    221 ;src/main.c:141: for (i = 0; i < 2u; i++) {
      000072 35                     222 	dec	(hl)
      000073 20 D0                  223 	jr	NZ, 00113$
                                    224 ;src/main.c:140: for (rank = 0; rank < 13u; rank++) {
      000075 2B                     225 	dec	hl
      000076 2B                     226 	dec	hl
      000077 2A                     227 	ld	a, (hl+)
      000078 4F                     228 	ld	c, a
      000079 3A                     229 	ld	a, (hl-)
      00007A 47                     230 	ld	b, a
      00007B 2B                     231 	dec	hl
      00007C 34                     232 	inc	(hl)
      00007D 7E                     233 	ld	a, (hl)
      00007E D6 0D                  234 	sub	a, #0x0d
      000080 38 B3                  235 	jr	C, 00129$
                                    236 ;src/main.c:139: for (suit = 0; suit < 4u; suit++) {
      000082 2B                     237 	dec	hl
      000083 34                     238 	inc	(hl)
      000084 7E                     239 	ld	a, (hl)
      000085 D6 04                  240 	sub	a, #0x04
      000087 38 9E                  241 	jr	C, 00131$
                                    242 ;src/main.c:148: card = IDX_PTR(deck, 103u);
      000089 23                     243 	inc	hl
      00008A 23                     244 	inc	hl
      00008B 3Er35                  245 	ld	a, #<((_deck + 0x0135))
      00008D 22                     246 	ld	(hl+), a
      00008E 36s01                  247 	ld	(hl), #>((_deck + 0x0135))
                                    248 ;src/main.c:149: for (i = 103u; i; i--) {
      000090 F8 02                  249 	ldhl	sp,	#2
      000092 7D                     250 	ld	a, l
      000093 54                     251 	ld	d, h
      000094 F8 07                  252 	ldhl	sp,	#7
      000096 22                     253 	ld	(hl+), a
      000097 7A                     254 	ld	a, d
      000098 32                     255 	ld	(hl-), a
      000099 2A                     256 	ld	a, (hl+)
      00009A 5E                     257 	ld	e, (hl)
      00009B 23                     258 	inc	hl
      00009C 22                     259 	ld	(hl+), a
      00009D 73                     260 	ld	(hl), e
      00009E F8 0F                  261 	ldhl	sp,	#15
      0000A0 36 67                  262 	ld	(hl), #0x67
      0000A2                        263 00118$:
                                    264 ;src/main.c:150: Card *swap = IDX_PTR(deck, (UINT8)rand() % i);
      0000A2 CDr00r00               265 	call	_rand
      0000A5 7B                     266 	ld	a, e
      0000A6 F8 0F                  267 	ldhl	sp,	#15
      0000A8 66                     268 	ld	h, (hl)
      0000A9 E5                     269 	push	hl
      0000AA 33                     270 	inc	sp
      0000AB F5                     271 	push	af
      0000AC 33                     272 	inc	sp
      0000AD CDr00r00               273 	call	__moduchar
      0000B0 E8 02                  274 	add	sp, #2
      0000B2 4B                     275 	ld	c, e
      0000B3 06 00                  276 	ld	b, #0x00
      0000B5 69                     277 	ld	l, c
      0000B6 60                     278 	ld	h, b
      0000B7 29                     279 	add	hl, hl
      0000B8 09                     280 	add	hl, bc
      0000B9 7D                     281 	ld	a, l
      0000BA C6r00                  282 	add	a, #<(_deck)
      0000BC 4F                     283 	ld	c, a
      0000BD 7C                     284 	ld	a, h
      0000BE CEs00                  285 	adc	a, #>(_deck)
      0000C0 47                     286 	ld	b, a
      0000C1 F8 0B                  287 	ldhl	sp,	#11
      0000C3 79                     288 	ld	a, c
      0000C4 22                     289 	ld	(hl+), a
                                    290 ;src/main.c:152: temp = *card;
      0000C5 78                     291 	ld	a, b
      0000C6 22                     292 	ld	(hl+), a
      0000C7 2A                     293 	ld	a, (hl+)
      0000C8 5F                     294 	ld	e, a
      0000C9 56                     295 	ld	d, (hl)
      0000CA F8 07                  296 	ldhl	sp,#7
      0000CC 2A                     297 	ld	a, (hl+)
      0000CD 4F                     298 	ld	c, a
      0000CE 46                     299 	ld	b, (hl)
      0000CF 21 03 00               300 	ld	hl, #0x0003
      0000D2 E5                     301 	push	hl
      0000D3 D5                     302 	push	de
      0000D4 C5                     303 	push	bc
      0000D5 CDr00r00               304 	call	___memcpy
      0000D8 E8 06                  305 	add	sp, #6
                                    306 ;src/main.c:153: *card = *swap;
      0000DA F8 0B                  307 	ldhl	sp,#11
      0000DC 2A                     308 	ld	a, (hl+)
      0000DD 5F                     309 	ld	e, a
      0000DE 2A                     310 	ld	a, (hl+)
      0000DF 57                     311 	ld	d, a
      0000E0 2A                     312 	ld	a, (hl+)
      0000E1 4F                     313 	ld	c, a
      0000E2 46                     314 	ld	b, (hl)
      0000E3 21 03 00               315 	ld	hl, #0x0003
      0000E6 E5                     316 	push	hl
      0000E7 D5                     317 	push	de
      0000E8 C5                     318 	push	bc
      0000E9 CDr00r00               319 	call	___memcpy
      0000EC E8 06                  320 	add	sp, #6
                                    321 ;src/main.c:154: *swap = temp;
      0000EE F8 09                  322 	ldhl	sp,#9
      0000F0 2A                     323 	ld	a, (hl+)
      0000F1 5F                     324 	ld	e, a
      0000F2 2A                     325 	ld	a, (hl+)
      0000F3 57                     326 	ld	d, a
      0000F4 2A                     327 	ld	a, (hl+)
      0000F5 4F                     328 	ld	c, a
      0000F6 46                     329 	ld	b, (hl)
      0000F7 21 03 00               330 	ld	hl, #0x0003
      0000FA E5                     331 	push	hl
      0000FB D5                     332 	push	de
      0000FC C5                     333 	push	bc
      0000FD CDr00r00               334 	call	___memcpy
      000100 E8 06                  335 	add	sp, #6
                                    336 ;src/main.c:155: card--;
      000102 F8 0D                  337 	ldhl	sp,#13
      000104 2A                     338 	ld	a, (hl+)
      000105 5F                     339 	ld	e, a
      000106 56                     340 	ld	d, (hl)
      000107 21 03 00               341 	ld	hl, #0x0003
      00010A 7B                     342 	ld	a, e
      00010B 95                     343 	sub	a, l
      00010C 5F                     344 	ld	e, a
      00010D 7A                     345 	ld	a, d
      00010E 9C                     346 	sbc	a, h
      00010F F8 0E                  347 	ldhl	sp,	#14
      000111 32                     348 	ld	(hl-), a
                                    349 ;src/main.c:149: for (i = 103u; i; i--) {
      000112 7B                     350 	ld	a, e
      000113 22                     351 	ld	(hl+), a
      000114 23                     352 	inc	hl
      000115 35                     353 	dec	(hl)
      000116 20 8A                  354 	jr	NZ, 00118$
                                    355 ;src/main.c:158: card = IDX_PTR(deck, 0);
      000118 01r00r00               356 	ld	bc, #_deck
                                    357 ;src/main.c:159: for (i = 0; i < 44u; i++) {
      00011B AF                     358 	xor	a, a
      00011C 77                     359 	ld	(hl), a
      00011D                        360 00120$:
                                    361 ;src/main.c:160: card->next_card = IDX_PTR(deck, i + 10u);
      00011D F8 0F                  362 	ldhl	sp,	#15
      00011F 5E                     363 	ld	e, (hl)
      000120 16 00                  364 	ld	d, #0x00
      000122 6B                     365 	ld	l, e
      000123 62                     366 	ld	h, d
      000124 29                     367 	add	hl, hl
      000125 19                     368 	add	hl, de
      000126 11r00r00               369 	ld	de, #_deck
      000129 19                     370 	add	hl, de
      00012A 11 1E 00               371 	ld	de, #0x001e
      00012D 19                     372 	add	hl, de
      00012E 5D                     373 	ld	e, l
      00012F 54                     374 	ld	d, h
      000130 69                     375 	ld	l, c
      000131 60                     376 	ld	h, b
      000132 7B                     377 	ld	a, e
      000133 22                     378 	ld	(hl+), a
      000134 72                     379 	ld	(hl), d
                                    380 ;src/main.c:161: card++;
      000135 03                     381 	inc	bc
      000136 03                     382 	inc	bc
      000137 03                     383 	inc	bc
                                    384 ;src/main.c:159: for (i = 0; i < 44u; i++) {
      000138 F8 0F                  385 	ldhl	sp,	#15
      00013A 34                     386 	inc	(hl)
      00013B 7E                     387 	ld	a, (hl)
      00013C D6 2C                  388 	sub	a, #0x2c
      00013E 38 DD                  389 	jr	C, 00120$
      000140 5E                     390 	ld	e, (hl)
      000141                        391 00123$:
                                    392 ;src/main.c:163: for (; i < 104u; i++) {
      000141 7B                     393 	ld	a, e
      000142 D6 68                  394 	sub	a, #0x68
      000144 30 11                  395 	jr	NC, 00106$
                                    396 ;src/main.c:164: card->data |= BITMASK_DATA_VISIBLE;
      000146 69                     397 	ld	l, c
      000147 60                     398 	ld	h, b
      000148 23                     399 	inc	hl
      000149 23                     400 	inc	hl
      00014A CB F6                  401 	set	6, (hl)
                                    402 ;src/main.c:165: card->next_card = NULL;
      00014C 69                     403 	ld	l, c
      00014D 60                     404 	ld	h, b
      00014E AF                     405 	xor	a, a
      00014F 22                     406 	ld	(hl+), a
      000150 77                     407 	ld	(hl), a
                                    408 ;src/main.c:166: card++;
      000151 03                     409 	inc	bc
      000152 03                     410 	inc	bc
      000153 03                     411 	inc	bc
                                    412 ;src/main.c:163: for (; i < 104u; i++) {
      000154 1C                     413 	inc	e
      000155 18 EA                  414 	jr	00123$
      000157                        415 00106$:
                                    416 ;src/main.c:169: card = IDX_PTR(deck, 0);
      000157 F8 0B                  417 	ldhl	sp,	#11
      000159 3Er00                  418 	ld	a, #<(_deck)
      00015B 22                     419 	ld	(hl+), a
                                    420 ;src/main.c:170: Pile *pile = IDX_PTR(piles, 0);
      00015C 3Es00                  421 	ld	a, #>(_deck)
      00015E 22                     422 	ld	(hl+), a
      00015F 3Er38                  423 	ld	a, #<(_piles)
      000161 22                     424 	ld	(hl+), a
      000162 36s01                  425 	ld	(hl), #>(_piles)
                                    426 ;src/main.c:171: for (i = 0; i < 10; i++) {
      000164 AF                     427 	xor	a, a
      000165 23                     428 	inc	hl
      000166 77                     429 	ld	(hl), a
      000167                        430 00125$:
                                    431 ;src/main.c:172: pile->base = card;
      000167 F8 0D                  432 	ldhl	sp,#13
      000169 2A                     433 	ld	a, (hl+)
      00016A 5F                     434 	ld	e, a
      00016B 56                     435 	ld	d, (hl)
      00016C F8 0B                  436 	ldhl	sp,	#11
      00016E 7E                     437 	ld	a, (hl)
      00016F 12                     438 	ld	(de), a
      000170 13                     439 	inc	de
      000171 23                     440 	inc	hl
      000172 7E                     441 	ld	a, (hl)
      000173 12                     442 	ld	(de), a
                                    443 ;src/main.c:174: pile->top = IDX_PTR(deck, 50u + i);
                                    444 ;c
      000174 23                     445 	inc	hl
      000175 2A                     446 	ld	a, (hl+)
      000176 5F                     447 	ld	e, a
      000177 56                     448 	ld	d, (hl)
      000178 21 02 00               449 	ld	hl, #0x0002
      00017B 19                     450 	add	hl, de
      00017C E5                     451 	push	hl
      00017D 7D                     452 	ld	a, l
      00017E F8 07                  453 	ldhl	sp,	#7
      000180 77                     454 	ld	(hl), a
      000181 E1                     455 	pop	hl
      000182 7C                     456 	ld	a, h
      000183 F8 06                  457 	ldhl	sp,	#6
      000185 77                     458 	ld	(hl), a
      000186 F8 0F                  459 	ldhl	sp,	#15
      000188 4E                     460 	ld	c, (hl)
      000189 06 00                  461 	ld	b, #0x00
      00018B 69                     462 	ld	l, c
      00018C 60                     463 	ld	h, b
      00018D 29                     464 	add	hl, hl
      00018E 09                     465 	add	hl, bc
      00018F 33                     466 	inc	sp
      000190 33                     467 	inc	sp
      000191 E5                     468 	push	hl
                                    469 ;src/main.c:175: pile->height = 5u;
                                    470 ;c
      000192 F8 0D                  471 	ldhl	sp,#13
      000194 2A                     472 	ld	a, (hl+)
      000195 5F                     473 	ld	e, a
      000196 56                     474 	ld	d, (hl)
      000197 21 04 00               475 	ld	hl, #0x0004
      00019A 19                     476 	add	hl, de
      00019B E5                     477 	push	hl
      00019C 7D                     478 	ld	a, l
      00019D F8 09                  479 	ldhl	sp,	#9
      00019F 77                     480 	ld	(hl), a
      0001A0 E1                     481 	pop	hl
      0001A1 7C                     482 	ld	a, h
      0001A2 F8 08                  483 	ldhl	sp,	#8
      0001A4 77                     484 	ld	(hl), a
                                    485 ;src/main.c:173: if (i < 4u) {
      0001A5 F8 0F                  486 	ldhl	sp,	#15
      0001A7 7E                     487 	ld	a, (hl)
      0001A8 D6 04                  488 	sub	a, #0x04
      0001AA 30 26                  489 	jr	NC, 00108$
                                    490 ;src/main.c:174: pile->top = IDX_PTR(deck, 50u + i);
                                    491 ;c
      0001AC D1                     492 	pop	de
      0001AD D5                     493 	push	de
      0001AE 21r96r00               494 	ld	hl, #(_deck + 0x0096)
      0001B1 19                     495 	add	hl, de
      0001B2 E5                     496 	push	hl
      0001B3 7D                     497 	ld	a, l
      0001B4 F8 0B                  498 	ldhl	sp,	#11
      0001B6 77                     499 	ld	(hl), a
      0001B7 E1                     500 	pop	hl
      0001B8 7C                     501 	ld	a, h
      0001B9 F8 0A                  502 	ldhl	sp,	#10
      0001BB 77                     503 	ld	(hl), a
      0001BC F8 05                  504 	ldhl	sp,#5
      0001BE 2A                     505 	ld	a, (hl+)
      0001BF 5F                     506 	ld	e, a
      0001C0 56                     507 	ld	d, (hl)
      0001C1 F8 09                  508 	ldhl	sp,	#9
      0001C3 7E                     509 	ld	a, (hl)
      0001C4 12                     510 	ld	(de), a
      0001C5 13                     511 	inc	de
      0001C6 23                     512 	inc	hl
      0001C7 7E                     513 	ld	a, (hl)
      0001C8 12                     514 	ld	(de), a
                                    515 ;src/main.c:175: pile->height = 5u;
      0001C9 F8 07                  516 	ldhl	sp,	#7
      0001CB 2A                     517 	ld	a, (hl+)
      0001CC 66                     518 	ld	h, (hl)
      0001CD 6F                     519 	ld	l, a
      0001CE 36 05                  520 	ld	(hl), #0x05
      0001D0 18 17                  521 	jr	00109$
      0001D2                        522 00108$:
                                    523 ;src/main.c:177: pile->top = IDX_PTR(deck, 40u + i);
                                    524 ;c
      0001D2 11r78r00               525 	ld	de, #(_deck + 0x0078)
      0001D5 E1                     526 	pop	hl
      0001D6 E5                     527 	push	hl
      0001D7 19                     528 	add	hl, de
      0001D8 4D                     529 	ld	c, l
      0001D9 44                     530 	ld	b, h
      0001DA F8 05                  531 	ldhl	sp,	#5
      0001DC 2A                     532 	ld	a, (hl+)
      0001DD 66                     533 	ld	h, (hl)
      0001DE 6F                     534 	ld	l, a
      0001DF 79                     535 	ld	a, c
      0001E0 22                     536 	ld	(hl+), a
      0001E1 70                     537 	ld	(hl), b
                                    538 ;src/main.c:178: pile->height = 4u;
      0001E2 F8 07                  539 	ldhl	sp,	#7
      0001E4 2A                     540 	ld	a, (hl+)
      0001E5 66                     541 	ld	h, (hl)
      0001E6 6F                     542 	ld	l, a
      0001E7 36 04                  543 	ld	(hl), #0x04
      0001E9                        544 00109$:
                                    545 ;src/main.c:181: card++;
                                    546 ;c
      0001E9 F8 0B                  547 	ldhl	sp,#11
      0001EB 2A                     548 	ld	a, (hl+)
      0001EC 5F                     549 	ld	e, a
      0001ED 56                     550 	ld	d, (hl)
      0001EE 21 03 00               551 	ld	hl, #0x0003
      0001F1 19                     552 	add	hl, de
      0001F2 E5                     553 	push	hl
      0001F3 7D                     554 	ld	a, l
      0001F4 F8 0D                  555 	ldhl	sp,	#13
      0001F6 77                     556 	ld	(hl), a
      0001F7 E1                     557 	pop	hl
      0001F8 7C                     558 	ld	a, h
      0001F9 F8 0C                  559 	ldhl	sp,	#12
                                    560 ;src/main.c:182: pile++;
                                    561 ;c
      0001FB 22                     562 	ld	(hl+), a
      0001FC 2A                     563 	ld	a, (hl+)
      0001FD 5F                     564 	ld	e, a
      0001FE 56                     565 	ld	d, (hl)
      0001FF 21 05 00               566 	ld	hl, #0x0005
      000202 19                     567 	add	hl, de
      000203 E5                     568 	push	hl
      000204 7D                     569 	ld	a, l
      000205 F8 0F                  570 	ldhl	sp,	#15
      000207 77                     571 	ld	(hl), a
      000208 E1                     572 	pop	hl
      000209 7C                     573 	ld	a, h
      00020A F8 0E                  574 	ldhl	sp,	#14
                                    575 ;src/main.c:171: for (i = 0; i < 10; i++) {
      00020C 22                     576 	ld	(hl+), a
      00020D 34                     577 	inc	(hl)
      00020E 7E                     578 	ld	a, (hl)
      00020F D6 0A                  579 	sub	a, #0x0a
      000211 DAr67r01               580 	jp	C, 00125$
                                    581 ;src/main.c:185: top_card_idx = 54u;
      000214 21r6Ar01               582 	ld	hl, #_top_card_idx
      000217 36 36                  583 	ld	(hl), #0x36
                                    584 ;src/main.c:186: }
      000219 E8 10                  585 	add	sp, #16
      00021B C9                     586 	ret
                                    587 ;src/main.c:188: void draw_pile(Card *card, UINT8 pile_idx, UINT8 height)
                                    588 ;	---------------------------------
                                    589 ; Function draw_pile
                                    590 ; ---------------------------------
      00021C                        591 _draw_pile::
      00021C E8 F8                  592 	add	sp, #-8
                                    593 ;src/main.c:190: pile_idx <<= 1;
      00021E F8 0C                  594 	ldhl	sp,	#12
      000220 7E                     595 	ld	a, (hl)
      000221 87                     596 	add	a, a
                                    597 ;src/main.c:191: height += SCOREBAR_HEIGHT;
      000222 22                     598 	ld	(hl+), a
      000223 34                     599 	inc	(hl)
      000224 34                     600 	inc	(hl)
      000225 34                     601 	inc	(hl)
                                    602 ;src/main.c:192: while (1) {
      000226 2B                     603 	dec	hl
      000227 7E                     604 	ld	a, (hl)
      000228 3C                     605 	inc	a
      000229 F8 02                  606 	ldhl	sp,	#2
      00022B 77                     607 	ld	(hl), a
      00022C F8 0D                  608 	ldhl	sp,	#13
      00022E 7E                     609 	ld	a, (hl)
      00022F F8 05                  610 	ldhl	sp,	#5
      000231 77                     611 	ld	(hl), a
      000232                        612 00107$:
                                    613 ;src/main.c:193: if (VISIBLE(card->data)) {
      000232 F8 0A                  614 	ldhl	sp,#10
      000234 2A                     615 	ld	a, (hl+)
      000235 4F                     616 	ld	c, a
      000236 46                     617 	ld	b, (hl)
      000237 21 02 00               618 	ld	hl, #0x0002
      00023A 09                     619 	add	hl, bc
      00023B E5                     620 	push	hl
      00023C 7D                     621 	ld	a, l
      00023D F8 05                  622 	ldhl	sp,	#5
      00023F 77                     623 	ld	(hl), a
      000240 E1                     624 	pop	hl
      000241 7C                     625 	ld	a, h
      000242 F8 04                  626 	ldhl	sp,	#4
      000244 32                     627 	ld	(hl-), a
      000245 2A                     628 	ld	a, (hl+)
      000246 5F                     629 	ld	e, a
      000247 56                     630 	ld	d, (hl)
      000248 1A                     631 	ld	a, (de)
      000249 CB 77                  632 	bit	6, a
      00024B 28 45                  633 	jr	Z, 00102$
                                    634 ;src/main.c:194: set_bkg_tile_xy(pile_idx, height, RANK(card->data) + OFFSET_BKG_RANK);
      00024D E6 0F                  635 	and	a, #0x0f
      00024F 3C                     636 	inc	a
      000250 F5                     637 	push	af
      000251 33                     638 	inc	sp
      000252 F8 06                  639 	ldhl	sp,	#6
      000254 7E                     640 	ld	a, (hl)
      000255 F5                     641 	push	af
      000256 33                     642 	inc	sp
      000257 F8 0E                  643 	ldhl	sp,	#14
      000259 7E                     644 	ld	a, (hl)
      00025A F5                     645 	push	af
      00025B 33                     646 	inc	sp
      00025C CDr00r00               647 	call	_set_bkg_tile_xy
      00025F E8 03                  648 	add	sp, #3
                                    649 ;src/main.c:195: set_bkg_tile_xy(pile_idx + 1u, height, SUIT(card->data) + OFFSET_BKG_SUIT);
      000261 F8 03                  650 	ldhl	sp,#3
      000263 2A                     651 	ld	a, (hl+)
      000264 5F                     652 	ld	e, a
      000265 56                     653 	ld	d, (hl)
      000266 1A                     654 	ld	a, (de)
      000267 E6 30                  655 	and	a, #0x30
      000269 6F                     656 	ld	l, a
      00026A 26 00                  657 	ld	h, #0x00
      00026C CB 2C                  658 	sra	h
      00026E CB 1D                  659 	rr	l
      000270 CB 2C                  660 	sra	h
      000272 CB 1D                  661 	rr	l
      000274 CB 2C                  662 	sra	h
      000276 CB 1D                  663 	rr	l
      000278 CB 2C                  664 	sra	h
      00027A CB 1D                  665 	rr	l
      00027C 7D                     666 	ld	a, l
      00027D C6 0E                  667 	add	a, #0x0e
      00027F F5                     668 	push	af
      000280 33                     669 	inc	sp
      000281 F8 06                  670 	ldhl	sp,	#6
      000283 7E                     671 	ld	a, (hl)
      000284 F5                     672 	push	af
      000285 33                     673 	inc	sp
      000286 F8 04                  674 	ldhl	sp,	#4
      000288 7E                     675 	ld	a, (hl)
      000289 F5                     676 	push	af
      00028A 33                     677 	inc	sp
      00028B CDr00r00               678 	call	_set_bkg_tile_xy
      00028E E8 03                  679 	add	sp, #3
      000290 18 26                  680 	jr	00103$
      000292                        681 00102$:
                                    682 ;src/main.c:197: set_bkg_tile_xy(pile_idx, height, OFFSET_BKG_BACK);
      000292 3E 18                  683 	ld	a, #0x18
      000294 F5                     684 	push	af
      000295 33                     685 	inc	sp
      000296 F8 06                  686 	ldhl	sp,	#6
      000298 7E                     687 	ld	a, (hl)
      000299 F5                     688 	push	af
      00029A 33                     689 	inc	sp
      00029B F8 0E                  690 	ldhl	sp,	#14
      00029D 7E                     691 	ld	a, (hl)
      00029E F5                     692 	push	af
      00029F 33                     693 	inc	sp
      0002A0 CDr00r00               694 	call	_set_bkg_tile_xy
      0002A3 E8 03                  695 	add	sp, #3
                                    696 ;src/main.c:198: set_bkg_tile_xy(pile_idx + 1u, height, OFFSET_BKG_BACK + 1u);
      0002A5 3E 19                  697 	ld	a, #0x19
      0002A7 F5                     698 	push	af
      0002A8 33                     699 	inc	sp
      0002A9 F8 06                  700 	ldhl	sp,	#6
      0002AB 7E                     701 	ld	a, (hl)
      0002AC F5                     702 	push	af
      0002AD 33                     703 	inc	sp
      0002AE F8 04                  704 	ldhl	sp,	#4
      0002B0 7E                     705 	ld	a, (hl)
      0002B1 F5                     706 	push	af
      0002B2 33                     707 	inc	sp
      0002B3 CDr00r00               708 	call	_set_bkg_tile_xy
      0002B6 E8 03                  709 	add	sp, #3
      0002B8                        710 00103$:
                                    711 ;src/main.c:200: if (!card->next_card) {
      0002B8 59                     712 	ld	e, c
      0002B9 50                     713 	ld	d, b
      0002BA 1A                     714 	ld	a, (de)
      0002BB F8 06                  715 	ldhl	sp,	#6
      0002BD 22                     716 	ld	(hl+), a
      0002BE 13                     717 	inc	de
      0002BF 1A                     718 	ld	a, (de)
                                    719 ;src/main.c:201: set_bkg_tile_xy(pile_idx, ++height, OFFSET_BKG_BLANK + 2u);
      0002C0 32                     720 	ld	(hl-), a
      0002C1 2B                     721 	dec	hl
      0002C2 34                     722 	inc	(hl)
                                    723 ;src/main.c:200: if (!card->next_card) {
      0002C3 23                     724 	inc	hl
      0002C4 23                     725 	inc	hl
      0002C5 3A                     726 	ld	a, (hl-)
      0002C6 B6                     727 	or	a, (hl)
      0002C7 C2r4Dr03               728 	jp	NZ, 00105$
                                    729 ;src/main.c:201: set_bkg_tile_xy(pile_idx, ++height, OFFSET_BKG_BLANK + 2u);
      0002CA 3E 14                  730 	ld	a, #0x14
      0002CC F5                     731 	push	af
      0002CD 33                     732 	inc	sp
      0002CE 2B                     733 	dec	hl
      0002CF 7E                     734 	ld	a, (hl)
      0002D0 F5                     735 	push	af
      0002D1 33                     736 	inc	sp
      0002D2 F8 0E                  737 	ldhl	sp,	#14
      0002D4 7E                     738 	ld	a, (hl)
      0002D5 F5                     739 	push	af
      0002D6 33                     740 	inc	sp
      0002D7 CDr00r00               741 	call	_set_bkg_tile_xy
      0002DA E8 03                  742 	add	sp, #3
                                    743 ;src/main.c:202: set_bkg_tile_xy(pile_idx + 1u, height, OFFSET_BKG_BLANK + 3u);
      0002DC 3E 15                  744 	ld	a, #0x15
      0002DE F5                     745 	push	af
      0002DF 33                     746 	inc	sp
      0002E0 F8 06                  747 	ldhl	sp,	#6
      0002E2 7E                     748 	ld	a, (hl)
      0002E3 F5                     749 	push	af
      0002E4 33                     750 	inc	sp
      0002E5 F8 04                  751 	ldhl	sp,	#4
      0002E7 7E                     752 	ld	a, (hl)
      0002E8 F5                     753 	push	af
      0002E9 33                     754 	inc	sp
      0002EA CDr00r00               755 	call	_set_bkg_tile_xy
      0002ED E8 03                  756 	add	sp, #3
                                    757 ;src/main.c:203: set_bkg_tile_xy(pile_idx, ++height, SUIT(card->data) + OFFSET_BKG_SUIT_ROT);
      0002EF F8 03                  758 	ldhl	sp,#3
      0002F1 2A                     759 	ld	a, (hl+)
      0002F2 5F                     760 	ld	e, a
      0002F3 56                     761 	ld	d, (hl)
      0002F4 1A                     762 	ld	a, (de)
      0002F5 F8 07                  763 	ldhl	sp,	#7
      0002F7 77                     764 	ld	(hl), a
      0002F8 F8 00                  765 	ldhl	sp,	#0
      0002FA 77                     766 	ld	(hl), a
      0002FB AF                     767 	xor	a, a
      0002FC 23                     768 	inc	hl
      0002FD 32                     769 	ld	(hl-), a
      0002FE 7E                     770 	ld	a, (hl)
      0002FF E6 30                  771 	and	a, #0x30
      000301 F8 06                  772 	ldhl	sp,	#6
      000303 77                     773 	ld	(hl), a
      000304 AF                     774 	xor	a, a
      000305 23                     775 	inc	hl
      000306 77                     776 	ld	(hl), a
      000307 CB 2E                  777 	sra	(hl)
      000309 2B                     778 	dec	hl
      00030A CB 1E                  779 	rr	(hl)
      00030C 23                     780 	inc	hl
      00030D CB 2E                  781 	sra	(hl)
      00030F 2B                     782 	dec	hl
      000310 CB 1E                  783 	rr	(hl)
      000312 23                     784 	inc	hl
      000313 CB 2E                  785 	sra	(hl)
      000315 2B                     786 	dec	hl
      000316 CB 1E                  787 	rr	(hl)
      000318 23                     788 	inc	hl
      000319 CB 2E                  789 	sra	(hl)
      00031B 2B                     790 	dec	hl
      00031C CB 1E                  791 	rr	(hl)
      00031E 7E                     792 	ld	a, (hl)
      00031F C6 2B                  793 	add	a, #0x2b
      000321 57                     794 	ld	d, a
      000322 2B                     795 	dec	hl
      000323 46                     796 	ld	b, (hl)
      000324 04                     797 	inc	b
      000325 F8 0D                  798 	ldhl	sp,	#13
      000327 70                     799 	ld	(hl), b
      000328 58                     800 	ld	e, b
      000329 D5                     801 	push	de
      00032A 2B                     802 	dec	hl
      00032B 7E                     803 	ld	a, (hl)
      00032C F5                     804 	push	af
      00032D 33                     805 	inc	sp
      00032E CDr00r00               806 	call	_set_bkg_tile_xy
      000331 E8 03                  807 	add	sp, #3
                                    808 ;src/main.c:204: set_bkg_tile_xy(pile_idx + 1u, height, RANK(card->data) + OFFSET_BKG_RANK_ROT);
      000333 F8 03                  809 	ldhl	sp,#3
      000335 2A                     810 	ld	a, (hl+)
      000336 5F                     811 	ld	e, a
      000337 56                     812 	ld	d, (hl)
      000338 1A                     813 	ld	a, (de)
      000339 E6 0F                  814 	and	a, #0x0f
      00033B C6 1E                  815 	add	a, #0x1e
      00033D F5                     816 	push	af
      00033E 33                     817 	inc	sp
      00033F C5                     818 	push	bc
      000340 33                     819 	inc	sp
      000341 2B                     820 	dec	hl
      000342 2B                     821 	dec	hl
      000343 7E                     822 	ld	a, (hl)
      000344 F5                     823 	push	af
      000345 33                     824 	inc	sp
      000346 CDr00r00               825 	call	_set_bkg_tile_xy
      000349 E8 03                  826 	add	sp, #3
                                    827 ;src/main.c:205: break;
      00034B 18 0B                  828 	jr	00118$
      00034D                        829 00105$:
                                    830 ;src/main.c:208: height++;
                                    831 ;src/main.c:209: card = card->next_card;
      00034D F8 06                  832 	ldhl	sp,	#6
      00034F 2A                     833 	ld	a, (hl+)
      000350 5E                     834 	ld	e, (hl)
      000351 F8 0A                  835 	ldhl	sp,	#10
      000353 22                     836 	ld	(hl+), a
      000354 73                     837 	ld	(hl), e
      000355 C3r32r02               838 	jp	00107$
                                    839 ;src/main.c:213: while (*get_bkg_xy_addr(pile_idx, ++height)) {
      000358                        840 00118$:
      000358 F8 0D                  841 	ldhl	sp,	#13
      00035A 46                     842 	ld	b, (hl)
      00035B                        843 00109$:
      00035B 04                     844 	inc	b
      00035C C5                     845 	push	bc
      00035D 33                     846 	inc	sp
      00035E F8 0D                  847 	ldhl	sp,	#13
      000360 7E                     848 	ld	a, (hl)
      000361 F5                     849 	push	af
      000362 33                     850 	inc	sp
      000363 CDr00r00               851 	call	_get_bkg_xy_addr
      000366 E8 02                  852 	add	sp, #2
      000368 1A                     853 	ld	a, (de)
      000369 B7                     854 	or	a, a
      00036A 28 20                  855 	jr	Z, 00112$
                                    856 ;src/main.c:214: set_bkg_tile_xy(pile_idx, height, OFFSET_BKG_NONE);
      00036C AF                     857 	xor	a, a
      00036D F5                     858 	push	af
      00036E 33                     859 	inc	sp
      00036F C5                     860 	push	bc
      000370 33                     861 	inc	sp
      000371 F8 0E                  862 	ldhl	sp,	#14
      000373 7E                     863 	ld	a, (hl)
      000374 F5                     864 	push	af
      000375 33                     865 	inc	sp
      000376 CDr00r00               866 	call	_set_bkg_tile_xy
      000379 E8 03                  867 	add	sp, #3
                                    868 ;src/main.c:215: set_bkg_tile_xy(pile_idx + 1u, height, OFFSET_BKG_NONE);
      00037B AF                     869 	xor	a, a
      00037C F5                     870 	push	af
      00037D 33                     871 	inc	sp
      00037E C5                     872 	push	bc
      00037F 33                     873 	inc	sp
      000380 F8 04                  874 	ldhl	sp,	#4
      000382 7E                     875 	ld	a, (hl)
      000383 F5                     876 	push	af
      000384 33                     877 	inc	sp
      000385 CDr00r00               878 	call	_set_bkg_tile_xy
      000388 E8 03                  879 	add	sp, #3
      00038A 18 CF                  880 	jr	00109$
      00038C                        881 00112$:
                                    882 ;src/main.c:217: }
      00038C E8 08                  883 	add	sp, #8
      00038E C9                     884 	ret
                                    885 ;src/main.c:219: void draw_card(UINT8 x, UINT8 y, UINT8 bkg_offset)
                                    886 ;	---------------------------------
                                    887 ; Function draw_card
                                    888 ; ---------------------------------
      00038F                        889 _draw_card::
                                    890 ;src/main.c:221: set_bkg_tile_xy(x, y, bkg_offset);
      00038F F8 04                  891 	ldhl	sp,	#4
      000391 7E                     892 	ld	a, (hl)
      000392 F5                     893 	push	af
      000393 33                     894 	inc	sp
      000394 2B                     895 	dec	hl
      000395 7E                     896 	ld	a, (hl)
      000396 F5                     897 	push	af
      000397 33                     898 	inc	sp
      000398 2B                     899 	dec	hl
      000399 7E                     900 	ld	a, (hl)
      00039A F5                     901 	push	af
      00039B 33                     902 	inc	sp
      00039C CDr00r00               903 	call	_set_bkg_tile_xy
      00039F E8 03                  904 	add	sp, #3
                                    905 ;src/main.c:222: set_bkg_tile_xy(x + 1u, y, bkg_offset + 1u);
      0003A1 F8 04                  906 	ldhl	sp,	#4
      0003A3 7E                     907 	ld	a, (hl)
      0003A4 3C                     908 	inc	a
      0003A5 2B                     909 	dec	hl
      0003A6 2B                     910 	dec	hl
      0003A7 4E                     911 	ld	c, (hl)
      0003A8 0C                     912 	inc	c
      0003A9 F5                     913 	push	af
      0003AA 33                     914 	inc	sp
      0003AB 23                     915 	inc	hl
      0003AC 46                     916 	ld	b, (hl)
      0003AD C5                     917 	push	bc
      0003AE CDr00r00               918 	call	_set_bkg_tile_xy
      0003B1 E8 03                  919 	add	sp, #3
                                    920 ;src/main.c:223: set_bkg_tile_xy(x, y + 1u, bkg_offset + 2u);
      0003B3 F8 04                  921 	ldhl	sp,	#4
      0003B5 7E                     922 	ld	a, (hl)
      0003B6 3C                     923 	inc	a
      0003B7 3C                     924 	inc	a
      0003B8 2B                     925 	dec	hl
      0003B9 46                     926 	ld	b, (hl)
      0003BA 04                     927 	inc	b
      0003BB F5                     928 	push	af
      0003BC 33                     929 	inc	sp
      0003BD C5                     930 	push	bc
      0003BE 33                     931 	inc	sp
      0003BF 2B                     932 	dec	hl
      0003C0 7E                     933 	ld	a, (hl)
      0003C1 F5                     934 	push	af
      0003C2 33                     935 	inc	sp
      0003C3 CDr00r00               936 	call	_set_bkg_tile_xy
      0003C6 E8 03                  937 	add	sp, #3
                                    938 ;src/main.c:224: set_bkg_tile_xy(x + 1u, y + 1u, bkg_offset + 3u);
      0003C8 F8 04                  939 	ldhl	sp,	#4
      0003CA 7E                     940 	ld	a, (hl)
      0003CB 3C                     941 	inc	a
      0003CC 3C                     942 	inc	a
      0003CD 3C                     943 	inc	a
      0003CE F5                     944 	push	af
      0003CF 33                     945 	inc	sp
      0003D0 C5                     946 	push	bc
      0003D1 33                     947 	inc	sp
      0003D2 79                     948 	ld	a, c
      0003D3 F5                     949 	push	af
      0003D4 33                     950 	inc	sp
      0003D5 CDr00r00               951 	call	_set_bkg_tile_xy
      0003D8 E8 03                  952 	add	sp, #3
                                    953 ;src/main.c:225: set_bkg_tile_xy(x, y + 2u, bkg_offset + 4u);
      0003DA F8 04                  954 	ldhl	sp,	#4
      0003DC 7E                     955 	ld	a, (hl)
      0003DD 3C                     956 	inc	a
      0003DE 3C                     957 	inc	a
      0003DF 3C                     958 	inc	a
      0003E0 3C                     959 	inc	a
      0003E1 2B                     960 	dec	hl
      0003E2 46                     961 	ld	b, (hl)
      0003E3 04                     962 	inc	b
      0003E4 04                     963 	inc	b
      0003E5 F5                     964 	push	af
      0003E6 33                     965 	inc	sp
      0003E7 C5                     966 	push	bc
      0003E8 33                     967 	inc	sp
      0003E9 2B                     968 	dec	hl
      0003EA 7E                     969 	ld	a, (hl)
      0003EB F5                     970 	push	af
      0003EC 33                     971 	inc	sp
      0003ED CDr00r00               972 	call	_set_bkg_tile_xy
      0003F0 E8 03                  973 	add	sp, #3
                                    974 ;src/main.c:226: set_bkg_tile_xy(x + 1u, y + 2u, bkg_offset + 5u);
      0003F2 F8 04                  975 	ldhl	sp,	#4
      0003F4 7E                     976 	ld	a, (hl)
      0003F5 C6 05                  977 	add	a, #0x05
      0003F7 F5                     978 	push	af
      0003F8 33                     979 	inc	sp
      0003F9 C5                     980 	push	bc
      0003FA CDr00r00               981 	call	_set_bkg_tile_xy
      0003FD E8 03                  982 	add	sp, #3
                                    983 ;src/main.c:227: }
      0003FF C9                     984 	ret
                                    985 ;src/main.c:229: void draw_background(void)
                                    986 ;	---------------------------------
                                    987 ; Function draw_background
                                    988 ; ---------------------------------
      000400                        989 _draw_background::
      000400 E8 FD                  990 	add	sp, #-3
                                    991 ;src/main.c:232: Pile *pile = IDX_PTR(piles, 0);
      000402 01r38r01               992 	ld	bc, #_piles+0
                                    993 ;src/main.c:233: for (i = 0; i < 10u; i++) {
      000405 AF                     994 	xor	a, a
      000406 F8 02                  995 	ldhl	sp,	#2
      000408 77                     996 	ld	(hl), a
      000409                        997 00102$:
                                    998 ;src/main.c:234: draw_pile(pile->base, i, 0);
      000409 59                     999 	ld	e, c
      00040A 50                    1000 	ld	d, b
      00040B 1A                    1001 	ld	a, (de)
      00040C F8 00                 1002 	ldhl	sp,	#0
      00040E 22                    1003 	ld	(hl+), a
      00040F 13                    1004 	inc	de
      000410 1A                    1005 	ld	a, (de)
      000411 77                    1006 	ld	(hl), a
      000412 C5                    1007 	push	bc
      000413 AF                    1008 	xor	a, a
      000414 F5                    1009 	push	af
      000415 33                    1010 	inc	sp
      000416 23                    1011 	inc	hl
      000417 7E                    1012 	ld	a, (hl)
      000418 F5                    1013 	push	af
      000419 33                    1014 	inc	sp
      00041A 2B                    1015 	dec	hl
      00041B 2B                    1016 	dec	hl
      00041C 2A                    1017 	ld	a, (hl+)
      00041D 66                    1018 	ld	h, (hl)
      00041E 6F                    1019 	ld	l, a
      00041F E5                    1020 	push	hl
      000420 CDr1Cr02              1021 	call	_draw_pile
      000423 E8 04                 1022 	add	sp, #4
      000425 C1                    1023 	pop	bc
                                   1024 ;src/main.c:235: pile++;
      000426 03                    1025 	inc	bc
      000427 03                    1026 	inc	bc
      000428 03                    1027 	inc	bc
      000429 03                    1028 	inc	bc
      00042A 03                    1029 	inc	bc
                                   1030 ;src/main.c:233: for (i = 0; i < 10u; i++) {
      00042B F8 02                 1031 	ldhl	sp,	#2
      00042D 34                    1032 	inc	(hl)
      00042E 7E                    1033 	ld	a, (hl)
      00042F D6 0A                 1034 	sub	a, #0x0a
      000431 38 D6                 1035 	jr	C, 00102$
                                   1036 ;src/main.c:237: draw_card(0, 0, OFFSET_BKG_BACK);
      000433 3E 18                 1037 	ld	a, #0x18
      000435 F5                    1038 	push	af
      000436 33                    1039 	inc	sp
      000437 AF                    1040 	xor	a, a
      000438 F5                    1041 	push	af
      000439 33                    1042 	inc	sp
      00043A AF                    1043 	xor	a, a
      00043B F5                    1044 	push	af
      00043C 33                    1045 	inc	sp
      00043D CDr8Fr03              1046 	call	_draw_card
      000440 E8 03                 1047 	add	sp, #3
                                   1048 ;src/main.c:238: }
      000442 E8 03                 1049 	add	sp, #3
      000444 C9                    1050 	ret
                                   1051 ;src/main.c:240: void cursor_adjust_height(void)
                                   1052 ;	---------------------------------
                                   1053 ; Function cursor_adjust_height
                                   1054 ; ---------------------------------
      000445                       1055 _cursor_adjust_height::
                                   1056 ;src/main.c:242: Pile *pile = IDX_PTR(piles, cursor.pile_idx);
      000445 01r38r01              1057 	ld	bc, #_piles+0
      000448 FAr81r01              1058 	ld	a, (#(_cursor + 0x0006) + 0)
      00044B 5F                    1059 	ld	e, a
      00044C 16 00                 1060 	ld	d, #0x00
      00044E 6B                    1061 	ld	l, e
      00044F 62                    1062 	ld	h, d
      000450 29                    1063 	add	hl, hl
      000451 29                    1064 	add	hl, hl
      000452 19                    1065 	add	hl, de
      000453 09                    1066 	add	hl, bc
                                   1067 ;src/main.c:243: if (cursor.height > pile->height)
      000454 01r82r01              1068 	ld	bc, #_cursor + 7
      000457 0A                    1069 	ld	a, (bc)
      000458 57                    1070 	ld	d, a
      000459 23                    1071 	inc	hl
      00045A 23                    1072 	inc	hl
      00045B 23                    1073 	inc	hl
      00045C 23                    1074 	inc	hl
      00045D 5E                    1075 	ld	e, (hl)
                                   1076 ;src/main.c:244: cursor.height = pile->height;
      00045E 7B                    1077 	ld	a,e
      00045F BA                    1078 	cp	a,d
      000460 D0                    1079 	ret	NC
      000461 02                    1080 	ld	(bc), a
                                   1081 ;src/main.c:245: }
      000462 C9                    1082 	ret
                                   1083 ;src/main.c:281: void dynamic_metasprite_deal_callback(void)
                                   1084 ;	---------------------------------
                                   1085 ; Function dynamic_metasprite_deal_callback
                                   1086 ; ---------------------------------
      000463                       1087 _dynamic_metasprite_deal_callback::
      000463 E8 FC                 1088 	add	sp, #-4
                                   1089 ;src/main.c:283: Pile *pile = IDX_PTR(piles, dynamic_metasprite.data);
      000465 21r78r01              1090 	ld	hl, #(_dynamic_metasprite + 0x000b)
      000468 4E                    1091 	ld	c, (hl)
      000469 06 00                 1092 	ld	b, #0x00
      00046B 69                    1093 	ld	l, c
      00046C 60                    1094 	ld	h, b
      00046D 29                    1095 	add	hl, hl
      00046E 29                    1096 	add	hl, hl
      00046F 09                    1097 	add	hl, bc
      000470 3Er38                 1098 	ld	a, #<(_piles)
      000472 85                    1099 	add	a, l
      000473 47                    1100 	ld	b, a
      000474 3Es01                 1101 	ld	a, #>(_piles)
      000476 8C                    1102 	adc	a, h
      000477 F8 00                 1103 	ldhl	sp,	#0
      000479 70                    1104 	ld	(hl), b
      00047A 23                    1105 	inc	hl
      00047B 77                    1106 	ld	(hl), a
                                   1107 ;src/main.c:284: draw_pile(pile->top, dynamic_metasprite.data, pile->height);
                                   1108 ;c
      00047C D1                    1109 	pop	de
      00047D D5                    1110 	push	de
      00047E 21 04 00              1111 	ld	hl, #0x0004
      000481 19                    1112 	add	hl, de
      000482 5D                    1113 	ld	e, l
      000483 54                    1114 	ld	d, h
      000484 1A                    1115 	ld	a, (de)
      000485 47                    1116 	ld	b, a
      000486 E1                    1117 	pop	hl
      000487 E5                    1118 	push	hl
      000488 23                    1119 	inc	hl
      000489 23                    1120 	inc	hl
      00048A 2A                    1121 	ld	a, (hl+)
      00048B 66                    1122 	ld	h, (hl)
      00048C 6F                    1123 	ld	l, a
      00048D C5                    1124 	push	bc
      00048E E5                    1125 	push	hl
      00048F CDr1Cr02              1126 	call	_draw_pile
      000492 E8 04                 1127 	add	sp, #4
                                   1128 ;src/main.c:285: if (dynamic_metasprite.data == 9u) {
      000494 21r78r01              1129 	ld	hl, #(_dynamic_metasprite + 0x000b)
      000497 4E                    1130 	ld	c, (hl)
      000498 79                    1131 	ld	a, c
      000499 D6 09                 1132 	sub	a, #0x09
      00049B 20 0F                 1133 	jr	NZ, 00102$
                                   1134 ;src/main.c:286: dynamic_metasprite.target_frames = -1;
      00049D 21r73r01              1135 	ld	hl, #(_dynamic_metasprite + 0x0006)
      0004A0 36 FF                 1136 	ld	(hl), #0xff
                                   1137 ;src/main.c:287: metasprite_2x3_hide(SPRITE_DYNAMIC);
      0004A2 3E 0C                 1138 	ld	a, #0x0c
      0004A4 F5                    1139 	push	af
      0004A5 33                    1140 	inc	sp
      0004A6 CDr00r00              1141 	call	_metasprite_2x3_hide
      0004A9 33                    1142 	inc	sp
                                   1143 ;src/main.c:288: return;
      0004AA 18 49                 1144 	jr	00103$
      0004AC                       1145 00102$:
                                   1146 ;src/main.c:290: pile++;
                                   1147 ;c
      0004AC D1                    1148 	pop	de
      0004AD D5                    1149 	push	de
      0004AE 21 05 00              1150 	ld	hl, #0x0005
      0004B1 19                    1151 	add	hl, de
      0004B2 E5                    1152 	push	hl
      0004B3 7D                    1153 	ld	a, l
      0004B4 F8 04                 1154 	ldhl	sp,	#4
      0004B6 77                    1155 	ld	(hl), a
      0004B7 E1                    1156 	pop	hl
      0004B8 7C                    1157 	ld	a, h
      0004B9 F8 03                 1158 	ldhl	sp,	#3
      0004BB 77                    1159 	ld	(hl), a
                                   1160 ;src/main.c:291: dynamic_metasprite.data++;
      0004BC 0C                    1161 	inc	c
      0004BD 21r78r01              1162 	ld	hl, #(_dynamic_metasprite + 0x000b)
      0004C0 71                    1163 	ld	(hl), c
                                   1164 ;src/main.c:292: dynamic_metasprite.dist[0] += 16;
      0004C1 21r6Fr01              1165 	ld	hl, #(_dynamic_metasprite + 0x0002)
      0004C4 2A                    1166 	ld	a, (hl+)
      0004C5 4F                    1167 	ld	c, a
      0004C6 46                    1168 	ld	b, (hl)
      0004C7 21 10 00              1169 	ld	hl, #0x0010
      0004CA 09                    1170 	add	hl, bc
      0004CB 4D                    1171 	ld	c, l
      0004CC 44                    1172 	ld	b, h
      0004CD 21r6Fr01              1173 	ld	hl, #(_dynamic_metasprite + 0x0002)
      0004D0 79                    1174 	ld	a, c
      0004D1 22                    1175 	ld	(hl+), a
      0004D2 70                    1176 	ld	(hl), b
                                   1177 ;src/main.c:293: dynamic_metasprite.dist[1] = (INT16)(SCOREBAR_HEIGHT + pile->height) * 8;
                                   1178 ;c
      0004D3 F8 02                 1179 	ldhl	sp,#2
      0004D5 2A                    1180 	ld	a, (hl+)
      0004D6 5F                    1181 	ld	e, a
      0004D7 56                    1182 	ld	d, (hl)
      0004D8 21 04 00              1183 	ld	hl, #0x0004
      0004DB 19                    1184 	add	hl, de
      0004DC 4D                    1185 	ld	c, l
      0004DD 44                    1186 	ld	b, h
      0004DE 0A                    1187 	ld	a, (bc)
      0004DF 6F                    1188 	ld	l, a
      0004E0 26 00                 1189 	ld	h, #0x00
      0004E2 23                    1190 	inc	hl
      0004E3 23                    1191 	inc	hl
      0004E4 23                    1192 	inc	hl
      0004E5 29                    1193 	add	hl, hl
      0004E6 29                    1194 	add	hl, hl
      0004E7 29                    1195 	add	hl, hl
      0004E8 4D                    1196 	ld	c, l
      0004E9 44                    1197 	ld	b, h
      0004EA 21r71r01              1198 	ld	hl, #(_dynamic_metasprite + 0x0004)
      0004ED 79                    1199 	ld	a, c
      0004EE 22                    1200 	ld	(hl+), a
      0004EF 70                    1201 	ld	(hl), b
                                   1202 ;src/main.c:294: dynamic_metasprite.elapsed_frames = 0;
      0004F0 21r74r01              1203 	ld	hl, #(_dynamic_metasprite + 0x0007)
      0004F3 36 00                 1204 	ld	(hl), #0x00
      0004F5                       1205 00103$:
                                   1206 ;src/main.c:295: }
      0004F5 E8 04                 1207 	add	sp, #4
      0004F7 C9                    1208 	ret
                                   1209 ;src/main.c:297: void dynamic_metasprite_deal(void)
                                   1210 ;	---------------------------------
                                   1211 ; Function dynamic_metasprite_deal
                                   1212 ; ---------------------------------
      0004F8                       1213 _dynamic_metasprite_deal::
                                   1214 ;src/main.c:299: Pile *pile = IDX_PTR(piles, 0);
                                   1215 ;src/main.c:300: dynamic_metasprite.src[0] = 0;
      0004F8 21r6Dr01              1216 	ld	hl, #_dynamic_metasprite
      0004FB 36 00                 1217 	ld	(hl), #0x00
                                   1218 ;src/main.c:301: dynamic_metasprite.src[1] = 0;
      0004FD 21r6Er01              1219 	ld	hl, #(_dynamic_metasprite + 0x0001)
      000500 36 00                 1220 	ld	(hl), #0x00
                                   1221 ;src/main.c:302: dynamic_metasprite.dist[0] = 0;
      000502 21r6Fr01              1222 	ld	hl, #(_dynamic_metasprite + 0x0002)
      000505 AF                    1223 	xor	a, a
      000506 22                    1224 	ld	(hl+), a
      000507 77                    1225 	ld	(hl), a
                                   1226 ;src/main.c:303: dynamic_metasprite.dist[1] = (INT16)(SCOREBAR_HEIGHT + pile->height) * 8;
      000508 FAr3Cr01              1227 	ld	a, (#(_piles + 0x0004) + 0)
      00050B 6F                    1228 	ld	l, a
      00050C 26 00                 1229 	ld	h, #0x00
      00050E 23                    1230 	inc	hl
      00050F 23                    1231 	inc	hl
      000510 23                    1232 	inc	hl
      000511 29                    1233 	add	hl, hl
      000512 29                    1234 	add	hl, hl
      000513 29                    1235 	add	hl, hl
      000514 4D                    1236 	ld	c, l
      000515 44                    1237 	ld	b, h
      000516 21r71r01              1238 	ld	hl, #(_dynamic_metasprite + 0x0004)
      000519 71                    1239 	ld	(hl), c
      00051A 23                    1240 	inc	hl
      00051B 70                    1241 	ld	(hl), b
                                   1242 ;src/main.c:304: dynamic_metasprite.elapsed_frames = 0;
      00051C 21r74r01              1243 	ld	hl, #(_dynamic_metasprite + 0x0007)
      00051F 36 00                 1244 	ld	(hl), #0x00
                                   1245 ;src/main.c:305: dynamic_metasprite.target_frames = DEAL_TARGET_FRAMES;
      000521 21r73r01              1246 	ld	hl, #(_dynamic_metasprite + 0x0006)
      000524 36 0F                 1247 	ld	(hl), #0x0f
                                   1248 ;src/main.c:306: dynamic_metasprite.metasprite = metasprite_sequential_2x3;
      000526 21r75r01              1249 	ld	hl, #(_dynamic_metasprite + 0x0008)
      000529 36r00                 1250 	ld	(hl), #<(_metasprite_sequential_2x3)
      00052B 23                    1251 	inc	hl
      00052C 36s00                 1252 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   1253 ;src/main.c:307: dynamic_metasprite.metasprite_offset = OFFSET_SPRITE_BACK;
      00052E 21r77r01              1254 	ld	hl, #(_dynamic_metasprite + 0x000a)
      000531 36 09                 1255 	ld	(hl), #0x09
                                   1256 ;src/main.c:308: dynamic_metasprite.data = 0;
      000533 21r78r01              1257 	ld	hl, #(_dynamic_metasprite + 0x000b)
      000536 36 00                 1258 	ld	(hl), #0x00
                                   1259 ;src/main.c:309: dynamic_metasprite.callback = &dynamic_metasprite_deal_callback;
      000538 21r79r01              1260 	ld	hl, #(_dynamic_metasprite + 0x000c)
      00053B 36r63                 1261 	ld	(hl), #<(_dynamic_metasprite_deal_callback)
      00053D 23                    1262 	inc	hl
      00053E 36s04                 1263 	ld	(hl), #>(_dynamic_metasprite_deal_callback)
                                   1264 ;src/main.c:310: }
      000540 C9                    1265 	ret
                                   1266 ;src/main.c:339: void pile_append_cursor_stack(Pile *pile)
                                   1267 ;	---------------------------------
                                   1268 ; Function pile_append_cursor_stack
                                   1269 ; ---------------------------------
      000541                       1270 _pile_append_cursor_stack::
      000541 E8 F8                 1271 	add	sp, #-8
                                   1272 ;src/main.c:341: if (pile->height)
      000543 F8 0A                 1273 	ldhl	sp,	#10
      000545 2A                    1274 	ld	a, (hl+)
      000546 5E                    1275 	ld	e, (hl)
      000547 F8 00                 1276 	ldhl	sp,	#0
      000549 22                    1277 	ld	(hl+), a
      00054A 73                    1278 	ld	(hl), e
                                   1279 ;c
      00054B D1                    1280 	pop	de
      00054C D5                    1281 	push	de
      00054D 21 04 00              1282 	ld	hl, #0x0004
      000550 19                    1283 	add	hl, de
      000551 E5                    1284 	push	hl
      000552 7D                    1285 	ld	a, l
      000553 F8 04                 1286 	ldhl	sp,	#4
      000555 77                    1287 	ld	(hl), a
      000556 E1                    1288 	pop	hl
      000557 7C                    1289 	ld	a, h
      000558 F8 03                 1290 	ldhl	sp,	#3
      00055A 32                    1291 	ld	(hl-), a
      00055B 2A                    1292 	ld	a, (hl+)
      00055C 5F                    1293 	ld	e, a
      00055D 56                    1294 	ld	d, (hl)
      00055E 1A                    1295 	ld	a, (de)
      00055F 4F                    1296 	ld	c, a
                                   1297 ;src/main.c:342: pile->top->next_card = cursor.held_card;
                                   1298 ;c
      000560 D1                    1299 	pop	de
      000561 D5                    1300 	push	de
      000562 21 02 00              1301 	ld	hl, #0x0002
      000565 19                    1302 	add	hl, de
      000566 E5                    1303 	push	hl
      000567 7D                    1304 	ld	a, l
      000568 F8 06                 1305 	ldhl	sp,	#6
      00056A 77                    1306 	ld	(hl), a
      00056B E1                    1307 	pop	hl
      00056C 7C                    1308 	ld	a, h
      00056D F8 05                 1309 	ldhl	sp,	#5
      00056F 77                    1310 	ld	(hl), a
                                   1311 ;src/main.c:341: if (pile->height)
      000570 79                    1312 	ld	a, c
      000571 B7                    1313 	or	a, a
      000572 28 1A                 1314 	jr	Z, 00102$
                                   1315 ;src/main.c:342: pile->top->next_card = cursor.held_card;
      000574 2B                    1316 	dec	hl
      000575 2A                    1317 	ld	a, (hl+)
      000576 5F                    1318 	ld	e, a
      000577 56                    1319 	ld	d, (hl)
      000578 1A                    1320 	ld	a, (de)
      000579 23                    1321 	inc	hl
      00057A 22                    1322 	ld	(hl+), a
      00057B 13                    1323 	inc	de
      00057C 1A                    1324 	ld	a, (de)
      00057D 77                    1325 	ld	(hl), a
      00057E 21r7Br01              1326 	ld	hl, #_cursor
      000581 2A                    1327 	ld	a, (hl+)
      000582 4F                    1328 	ld	c, a
      000583 46                    1329 	ld	b, (hl)
      000584 F8 06                 1330 	ldhl	sp,	#6
      000586 2A                    1331 	ld	a, (hl+)
      000587 66                    1332 	ld	h, (hl)
      000588 6F                    1333 	ld	l, a
      000589 79                    1334 	ld	a, c
      00058A 22                    1335 	ld	(hl+), a
      00058B 70                    1336 	ld	(hl), b
      00058C 18 0B                 1337 	jr	00103$
      00058E                       1338 00102$:
                                   1339 ;src/main.c:344: pile->base = cursor.held_card;
      00058E 21r7Br01              1340 	ld	hl, #_cursor
      000591 2A                    1341 	ld	a, (hl+)
      000592 4F                    1342 	ld	c, a
      000593 46                    1343 	ld	b, (hl)
      000594 E1                    1344 	pop	hl
      000595 E5                    1345 	push	hl
      000596 79                    1346 	ld	a, c
      000597 22                    1347 	ld	(hl+), a
      000598 70                    1348 	ld	(hl), b
      000599                       1349 00103$:
                                   1350 ;src/main.c:346: Card *top_card = cursor.held_card;
      000599 21r7Br01              1351 	ld	hl, #_cursor
      00059C 2A                    1352 	ld	a, (hl+)
      00059D 4F                    1353 	ld	c, a
      00059E 46                    1354 	ld	b, (hl)
                                   1355 ;src/main.c:347: while (top_card->next_card)
      00059F                       1356 00104$:
      00059F 69                    1357 	ld	l, c
      0005A0 60                    1358 	ld	h, b
      0005A1 2A                    1359 	ld	a, (hl+)
      0005A2 66                    1360 	ld	h, (hl)
      0005A3 6F                    1361 	ld	l,a
      0005A4 B4                    1362 	or	a,h
      0005A5 28 04                 1363 	jr	Z, 00106$
                                   1364 ;src/main.c:348: top_card = top_card->next_card;
      0005A7 4D                    1365 	ld	c, l
      0005A8 44                    1366 	ld	b, h
      0005A9 18 F4                 1367 	jr	00104$
      0005AB                       1368 00106$:
                                   1369 ;src/main.c:349: pile->top = top_card;
      0005AB F8 04                 1370 	ldhl	sp,	#4
      0005AD 2A                    1371 	ld	a, (hl+)
      0005AE 66                    1372 	ld	h, (hl)
      0005AF 6F                    1373 	ld	l, a
      0005B0 79                    1374 	ld	a, c
      0005B1 22                    1375 	ld	(hl+), a
      0005B2 70                    1376 	ld	(hl), b
                                   1377 ;src/main.c:350: pile->height += cursor.held_stack_size;
      0005B3 F8 02                 1378 	ldhl	sp,#2
      0005B5 2A                    1379 	ld	a, (hl+)
      0005B6 5F                    1380 	ld	e, a
      0005B7 56                    1381 	ld	d, (hl)
      0005B8 1A                    1382 	ld	a, (de)
      0005B9 4F                    1383 	ld	c, a
      0005BA FAr7Fr01              1384 	ld	a, (#(_cursor + 0x0004) + 0)
      0005BD 81                    1385 	add	a, c
      0005BE 4F                    1386 	ld	c, a
      0005BF 2B                    1387 	dec	hl
      0005C0 2A                    1388 	ld	a, (hl+)
      0005C1 66                    1389 	ld	h, (hl)
      0005C2 6F                    1390 	ld	l, a
      0005C3 71                    1391 	ld	(hl), c
                                   1392 ;src/main.c:351: cursor.held_card = NULL;
      0005C4 21r7Br01              1393 	ld	hl, #_cursor
      0005C7 AF                    1394 	xor	a, a
      0005C8 22                    1395 	ld	(hl+), a
      0005C9 77                    1396 	ld	(hl), a
                                   1397 ;src/main.c:352: if (cursor.card_to_show && cursor.hand_pile_idx != cursor.pile_idx)
      0005CA 21r7Dr01              1398 	ld	hl, #(_cursor + 0x0002)
      0005CD 2A                    1399 	ld	a, (hl+)
      0005CE 4F                    1400 	ld	c, a
      0005CF 46                    1401 	ld	b, (hl)
      0005D0 78                    1402 	ld	a, b
      0005D1 B1                    1403 	or	a, c
      0005D2 28 10                 1404 	jr	Z, 00108$
      0005D4 FAr80r01              1405 	ld	a, (#(_cursor + 0x0005) + 0)
      0005D7 21r81r01              1406 	ld	hl, #(_cursor + 0x0006)
      0005DA 6E                    1407 	ld	l, (hl)
      0005DB 95                    1408 	sub	a, l
      0005DC 28 06                 1409 	jr	Z, 00108$
                                   1410 ;src/main.c:353: cursor.card_to_show->data |= BITMASK_DATA_VISIBLE;
      0005DE 03                    1411 	inc	bc
      0005DF 03                    1412 	inc	bc
      0005E0 0A                    1413 	ld	a, (bc)
      0005E1 CB F7                 1414 	set	6, a
      0005E3 02                    1415 	ld	(bc), a
      0005E4                       1416 00108$:
                                   1417 ;src/main.c:354: cursor.card_to_show = NULL;
      0005E4 21r7Dr01              1418 	ld	hl, #(_cursor + 0x0002)
      0005E7 AF                    1419 	xor	a, a
      0005E8 22                    1420 	ld	(hl+), a
      0005E9 77                    1421 	ld	(hl), a
                                   1422 ;src/main.c:355: cursor.height = pile->height;
      0005EA F8 02                 1423 	ldhl	sp,#2
      0005EC 2A                    1424 	ld	a, (hl+)
      0005ED 5F                    1425 	ld	e, a
      0005EE 56                    1426 	ld	d, (hl)
      0005EF 1A                    1427 	ld	a, (de)
      0005F0 EAr82r01              1428 	ld	(#(_cursor + 0x0007)),a
                                   1429 ;src/main.c:356: cursor.redraw |= BITMASK_REDRAW_CURSOR;
      0005F3 01r85r01              1430 	ld	bc, #_cursor + 10
      0005F6 0A                    1431 	ld	a, (bc)
      0005F7 CB C7                 1432 	set	0, a
      0005F9 02                    1433 	ld	(bc), a
                                   1434 ;src/main.c:358: draw_pile(piles[cursor.pile_idx].base, cursor.pile_idx, 0);
      0005FA 21r81r01              1435 	ld	hl, #(_cursor + 0x0006)
      0005FD 4E                    1436 	ld	c, (hl)
      0005FE 06 00                 1437 	ld	b, #0x00
      000600 69                    1438 	ld	l, c
      000601 60                    1439 	ld	h, b
      000602 29                    1440 	add	hl, hl
      000603 29                    1441 	add	hl, hl
      000604 09                    1442 	add	hl, bc
      000605 11r38r01              1443 	ld	de, #_piles
      000608 19                    1444 	add	hl, de
      000609 2A                    1445 	ld	a, (hl+)
      00060A 66                    1446 	ld	h, (hl)
      00060B 6F                    1447 	ld	l, a
      00060C AF                    1448 	xor	a, a
      00060D 47                    1449 	ld	b, a
      00060E C5                    1450 	push	bc
      00060F E5                    1451 	push	hl
      000610 CDr1Cr02              1452 	call	_draw_pile
      000613 E8 04                 1453 	add	sp, #4
                                   1454 ;src/main.c:359: draw_pile(pile->base, cursor.hand_pile_idx, 0); //TODO: optimize
      000615 21r80r01              1455 	ld	hl, #(_cursor + 0x0005)
      000618 46                    1456 	ld	b, (hl)
      000619 D1                    1457 	pop	de
      00061A D5                    1458 	push	de
      00061B 1A                    1459 	ld	a, (de)
      00061C 6F                    1460 	ld	l, a
      00061D 13                    1461 	inc	de
      00061E 1A                    1462 	ld	a, (de)
      00061F 67                    1463 	ld	h, a
      000620 AF                    1464 	xor	a, a
      000621 F5                    1465 	push	af
      000622 33                    1466 	inc	sp
      000623 C5                    1467 	push	bc
      000624 33                    1468 	inc	sp
      000625 E5                    1469 	push	hl
      000626 CDr1Cr02              1470 	call	_draw_pile
      000629 E8 04                 1471 	add	sp, #4
                                   1472 ;src/main.c:361: cursor.pile_idx = cursor.hand_pile_idx;
      00062B FAr80r01              1473 	ld	a, (#(_cursor + 0x0005) + 0)
      00062E EAr81r01              1474 	ld	(#(_cursor + 0x0006)),a
                                   1475 ;src/main.c:362: }
      000631 E8 08                 1476 	add	sp, #8
      000633 C9                    1477 	ret
                                   1478 ;src/main.c:482: void main(void)
                                   1479 ;	---------------------------------
                                   1480 ; Function main
                                   1481 ; ---------------------------------
      000634                       1482 _main::
      000634 E8 F6                 1483 	add	sp, #-10
                                   1484 ;src/main.c:484: initrand(DIV_REG);
      000636 F0r00                 1485 	ldh	a, (_DIV_REG+0)
      000638 4F                    1486 	ld	c, a
      000639 06 00                 1487 	ld	b, #0x00
      00063B C5                    1488 	push	bc
      00063C CDr00r00              1489 	call	_initrand
      00063F E8 02                 1490 	add	sp, #2
                                   1491 ;src/main.c:486: set_bkg_data(OFFSET_BKG_CARD, N_CARD, card_textures);
      000641 21r00r00              1492 	ld	hl, #_card_textures
      000644 E5                    1493 	push	hl
      000645 11 01 2E              1494 	ld	de, #0x2e01
      000648 D5                    1495 	push	de
      000649 CDr00r00              1496 	call	_set_bkg_data
      00064C E8 04                 1497 	add	sp, #4
                                   1498 ;src/main.c:488: init_deck();
      00064E CDr1Er00              1499 	call	_init_deck
                                   1500 ;src/main.c:490: draw_background();
      000651 CDr00r04              1501 	call	_draw_background
                                   1502 ;src/main.c:491: SHOW_BKG;
      000654 F0r00                 1503 	ldh	a, (_LCDC_REG+0)
      000656 F6 01                 1504 	or	a, #0x01
      000658 E0r00                 1505 	ldh	(_LCDC_REG+0),a
                                   1506 ;src/main.c:493: set_sprite_data(OFFSET_SPRITE_CURSOR, N_CURSOR, cursor_textures);
      00065A 21r00r00              1507 	ld	hl, #_cursor_textures
      00065D E5                    1508 	push	hl
      00065E 11 01 08              1509 	ld	de, #0x0801
      000661 D5                    1510 	push	de
      000662 CDr00r00              1511 	call	_set_sprite_data
      000665 E8 04                 1512 	add	sp, #4
                                   1513 ;src/main.c:494: set_sprite_data(OFFSET_SPRITE_BACK, N_CARD_BACK, IDX_PTR(card_textures, SIZEOF_TILE * OFFSET_CARD_BACK));
      000667 21r70r01              1514 	ld	hl, #(_card_textures + 0x0170)
      00066A E5                    1515 	push	hl
      00066B 11 09 06              1516 	ld	de, #0x0609
      00066E D5                    1517 	push	de
      00066F CDr00r00              1518 	call	_set_sprite_data
      000672 E8 04                 1519 	add	sp, #4
                                   1520 ;src/main.c:495: SHOW_SPRITES;
      000674 F0r00                 1521 	ldh	a, (_LCDC_REG+0)
      000676 F6 02                 1522 	or	a, #0x02
      000678 E0r00                 1523 	ldh	(_LCDC_REG+0),a
                                   1524 ;src/main.c:497: while (1) {
      00067A                       1525 00102$:
                                   1526 ;src/main.c:379: UINT8 input = joypad();
      00067A CDr00r00              1527 	call	_joypad
      00067D F8 00                 1528 	ldhl	sp,	#0
      00067F 73                    1529 	ld	(hl), e
                                   1530 ;src/main.c:380: UINT8 new_input = input & ~prev_input;
      000680 FAr87r01              1531 	ld	a, (#_main_prev_input_327680_236)
      000683 2F                    1532 	cpl
      000684 F8 00                 1533 	ldhl	sp,	#0
      000686 A6                    1534 	and	a, (hl)
      000687 23                    1535 	inc	hl
      000688 77                    1536 	ld	(hl), a
                                   1537 ;src/main.c:381: if (cursor.held_card) {
      000689 11r7Br01              1538 	ld	de, #_cursor
      00068C 1A                    1539 	ld	a, (de)
      00068D 23                    1540 	inc	hl
      00068E 22                    1541 	ld	(hl+), a
      00068F 13                    1542 	inc	de
      000690 1A                    1543 	ld	a, (de)
                                   1544 ;src/main.c:384: && cursor.hand_pile_idx != 0) {
      000691 32                    1545 	ld	(hl-), a
      000692 2B                    1546 	dec	hl
      000693 7E                    1547 	ld	a, (hl)
      000694 E6 02                 1548 	and	a, #0x02
      000696 F8 04                 1549 	ldhl	sp,	#4
      000698 77                    1550 	ld	(hl), a
      000699 AF                    1551 	xor	a, a
      00069A 23                    1552 	inc	hl
      00069B 77                    1553 	ld	(hl), a
                                   1554 ;src/main.c:387: && cursor.hand_pile_idx < 9) {
      00069C F8 01                 1555 	ldhl	sp,	#1
      00069E 7E                    1556 	ld	a, (hl)
      00069F E6 01                 1557 	and	a, #0x01
      0006A1 F8 06                 1558 	ldhl	sp,	#6
      0006A3 77                    1559 	ld	(hl), a
      0006A4 AF                    1560 	xor	a, a
      0006A5 23                    1561 	inc	hl
      0006A6 77                    1562 	ld	(hl), a
                                   1563 ;src/main.c:390: if (new_input & J_A) {
      0006A7 F8 01                 1564 	ldhl	sp,	#1
      0006A9 7E                    1565 	ld	a, (hl)
      0006AA E6 10                 1566 	and	a, #0x10
      0006AC F8 08                 1567 	ldhl	sp,	#8
      0006AE 77                    1568 	ld	(hl), a
      0006AF AF                    1569 	xor	a, a
      0006B0 23                    1570 	inc	hl
      0006B1 77                    1571 	ld	(hl), a
                                   1572 ;src/main.c:381: if (cursor.held_card) {
      0006B2 F8 03                 1573 	ldhl	sp,	#3
      0006B4 3A                    1574 	ld	a, (hl-)
      0006B5 B6                    1575 	or	a, (hl)
      0006B6 CAr61r07              1576 	jp	Z, 00170$
                                   1577 ;src/main.c:382: cursor.redraw |= BITMASK_REDRAW_HAND;
      0006B9 01r85r01              1578 	ld	bc, #_cursor + 10
      0006BC 0A                    1579 	ld	a, (bc)
      0006BD CB CF                 1580 	set	1, a
      0006BF 02                    1581 	ld	(bc), a
                                   1582 ;src/main.c:384: && cursor.hand_pile_idx != 0) {
      0006C0 11r80r01              1583 	ld	de, #_cursor + 5
      0006C3 F8 05                 1584 	ldhl	sp,	#5
      0006C5 3A                    1585 	ld	a, (hl-)
      0006C6 B6                    1586 	or	a, (hl)
      0006C7 28 08                 1587 	jr	Z, 00109$
      0006C9 1A                    1588 	ld	a, (de)
      0006CA B7                    1589 	or	a, a
      0006CB 28 04                 1590 	jr	Z, 00109$
                                   1591 ;src/main.c:385: cursor.hand_pile_idx--;
      0006CD 3D                    1592 	dec	a
      0006CE 12                    1593 	ld	(de), a
      0006CF 18 0D                 1594 	jr	00110$
      0006D1                       1595 00109$:
                                   1596 ;src/main.c:387: && cursor.hand_pile_idx < 9) {
      0006D1 F8 07                 1597 	ldhl	sp,	#7
      0006D3 3A                    1598 	ld	a, (hl-)
      0006D4 B6                    1599 	or	a, (hl)
      0006D5 28 07                 1600 	jr	Z, 00110$
      0006D7 1A                    1601 	ld	a, (de)
      0006D8 FE 09                 1602 	cp	a, #0x09
      0006DA 30 02                 1603 	jr	NC, 00110$
                                   1604 ;src/main.c:388: cursor.hand_pile_idx++;
      0006DC 3C                    1605 	inc	a
      0006DD 12                    1606 	ld	(de), a
      0006DE                       1607 00110$:
                                   1608 ;src/main.c:390: if (new_input & J_A) {
      0006DE F8 09                 1609 	ldhl	sp,	#9
      0006E0 3A                    1610 	ld	a, (hl-)
      0006E1 B6                    1611 	or	a, (hl)
      0006E2 CArB5r09              1612 	jp	Z, 00171$
                                   1613 ;src/main.c:366: Pile *pile = IDX_PTR(piles, cursor.hand_pile_idx);
      0006E5 1A                    1614 	ld	a, (de)
      0006E6 4F                    1615 	ld	c, a
      0006E7 06 00                 1616 	ld	b, #0x00
      0006E9 69                    1617 	ld	l, c
      0006EA 60                    1618 	ld	h, b
      0006EB 29                    1619 	add	hl, hl
      0006EC 29                    1620 	add	hl, hl
      0006ED 09                    1621 	add	hl, bc
      0006EE 3Er38                 1622 	ld	a, #<(_piles)
      0006F0 85                    1623 	add	a, l
      0006F1 47                    1624 	ld	b, a
      0006F2 3Es01                 1625 	ld	a, #>(_piles)
      0006F4 8C                    1626 	adc	a, h
      0006F5 F8 08                 1627 	ldhl	sp,	#8
      0006F7 70                    1628 	ld	(hl), b
      0006F8 23                    1629 	inc	hl
      0006F9 77                    1630 	ld	(hl), a
                                   1631 ;src/main.c:367: if (cursor.hand_pile_idx == cursor.pile_idx) {
      0006FA FAr81r01              1632 	ld	a, (#(_cursor + 0x0006) + 0)
      0006FD 91                    1633 	sub	a, c
      0006FE 20 0D                 1634 	jr	NZ, 00115$
                                   1635 ;src/main.c:368: pile_append_cursor_stack(pile);
      000700 2B                    1636 	dec	hl
      000701 2A                    1637 	ld	a, (hl+)
      000702 66                    1638 	ld	h, (hl)
      000703 6F                    1639 	ld	l, a
      000704 E5                    1640 	push	hl
      000705 CDr41r05              1641 	call	_pile_append_cursor_stack
      000708 E8 02                 1642 	add	sp, #2
      00070A C3rB5r09              1643 	jp	00171$
      00070D                       1644 00115$:
                                   1645 ;src/main.c:369: } else if (!pile->height
                                   1646 ;c
      00070D F8 08                 1647 	ldhl	sp,#8
      00070F 2A                    1648 	ld	a, (hl+)
      000710 5F                    1649 	ld	e, a
      000711 56                    1650 	ld	d, (hl)
      000712 21 04 00              1651 	ld	hl, #0x0004
      000715 19                    1652 	add	hl, de
      000716 4D                    1653 	ld	c, l
      000717 44                    1654 	ld	b, h
      000718 0A                    1655 	ld	a, (bc)
      000719 B7                    1656 	or	a, a
      00071A 28 2B                 1657 	jr	Z, 00113$
                                   1658 ;src/main.c:370: || RANK(pile->top->data) == RANK(cursor.held_card->data) + 1u) {
      00071C F8 08                 1659 	ldhl	sp,	#8
      00071E 2A                    1660 	ld	a, (hl+)
      00071F 66                    1661 	ld	h, (hl)
      000720 6F                    1662 	ld	l, a
      000721 23                    1663 	inc	hl
      000722 23                    1664 	inc	hl
      000723 2A                    1665 	ld	a, (hl+)
      000724 4F                    1666 	ld	c, a
      000725 46                    1667 	ld	b, (hl)
      000726 03                    1668 	inc	bc
      000727 03                    1669 	inc	bc
      000728 0A                    1670 	ld	a, (bc)
      000729 E6 0F                 1671 	and	a, #0x0f
      00072B 4F                    1672 	ld	c, a
      00072C 06 00                 1673 	ld	b, #0x00
      00072E 21r7Br01              1674 	ld	hl, #_cursor
      000731 2A                    1675 	ld	a, (hl+)
      000732 66                    1676 	ld	h, (hl)
      000733 6F                    1677 	ld	l, a
      000734 23                    1678 	inc	hl
      000735 23                    1679 	inc	hl
      000736 7E                    1680 	ld	a, (hl)
      000737 E6 0F                 1681 	and	a, #0x0f
      000739 5F                    1682 	ld	e, a
      00073A 16 00                 1683 	ld	d, #0x00
      00073C 13                    1684 	inc	de
      00073D 79                    1685 	ld	a, c
      00073E 93                    1686 	sub	a, e
      00073F C2rB5r09              1687 	jp	NZ,00171$
      000742 78                    1688 	ld	a, b
      000743 92                    1689 	sub	a, d
      000744 C2rB5r09              1690 	jp	NZ,00171$
      000747                       1691 00113$:
                                   1692 ;src/main.c:371: pile_append_cursor_stack(pile);
      000747 F8 08                 1693 	ldhl	sp,	#8
      000749 2A                    1694 	ld	a, (hl+)
      00074A 66                    1695 	ld	h, (hl)
      00074B 6F                    1696 	ld	l, a
      00074C E5                    1697 	push	hl
      00074D CDr41r05              1698 	call	_pile_append_cursor_stack
      000750 E8 02                 1699 	add	sp, #2
                                   1700 ;src/main.c:372: score--;
      000752 21r6Cr01              1701 	ld	hl, #_score + 1
      000755 2B                    1702 	dec	hl
      000756 2A                    1703 	ld	a, (hl+)
      000757 5F                    1704 	ld	e, a
      000758 56                    1705 	ld	d, (hl)
      000759 1B                    1706 	dec	de
      00075A 2B                    1707 	dec	hl
      00075B 7B                    1708 	ld	a, e
      00075C 22                    1709 	ld	(hl+), a
      00075D 72                    1710 	ld	(hl), d
                                   1711 ;src/main.c:391: cursor_place_stack();
      00075E C3rB5r09              1712 	jp	00171$
      000761                       1713 00170$:
                                   1714 ;src/main.c:394: cursor.redraw |= BITMASK_REDRAW_CURSOR;
      000761 01r85r01              1715 	ld	bc, #_cursor + 10
      000764 0A                    1716 	ld	a, (bc)
      000765 CB C7                 1717 	set	0, a
      000767 02                    1718 	ld	(bc), a
                                   1719 ;src/main.c:396: if (cursor.pile_idx == PILE_IDX_DECK)
      000768 01r81r01              1720 	ld	bc, #_cursor + 6
                                   1721 ;src/main.c:398: else if (cursor.height < piles[cursor.pile_idx].height)
                                   1722 ;src/main.c:395: if (new_input & J_DOWN) {
      00076B F8 01                 1723 	ldhl	sp,	#1
      00076D CB 5E                 1724 	bit	3, (hl)
      00076F 28 33                 1725 	jr	Z, 00141$
                                   1726 ;src/main.c:396: if (cursor.pile_idx == PILE_IDX_DECK)
      000771 0A                    1727 	ld	a, (bc)
      000772 F8 06                 1728 	ldhl	sp,	#6
      000774 77                    1729 	ld	(hl), a
      000775 7E                    1730 	ld	a, (hl)
      000776 D6 0A                 1731 	sub	a, #0x0a
      000778 20 04                 1732 	jr	NZ, 00124$
                                   1733 ;src/main.c:397: cursor.pile_idx = 0;
      00077A AF                    1734 	xor	a, a
      00077B 02                    1735 	ld	(bc), a
      00077C 18 66                 1736 	jr	00142$
      00077E                       1737 00124$:
                                   1738 ;src/main.c:398: else if (cursor.height < piles[cursor.pile_idx].height)
      00077E FAr82r01              1739 	ld	a, (#(_cursor + 0x0007) + 0)
      000781 F8 07                 1740 	ldhl	sp,	#7
      000783 77                    1741 	ld	(hl), a
      000784 F8 06                 1742 	ldhl	sp,	#6
      000786 5E                    1743 	ld	e, (hl)
      000787 16 00                 1744 	ld	d, #0x00
      000789 6B                    1745 	ld	l, e
      00078A 62                    1746 	ld	h, d
      00078B 29                    1747 	add	hl, hl
      00078C 29                    1748 	add	hl, hl
      00078D 19                    1749 	add	hl, de
      00078E 11r38r01              1750 	ld	de, #_piles
      000791 19                    1751 	add	hl, de
      000792 23                    1752 	inc	hl
      000793 23                    1753 	inc	hl
      000794 23                    1754 	inc	hl
      000795 23                    1755 	inc	hl
      000796 5E                    1756 	ld	e, (hl)
      000797 F8 07                 1757 	ldhl	sp,	#7
      000799 7E                    1758 	ld	a, (hl)
      00079A 93                    1759 	sub	a, e
      00079B 30 47                 1760 	jr	NC, 00142$
                                   1761 ;src/main.c:399: cursor.height++;
      00079D 7E                    1762 	ld	a, (hl)
      00079E 3C                    1763 	inc	a
      00079F EAr82r01              1764 	ld	(#(_cursor + 0x0007)),a
      0007A2 18 40                 1765 	jr	00142$
      0007A4                       1766 00141$:
                                   1767 ;src/main.c:400: } else if (new_input & J_UP) {
      0007A4 F8 01                 1768 	ldhl	sp,	#1
      0007A6 CB 56                 1769 	bit	2, (hl)
      0007A8 28 11                 1770 	jr	Z, 00139$
                                   1771 ;src/main.c:401: if (cursor.height == 0)
      0007AA FAr82r01              1772 	ld	a, (#(_cursor + 0x0007) + 0)
      0007AD B7                    1773 	or	a, a
      0007AE 20 05                 1774 	jr	NZ, 00128$
                                   1775 ;src/main.c:402: cursor.pile_idx = PILE_IDX_DECK;
      0007B0 3E 0A                 1776 	ld	a, #0x0a
      0007B2 02                    1777 	ld	(bc), a
      0007B3 18 2F                 1778 	jr	00142$
      0007B5                       1779 00128$:
                                   1780 ;src/main.c:404: cursor.height--;
      0007B5 3D                    1781 	dec	a
      0007B6 EAr82r01              1782 	ld	(#(_cursor + 0x0007)),a
      0007B9 18 29                 1783 	jr	00142$
      0007BB                       1784 00139$:
                                   1785 ;src/main.c:406: && cursor.pile_idx != 0
      0007BB F8 05                 1786 	ldhl	sp,	#5
      0007BD 3A                    1787 	ld	a, (hl-)
      0007BE B6                    1788 	or	a, (hl)
      0007BF 28 11                 1789 	jr	Z, 00137$
      0007C1 0A                    1790 	ld	a, (bc)
      0007C2 B7                    1791 	or	a, a
      0007C3 28 0D                 1792 	jr	Z, 00137$
                                   1793 ;src/main.c:407: && cursor.pile_idx != PILE_IDX_DECK) {
      0007C5 FE 0A                 1794 	cp	a, #0x0a
      0007C7 28 09                 1795 	jr	Z, 00137$
                                   1796 ;src/main.c:408: cursor.pile_idx--;
      0007C9 3D                    1797 	dec	a
      0007CA 02                    1798 	ld	(bc), a
                                   1799 ;src/main.c:409: cursor_adjust_height();
      0007CB C5                    1800 	push	bc
      0007CC CDr45r04              1801 	call	_cursor_adjust_height
      0007CF C1                    1802 	pop	bc
      0007D0 18 12                 1803 	jr	00142$
      0007D2                       1804 00137$:
                                   1805 ;src/main.c:411: && cursor.pile_idx < 9) {
      0007D2 F8 07                 1806 	ldhl	sp,	#7
      0007D4 3A                    1807 	ld	a, (hl-)
      0007D5 B6                    1808 	or	a, (hl)
      0007D6 28 0C                 1809 	jr	Z, 00142$
      0007D8 0A                    1810 	ld	a, (bc)
      0007D9 FE 09                 1811 	cp	a, #0x09
      0007DB 30 07                 1812 	jr	NC, 00142$
                                   1813 ;src/main.c:412: cursor.pile_idx++;
      0007DD 3C                    1814 	inc	a
      0007DE 02                    1815 	ld	(bc), a
                                   1816 ;src/main.c:413: cursor_adjust_height();
      0007DF C5                    1817 	push	bc
      0007E0 CDr45r04              1818 	call	_cursor_adjust_height
      0007E3 C1                    1819 	pop	bc
      0007E4                       1820 00142$:
                                   1821 ;src/main.c:415: if (new_input & J_A) {
      0007E4 F8 09                 1822 	ldhl	sp,	#9
      0007E6 3A                    1823 	ld	a, (hl-)
      0007E7 B6                    1824 	or	a, (hl)
      0007E8 CArB5r09              1825 	jp	Z, 00171$
                                   1826 ;src/main.c:416: if (cursor.pile_idx == PILE_IDX_DECK && top_card_idx != 104u)
      0007EB 0A                    1827 	ld	a, (bc)
      0007EC 4F                    1828 	ld	c, a
      0007ED D6 0A                 1829 	sub	a, #0x0a
      0007EF C2rABr08              1830 	jp	NZ,00166$
      0007F2 FAr6Ar01              1831 	ld	a, (#_top_card_idx)
      0007F5 D6 68                 1832 	sub	a, #0x68
      0007F7 CArABr08              1833 	jp	Z,00166$
                                   1834 ;src/main.c:315: Pile *pile = IDX_PTR(piles, 0);
      0007FA 01r38r01              1835 	ld	bc, #_piles
                                   1836 ;src/main.c:316: for (i = 0; i < 10u; i++) {
      0007FD 1E 00                 1837 	ld	e, #0x00
      0007FF                       1838 00196$:
                                   1839 ;src/main.c:317: if (!pile->height)
      0007FF 21 04 00              1840 	ld	hl, #0x0004
      000802 09                    1841 	add	hl, bc
      000803 7E                    1842 	ld	a, (hl)
      000804 B7                    1843 	or	a, a
      000805 CArB5r09              1844 	jp	Z, 00171$
                                   1845 ;src/main.c:319: pile++;
      000808 03                    1846 	inc	bc
      000809 03                    1847 	inc	bc
      00080A 03                    1848 	inc	bc
      00080B 03                    1849 	inc	bc
      00080C 03                    1850 	inc	bc
                                   1851 ;src/main.c:316: for (i = 0; i < 10u; i++) {
      00080D 1C                    1852 	inc	e
      00080E 7B                    1853 	ld	a, e
      00080F D6 0A                 1854 	sub	a, #0x0a
      000811 38 EC                 1855 	jr	C, 00196$
                                   1856 ;src/main.c:322: pile = IDX_PTR(piles, 0);
      000813 01r38r01              1857 	ld	bc, #_piles
                                   1858 ;src/main.c:323: Card *deck_top = IDX_PTR(deck, top_card_idx);
      000816 21r6Ar01              1859 	ld	hl, #_top_card_idx
      000819 5E                    1860 	ld	e, (hl)
      00081A 16 00                 1861 	ld	d, #0x00
      00081C 6B                    1862 	ld	l, e
      00081D 62                    1863 	ld	h, d
      00081E 29                    1864 	add	hl, hl
      00081F 19                    1865 	add	hl, de
      000820 E5                    1866 	push	hl
      000821 7D                    1867 	ld	a, l
      000822 F8 0A                 1868 	ldhl	sp,	#10
      000824 77                    1869 	ld	(hl), a
      000825 E1                    1870 	pop	hl
      000826 7C                    1871 	ld	a, h
      000827 F8 09                 1872 	ldhl	sp,	#9
                                   1873 ;c
      000829 32                    1874 	ld	(hl-), a
      00082A 2A                    1875 	ld	a, (hl+)
      00082B 5F                    1876 	ld	e, a
      00082C 56                    1877 	ld	d, (hl)
      00082D 21r00r00              1878 	ld	hl, #_deck
      000830 19                    1879 	add	hl, de
      000831 5D                    1880 	ld	e, l
      000832 7C                    1881 	ld	a, h
      000833 F8 07                 1882 	ldhl	sp,	#7
      000835 73                    1883 	ld	(hl), e
      000836 23                    1884 	inc	hl
                                   1885 ;src/main.c:324: for (i = 0; i < 10u; i++) {
      000837 22                    1886 	ld	(hl+), a
      000838 36 0A                 1887 	ld	(hl), #0x0a
      00083A                       1888 00200$:
                                   1889 ;src/main.c:325: pile->top->next_card = deck_top;
      00083A 21 02 00              1890 	ld	hl, #0x0002
      00083D 09                    1891 	add	hl, bc
      00083E E5                    1892 	push	hl
      00083F 7D                    1893 	ld	a, l
      000840 F8 05                 1894 	ldhl	sp,	#5
      000842 77                    1895 	ld	(hl), a
      000843 E1                    1896 	pop	hl
      000844 7C                    1897 	ld	a, h
      000845 F8 04                 1898 	ldhl	sp,	#4
      000847 32                    1899 	ld	(hl-), a
      000848 2A                    1900 	ld	a, (hl+)
      000849 5F                    1901 	ld	e, a
      00084A 56                    1902 	ld	d, (hl)
      00084B 1A                    1903 	ld	a, (de)
      00084C 23                    1904 	inc	hl
      00084D 22                    1905 	ld	(hl+), a
      00084E 13                    1906 	inc	de
      00084F 1A                    1907 	ld	a, (de)
      000850 32                    1908 	ld	(hl-), a
      000851 2A                    1909 	ld	a, (hl+)
      000852 5F                    1910 	ld	e, a
      000853 2A                    1911 	ld	a, (hl+)
      000854 57                    1912 	ld	d, a
      000855 7E                    1913 	ld	a, (hl)
      000856 12                    1914 	ld	(de), a
      000857 13                    1915 	inc	de
      000858 23                    1916 	inc	hl
      000859 7E                    1917 	ld	a, (hl)
      00085A 12                    1918 	ld	(de), a
                                   1919 ;src/main.c:326: pile->top = deck_top;
      00085B F8 03                 1920 	ldhl	sp,#3
      00085D 2A                    1921 	ld	a, (hl+)
      00085E 5F                    1922 	ld	e, a
      00085F 56                    1923 	ld	d, (hl)
      000860 F8 07                 1924 	ldhl	sp,	#7
      000862 7E                    1925 	ld	a, (hl)
      000863 12                    1926 	ld	(de), a
      000864 13                    1927 	inc	de
      000865 23                    1928 	inc	hl
      000866 7E                    1929 	ld	a, (hl)
      000867 12                    1930 	ld	(de), a
                                   1931 ;src/main.c:327: pile->height++;
      000868 21 04 00              1932 	ld	hl, #0x0004
      00086B 09                    1933 	add	hl, bc
      00086C 34                    1934 	inc	(hl)
                                   1935 ;src/main.c:328: deck_top++;
                                   1936 ;c
      00086D F8 07                 1937 	ldhl	sp,#7
      00086F 2A                    1938 	ld	a, (hl+)
      000870 5F                    1939 	ld	e, a
      000871 56                    1940 	ld	d, (hl)
      000872 21 03 00              1941 	ld	hl, #0x0003
      000875 19                    1942 	add	hl, de
      000876 E5                    1943 	push	hl
      000877 7D                    1944 	ld	a, l
      000878 F8 09                 1945 	ldhl	sp,	#9
      00087A 77                    1946 	ld	(hl), a
      00087B E1                    1947 	pop	hl
      00087C 7C                    1948 	ld	a, h
      00087D F8 08                 1949 	ldhl	sp,	#8
      00087F 77                    1950 	ld	(hl), a
                                   1951 ;src/main.c:329: pile++;
      000880 03                    1952 	inc	bc
      000881 03                    1953 	inc	bc
      000882 03                    1954 	inc	bc
      000883 03                    1955 	inc	bc
      000884 03                    1956 	inc	bc
      000885 23                    1957 	inc	hl
                                   1958 ;src/main.c:324: for (i = 0; i < 10u; i++) {
      000886 35                    1959 	dec	(hl)
      000887 7E                    1960 	ld	a, (hl)
      000888 20 B0                 1961 	jr	NZ, 00200$
                                   1962 ;src/main.c:331: top_card_idx += 10u;
      00088A 21r6Ar01              1963 	ld	hl, #_top_card_idx
      00088D 7E                    1964 	ld	a, (hl)
      00088E C6 0A                 1965 	add	a, #0x0a
      000890 77                    1966 	ld	(hl), a
                                   1967 ;src/main.c:333: if (top_card_idx == 104u)
      000891 7E                    1968 	ld	a, (hl)
      000892 D6 68                 1969 	sub	a, #0x68
      000894 20 0F                 1970 	jr	NZ, 00149$
                                   1971 ;src/main.c:334: draw_card(0, 0, OFFSET_BKG_BLANK);
      000896 3E 12                 1972 	ld	a, #0x12
      000898 F5                    1973 	push	af
      000899 33                    1974 	inc	sp
      00089A AF                    1975 	xor	a, a
      00089B F5                    1976 	push	af
      00089C 33                    1977 	inc	sp
      00089D AF                    1978 	xor	a, a
      00089E F5                    1979 	push	af
      00089F 33                    1980 	inc	sp
      0008A0 CDr8Fr03              1981 	call	_draw_card
      0008A3 E8 03                 1982 	add	sp, #3
      0008A5                       1983 00149$:
                                   1984 ;src/main.c:336: dynamic_metasprite_deal();
      0008A5 CDrF8r04              1985 	call	_dynamic_metasprite_deal
                                   1986 ;src/main.c:417: deal();
      0008A8 C3rB5r09              1987 	jp	00171$
      0008AB                       1988 00166$:
                                   1989 ;src/main.c:250: Pile *pile = IDX_PTR(piles, cursor.pile_idx);
      0008AB 06 00                 1990 	ld	b, #0x00
      0008AD 69                    1991 	ld	l, c
      0008AE 60                    1992 	ld	h, b
      0008AF 29                    1993 	add	hl, hl
      0008B0 29                    1994 	add	hl, hl
      0008B1 09                    1995 	add	hl, bc
      0008B2 7D                    1996 	ld	a, l
      0008B3 C6r38                 1997 	add	a, #<(_piles)
      0008B5 4F                    1998 	ld	c, a
      0008B6 7C                    1999 	ld	a, h
      0008B7 CEs01                 2000 	adc	a, #>(_piles)
      0008B9 47                    2001 	ld	b, a
      0008BA F8 04                 2002 	ldhl	sp,	#4
      0008BC 79                    2003 	ld	a, c
      0008BD 22                    2004 	ld	(hl+), a
                                   2005 ;src/main.c:251: Card *top = pile->base;
      0008BE 78                    2006 	ld	a, b
      0008BF 32                    2007 	ld	(hl-), a
      0008C0 2A                    2008 	ld	a, (hl+)
      0008C1 5F                    2009 	ld	e, a
      0008C2 56                    2010 	ld	d, (hl)
      0008C3 1A                    2011 	ld	a, (de)
      0008C4 F8 08                 2012 	ldhl	sp,	#8
      0008C6 22                    2013 	ld	(hl+), a
      0008C7 13                    2014 	inc	de
      0008C8 1A                    2015 	ld	a, (de)
                                   2016 ;src/main.c:252: for (i = 1; i < cursor.height; i++)
      0008C9 32                    2017 	ld	(hl-), a
      0008CA 2B                    2018 	dec	hl
      0008CB 36 01                 2019 	ld	(hl), #0x01
      0008CD                       2020 00202$:
      0008CD FAr82r01              2021 	ld	a, (#(_cursor + 0x0007) + 0)
      0008D0 F8 06                 2022 	ldhl	sp,	#6
      0008D2 77                    2023 	ld	(hl), a
      0008D3 F8 07                 2024 	ldhl	sp,	#7
      0008D5 3A                    2025 	ld	a, (hl-)
      0008D6 96                    2026 	sub	a, (hl)
      0008D7 30 0F                 2027 	jr	NC, 00152$
                                   2028 ;src/main.c:253: top = top->next_card;
      0008D9 F8 08                 2029 	ldhl	sp,#8
      0008DB 2A                    2030 	ld	a, (hl+)
      0008DC 5F                    2031 	ld	e, a
      0008DD 56                    2032 	ld	d, (hl)
      0008DE 1A                    2033 	ld	a, (de)
      0008DF 2B                    2034 	dec	hl
      0008E0 22                    2035 	ld	(hl+), a
      0008E1 13                    2036 	inc	de
      0008E2 1A                    2037 	ld	a, (de)
                                   2038 ;src/main.c:252: for (i = 1; i < cursor.height; i++)
      0008E3 32                    2039 	ld	(hl-), a
      0008E4 2B                    2040 	dec	hl
      0008E5 34                    2041 	inc	(hl)
      0008E6 18 E5                 2042 	jr	00202$
      0008E8                       2043 00152$:
                                   2044 ;src/main.c:254: Card *stack = cursor.height ? top->next_card : top;
      0008E8 F8 06                 2045 	ldhl	sp,	#6
      0008EA 7E                    2046 	ld	a, (hl)
      0008EB B7                    2047 	or	a, a
      0008EC 28 0E                 2048 	jr	Z, 00206$
      0008EE F8 08                 2049 	ldhl	sp,#8
      0008F0 2A                    2050 	ld	a, (hl+)
      0008F1 5F                    2051 	ld	e, a
      0008F2 56                    2052 	ld	d, (hl)
      0008F3 1A                    2053 	ld	a, (de)
      0008F4 F8 06                 2054 	ldhl	sp,	#6
      0008F6 22                    2055 	ld	(hl+), a
      0008F7 13                    2056 	inc	de
      0008F8 1A                    2057 	ld	a, (de)
      0008F9 77                    2058 	ld	(hl), a
      0008FA 18 08                 2059 	jr	00207$
      0008FC                       2060 00206$:
      0008FC F8 08                 2061 	ldhl	sp,	#8
      0008FE 2A                    2062 	ld	a, (hl+)
      0008FF 5E                    2063 	ld	e, (hl)
      000900 F8 06                 2064 	ldhl	sp,	#6
      000902 22                    2065 	ld	(hl+), a
      000903 73                    2066 	ld	(hl), e
      000904                       2067 00207$:
                                   2068 ;src/main.c:255: if (!VISIBLE(stack->data))
      000904 F8 06                 2069 	ldhl	sp,	#6
      000906 2A                    2070 	ld	a, (hl+)
      000907 66                    2071 	ld	h, (hl)
      000908 6F                    2072 	ld	l, a
      000909 23                    2073 	inc	hl
      00090A 23                    2074 	inc	hl
      00090B CB 76                 2075 	bit	6, (hl)
      00090D CArB5r09              2076 	jp	Z,00171$
                                   2077 ;src/main.c:258: Card *card = stack;
      000910 F8 06                 2078 	ldhl	sp,#6
      000912 2A                    2079 	ld	a, (hl+)
      000913 4F                    2080 	ld	c, a
      000914 46                    2081 	ld	b, (hl)
                                   2082 ;src/main.c:259: while (card->next_card) {
      000915                       2083 00155$:
      000915 69                    2084 	ld	l, c
      000916 60                    2085 	ld	h, b
      000917 2A                    2086 	ld	a, (hl+)
      000918 66                    2087 	ld	h, (hl)
      000919 6F                    2088 	ld	l,a
      00091A B4                    2089 	or	a,h
      00091B 28 1A                 2090 	jr	Z, 00159$
                                   2091 ;src/main.c:260: UINT8 prev_data = card->data;
      00091D 03                    2092 	inc	bc
      00091E 03                    2093 	inc	bc
      00091F 0A                    2094 	ld	a, (bc)
                                   2095 ;src/main.c:261: card = card->next_card;
                                   2096 ;src/main.c:262: if (prev_data != card->data + 1u)
      000920 4D                    2097 	ld	c,l
      000921 44                    2098 	ld	b,h
      000922 23                    2099 	inc	hl
      000923 23                    2100 	inc	hl
      000924 5E                    2101 	ld	e, (hl)
      000925 16 00                 2102 	ld	d, #0x00
      000927 13                    2103 	inc	de
      000928 6F                    2104 	ld	l, a
      000929 26 00                 2105 	ld	h, #0x00
      00092B 7D                    2106 	ld	a, l
      00092C 93                    2107 	sub	a, e
      00092D C2rB5r09              2108 	jp	NZ,00171$
      000930 7C                    2109 	ld	a, h
      000931 92                    2110 	sub	a, d
      000932 28 E1                 2111 	jr	Z, 00155$
                                   2112 ;src/main.c:263: return;
      000934 C3rB5r09              2113 	jp	00171$
      000937                       2114 00159$:
                                   2115 ;src/main.c:266: cursor.held_card = stack;
      000937 11r7Br01              2116 	ld	de, #_cursor
      00093A F8 06                 2117 	ldhl	sp,	#6
      00093C 7E                    2118 	ld	a, (hl)
      00093D 12                    2119 	ld	(de), a
      00093E 13                    2120 	inc	de
      00093F 23                    2121 	inc	hl
      000940 7E                    2122 	ld	a, (hl)
      000941 12                    2123 	ld	(de), a
                                   2124 ;src/main.c:267: cursor.hand_pile_idx = cursor.pile_idx;
      000942 FAr81r01              2125 	ld	a, (#(_cursor + 0x0006) + 0)
      000945 EAr80r01              2126 	ld	(#(_cursor + 0x0005)),a
                                   2127 ;src/main.c:268: cursor.held_stack_size = pile->height - cursor.height + !!cursor.height;//NOTE: this is somewhat jank and may cause problems
                                   2128 ;c
      000948 F8 04                 2129 	ldhl	sp,#4
      00094A 2A                    2130 	ld	a, (hl+)
      00094B 5F                    2131 	ld	e, a
      00094C 56                    2132 	ld	d, (hl)
      00094D 21 04 00              2133 	ld	hl, #0x0004
      000950 19                    2134 	add	hl, de
      000951 4D                    2135 	ld	c, l
      000952 44                    2136 	ld	b, h
      000953 0A                    2137 	ld	a, (bc)
      000954 21r82r01              2138 	ld	hl, #(_cursor + 0x0007)
      000957 6E                    2139 	ld	l, (hl)
      000958 95                    2140 	sub	a, l
      000959 5F                    2141 	ld	e, a
      00095A 7D                    2142 	ld	a, l
      00095B D6 01                 2143 	sub	a,#0x01
      00095D 3E 00                 2144 	ld	a, #0x00
      00095F 17                    2145 	rla
      000960 EE 01                 2146 	xor	a, #0x01
      000962 83                    2147 	add	a, e
      000963 EAr7Fr01              2148 	ld	(#(_cursor + 0x0004)),a
                                   2149 ;src/main.c:269: pile->height = cursor.height - !!cursor.height;
      000966 21r82r01              2150 	ld	hl, #(_cursor + 0x0007)
      000969 6E                    2151 	ld	l, (hl)
      00096A 7D                    2152 	ld	a, l
      00096B D6 01                 2153 	sub	a,#0x01
      00096D 3E 00                 2154 	ld	a, #0x00
      00096F 17                    2155 	rla
      000970 EE 01                 2156 	xor	a, #0x01
      000972 5F                    2157 	ld	e, a
      000973 7D                    2158 	ld	a, l
      000974 93                    2159 	sub	a, e
      000975 02                    2160 	ld	(bc), a
                                   2161 ;src/main.c:270: if (cursor.height) {
      000976 FAr82r01              2162 	ld	a, (#(_cursor + 0x0007) + 0)
                                   2163 ;src/main.c:271: pile->top = top;
      000979 F8 04                 2164 	ldhl	sp,#4
      00097B 4E                    2165 	ld	c, (hl)
      00097C 23                    2166 	inc	hl
      00097D 46                    2167 	ld	b, (hl)
      00097E 03                    2168 	inc	bc
      00097F 03                    2169 	inc	bc
                                   2170 ;src/main.c:270: if (cursor.height) {
      000980 B7                    2171 	or	a, a
      000981 28 26                 2172 	jr	Z, 00163$
                                   2173 ;src/main.c:271: pile->top = top;
      000983 F8 08                 2174 	ldhl	sp,	#8
      000985 2A                    2175 	ld	a, (hl+)
      000986 02                    2176 	ld	(bc), a
      000987 03                    2177 	inc	bc
      000988 7E                    2178 	ld	a, (hl)
      000989 02                    2179 	ld	(bc), a
                                   2180 ;src/main.c:272: top->next_card = NULL;
      00098A 2B                    2181 	dec	hl
      00098B 2A                    2182 	ld	a, (hl+)
      00098C 66                    2183 	ld	h, (hl)
      00098D 6F                    2184 	ld	l, a
      00098E AF                    2185 	xor	a, a
      00098F 22                    2186 	ld	(hl+), a
      000990 77                    2187 	ld	(hl), a
                                   2188 ;src/main.c:273: if (!VISIBLE(top->data))
      000991 F8 08                 2189 	ldhl	sp,	#8
      000993 2A                    2190 	ld	a, (hl+)
      000994 66                    2191 	ld	h, (hl)
      000995 6F                    2192 	ld	l, a
      000996 23                    2193 	inc	hl
      000997 23                    2194 	inc	hl
      000998 CB 76                 2195 	bit	6, (hl)
      00099A 20 19                 2196 	jr	NZ, 00171$
                                   2197 ;src/main.c:274: cursor.card_to_show = top;
      00099C 11r7Dr01              2198 	ld	de, #(_cursor + 0x0002)
      00099F F8 08                 2199 	ldhl	sp,	#8
      0009A1 7E                    2200 	ld	a, (hl)
      0009A2 12                    2201 	ld	(de), a
      0009A3 13                    2202 	inc	de
      0009A4 23                    2203 	inc	hl
      0009A5 7E                    2204 	ld	a, (hl)
      0009A6 12                    2205 	ld	(de), a
      0009A7 18 0C                 2206 	jr	00171$
      0009A9                       2207 00163$:
                                   2208 ;src/main.c:276: pile->base = NULL;
      0009A9 F8 04                 2209 	ldhl	sp,	#4
      0009AB 2A                    2210 	ld	a, (hl+)
      0009AC 66                    2211 	ld	h, (hl)
      0009AD 6F                    2212 	ld	l, a
      0009AE AF                    2213 	xor	a, a
      0009AF 22                    2214 	ld	(hl+), a
      0009B0 77                    2215 	ld	(hl), a
                                   2216 ;src/main.c:277: pile->top = NULL;
      0009B1 AF                    2217 	xor	a, a
      0009B2 02                    2218 	ld	(bc), a
      0009B3 03                    2219 	inc	bc
      0009B4 02                    2220 	ld	(bc), a
                                   2221 ;src/main.c:419: cursor_grab_stack();
      0009B5                       2222 00171$:
                                   2223 ;src/main.c:422: prev_input = input;
      0009B5 F8 00                 2224 	ldhl	sp,	#0
      0009B7 7E                    2225 	ld	a, (hl)
      0009B8 EAr87r01              2226 	ld	(#_main_prev_input_327680_236),a
                                   2227 ;src/main.c:427: cursor.anim_ctr++;
      0009BB 21r83r01              2228 	ld	hl, #_cursor + 8
      0009BE 4E                    2229 	ld	c, (hl)
      0009BF 0C                    2230 	inc	c
      0009C0 71                    2231 	ld	(hl), c
                                   2232 ;src/main.c:428: cursor.anim_ctr &= (1u << (CURSOR_PERIOD + 1u)) - 1u;
      0009C1 CB B9                 2233 	res	7, c
      0009C3 71                    2234 	ld	(hl), c
                                   2235 ;src/main.c:429: UINT8 prev_anim_frame = cursor.anim_frame;
      0009C4 21r84r01              2236 	ld	hl, #(_cursor + 0x0009)
      0009C7 46                    2237 	ld	b, (hl)
                                   2238 ;src/main.c:430: cursor.anim_frame = cursor.anim_ctr >> CURSOR_PERIOD;
      0009C8 79                    2239 	ld	a, c
      0009C9 07                    2240 	rlca
      0009CA 07                    2241 	rlca
      0009CB E6 03                 2242 	and	a, #0x03
      0009CD 4F                    2243 	ld	c, a
      0009CE 21r84r01              2244 	ld	hl, #(_cursor + 0x0009)
      0009D1 71                    2245 	ld	(hl), c
                                   2246 ;src/main.c:432: cursor.redraw |= BITMASK_REDRAW_CURSOR;
                                   2247 ;src/main.c:431: if (cursor.anim_frame != prev_anim_frame)
      0009D2 78                    2248 	ld	a, b
      0009D3 91                    2249 	sub	a, c
      0009D4 28 08                 2250 	jr	Z, 00174$
                                   2251 ;src/main.c:432: cursor.redraw |= BITMASK_REDRAW_CURSOR;
      0009D6 FAr85r01              2252 	ld	a, (#(_cursor + 0x000a) + 0)
      0009D9 CB C7                 2253 	set	0, a
      0009DB EAr85r01              2254 	ld	(#(_cursor + 0x000a)),a
      0009DE                       2255 00174$:
                                   2256 ;src/main.c:434: if (cursor.redraw & BITMASK_REDRAW_CURSOR) {
      0009DE FAr85r01              2257 	ld	a, (#(_cursor + 0x000a) + 0)
      0009E1 F8 09                 2258 	ldhl	sp,	#9
      0009E3 77                    2259 	ld	(hl), a
      0009E4 F8 09                 2260 	ldhl	sp,	#9
      0009E6 CB 46                 2261 	bit	0, (hl)
      0009E8 28 62                 2262 	jr	Z, 00181$
                                   2263 ;src/main.c:435: cursor.redraw &= ~BITMASK_REDRAW_CURSOR;
      0009EA F8 09                 2264 	ldhl	sp,	#9
      0009EC 7E                    2265 	ld	a, (hl)
      0009ED CB 87                 2266 	res	0, a
      0009EF EAr85r01              2267 	ld	(#(_cursor + 0x000a)),a
                                   2268 ;src/main.c:436: if (cursor.pile_idx == PILE_IDX_DECK)
      0009F2 21r81r01              2269 	ld	hl, #_cursor + 6
      0009F5 4E                    2270 	ld	c, (hl)
                                   2271 ;src/main.c:429: UINT8 prev_anim_frame = cursor.anim_frame;
      0009F6 FAr84r01              2272 	ld	a, (#(_cursor + 0x0009) + 0)
                                   2273 ;src/main.c:437: move_metasprite(cursor_metasprites[cursor.anim_frame],
      0009F9 6F                    2274 	ld	l, a
      0009FA 26 00                 2275 	ld	h, #0x00
      0009FC 29                    2276 	add	hl, hl
      0009FD 5D                    2277 	ld	e, l
      0009FE 54                    2278 	ld	d, h
                                   2279 ;src/main.c:436: if (cursor.pile_idx == PILE_IDX_DECK)
      0009FF 79                    2280 	ld	a, c
      000A00 D6 0A                 2281 	sub	a, #0x0a
      000A02 20 20                 2282 	jr	NZ, 00178$
                                   2283 ;src/main.c:437: move_metasprite(cursor_metasprites[cursor.anim_frame],
      000A04 21r00r00              2284 	ld	hl, #_cursor_metasprites
      000A07 19                    2285 	add	hl, de
      000A08 2A                    2286 	ld	a, (hl+)
      000A09 4E                    2287 	ld	c, (hl)
                                   2288 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      000A0A 21r00r00              2289 	ld	hl, #___current_metasprite
      000A0D 22                    2290 	ld	(hl+), a
      000A0E 71                    2291 	ld	(hl), c
                                   2292 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      000A0F 21r00r00              2293 	ld	hl, #___current_base_tile
      000A12 36 01                 2294 	ld	(hl), #0x01
                                   2295 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      000A14 AF                    2296 	xor	a, a
      000A15 F5                    2297 	push	af
      000A16 33                    2298 	inc	sp
      000A17 AF                    2299 	xor	a, a
      000A18 F5                    2300 	push	af
      000A19 33                    2301 	inc	sp
      000A1A AF                    2302 	xor	a, a
      000A1B F5                    2303 	push	af
      000A1C 33                    2304 	inc	sp
      000A1D CDr00r00              2305 	call	___move_metasprite
      000A20 E8 03                 2306 	add	sp, #3
                                   2307 ;src/main.c:442: );
      000A22 18 28                 2308 	jr	00181$
      000A24                       2309 00178$:
                                   2310 ;src/main.c:448: SCOREBAR_HEIGHT * 8u  + (cursor.height << 3u)
      000A24 FAr82r01              2311 	ld	a, (#_cursor + 7)
      000A27 87                    2312 	add	a, a
      000A28 87                    2313 	add	a, a
      000A29 87                    2314 	add	a, a
      000A2A C6 18                 2315 	add	a, #0x18
      000A2C 47                    2316 	ld	b, a
                                   2317 ;src/main.c:447: cursor.pile_idx << 4u,
      000A2D 79                    2318 	ld	a, c
      000A2E CB 37                 2319 	swap	a
      000A30 E6 F0                 2320 	and	a, #0xf0
      000A32 4F                    2321 	ld	c, a
                                   2322 ;src/main.c:444: move_metasprite(cursor_metasprites[cursor.anim_frame],
      000A33 21r00r00              2323 	ld	hl, #_cursor_metasprites
      000A36 19                    2324 	add	hl, de
      000A37 2A                    2325 	ld	a, (hl+)
                                   2326 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      000A38 5E                    2327 	ld	e, (hl)
      000A39 21r00r00              2328 	ld	hl, #___current_metasprite
      000A3C 22                    2329 	ld	(hl+), a
      000A3D 73                    2330 	ld	(hl), e
                                   2331 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      000A3E 21r00r00              2332 	ld	hl, #___current_base_tile
      000A41 36 01                 2333 	ld	(hl), #0x01
                                   2334 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      000A43 C5                    2335 	push	bc
      000A44 AF                    2336 	xor	a, a
      000A45 F5                    2337 	push	af
      000A46 33                    2338 	inc	sp
      000A47 CDr00r00              2339 	call	___move_metasprite
      000A4A E8 03                 2340 	add	sp, #3
                                   2341 ;src/main.c:449: );
      000A4C                       2342 00181$:
                                   2343 ;src/main.c:434: if (cursor.redraw & BITMASK_REDRAW_CURSOR) {
      000A4C FAr85r01              2344 	ld	a, (#(_cursor + 0x000a) + 0)
      000A4F F8 09                 2345 	ldhl	sp,	#9
      000A51 77                    2346 	ld	(hl), a
                                   2347 ;src/main.c:451: if (cursor.redraw & BITMASK_REDRAW_HAND) {
      000A52 F8 09                 2348 	ldhl	sp,	#9
      000A54 CB 4E                 2349 	bit	1, (hl)
      000A56 28 51                 2350 	jr	Z, 00188$
                                   2351 ;src/main.c:452: cursor.redraw &= ~BITMASK_REDRAW_HAND;
      000A58 F8 09                 2352 	ldhl	sp,	#9
      000A5A 7E                    2353 	ld	a, (hl)
      000A5B CB 8F                 2354 	res	1, a
      000A5D EAr85r01              2355 	ld	(#(_cursor + 0x000a)),a
                                   2356 ;src/main.c:453: if (cursor.held_card)
      000A60 21r7Br01              2357 	ld	hl, #_cursor
      000A63 2A                    2358 	ld	a, (hl+)
      000A64 B6                    2359 	or	a,(hl)
      000A65 28 3A                 2360 	jr	Z, 00184$
                                   2361 ;src/main.c:458: SCOREBAR_HEIGHT * 8u + (piles[cursor.hand_pile_idx].height << 3u)
      000A67 21r80r01              2362 	ld	hl, #_cursor + 5
      000A6A 4E                    2363 	ld	c, (hl)
      000A6B 06 00                 2364 	ld	b, #0x00
      000A6D 69                    2365 	ld	l, c
      000A6E 60                    2366 	ld	h, b
      000A6F 29                    2367 	add	hl, hl
      000A70 29                    2368 	add	hl, hl
      000A71 09                    2369 	add	hl, bc
      000A72 11r38r01              2370 	ld	de, #_piles
      000A75 19                    2371 	add	hl, de
      000A76 23                    2372 	inc	hl
      000A77 23                    2373 	inc	hl
      000A78 23                    2374 	inc	hl
      000A79 23                    2375 	inc	hl
      000A7A 7E                    2376 	ld	a, (hl)
      000A7B 87                    2377 	add	a, a
      000A7C 87                    2378 	add	a, a
      000A7D 87                    2379 	add	a, a
      000A7E C6 18                 2380 	add	a, #0x18
      000A80 57                    2381 	ld	d, a
                                   2382 ;src/main.c:457: cursor.hand_pile_idx << 4u,
      000A81 79                    2383 	ld	a, c
      000A82 CB 37                 2384 	swap	a
      000A84 E6 F0                 2385 	and	a, #0xf0
      000A86 47                    2386 	ld	b, a
                                   2387 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      000A87 21r00r00              2388 	ld	hl, #___current_metasprite
      000A8A 36r00                 2389 	ld	(hl), #<(_metasprite_sequential_2x3)
      000A8C 23                    2390 	inc	hl
      000A8D 36s00                 2391 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   2392 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      000A8F 21r00r00              2393 	ld	hl, #___current_base_tile
      000A92 36 03                 2394 	ld	(hl), #0x03
                                   2395 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      000A94 58                    2396 	ld	e, b
      000A95 D5                    2397 	push	de
      000A96 3E 06                 2398 	ld	a, #0x06
      000A98 F5                    2399 	push	af
      000A99 33                    2400 	inc	sp
      000A9A CDr00r00              2401 	call	___move_metasprite
      000A9D E8 03                 2402 	add	sp, #3
                                   2403 ;src/main.c:459: );
      000A9F 18 08                 2404 	jr	00188$
      000AA1                       2405 00184$:
                                   2406 ;src/main.c:461: metasprite_2x3_hide(SPRITE_HAND);
      000AA1 3E 06                 2407 	ld	a, #0x06
      000AA3 F5                    2408 	push	af
      000AA4 33                    2409 	inc	sp
      000AA5 CDr00r00              2410 	call	_metasprite_2x3_hide
      000AA8 33                    2411 	inc	sp
                                   2412 ;src/main.c:500: cursor_process();
      000AA9                       2413 00188$:
                                   2414 ;src/main.c:467: if (dynamic_metasprite.elapsed_frames >= dynamic_metasprite.target_frames)
      000AA9 21r74r01              2415 	ld	hl, #(_dynamic_metasprite + 0x0007)
      000AAC 4E                    2416 	ld	c, (hl)
      000AAD 21r73r01              2417 	ld	hl, #(_dynamic_metasprite + 0x0006)
      000AB0 46                    2418 	ld	b, (hl)
      000AB1 58                    2419 	ld	e, b
      000AB2 79                    2420 	ld	a,c
      000AB3 57                    2421 	ld	d,a
      000AB4 90                    2422 	sub	a, b
      000AB5 CB 7B                 2423 	bit	7, e
      000AB7 28 07                 2424 	jr	Z, 00458$
      000AB9 CB 7A                 2425 	bit	7, d
      000ABB 20 08                 2426 	jr	NZ, 00459$
      000ABD BF                    2427 	cp	a, a
      000ABE 18 05                 2428 	jr	00459$
      000AC0                       2429 00458$:
      000AC0 CB 7A                 2430 	bit	7, d
      000AC2 28 01                 2431 	jr	Z, 00459$
      000AC4 37                    2432 	scf
      000AC5                       2433 00459$:
      000AC5 D2r63r0B              2434 	jp	NC, 00195$
                                   2435 ;src/main.c:470: dynamic_metasprite.elapsed_frames++;
      000AC8 0C                    2436 	inc	c
      000AC9 21r74r01              2437 	ld	hl, #(_dynamic_metasprite + 0x0007)
      000ACC 71                    2438 	ld	(hl), c
                                   2439 ;src/main.c:475: dynamic_metasprite.src[1] + (dynamic_metasprite.dist[1] * dynamic_metasprite.elapsed_frames / dynamic_metasprite.target_frames)
      000ACD 21r71r01              2440 	ld	hl, #_dynamic_metasprite + 4
      000AD0 2A                    2441 	ld	a, (hl+)
      000AD1 66                    2442 	ld	h, (hl)
      000AD2 6F                    2443 	ld	l, a
      000AD3 79                    2444 	ld	a, c
      000AD4 17                    2445 	rla
      000AD5 9F                    2446 	sbc	a, a
      000AD6 47                    2447 	ld	b, a
      000AD7 C5                    2448 	push	bc
      000AD8 C5                    2449 	push	bc
      000AD9 E5                    2450 	push	hl
      000ADA CDr00r00              2451 	call	__mulint
      000ADD E8 04                 2452 	add	sp, #4
      000ADF E5                    2453 	push	hl
      000AE0 F8 09                 2454 	ldhl	sp,	#9
      000AE2 73                    2455 	ld	(hl), e
      000AE3 F8 0A                 2456 	ldhl	sp,	#10
      000AE5 72                    2457 	ld	(hl), d
      000AE6 E1                    2458 	pop	hl
      000AE7 C1                    2459 	pop	bc
      000AE8 FAr73r01              2460 	ld	a, (#(_dynamic_metasprite + 0x0006) + 0)
      000AEB F8 07                 2461 	ldhl	sp,	#7
      000AED 77                    2462 	ld	(hl), a
      000AEE 17                    2463 	rla
      000AEF 9F                    2464 	sbc	a, a
      000AF0 23                    2465 	inc	hl
      000AF1 77                    2466 	ld	(hl), a
      000AF2 C5                    2467 	push	bc
      000AF3 2B                    2468 	dec	hl
      000AF4 2A                    2469 	ld	a, (hl+)
      000AF5 66                    2470 	ld	h, (hl)
      000AF6 6F                    2471 	ld	l, a
      000AF7 E5                    2472 	push	hl
      000AF8 F8 09                 2473 	ldhl	sp,	#9
      000AFA 2A                    2474 	ld	a, (hl+)
      000AFB 66                    2475 	ld	h, (hl)
      000AFC 6F                    2476 	ld	l, a
      000AFD E5                    2477 	push	hl
      000AFE CDr00r00              2478 	call	__divsint
      000B01 E8 04                 2479 	add	sp, #4
      000B03 C1                    2480 	pop	bc
      000B04 7B                    2481 	ld	a, e
      000B05 21r6Er01              2482 	ld	hl, #(_dynamic_metasprite + 0x0001)
      000B08 6E                    2483 	ld	l, (hl)
      000B09 85                    2484 	add	a, l
      000B0A F8 09                 2485 	ldhl	sp,	#9
      000B0C 77                    2486 	ld	(hl), a
                                   2487 ;src/main.c:474: dynamic_metasprite.src[0] + (dynamic_metasprite.dist[0] * dynamic_metasprite.elapsed_frames / dynamic_metasprite.target_frames),
      000B0D 21r6Fr01              2488 	ld	hl, #(_dynamic_metasprite + 0x0002)
      000B10 2A                    2489 	ld	a, (hl+)
      000B11 66                    2490 	ld	h, (hl)
      000B12 6F                    2491 	ld	l, a
      000B13 C5                    2492 	push	bc
      000B14 E5                    2493 	push	hl
      000B15 CDr00r00              2494 	call	__mulint
      000B18 E8 04                 2495 	add	sp, #4
      000B1A F8 07                 2496 	ldhl	sp,	#7
      000B1C 2A                    2497 	ld	a, (hl+)
      000B1D 66                    2498 	ld	h, (hl)
      000B1E 6F                    2499 	ld	l, a
      000B1F E5                    2500 	push	hl
      000B20 D5                    2501 	push	de
      000B21 CDr00r00              2502 	call	__divsint
      000B24 E8 04                 2503 	add	sp, #4
      000B26 7B                    2504 	ld	a, e
      000B27 21r6Dr01              2505 	ld	hl, #_dynamic_metasprite
      000B2A 4E                    2506 	ld	c, (hl)
      000B2B 81                    2507 	add	a, c
      000B2C 4F                    2508 	ld	c, a
                                   2509 ;src/main.c:472: dynamic_metasprite.metasprite_offset,
      000B2D FAr77r01              2510 	ld	a, (#(_dynamic_metasprite + 0x000a) + 0)
      000B30 EAr00r00              2511 	ld	(#___current_base_tile),a
                                   2512 ;src/main.c:471: move_metasprite(dynamic_metasprite.metasprite,
      000B33 21r75r01              2513 	ld	hl, #_dynamic_metasprite + 8
      000B36 2A                    2514 	ld	a, (hl+)
      000B37 46                    2515 	ld	b, (hl)
                                   2516 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      000B38 21r00r00              2517 	ld	hl, #___current_metasprite
      000B3B 22                    2518 	ld	(hl+), a
      000B3C 70                    2519 	ld	(hl), b
                                   2520 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      000B3D F8 09                 2521 	ldhl	sp,	#9
      000B3F 7E                    2522 	ld	a, (hl)
      000B40 F5                    2523 	push	af
      000B41 33                    2524 	inc	sp
      000B42 51                    2525 	ld	d, c
      000B43 1E 0C                 2526 	ld	e,#0x0c
      000B45 D5                    2527 	push	de
      000B46 CDr00r00              2528 	call	___move_metasprite
      000B49 E8 03                 2529 	add	sp, #3
                                   2530 ;src/main.c:477: if (dynamic_metasprite.elapsed_frames == dynamic_metasprite.target_frames
      000B4B FAr74r01              2531 	ld	a, (#(_dynamic_metasprite + 0x0007) + 0)
      000B4E 21r73r01              2532 	ld	hl, #(_dynamic_metasprite + 0x0006)
      000B51 4E                    2533 	ld	c, (hl)
      000B52 91                    2534 	sub	a, c
      000B53 20 0E                 2535 	jr	NZ, 00195$
                                   2536 ;src/main.c:478: && dynamic_metasprite.callback)
      000B55 21r79r01              2537 	ld	hl, #_dynamic_metasprite + 12
      000B58 2A                    2538 	ld	a, (hl+)
      000B59 4F                    2539 	ld	c, a
      000B5A 66                    2540 	ld	h, (hl)
      000B5B 7C                    2541 	ld	a, h
      000B5C B1                    2542 	or	a, c
      000B5D 28 04                 2543 	jr	Z, 00195$
                                   2544 ;src/main.c:479: dynamic_metasprite.callback();
      000B5F 69                    2545 	ld	l, c
      000B60 CDr00r00              2546 	call	___sdcc_call_hl
                                   2547 ;src/main.c:502: dynamic_metasprite_process();
      000B63                       2548 00195$:
                                   2549 ;src/main.c:504: wait_vbl_done();
      000B63 CDr00r00              2550 	call	_wait_vbl_done
      000B66 C3r7Ar06              2551 	jp	00102$
                                   2552 ;src/main.c:506: }
      000B69 E8 0A                 2553 	add	sp, #10
      000B6B C9                    2554 	ret
                                   2555 	.area _CODE
                                   2556 	.area _CABS (ABS)
