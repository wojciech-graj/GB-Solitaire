                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mgbz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _draw_bkg_leaderboard
                                     12 	.globl _rand
                                     13 	.globl _initrand
                                     14 	.globl _font_set
                                     15 	.globl _font_load
                                     16 	.globl _font_init
                                     17 	.globl _set_sprite_data
                                     18 	.globl _set_bkg_tile_xy
                                     19 	.globl _set_bkg_tiles
                                     20 	.globl _set_bkg_data
                                     21 	.globl _wait_vbl_done
                                     22 	.globl _joypad
                                     23 	.globl _cursor
                                     24 	.globl _dynamic_metasprite
                                     25 	.globl _selected_leaderboard
                                     26 	.globl _score
                                     27 	.globl _num_folded_piles
                                     28 	.globl _settings
                                     29 	.globl _flags
                                     30 	.globl _top_card_idx
                                     31 	.globl _piles
                                     32 	.globl _deck
                                     33 	.globl _setting_pile_heights
                                     34 	.globl _menu_card_tiles
                                     35 	.globl _animation_speeds
                                     36 	.globl _clear_bkg_2x1
                                     37 	.globl _draw_card_top
                                     38 	.globl _draw_card_bottom
                                     39 	.globl _draw_card
                                     40 	.globl _draw_sequential_card
                                     41 	.globl _clear_bkg
                                     42 	.globl _draw_bkg_game
                                     43 	.globl _draw_bkg_splash_screen
                                     44 	.globl _draw_bkg_settings
                                     45 	.globl _metasprite_2x3_hide
                                     46 	.globl _set_metasprite_card
                                     47 	.globl _draw_setting_frame_metasprites
                                     48 	.globl _dynamic_metasprite_end_animation
                                     49 	.globl _dynamic_metasprite_splash_screen_callback
                                     50 	.globl _dynamic_metasprite_splash_screen
                                     51 	.globl _dynamic_metasprite_fold_pile
                                     52 	.globl _dynamic_metasprite_unfold_callback
                                     53 	.globl _dynamic_metasprite_move_stack_callback
                                     54 	.globl _dynamic_metasprite_fold_callback
                                     55 	.globl _dynamic_metasprite_fold
                                     56 	.globl _dynamic_metasprite_deal_callback
                                     57 	.globl _dynamic_metasprite_deal
                                     58 	.globl _dynamic_metasprite_process
                                     59 	.globl _cursor_adjust_height
                                     60 	.globl _cursor_grab_stack
                                     61 	.globl _cursor_place_stack
                                     62 	.globl _set_cursor_setting
                                     63 	.globl _cursor_process
                                     64 	.globl _init_deck
                                     65 	.globl _is_stack_coherent
                                     66 	.globl _deal
                                     67 	.globl _pile_append_cursor_stack
                                     68 	.globl _start_game
                                     69 	.globl _start_settings
                                     70 	.globl _start_splash_screen
                                     71 	.globl _start_leaderboard
                                     72 	.globl _add_leaderboard
                                     73 	.globl _nvram_check
                                     74 	.globl _inc_letter
                                     75 	.globl _input_process
                                     76 	.globl _main
                                     77 ;--------------------------------------------------------
                                     78 ; special function registers
                                     79 ;--------------------------------------------------------
                                     80 ;--------------------------------------------------------
                                     81 ; ram data
                                     82 ;--------------------------------------------------------
                                     83 	.area _DATA
      000000                         84 _deck::
      000000                         85 	.ds 312
      000138                         86 _piles::
      000138                         87 	.ds 50
      00016A                         88 _top_card_idx::
      00016A                         89 	.ds 1
      00016B                         90 _flags::
      00016B                         91 	.ds 1
      00016C                         92 _settings::
      00016C                         93 	.ds 1
      00016D                         94 _num_folded_piles::
      00016D                         95 	.ds 1
      00016E                         96 _score::
      00016E                         97 	.ds 2
      000170                         98 _selected_leaderboard::
      000170                         99 	.ds 2
      000172                        100 _dynamic_metasprite::
      000172                        101 	.ds 21
      000187                        102 _cursor::
      000187                        103 	.ds 10
      000191                        104 _input_process_prev_input_65536_371:
      000191                        105 	.ds 1
      000192                        106 _main_prev_input_327681_434:
      000192                        107 	.ds 1
                                    108 ;--------------------------------------------------------
                                    109 ; absolute external ram data
                                    110 ;--------------------------------------------------------
                                    111 	.area _DABS (ABS)
                                    112 ;--------------------------------------------------------
                                    113 ; global & static initialisations
                                    114 ;--------------------------------------------------------
                                    115 	.area _HOME
                                    116 	.area _GSINIT
                                    117 	.area _GSFINAL
                                    118 	.area _GSINIT
                                    119 ;src/main.c:1138: static UINT8 prev_input = 0;
      000000 21r91r01               120 	ld	hl, #_input_process_prev_input_65536_371
      000003 36 00                  121 	ld	(hl), #0x00
                                    122 ;src/main.c:1138: static UINT8 prev_input = 0;
      000005 21r92r01               123 	ld	hl, #_main_prev_input_327681_434
      000008 36 00                  124 	ld	(hl), #0x00
                                    125 ;src/main.c:170: UINT8 flags = 0;
      00000A 21r6Br01               126 	ld	hl, #_flags
      00000D 36 00                  127 	ld	(hl), #0x00
                                    128 ;src/main.c:171: UINT8 settings = SETTING_ONE_SUIT | BITMASK_SETTING_MUSIC;
      00000F 21r6Cr01               129 	ld	hl, #_settings
      000012 36 10                  130 	ld	(hl), #0x10
                                    131 ;src/main.c:172: UINT8 num_folded_piles = 0;
      000014 21r6Dr01               132 	ld	hl, #_num_folded_piles
      000017 36 00                  133 	ld	(hl), #0x00
                                    134 ;src/main.c:173: UINT16 score =  START_SCORE;
      000019 21r6Er01               135 	ld	hl, #_score
      00001C 36 F4                  136 	ld	(hl), #0xf4
      00001E 23                     137 	inc	hl
      00001F 36 01                  138 	ld	(hl), #0x01
                                    139 ;src/main.c:174: LeaderBoard *selected_leaderboard = NULL;
      000021 21r70r01               140 	ld	hl, #_selected_leaderboard
      000024 36 00                  141 	ld	(hl), #0x00
      000026 23                     142 	inc	hl
      000027 36 00                  143 	ld	(hl), #0x00
                                    144 ;src/main.c:176: struct DynamicMetaSprite dynamic_metasprite = {
      000029 21r7Ar01               145 	ld	hl, #(_dynamic_metasprite + 0x0008)
      00002C 36 FF                  146 	ld	(hl), #0xff
      00002E 21r7Br01               147 	ld	hl, #(_dynamic_metasprite + 0x0009)
      000031 36 00                  148 	ld	(hl), #0x00
                                    149 ;src/main.c:181: struct Cursor cursor = {
      000033 21r87r01               150 	ld	hl, #_cursor
      000036 AF                     151 	xor	a, a
      000037 22                     152 	ld	(hl+), a
      000038 77                     153 	ld	(hl), a
      000039 21r89r01               154 	ld	hl, #(_cursor + 0x0002)
      00003C AF                     155 	xor	a, a
      00003D 22                     156 	ld	(hl+), a
      00003E 77                     157 	ld	(hl), a
      00003F 21r8Cr01               158 	ld	hl, #(_cursor + 0x0005)
      000042 36 00                  159 	ld	(hl), #0x00
      000044 21r8Dr01               160 	ld	hl, #(_cursor + 0x0006)
      000047 36 0A                  161 	ld	(hl), #0x0a
      000049 21r8Er01               162 	ld	hl, #(_cursor + 0x0007)
      00004C 36 00                  163 	ld	(hl), #0x00
      00004E 21r8Fr01               164 	ld	hl, #(_cursor + 0x0008)
      000051 36 00                  165 	ld	(hl), #0x00
      000053 21r90r01               166 	ld	hl, #(_cursor + 0x0009)
      000056 36 00                  167 	ld	(hl), #0x00
                                    168 ;--------------------------------------------------------
                                    169 ; Home
                                    170 ;--------------------------------------------------------
                                    171 	.area _HOME
                                    172 	.area _HOME
                                    173 ;--------------------------------------------------------
                                    174 ; code
                                    175 ;--------------------------------------------------------
                                    176 	.area _CODE
                                    177 ;src/main.c:344: inline void clear_bkg_2x1(const UINT8 x, const UINT8 y)
                                    178 ;	---------------------------------
                                    179 ; Function clear_bkg_2x1
                                    180 ; ---------------------------------
      000000                        181 _clear_bkg_2x1::
                                    182 ;src/main.c:346: set_bkg_tile_xy(x, y, OFFSET_BKG_NONE);
      000000 AF                     183 	xor	a, a
      000001 F5                     184 	push	af
      000002 33                     185 	inc	sp
      000003 F8 04                  186 	ldhl	sp,	#4
      000005 7E                     187 	ld	a, (hl)
      000006 F5                     188 	push	af
      000007 33                     189 	inc	sp
      000008 2B                     190 	dec	hl
      000009 7E                     191 	ld	a, (hl)
      00000A F5                     192 	push	af
      00000B 33                     193 	inc	sp
      00000C CDr00r00               194 	call	_set_bkg_tile_xy
      00000F E8 03                  195 	add	sp, #3
                                    196 ;src/main.c:347: set_bkg_tile_xy(x + 1u, y, OFFSET_BKG_NONE);
      000011 F8 02                  197 	ldhl	sp,	#2
      000013 7E                     198 	ld	a, (hl)
      000014 3C                     199 	inc	a
      000015 26 00                  200 	ld	h, #0x00
      000017 E5                     201 	push	hl
      000018 33                     202 	inc	sp
      000019 F8 04                  203 	ldhl	sp,	#4
      00001B 66                     204 	ld	h, (hl)
      00001C E5                     205 	push	hl
      00001D 33                     206 	inc	sp
      00001E F5                     207 	push	af
      00001F 33                     208 	inc	sp
      000020 CDr00r00               209 	call	_set_bkg_tile_xy
      000023 E8 03                  210 	add	sp, #3
                                    211 ;src/main.c:348: }
      000025 C9                     212 	ret
      000026                        213 _animation_speeds:
      000026 10                     214 	.db #0x10	; 16
      000027 20                     215 	.db #0x20	; 32
      000028 08                     216 	.db #0x08	; 8
      000029 10                     217 	.db #0x10	; 16
      00002A 04                     218 	.db #0x04	; 4
      00002B 08                     219 	.db #0x08	; 8
      00002C                        220 _menu_card_tiles:
      00002C C1                     221 	.db #0xc1	; 193
      00002D BD                     222 	.db #0xbd	; 189
      00002E 28                     223 	.db #0x28	; 40
      00002F 29                     224 	.db #0x29	; 41
      000030 C5                     225 	.db #0xc5	; 197
      000031 C6                     226 	.db #0xc6	; 198
      000032 C1                     227 	.db #0xc1	; 193
      000033 BD                     228 	.db #0xbd	; 189
      000034 2A                     229 	.db #0x2a	; 42
      000035 2B                     230 	.db #0x2b	; 43
      000036 DC                     231 	.db #0xdc	; 220
      000037 C6                     232 	.db #0xc6	; 198
      000038 26                     233 	.db #0x26	; 38
      000039 BD                     234 	.db #0xbd	; 189
      00003A 2C                     235 	.db #0x2c	; 44
      00003B 2D                     236 	.db #0x2d	; 45
      00003C DC                     237 	.db #0xdc	; 220
      00003D 27                     238 	.db #0x27	; 39
      00003E 2E                     239 	.db #0x2e	; 46
      00003F 2F                     240 	.db #0x2f	; 47
      000040 30                     241 	.db #0x30	; 48	'0'
      000041 31                     242 	.db #0x31	; 49	'1'
      000042 32                     243 	.db #0x32	; 50	'2'
      000043 33                     244 	.db #0x33	; 51	'3'
      000044 2E                     245 	.db #0x2e	; 46
      000045 34                     246 	.db #0x34	; 52	'4'
      000046 30                     247 	.db #0x30	; 48	'0'
      000047 35                     248 	.db #0x35	; 53	'5'
      000048 32                     249 	.db #0x32	; 50	'2'
      000049 36                     250 	.db #0x36	; 54	'6'
      00004A C1                     251 	.db #0xc1	; 193
      00004B C2                     252 	.db #0xc2	; 194
      00004C 37                     253 	.db #0x37	; 55	'7'
      00004D 38                     254 	.db #0x38	; 56	'8'
      00004E C5                     255 	.db #0xc5	; 197
      00004F C6                     256 	.db #0xc6	; 198
      000050 C1                     257 	.db #0xc1	; 193
      000051 C2                     258 	.db #0xc2	; 194
      000052 39                     259 	.db #0x39	; 57	'9'
      000053 3A                     260 	.db #0x3a	; 58
      000054 C5                     261 	.db #0xc5	; 197
      000055 C6                     262 	.db #0xc6	; 198
      000056 C1                     263 	.db #0xc1	; 193
      000057 C2                     264 	.db #0xc2	; 194
      000058 3B                     265 	.db #0x3b	; 59
      000059 3C                     266 	.db #0x3c	; 60
      00005A C5                     267 	.db #0xc5	; 197
      00005B C6                     268 	.db #0xc6	; 198
      00005C                        269 _setting_pile_heights:
      00005C 03                     270 	.db #0x03	; 3
      00005D 02                     271 	.db #0x02	; 2
      00005E 03                     272 	.db #0x03	; 3
      00005F 01                     273 	.db #0x01	; 1
                                    274 ;src/main.c:350: void draw_card_top(const UINT8 x, const UINT8 y, const UINT8 card_data)
                                    275 ;	---------------------------------
                                    276 ; Function draw_card_top
                                    277 ; ---------------------------------
      000060                        278 _draw_card_top::
                                    279 ;src/main.c:352: if (VISIBLE(card_data)) {
      000060 F8 04                  280 	ldhl	sp,	#4
                                    281 ;src/main.c:354: set_bkg_tile_xy(x + 1u, y, SUIT(card_data) + OFFSET_BKG_CARD + OFFSET_CARD_SUIT);
      000062 3A                     282 	ld	a, (hl-)
      000063 4F                     283 	ld	c, a
      000064 2B                     284 	dec	hl
      000065 46                     285 	ld	b, (hl)
      000066 04                     286 	inc	b
                                    287 ;src/main.c:352: if (VISIBLE(card_data)) {
      000067 CB 71                  288 	bit	6, c
      000069 28 3F                  289 	jr	Z, 00102$
                                    290 ;src/main.c:353: set_bkg_tile_xy(x, y, RANK(card_data) + OFFSET_BKG_CARD + OFFSET_CARD_RANK);
      00006B 79                     291 	ld	a, c
      00006C E6 0F                  292 	and	a, #0x0f
      00006E C6 B0                  293 	add	a, #0xb0
      000070 F5                     294 	push	af
      000071 33                     295 	inc	sp
      000072 F8 04                  296 	ldhl	sp,	#4
      000074 7E                     297 	ld	a, (hl)
      000075 F5                     298 	push	af
      000076 33                     299 	inc	sp
      000077 2B                     300 	dec	hl
      000078 7E                     301 	ld	a, (hl)
      000079 F5                     302 	push	af
      00007A 33                     303 	inc	sp
      00007B CDr00r00               304 	call	_set_bkg_tile_xy
      00007E E8 03                  305 	add	sp, #3
                                    306 ;src/main.c:354: set_bkg_tile_xy(x + 1u, y, SUIT(card_data) + OFFSET_BKG_CARD + OFFSET_CARD_SUIT);
      000080 79                     307 	ld	a, c
      000081 0E 00                  308 	ld	c, #0x00
      000083 E6 30                  309 	and	a, #0x30
      000085 5F                     310 	ld	e, a
      000086 16 00                  311 	ld	d, #0x00
      000088 CB 3A                  312 	srl	d
      00008A CB 1B                  313 	rr	e
      00008C CB 3A                  314 	srl	d
      00008E CB 1B                  315 	rr	e
      000090 CB 3A                  316 	srl	d
      000092 CB 1B                  317 	rr	e
      000094 CB 3A                  318 	srl	d
      000096 CB 1B                  319 	rr	e
      000098 7B                     320 	ld	a, e
      000099 C6 BD                  321 	add	a, #0xbd
      00009B F5                     322 	push	af
      00009C 33                     323 	inc	sp
      00009D F8 04                  324 	ldhl	sp,	#4
      00009F 7E                     325 	ld	a, (hl)
      0000A0 F5                     326 	push	af
      0000A1 33                     327 	inc	sp
      0000A2 C5                     328 	push	bc
      0000A3 33                     329 	inc	sp
      0000A4 CDr00r00               330 	call	_set_bkg_tile_xy
      0000A7 E8 03                  331 	add	sp, #3
      0000A9 C9                     332 	ret
      0000AA                        333 00102$:
                                    334 ;src/main.c:356: set_bkg_tile_xy(x, y, OFFSET_BKG_CARD + OFFSET_CARD_BACK);
      0000AA 3E C7                  335 	ld	a, #0xc7
      0000AC F5                     336 	push	af
      0000AD 33                     337 	inc	sp
      0000AE F8 04                  338 	ldhl	sp,	#4
      0000B0 7E                     339 	ld	a, (hl)
      0000B1 F5                     340 	push	af
      0000B2 33                     341 	inc	sp
      0000B3 2B                     342 	dec	hl
      0000B4 7E                     343 	ld	a, (hl)
      0000B5 F5                     344 	push	af
      0000B6 33                     345 	inc	sp
      0000B7 CDr00r00               346 	call	_set_bkg_tile_xy
      0000BA E8 03                  347 	add	sp, #3
                                    348 ;src/main.c:357: set_bkg_tile_xy(x + 1u, y, OFFSET_BKG_CARD + OFFSET_CARD_BACK + 1u);
      0000BC 3E C8                  349 	ld	a, #0xc8
      0000BE F5                     350 	push	af
      0000BF 33                     351 	inc	sp
      0000C0 F8 04                  352 	ldhl	sp,	#4
      0000C2 7E                     353 	ld	a, (hl)
      0000C3 F5                     354 	push	af
      0000C4 33                     355 	inc	sp
      0000C5 C5                     356 	push	bc
      0000C6 33                     357 	inc	sp
      0000C7 CDr00r00               358 	call	_set_bkg_tile_xy
      0000CA E8 03                  359 	add	sp, #3
                                    360 ;src/main.c:359: }
      0000CC C9                     361 	ret
                                    362 ;src/main.c:361: void draw_card_bottom(const UINT8 x, const UINT8 y, const UINT8 card_data)
                                    363 ;	---------------------------------
                                    364 ; Function draw_card_bottom
                                    365 ; ---------------------------------
      0000CD                        366 _draw_card_bottom::
                                    367 ;src/main.c:363: set_bkg_tile_xy(x, y, OFFSET_BKG_CARD + OFFSET_CARD_BLANK + 2u);
      0000CD 3E C3                  368 	ld	a, #0xc3
      0000CF F5                     369 	push	af
      0000D0 33                     370 	inc	sp
      0000D1 F8 04                  371 	ldhl	sp,	#4
      0000D3 7E                     372 	ld	a, (hl)
      0000D4 F5                     373 	push	af
      0000D5 33                     374 	inc	sp
      0000D6 2B                     375 	dec	hl
      0000D7 7E                     376 	ld	a, (hl)
      0000D8 F5                     377 	push	af
      0000D9 33                     378 	inc	sp
      0000DA CDr00r00               379 	call	_set_bkg_tile_xy
      0000DD E8 03                  380 	add	sp, #3
                                    381 ;src/main.c:364: set_bkg_tile_xy(x + 1u, y, OFFSET_BKG_CARD + OFFSET_CARD_BLANK + 3u);
      0000DF F8 02                  382 	ldhl	sp,	#2
      0000E1 4E                     383 	ld	c, (hl)
      0000E2 0C                     384 	inc	c
      0000E3 3E C4                  385 	ld	a, #0xc4
      0000E5 F5                     386 	push	af
      0000E6 33                     387 	inc	sp
      0000E7 23                     388 	inc	hl
      0000E8 46                     389 	ld	b, (hl)
      0000E9 C5                     390 	push	bc
      0000EA CDr00r00               391 	call	_set_bkg_tile_xy
      0000ED E8 03                  392 	add	sp, #3
                                    393 ;src/main.c:365: set_bkg_tile_xy(x, y+ 1u, SUIT(card_data) + OFFSET_BKG_CARD + OFFSET_CARD_SUIT_ROT);
      0000EF F8 04                  394 	ldhl	sp,	#4
      0000F1 7E                     395 	ld	a, (hl)
      0000F2 E6 30                  396 	and	a, #0x30
      0000F4 5F                     397 	ld	e, a
      0000F5 16 00                  398 	ld	d, #0x00
      0000F7 CB 3A                  399 	srl	d
      0000F9 CB 1B                  400 	rr	e
      0000FB CB 3A                  401 	srl	d
      0000FD CB 1B                  402 	rr	e
      0000FF CB 3A                  403 	srl	d
      000101 CB 1B                  404 	rr	e
      000103 CB 3A                  405 	srl	d
      000105 CB 1B                  406 	rr	e
      000107 7B                     407 	ld	a, e
      000108 C6 DA                  408 	add	a, #0xda
      00010A 2B                     409 	dec	hl
      00010B 46                     410 	ld	b, (hl)
      00010C 04                     411 	inc	b
      00010D F5                     412 	push	af
      00010E 33                     413 	inc	sp
      00010F C5                     414 	push	bc
      000110 33                     415 	inc	sp
      000111 2B                     416 	dec	hl
      000112 7E                     417 	ld	a, (hl)
      000113 F5                     418 	push	af
      000114 33                     419 	inc	sp
      000115 CDr00r00               420 	call	_set_bkg_tile_xy
      000118 E8 03                  421 	add	sp, #3
                                    422 ;src/main.c:366: set_bkg_tile_xy(x + 1u, y+ 1u, RANK(card_data) + OFFSET_BKG_CARD + OFFSET_CARD_RANK_ROT);
      00011A F8 04                  423 	ldhl	sp,	#4
      00011C 7E                     424 	ld	a, (hl)
      00011D E6 0F                  425 	and	a, #0x0f
      00011F C6 CD                  426 	add	a, #0xcd
      000121 F5                     427 	push	af
      000122 33                     428 	inc	sp
      000123 C5                     429 	push	bc
      000124 CDr00r00               430 	call	_set_bkg_tile_xy
      000127 E8 03                  431 	add	sp, #3
                                    432 ;src/main.c:367: }
      000129 C9                     433 	ret
                                    434 ;src/main.c:369: inline void draw_card(const UINT8 x, const UINT8 y, const UINT8 card_data)
                                    435 ;	---------------------------------
                                    436 ; Function draw_card
                                    437 ; ---------------------------------
      00012A                        438 _draw_card::
                                    439 ;src/main.c:371: draw_card_top(x, y, card_data);
      00012A F8 04                  440 	ldhl	sp,	#4
      00012C 7E                     441 	ld	a, (hl)
      00012D F5                     442 	push	af
      00012E 33                     443 	inc	sp
      00012F 2B                     444 	dec	hl
      000130 7E                     445 	ld	a, (hl)
      000131 F5                     446 	push	af
      000132 33                     447 	inc	sp
      000133 2B                     448 	dec	hl
      000134 7E                     449 	ld	a, (hl)
      000135 F5                     450 	push	af
      000136 33                     451 	inc	sp
      000137 CDr60r00               452 	call	_draw_card_top
      00013A E8 03                  453 	add	sp, #3
                                    454 ;src/main.c:372: draw_card_bottom(x, y + 1u, card_data);
      00013C F8 03                  455 	ldhl	sp,	#3
      00013E 7E                     456 	ld	a, (hl)
      00013F 3C                     457 	inc	a
      000140 23                     458 	inc	hl
      000141 66                     459 	ld	h, (hl)
      000142 E5                     460 	push	hl
      000143 33                     461 	inc	sp
      000144 F5                     462 	push	af
      000145 33                     463 	inc	sp
      000146 F8 04                  464 	ldhl	sp,	#4
      000148 7E                     465 	ld	a, (hl)
      000149 F5                     466 	push	af
      00014A 33                     467 	inc	sp
      00014B CDrCDr00               468 	call	_draw_card_bottom
      00014E E8 03                  469 	add	sp, #3
                                    470 ;src/main.c:373: }
      000150 C9                     471 	ret
                                    472 ;src/main.c:375: void draw_sequential_card(const UINT8 x, const UINT8 y, const UINT8 bkg_offset)
                                    473 ;	---------------------------------
                                    474 ; Function draw_sequential_card
                                    475 ; ---------------------------------
      000151                        476 _draw_sequential_card::
                                    477 ;src/main.c:377: set_bkg_tile_xy(x, y, bkg_offset);
      000151 F8 04                  478 	ldhl	sp,	#4
      000153 7E                     479 	ld	a, (hl)
      000154 F5                     480 	push	af
      000155 33                     481 	inc	sp
      000156 2B                     482 	dec	hl
      000157 7E                     483 	ld	a, (hl)
      000158 F5                     484 	push	af
      000159 33                     485 	inc	sp
      00015A 2B                     486 	dec	hl
      00015B 7E                     487 	ld	a, (hl)
      00015C F5                     488 	push	af
      00015D 33                     489 	inc	sp
      00015E CDr00r00               490 	call	_set_bkg_tile_xy
      000161 E8 03                  491 	add	sp, #3
                                    492 ;src/main.c:378: set_bkg_tile_xy(x + 1u, y, bkg_offset + 1u);
      000163 F8 04                  493 	ldhl	sp,	#4
      000165 7E                     494 	ld	a, (hl)
      000166 3C                     495 	inc	a
      000167 2B                     496 	dec	hl
      000168 2B                     497 	dec	hl
      000169 4E                     498 	ld	c, (hl)
      00016A 0C                     499 	inc	c
      00016B F5                     500 	push	af
      00016C 33                     501 	inc	sp
      00016D 23                     502 	inc	hl
      00016E 46                     503 	ld	b, (hl)
      00016F C5                     504 	push	bc
      000170 CDr00r00               505 	call	_set_bkg_tile_xy
      000173 E8 03                  506 	add	sp, #3
                                    507 ;src/main.c:379: set_bkg_tile_xy(x, y + 1u, bkg_offset + 2u);
      000175 F8 04                  508 	ldhl	sp,	#4
      000177 7E                     509 	ld	a, (hl)
      000178 3C                     510 	inc	a
      000179 3C                     511 	inc	a
      00017A 2B                     512 	dec	hl
      00017B 46                     513 	ld	b, (hl)
      00017C 04                     514 	inc	b
      00017D F5                     515 	push	af
      00017E 33                     516 	inc	sp
      00017F C5                     517 	push	bc
      000180 33                     518 	inc	sp
      000181 2B                     519 	dec	hl
      000182 7E                     520 	ld	a, (hl)
      000183 F5                     521 	push	af
      000184 33                     522 	inc	sp
      000185 CDr00r00               523 	call	_set_bkg_tile_xy
      000188 E8 03                  524 	add	sp, #3
                                    525 ;src/main.c:380: set_bkg_tile_xy(x + 1u, y + 1u, bkg_offset + 3u);
      00018A F8 04                  526 	ldhl	sp,	#4
      00018C 7E                     527 	ld	a, (hl)
      00018D 3C                     528 	inc	a
      00018E 3C                     529 	inc	a
      00018F 3C                     530 	inc	a
      000190 F5                     531 	push	af
      000191 33                     532 	inc	sp
      000192 C5                     533 	push	bc
      000193 33                     534 	inc	sp
      000194 79                     535 	ld	a, c
      000195 F5                     536 	push	af
      000196 33                     537 	inc	sp
      000197 CDr00r00               538 	call	_set_bkg_tile_xy
      00019A E8 03                  539 	add	sp, #3
                                    540 ;src/main.c:381: set_bkg_tile_xy(x, y + 2u, bkg_offset + 4u);
      00019C F8 04                  541 	ldhl	sp,	#4
      00019E 7E                     542 	ld	a, (hl)
      00019F 3C                     543 	inc	a
      0001A0 3C                     544 	inc	a
      0001A1 3C                     545 	inc	a
      0001A2 3C                     546 	inc	a
      0001A3 2B                     547 	dec	hl
      0001A4 46                     548 	ld	b, (hl)
      0001A5 04                     549 	inc	b
      0001A6 04                     550 	inc	b
      0001A7 F5                     551 	push	af
      0001A8 33                     552 	inc	sp
      0001A9 C5                     553 	push	bc
      0001AA 33                     554 	inc	sp
      0001AB 2B                     555 	dec	hl
      0001AC 7E                     556 	ld	a, (hl)
      0001AD F5                     557 	push	af
      0001AE 33                     558 	inc	sp
      0001AF CDr00r00               559 	call	_set_bkg_tile_xy
      0001B2 E8 03                  560 	add	sp, #3
                                    561 ;src/main.c:382: set_bkg_tile_xy(x + 1u, y + 2u, bkg_offset + 5u);
      0001B4 F8 04                  562 	ldhl	sp,	#4
      0001B6 7E                     563 	ld	a, (hl)
      0001B7 C6 05                  564 	add	a, #0x05
      0001B9 F5                     565 	push	af
      0001BA 33                     566 	inc	sp
      0001BB C5                     567 	push	bc
      0001BC CDr00r00               568 	call	_set_bkg_tile_xy
      0001BF E8 03                  569 	add	sp, #3
                                    570 ;src/main.c:383: }
      0001C1 C9                     571 	ret
                                    572 ;src/main.c:386: void clear_bkg(void)
                                    573 ;	---------------------------------
                                    574 ; Function clear_bkg
                                    575 ; ---------------------------------
      0001C2                        576 _clear_bkg::
                                    577 ;src/main.c:389: for (x = 0; x < 32u; x++)
      0001C2 0E 00                  578 	ld	c, #0x00
                                    579 ;src/main.c:390: for (y = 0; y < 32u; y++)
      0001C4                        580 00109$:
      0001C4 06 00                  581 	ld	b, #0x00
      0001C6                        582 00103$:
                                    583 ;src/main.c:391: set_bkg_tile_xy(x, y, 0);
      0001C6 AF                     584 	xor	a, a
      0001C7 F5                     585 	push	af
      0001C8 33                     586 	inc	sp
      0001C9 C5                     587 	push	bc
      0001CA 33                     588 	inc	sp
      0001CB 79                     589 	ld	a, c
      0001CC F5                     590 	push	af
      0001CD 33                     591 	inc	sp
      0001CE CDr00r00               592 	call	_set_bkg_tile_xy
      0001D1 E8 03                  593 	add	sp, #3
                                    594 ;src/main.c:390: for (y = 0; y < 32u; y++)
      0001D3 04                     595 	inc	b
      0001D4 78                     596 	ld	a, b
      0001D5 D6 20                  597 	sub	a, #0x20
      0001D7 38 ED                  598 	jr	C, 00103$
                                    599 ;src/main.c:389: for (x = 0; x < 32u; x++)
      0001D9 0C                     600 	inc	c
      0001DA 79                     601 	ld	a, c
      0001DB D6 20                  602 	sub	a, #0x20
      0001DD 38 E5                  603 	jr	C, 00109$
                                    604 ;src/main.c:392: }
      0001DF C9                     605 	ret
                                    606 ;src/main.c:394: void draw_bkg_game(void)
                                    607 ;	---------------------------------
                                    608 ; Function draw_bkg_game
                                    609 ; ---------------------------------
      0001E0                        610 _draw_bkg_game::
      0001E0 E8 F9                  611 	add	sp, #-7
                                    612 ;src/main.c:397: Pile *pile = IDX_PTR(piles, 0);
      0001E2 01r38r01               613 	ld	bc, #_piles+0
                                    614 ;src/main.c:398: for (x = 0; x < 20u; x += 2) {
      0001E5 AF                     615 	xor	a, a
      0001E6 F8 00                  616 	ldhl	sp,	#0
      0001E8 77                     617 	ld	(hl), a
      0001E9                        618 00106$:
                                    619 ;src/main.c:399: Card *card = pile->base;
      0001E9 59                     620 	ld	e, c
      0001EA 50                     621 	ld	d, b
      0001EB 1A                     622 	ld	a, (de)
      0001EC F8 05                  623 	ldhl	sp,	#5
      0001EE 22                     624 	ld	(hl+), a
      0001EF 13                     625 	inc	de
      0001F0 1A                     626 	ld	a, (de)
      0001F1 77                     627 	ld	(hl), a
                                    628 ;src/main.c:401: while (card->next_card) {
      0001F2 F8 01                  629 	ldhl	sp,	#1
      0001F4 36 03                  630 	ld	(hl), #0x03
      0001F6                        631 00101$:
      0001F6 F8 05                  632 	ldhl	sp,#5
      0001F8 2A                     633 	ld	a, (hl+)
      0001F9 5F                     634 	ld	e, a
      0001FA 56                     635 	ld	d, (hl)
      0001FB 1A                     636 	ld	a, (de)
      0001FC F8 02                  637 	ldhl	sp,	#2
      0001FE 22                     638 	ld	(hl+), a
      0001FF 13                     639 	inc	de
      000200 1A                     640 	ld	a, (de)
      000201 77                     641 	ld	(hl), a
                                    642 ;src/main.c:402: draw_card_top(x, y, card->data);
      000202 F8 05                  643 	ldhl	sp,#5
      000204 2A                     644 	ld	a, (hl+)
      000205 5F                     645 	ld	e, a
      000206 56                     646 	ld	d, (hl)
      000207 13                     647 	inc	de
      000208 13                     648 	inc	de
                                    649 ;src/main.c:403: y++;
      000209 F8 01                  650 	ldhl	sp,	#1
      00020B 7E                     651 	ld	a, (hl)
      00020C 3C                     652 	inc	a
      00020D F8 04                  653 	ldhl	sp,	#4
      00020F 77                     654 	ld	(hl), a
                                    655 ;src/main.c:402: draw_card_top(x, y, card->data);
      000210 1A                     656 	ld	a, (de)
      000211 57                     657 	ld	d, a
                                    658 ;src/main.c:401: while (card->next_card) {
      000212 2B                     659 	dec	hl
      000213 3A                     660 	ld	a, (hl-)
      000214 B6                     661 	or	a, (hl)
      000215 28 24                  662 	jr	Z, 00103$
                                    663 ;src/main.c:402: draw_card_top(x, y, card->data);
      000217 C5                     664 	push	bc
      000218 D5                     665 	push	de
      000219 33                     666 	inc	sp
      00021A 2B                     667 	dec	hl
      00021B 7E                     668 	ld	a, (hl)
      00021C F5                     669 	push	af
      00021D 33                     670 	inc	sp
      00021E 2B                     671 	dec	hl
      00021F 7E                     672 	ld	a, (hl)
      000220 F5                     673 	push	af
      000221 33                     674 	inc	sp
      000222 CDr60r00               675 	call	_draw_card_top
      000225 E8 03                  676 	add	sp, #3
      000227 C1                     677 	pop	bc
                                    678 ;src/main.c:403: y++;
      000228 F8 04                  679 	ldhl	sp,	#4
      00022A 7E                     680 	ld	a, (hl)
      00022B F8 01                  681 	ldhl	sp,	#1
      00022D 77                     682 	ld	(hl), a
                                    683 ;src/main.c:404: card = card->next_card;
      00022E F8 05                  684 	ldhl	sp,#5
      000230 2A                     685 	ld	a, (hl+)
      000231 5F                     686 	ld	e, a
      000232 56                     687 	ld	d, (hl)
      000233 1A                     688 	ld	a, (de)
      000234 2B                     689 	dec	hl
      000235 22                     690 	ld	(hl+), a
      000236 13                     691 	inc	de
      000237 1A                     692 	ld	a, (de)
      000238 77                     693 	ld	(hl), a
      000239 18 BB                  694 	jr	00101$
      00023B                        695 00103$:
                                    696 ;src/main.c:406: draw_card(x, y, card->data);
                                    697 ;src/main.c:371: draw_card_top(x, y, card_data);
      00023B C5                     698 	push	bc
      00023C D5                     699 	push	de
      00023D D5                     700 	push	de
      00023E 33                     701 	inc	sp
      00023F F8 06                  702 	ldhl	sp,	#6
      000241 7E                     703 	ld	a, (hl)
      000242 F5                     704 	push	af
      000243 33                     705 	inc	sp
      000244 2B                     706 	dec	hl
      000245 7E                     707 	ld	a, (hl)
      000246 F5                     708 	push	af
      000247 33                     709 	inc	sp
      000248 CDr60r00               710 	call	_draw_card_top
      00024B E8 03                  711 	add	sp, #3
      00024D 33                     712 	inc	sp
      00024E F8 07                  713 	ldhl	sp,	#7
      000250 7E                     714 	ld	a, (hl)
      000251 F5                     715 	push	af
      000252 33                     716 	inc	sp
      000253 F8 04                  717 	ldhl	sp,	#4
      000255 7E                     718 	ld	a, (hl)
      000256 F5                     719 	push	af
      000257 33                     720 	inc	sp
      000258 CDrCDr00               721 	call	_draw_card_bottom
      00025B E8 03                  722 	add	sp, #3
      00025D C1                     723 	pop	bc
                                    724 ;src/main.c:407: pile++;
      00025E 03                     725 	inc	bc
      00025F 03                     726 	inc	bc
      000260 03                     727 	inc	bc
      000261 03                     728 	inc	bc
      000262 03                     729 	inc	bc
                                    730 ;src/main.c:398: for (x = 0; x < 20u; x += 2) {
      000263 F8 00                  731 	ldhl	sp,	#0
      000265 7E                     732 	ld	a, (hl)
      000266 C6 02                  733 	add	a, #0x02
      000268 77                     734 	ld	(hl), a
      000269 D6 14                  735 	sub	a, #0x14
      00026B DArE9r01               736 	jp	C, 00106$
                                    737 ;src/main.c:409: draw_sequential_card(0, 0, OFFSET_BKG_CARD + OFFSET_CARD_BACK);
      00026E 3E C7                  738 	ld	a, #0xc7
      000270 F5                     739 	push	af
      000271 33                     740 	inc	sp
      000272 AF                     741 	xor	a, a
      000273 F5                     742 	push	af
      000274 33                     743 	inc	sp
      000275 AF                     744 	xor	a, a
      000276 F5                     745 	push	af
      000277 33                     746 	inc	sp
      000278 CDr51r01               747 	call	_draw_sequential_card
      00027B E8 03                  748 	add	sp, #3
                                    749 ;src/main.c:410: }
      00027D E8 07                  750 	add	sp, #7
      00027F C9                     751 	ret
                                    752 ;src/main.c:412: void draw_bkg_splash_screen(void)
                                    753 ;	---------------------------------
                                    754 ; Function draw_bkg_splash_screen
                                    755 ; ---------------------------------
      000280                        756 _draw_bkg_splash_screen::
                                    757 ;src/main.c:414: set_bkg_tile_xy(2u, 9u, OFFSET_BKG_BUTTON + OFFSET_BUTTON_SYMBOL);
      000280 11 09 3D               758 	ld	de, #0x3d09
      000283 D5                     759 	push	de
      000284 3E 02                  760 	ld	a, #0x02
      000286 F5                     761 	push	af
      000287 33                     762 	inc	sp
      000288 CDr00r00               763 	call	_set_bkg_tile_xy
      00028B E8 03                  764 	add	sp, #3
                                    765 ;src/main.c:415: set_bkg_tile_xy(3u, 9u, OFFSET_BKG_BUTTON + OFFSET_BUTTON_START);
      00028D 11 09 3E               766 	ld	de, #0x3e09
      000290 D5                     767 	push	de
      000291 3E 03                  768 	ld	a, #0x03
      000293 F5                     769 	push	af
      000294 33                     770 	inc	sp
      000295 CDr00r00               771 	call	_set_bkg_tile_xy
      000298 E8 03                  772 	add	sp, #3
                                    773 ;src/main.c:416: set_bkg_tile_xy(4u, 9u, OFFSET_BKG_BUTTON + OFFSET_BUTTON_START + 1u);
      00029A 11 09 3F               774 	ld	de, #0x3f09
      00029D D5                     775 	push	de
      00029E 3E 04                  776 	ld	a, #0x04
      0002A0 F5                     777 	push	af
      0002A1 33                     778 	inc	sp
      0002A2 CDr00r00               779 	call	_set_bkg_tile_xy
      0002A5 E8 03                  780 	add	sp, #3
                                    781 ;src/main.c:417: set_bkg_tile_xy(5u, 9u, OFFSET_BKG_BUTTON + OFFSET_BUTTON_START + 2u);
      0002A7 11 09 40               782 	ld	de, #0x4009
      0002AA D5                     783 	push	de
      0002AB 3E 05                  784 	ld	a, #0x05
      0002AD F5                     785 	push	af
      0002AE 33                     786 	inc	sp
      0002AF CDr00r00               787 	call	_set_bkg_tile_xy
      0002B2 E8 03                  788 	add	sp, #3
                                    789 ;src/main.c:418: set_bkg_tiles(7u, 9u, START_TEXT_LEN, 1u, start_text);
      0002B4 21r00r00               790 	ld	hl, #_start_text
      0002B7 E5                     791 	push	hl
      0002B8 11 05 01               792 	ld	de, #0x0105
      0002BB D5                     793 	push	de
      0002BC 11 07 09               794 	ld	de, #0x0907
      0002BF D5                     795 	push	de
      0002C0 CDr00r00               796 	call	_set_bkg_tiles
      0002C3 E8 06                  797 	add	sp, #6
                                    798 ;src/main.c:420: set_bkg_tile_xy(2u, 10u, OFFSET_BKG_BUTTON + OFFSET_BUTTON_SYMBOL);
      0002C5 11 0A 3D               799 	ld	de, #0x3d0a
      0002C8 D5                     800 	push	de
      0002C9 3E 02                  801 	ld	a, #0x02
      0002CB F5                     802 	push	af
      0002CC 33                     803 	inc	sp
      0002CD CDr00r00               804 	call	_set_bkg_tile_xy
      0002D0 E8 03                  805 	add	sp, #3
                                    806 ;src/main.c:421: set_bkg_tile_xy(3u, 10u, OFFSET_BKG_BUTTON + OFFSET_BUTTON_SELECT);
      0002D2 11 0A 41               807 	ld	de, #0x410a
      0002D5 D5                     808 	push	de
      0002D6 3E 03                  809 	ld	a, #0x03
      0002D8 F5                     810 	push	af
      0002D9 33                     811 	inc	sp
      0002DA CDr00r00               812 	call	_set_bkg_tile_xy
      0002DD E8 03                  813 	add	sp, #3
                                    814 ;src/main.c:422: set_bkg_tile_xy(4u, 10u, OFFSET_BKG_BUTTON + OFFSET_BUTTON_SELECT + 1u);
      0002DF 11 0A 42               815 	ld	de, #0x420a
      0002E2 D5                     816 	push	de
      0002E3 3E 04                  817 	ld	a, #0x04
      0002E5 F5                     818 	push	af
      0002E6 33                     819 	inc	sp
      0002E7 CDr00r00               820 	call	_set_bkg_tile_xy
      0002EA E8 03                  821 	add	sp, #3
                                    822 ;src/main.c:423: set_bkg_tile_xy(5u, 10u, OFFSET_BKG_BUTTON + OFFSET_BUTTON_SELECT + 2u);
      0002EC 11 0A 43               823 	ld	de, #0x430a
      0002EF D5                     824 	push	de
      0002F0 3E 05                  825 	ld	a, #0x05
      0002F2 F5                     826 	push	af
      0002F3 33                     827 	inc	sp
      0002F4 CDr00r00               828 	call	_set_bkg_tile_xy
      0002F7 E8 03                  829 	add	sp, #3
                                    830 ;src/main.c:424: set_bkg_tiles(7u, 10u, LEADERBOARD_TEXT_LEN, 1u, leaderboard_text);
      0002F9 21r00r00               831 	ld	hl, #_leaderboard_text
      0002FC E5                     832 	push	hl
      0002FD 11 0B 01               833 	ld	de, #0x010b
      000300 D5                     834 	push	de
      000301 11 07 0A               835 	ld	de, #0x0a07
      000304 D5                     836 	push	de
      000305 CDr00r00               837 	call	_set_bkg_tiles
      000308 E8 06                  838 	add	sp, #6
                                    839 ;src/main.c:426: set_bkg_tiles(0, 15u, COPYRIGHT_TEXT_LEN, 1u, copyright_text);
      00030A 21r00r00               840 	ld	hl, #_copyright_text
      00030D E5                     841 	push	hl
      00030E 11 14 01               842 	ld	de, #0x0114
      000311 D5                     843 	push	de
      000312 3E 0F                  844 	ld	a, #0x0f
      000314 F5                     845 	push	af
      000315 33                     846 	inc	sp
      000316 AF                     847 	xor	a, a
      000317 F5                     848 	push	af
      000318 33                     849 	inc	sp
      000319 CDr00r00               850 	call	_set_bkg_tiles
      00031C E8 06                  851 	add	sp, #6
                                    852 ;src/main.c:427: }
      00031E C9                     853 	ret
                                    854 ;src/main.c:429: void draw_bkg_settings(void)
                                    855 ;	---------------------------------
                                    856 ; Function draw_bkg_settings
                                    857 ; ---------------------------------
      00031F                        858 _draw_bkg_settings::
                                    859 ;src/main.c:431: set_bkg_tiles(SETTINGS_SPLIT_X - SUITS_TEXT_LEN, SETTINGS_PAD_Y + 1u, SUITS_TEXT_LEN, 1u, suits_text);
      00031F 21r00r00               860 	ld	hl, #_suits_text
      000322 E5                     861 	push	hl
      000323 11 05 01               862 	ld	de, #0x0105
      000326 D5                     863 	push	de
      000327 11 05 02               864 	ld	de, #0x0205
      00032A D5                     865 	push	de
      00032B CDr00r00               866 	call	_set_bkg_tiles
      00032E E8 06                  867 	add	sp, #6
                                    868 ;src/main.c:432: set_bkg_tiles(SETTINGS_SPLIT_X, SETTINGS_PAD_Y, 2u, 3u, menu_card_tiles[MENU_CARD_ONE_SUIT]);
      000330 21r2Cr00               869 	ld	hl, #_menu_card_tiles
      000333 E5                     870 	push	hl
      000334 11 02 03               871 	ld	de, #0x0302
      000337 D5                     872 	push	de
      000338 11 0A 01               873 	ld	de, #0x010a
      00033B D5                     874 	push	de
      00033C CDr00r00               875 	call	_set_bkg_tiles
      00033F E8 06                  876 	add	sp, #6
                                    877 ;src/main.c:433: set_bkg_tiles(SETTINGS_SPLIT_X + 2u, SETTINGS_PAD_Y, 2u, 3u, menu_card_tiles[MENU_CARD_TWO_SUIT]);
      000341 21r32r00               878 	ld	hl, #(_menu_card_tiles + 0x0006)
      000344 E5                     879 	push	hl
      000345 11 02 03               880 	ld	de, #0x0302
      000348 D5                     881 	push	de
      000349 11 0C 01               882 	ld	de, #0x010c
      00034C D5                     883 	push	de
      00034D CDr00r00               884 	call	_set_bkg_tiles
      000350 E8 06                  885 	add	sp, #6
                                    886 ;src/main.c:434: set_bkg_tiles(SETTINGS_SPLIT_X + 4u, SETTINGS_PAD_Y, 2u, 3u, menu_card_tiles[MENU_CARD_FOUR_SUIT]);
      000352 21r38r00               887 	ld	hl, #(_menu_card_tiles + 0x000c)
      000355 E5                     888 	push	hl
      000356 11 02 03               889 	ld	de, #0x0302
      000359 D5                     890 	push	de
      00035A 11 0E 01               891 	ld	de, #0x010e
      00035D D5                     892 	push	de
      00035E CDr00r00               893 	call	_set_bkg_tiles
      000361 E8 06                  894 	add	sp, #6
                                    895 ;src/main.c:436: set_bkg_tiles(SETTINGS_SPLIT_X - MUSIC_TEXT_LEN, SETTINGS_PAD_Y + 5u, MUSIC_TEXT_LEN, 1u, music_text);
      000363 21r00r00               896 	ld	hl, #_music_text
      000366 E5                     897 	push	hl
      000367 11 05 01               898 	ld	de, #0x0105
      00036A D5                     899 	push	de
      00036B 11 05 06               900 	ld	de, #0x0605
      00036E D5                     901 	push	de
      00036F CDr00r00               902 	call	_set_bkg_tiles
      000372 E8 06                  903 	add	sp, #6
                                    904 ;src/main.c:437: set_bkg_tiles(SETTINGS_SPLIT_X, SETTINGS_PAD_Y + 4u, 2u, 3u, menu_card_tiles[MENU_CARD_MUSIC]);
      000374 21r3Er00               905 	ld	hl, #(_menu_card_tiles + 0x0012)
      000377 E5                     906 	push	hl
      000378 11 02 03               907 	ld	de, #0x0302
      00037B D5                     908 	push	de
      00037C 11 0A 05               909 	ld	de, #0x050a
      00037F D5                     910 	push	de
      000380 CDr00r00               911 	call	_set_bkg_tiles
      000383 E8 06                  912 	add	sp, #6
                                    913 ;src/main.c:438: set_bkg_tiles(SETTINGS_SPLIT_X + 2u, SETTINGS_PAD_Y + 4u, 2u, 3u, menu_card_tiles[MENU_CARD_NO_MUSIC]);
      000385 21r44r00               914 	ld	hl, #(_menu_card_tiles + 0x0018)
      000388 E5                     915 	push	hl
      000389 11 02 03               916 	ld	de, #0x0302
      00038C D5                     917 	push	de
      00038D 11 0C 05               918 	ld	de, #0x050c
      000390 D5                     919 	push	de
      000391 CDr00r00               920 	call	_set_bkg_tiles
      000394 E8 06                  921 	add	sp, #6
                                    922 ;src/main.c:440: set_bkg_tiles(SETTINGS_SPLIT_X - SPEED_TEXT_LEN, SETTINGS_PAD_Y + 9u, SPEED_TEXT_LEN, 1u, speed_text);
      000396 21r00r00               923 	ld	hl, #_speed_text
      000399 E5                     924 	push	hl
      00039A 11 05 01               925 	ld	de, #0x0105
      00039D D5                     926 	push	de
      00039E 11 05 0A               927 	ld	de, #0x0a05
      0003A1 D5                     928 	push	de
      0003A2 CDr00r00               929 	call	_set_bkg_tiles
      0003A5 E8 06                  930 	add	sp, #6
                                    931 ;src/main.c:441: set_bkg_tiles(SETTINGS_SPLIT_X, SETTINGS_PAD_Y + 8u, 2u, 3u, menu_card_tiles[MENU_CARD_ANIMATION_SLOW]);
      0003A7 21r4Ar00               932 	ld	hl, #(_menu_card_tiles + 0x001e)
      0003AA E5                     933 	push	hl
      0003AB 11 02 03               934 	ld	de, #0x0302
      0003AE D5                     935 	push	de
      0003AF 11 0A 09               936 	ld	de, #0x090a
      0003B2 D5                     937 	push	de
      0003B3 CDr00r00               938 	call	_set_bkg_tiles
      0003B6 E8 06                  939 	add	sp, #6
                                    940 ;src/main.c:442: set_bkg_tiles(SETTINGS_SPLIT_X + 2u, SETTINGS_PAD_Y + 8u, 2u, 3u, menu_card_tiles[MENU_CARD_ANIMATION_MEDIUM]);
      0003B8 21r50r00               941 	ld	hl, #(_menu_card_tiles + 0x0024)
      0003BB E5                     942 	push	hl
      0003BC 11 02 03               943 	ld	de, #0x0302
      0003BF D5                     944 	push	de
      0003C0 11 0C 09               945 	ld	de, #0x090c
      0003C3 D5                     946 	push	de
      0003C4 CDr00r00               947 	call	_set_bkg_tiles
      0003C7 E8 06                  948 	add	sp, #6
                                    949 ;src/main.c:443: set_bkg_tiles(SETTINGS_SPLIT_X + 4u, SETTINGS_PAD_Y + 8u, 2u, 3u, menu_card_tiles[MENU_CARD_ANIMATION_FAST]);
      0003C9 21r56r00               950 	ld	hl, #(_menu_card_tiles + 0x002a)
      0003CC E5                     951 	push	hl
      0003CD 11 02 03               952 	ld	de, #0x0302
      0003D0 D5                     953 	push	de
      0003D1 11 0E 09               954 	ld	de, #0x090e
      0003D4 D5                     955 	push	de
      0003D5 CDr00r00               956 	call	_set_bkg_tiles
      0003D8 E8 06                  957 	add	sp, #6
                                    958 ;src/main.c:445: set_bkg_tiles(SETTINGS_SPLIT_X - START_TEXT_LEN, SETTINGS_PAD_Y + 13u, START_TEXT_LEN, 1u, start_text);
      0003DA 21r00r00               959 	ld	hl, #_start_text
      0003DD E5                     960 	push	hl
      0003DE 11 05 01               961 	ld	de, #0x0105
      0003E1 D5                     962 	push	de
      0003E2 11 05 0E               963 	ld	de, #0x0e05
      0003E5 D5                     964 	push	de
      0003E6 CDr00r00               965 	call	_set_bkg_tiles
      0003E9 E8 06                  966 	add	sp, #6
                                    967 ;src/main.c:446: draw_sequential_card(SETTINGS_SPLIT_X, SETTINGS_PAD_Y + 12u, OFFSET_BKG_CARD + OFFSET_CARD_BACK);
      0003EB 11 0D C7               968 	ld	de, #0xc70d
      0003EE D5                     969 	push	de
      0003EF 3E 0A                  970 	ld	a, #0x0a
      0003F1 F5                     971 	push	af
      0003F2 33                     972 	inc	sp
      0003F3 CDr51r01               973 	call	_draw_sequential_card
      0003F6 E8 03                  974 	add	sp, #3
                                    975 ;src/main.c:447: }
      0003F8 C9                     976 	ret
                                    977 ;src/main.c:460: void draw_bkg_leaderboard(void)
                                    978 ;	---------------------------------
                                    979 ; Function draw_bkg_leaderboard
                                    980 ; ---------------------------------
      0003F9                        981 _draw_bkg_leaderboard::
      0003F9 E8 F3                  982 	add	sp, #-13
                                    983 ;src/main.c:462: set_bkg_tiles(4u, 1u, LEADERBOARD_TEXT_LEN, 1u, leaderboard_text);
      0003FB 21r00r00               984 	ld	hl, #_leaderboard_text
      0003FE E5                     985 	push	hl
      0003FF 11 0B 01               986 	ld	de, #0x010b
      000402 D5                     987 	push	de
      000403 11 04 01               988 	ld	de, #0x0104
      000406 D5                     989 	push	de
      000407 CDr00r00               990 	call	_set_bkg_tiles
      00040A E8 06                  991 	add	sp, #6
                                    992 ;src/main.c:464: set_bkg_tiles(LEADERBOARD_CARD_X, LEADERBOARD_PAD_Y, 2u, 3u, menu_card_tiles[MENU_CARD_ONE_SUIT]);
      00040C 21r2Cr00               993 	ld	hl, #_menu_card_tiles
      00040F E5                     994 	push	hl
      000410 11 02 03               995 	ld	de, #0x0302
      000413 D5                     996 	push	de
      000414 11 04 04               997 	ld	de, #0x0404
      000417 D5                     998 	push	de
      000418 CDr00r00               999 	call	_set_bkg_tiles
      00041B E8 06                 1000 	add	sp, #6
                                   1001 ;src/main.c:465: set_bkg_tiles(LEADERBOARD_CARD_X, LEADERBOARD_PAD_Y + 4u, 2u, 3u, menu_card_tiles[MENU_CARD_TWO_SUIT]);
      00041D 21r32r00              1002 	ld	hl, #(_menu_card_tiles + 0x0006)
      000420 E5                    1003 	push	hl
      000421 11 02 03              1004 	ld	de, #0x0302
      000424 D5                    1005 	push	de
      000425 11 04 08              1006 	ld	de, #0x0804
      000428 D5                    1007 	push	de
      000429 CDr00r00              1008 	call	_set_bkg_tiles
      00042C E8 06                 1009 	add	sp, #6
                                   1010 ;src/main.c:466: set_bkg_tiles(LEADERBOARD_CARD_X, LEADERBOARD_PAD_Y + 8u, 2u, 3u, menu_card_tiles[MENU_CARD_FOUR_SUIT]);
      00042E 21r38r00              1011 	ld	hl, #(_menu_card_tiles + 0x000c)
      000431 E5                    1012 	push	hl
      000432 11 02 03              1013 	ld	de, #0x0302
      000435 D5                    1014 	push	de
      000436 11 04 0C              1015 	ld	de, #0x0c04
      000439 D5                    1016 	push	de
      00043A CDr00r00              1017 	call	_set_bkg_tiles
      00043D E8 06                 1018 	add	sp, #6
                                   1019 ;src/main.c:468: LeaderBoard *iter = IDX_PTR(leaderboard[0], 0);
      00043F 01r00r00              1020 	ld	bc, #_leaderboard+0
                                   1021 ;src/main.c:470: for (i = 0; i < 3; i++) {
      000442 AF                    1022 	xor	a, a
      000443 F8 0B                 1023 	ldhl	sp,	#11
      000445 77                    1024 	ld	(hl), a
                                   1025 ;src/main.c:471: for (j = 0; j < 3; j++) {
      000446                       1026 00110$:
      000446 F8 0B                 1027 	ldhl	sp,	#11
      000448 7E                    1028 	ld	a, (hl)
      000449 87                    1029 	add	a, a
      00044A 87                    1030 	add	a, a
      00044B C6 04                 1031 	add	a, #0x04
      00044D F8 03                 1032 	ldhl	sp,	#3
      00044F 77                    1033 	ld	(hl), a
      000450 AF                    1034 	xor	a, a
      000451 F8 0C                 1035 	ldhl	sp,	#12
      000453 77                    1036 	ld	(hl), a
      000454                       1037 00104$:
                                   1038 ;src/main.c:472: UINT8 y = LEADERBOARD_PAD_Y + i * 4u + j;
      000454 F8 03                 1039 	ldhl	sp,	#3
      000456 7E                    1040 	ld	a, (hl)
      000457 F8 0C                 1041 	ldhl	sp,	#12
      000459 86                    1042 	add	a, (hl)
      00045A F8 04                 1043 	ldhl	sp,	#4
      00045C 77                    1044 	ld	(hl), a
                                   1045 ;src/main.c:473: set_bkg_tiles(LEADERBOARD_NAME_X, y, 3u, 1u, iter->name);
      00045D C5                    1046 	push	bc
      00045E 11 03 01              1047 	ld	de, #0x0103
      000461 D5                    1048 	push	de
      000462 56                    1049 	ld	d, (hl)
      000463 1E 08                 1050 	ld	e,#0x08
      000465 D5                    1051 	push	de
      000466 CDr00r00              1052 	call	_set_bkg_tiles
      000469 E8 06                 1053 	add	sp, #6
                                   1054 ;src/main.c:474: draw_bkg_leaderboard_score(LEADERBOARD_SCORE_X, y, iter->score);
      00046B 69                    1055 	ld	l, c
      00046C 60                    1056 	ld	h, b
      00046D 23                    1057 	inc	hl
      00046E 23                    1058 	inc	hl
      00046F 23                    1059 	inc	hl
      000470 5D                    1060 	ld	e, l
      000471 54                    1061 	ld	d, h
      000472 1A                    1062 	ld	a, (de)
      000473 F8 05                 1063 	ldhl	sp,	#5
      000475 22                    1064 	ld	(hl+), a
      000476 13                    1065 	inc	de
      000477 1A                    1066 	ld	a, (de)
      000478 77                    1067 	ld	(hl), a
                                   1068 ;src/main.c:451: UINT8 score_tiles[3] = {
      000479 F8 00                 1069 	ldhl	sp,	#0
      00047B 7D                    1070 	ld	a, l
      00047C 54                    1071 	ld	d, h
      00047D F8 07                 1072 	ldhl	sp,	#7
      00047F 22                    1073 	ld	(hl+), a
      000480 72                    1074 	ld	(hl), d
      000481 C5                    1075 	push	bc
      000482 21 64 00              1076 	ld	hl, #0x0064
      000485 E5                    1077 	push	hl
      000486 F8 09                 1078 	ldhl	sp,	#9
      000488 2A                    1079 	ld	a, (hl+)
      000489 66                    1080 	ld	h, (hl)
      00048A 6F                    1081 	ld	l, a
      00048B E5                    1082 	push	hl
      00048C CDr00r00              1083 	call	__divuint
      00048F E8 04                 1084 	add	sp, #4
      000491 C1                    1085 	pop	bc
      000492 7B                    1086 	ld	a, e
      000493 3C                    1087 	inc	a
      000494 F8 07                 1088 	ldhl	sp,	#7
      000496 F5                    1089 	push	af
      000497 2A                    1090 	ld	a, (hl+)
      000498 66                    1091 	ld	h, (hl)
      000499 6F                    1092 	ld	l, a
      00049A F1                    1093 	pop	af
      00049B 77                    1094 	ld	(hl), a
                                   1095 ;c
      00049C F8 07                 1096 	ldhl	sp,#7
      00049E 2A                    1097 	ld	a, (hl+)
      00049F 5F                    1098 	ld	e, a
      0004A0 56                    1099 	ld	d, (hl)
      0004A1 6B                    1100 	ld	l, e
      0004A2 62                    1101 	ld	h, d
      0004A3 23                    1102 	inc	hl
      0004A4 E5                    1103 	push	hl
      0004A5 7D                    1104 	ld	a, l
      0004A6 F8 0B                 1105 	ldhl	sp,	#11
      0004A8 77                    1106 	ld	(hl), a
      0004A9 E1                    1107 	pop	hl
      0004AA 7C                    1108 	ld	a, h
      0004AB F8 0A                 1109 	ldhl	sp,	#10
      0004AD 77                    1110 	ld	(hl), a
      0004AE C5                    1111 	push	bc
      0004AF 21 64 00              1112 	ld	hl, #0x0064
      0004B2 E5                    1113 	push	hl
      0004B3 F8 09                 1114 	ldhl	sp,	#9
      0004B5 2A                    1115 	ld	a, (hl+)
      0004B6 66                    1116 	ld	h, (hl)
      0004B7 6F                    1117 	ld	l, a
      0004B8 E5                    1118 	push	hl
      0004B9 CDr00r00              1119 	call	__moduint
      0004BC E8 04                 1120 	add	sp, #4
      0004BE 21 0A 00              1121 	ld	hl, #0x000a
      0004C1 E5                    1122 	push	hl
      0004C2 D5                    1123 	push	de
      0004C3 CDr00r00              1124 	call	__divuint
      0004C6 E8 04                 1125 	add	sp, #4
      0004C8 C1                    1126 	pop	bc
      0004C9 7B                    1127 	ld	a, e
      0004CA 3C                    1128 	inc	a
      0004CB F8 09                 1129 	ldhl	sp,	#9
      0004CD F5                    1130 	push	af
      0004CE 2A                    1131 	ld	a, (hl+)
      0004CF 66                    1132 	ld	h, (hl)
      0004D0 6F                    1133 	ld	l, a
      0004D1 F1                    1134 	pop	af
      0004D2 77                    1135 	ld	(hl), a
      0004D3 F8 07                 1136 	ldhl	sp,#7
      0004D5 2A                    1137 	ld	a, (hl+)
      0004D6 5F                    1138 	ld	e, a
      0004D7 56                    1139 	ld	d, (hl)
      0004D8 13                    1140 	inc	de
      0004D9 13                    1141 	inc	de
      0004DA C5                    1142 	push	bc
      0004DB D5                    1143 	push	de
      0004DC 21 0A 00              1144 	ld	hl, #0x000a
      0004DF E5                    1145 	push	hl
      0004E0 F8 0B                 1146 	ldhl	sp,	#11
      0004E2 2A                    1147 	ld	a, (hl+)
      0004E3 66                    1148 	ld	h, (hl)
      0004E4 6F                    1149 	ld	l, a
      0004E5 E5                    1150 	push	hl
      0004E6 CDr00r00              1151 	call	__moduint
      0004E9 E8 04                 1152 	add	sp, #4
      0004EB E5                    1153 	push	hl
      0004EC F8 0F                 1154 	ldhl	sp,	#15
      0004EE 73                    1155 	ld	(hl), e
      0004EF F8 10                 1156 	ldhl	sp,	#16
      0004F1 72                    1157 	ld	(hl), d
      0004F2 E1                    1158 	pop	hl
      0004F3 D1                    1159 	pop	de
      0004F4 C1                    1160 	pop	bc
      0004F5 F8 09                 1161 	ldhl	sp,	#9
      0004F7 7E                    1162 	ld	a, (hl)
      0004F8 3C                    1163 	inc	a
      0004F9 12                    1164 	ld	(de), a
                                   1165 ;src/main.c:456: set_bkg_tiles(x, y, 3u, 1u, score_tiles);
      0004FA 2B                    1166 	dec	hl
      0004FB 2B                    1167 	dec	hl
      0004FC 2A                    1168 	ld	a, (hl+)
      0004FD 5F                    1169 	ld	e, a
      0004FE 56                    1170 	ld	d, (hl)
      0004FF D5                    1171 	push	de
      000500 11 03 01              1172 	ld	de, #0x0103
      000503 D5                    1173 	push	de
      000504 F8 08                 1174 	ldhl	sp,	#8
      000506 56                    1175 	ld	d, (hl)
      000507 1E 0C                 1176 	ld	e,#0x0c
      000509 D5                    1177 	push	de
      00050A CDr00r00              1178 	call	_set_bkg_tiles
      00050D E8 06                 1179 	add	sp, #6
                                   1180 ;src/main.c:475: iter++;
      00050F 03                    1181 	inc	bc
      000510 03                    1182 	inc	bc
      000511 03                    1183 	inc	bc
      000512 03                    1184 	inc	bc
      000513 03                    1185 	inc	bc
                                   1186 ;src/main.c:471: for (j = 0; j < 3; j++) {
      000514 F8 0C                 1187 	ldhl	sp,	#12
      000516 34                    1188 	inc	(hl)
      000517 7E                    1189 	ld	a, (hl)
      000518 D6 03                 1190 	sub	a, #0x03
      00051A DAr54r04              1191 	jp	C, 00104$
                                   1192 ;src/main.c:470: for (i = 0; i < 3; i++) {
      00051D 2B                    1193 	dec	hl
      00051E 34                    1194 	inc	(hl)
      00051F 7E                    1195 	ld	a, (hl)
      000520 D6 03                 1196 	sub	a, #0x03
      000522 DAr46r04              1197 	jp	C, 00110$
                                   1198 ;src/main.c:478: }
      000525 E8 0D                 1199 	add	sp, #13
      000527 C9                    1200 	ret
                                   1201 ;src/main.c:484: void metasprite_2x3_hide(const UINT8 sprite)
                                   1202 ;	---------------------------------
                                   1203 ; Function metasprite_2x3_hide
                                   1204 ; ---------------------------------
      000528                       1205 _metasprite_2x3_hide::
                                   1206 ;src/main.c:491: );
      000528 F8 02                 1207 	ldhl	sp,	#2
      00052A 46                    1208 	ld	b, (hl)
                                   1209 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      00052B 21r00r00              1210 	ld	hl, #___current_metasprite
      00052E 36r00                 1211 	ld	(hl), #<(_metasprite_same_2x3)
      000530 23                    1212 	inc	hl
      000531 36s00                 1213 	ld	(hl), #>(_metasprite_same_2x3)
                                   1214 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      000533 21r00r00              1215 	ld	hl, #___current_base_tile
      000536 36 00                 1216 	ld	(hl), #0x00
                                   1217 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      000538 AF                    1218 	xor	a, a
      000539 F5                    1219 	push	af
      00053A 33                    1220 	inc	sp
      00053B AF                    1221 	xor	a, a
      00053C F5                    1222 	push	af
      00053D 33                    1223 	inc	sp
      00053E C5                    1224 	push	bc
      00053F 33                    1225 	inc	sp
      000540 CDr00r00              1226 	call	___move_metasprite
      000543 E8 03                 1227 	add	sp, #3
                                   1228 ;src/main.c:491: );
                                   1229 ;src/main.c:492: }
      000545 C9                    1230 	ret
                                   1231 ;src/main.c:494: void set_metasprite_card(const UINT8 card_data)
                                   1232 ;	---------------------------------
                                   1233 ; Function set_metasprite_card
                                   1234 ; ---------------------------------
      000546                       1235 _set_metasprite_card::
                                   1236 ;src/main.c:496: metasprite_t *iter = IDX_PTR(metasprite_custom_2x3, 0);
                                   1237 ;src/main.c:497: (iter++)->dtile = OFFSET_CARD_RANK + RANK(card_data);
      000546 F8 02                 1238 	ldhl	sp,	#2
      000548 46                    1239 	ld	b, (hl)
      000549 78                    1240 	ld	a, b
      00054A E6 0F                 1241 	and	a, #0x0f
      00054C 4F                    1242 	ld	c, a
      00054D 21r02r00              1243 	ld	hl, #(_metasprite_custom_2x3 + 0x0002)
      000550 71                    1244 	ld	(hl), c
                                   1245 ;src/main.c:498: (iter++)->dtile = OFFSET_CARD_SUIT + SUIT(card_data);
      000551 11r06r00              1246 	ld	de, #(_metasprite_custom_2x3 + 0x0004) + 2
      000554 78                    1247 	ld	a, b
      000555 E6 30                 1248 	and	a, #0x30
      000557 6F                    1249 	ld	l, a
      000558 26 00                 1250 	ld	h, #0x00
      00055A CB 3C                 1251 	srl	h
      00055C CB 1D                 1252 	rr	l
      00055E CB 3C                 1253 	srl	h
      000560 CB 1D                 1254 	rr	l
      000562 CB 3C                 1255 	srl	h
      000564 CB 1D                 1256 	rr	l
      000566 CB 3C                 1257 	srl	h
      000568 CB 1D                 1258 	rr	l
      00056A 45                    1259 	ld	b, l
      00056B 78                    1260 	ld	a, b
      00056C C6 0D                 1261 	add	a, #0x0d
      00056E 12                    1262 	ld	(de), a
                                   1263 ;src/main.c:499: (iter++)->dtile = OFFSET_CARD_BLANK + 2u;
      00056F 21r0Ar00              1264 	ld	hl, #(_metasprite_custom_2x3 + 0x000a)
      000572 36 13                 1265 	ld	(hl), #0x13
                                   1266 ;src/main.c:500: (iter++)->dtile = OFFSET_CARD_BLANK + 3u;
      000574 21r0Er00              1267 	ld	hl, #(_metasprite_custom_2x3 + 0x000e)
      000577 36 14                 1268 	ld	(hl), #0x14
                                   1269 ;src/main.c:501: (iter++)->dtile = OFFSET_CARD_SUIT_ROT + SUIT(card_data);
      000579 11r12r00              1270 	ld	de, #(_metasprite_custom_2x3 + 0x0010) + 2
      00057C 78                    1271 	ld	a, b
      00057D C6 2A                 1272 	add	a, #0x2a
      00057F 12                    1273 	ld	(de), a
                                   1274 ;src/main.c:502: (iter++)->dtile = OFFSET_CARD_RANK_ROT + RANK(card_data);
      000580 11r16r00              1275 	ld	de, #(_metasprite_custom_2x3 + 0x0014) + 2
      000583 79                    1276 	ld	a, c
      000584 C6 1D                 1277 	add	a, #0x1d
      000586 12                    1278 	ld	(de), a
                                   1279 ;src/main.c:503: }
      000587 C9                    1280 	ret
                                   1281 ;src/main.c:505: void draw_setting_frame_metasprites(void)
                                   1282 ;	---------------------------------
                                   1283 ; Function draw_setting_frame_metasprites
                                   1284 ; ---------------------------------
      000588                       1285 _draw_setting_frame_metasprites::
                                   1286 ;src/main.c:510: NUM_SUITS(settings) * 16u + SETTINGS_SPLIT_X * 8u,
      000588 FAr6Cr01              1287 	ld	a, (#_settings)
      00058B E6 03                 1288 	and	a, #0x03
      00058D CB 37                 1289 	swap	a
      00058F E6 F0                 1290 	and	a, #0xf0
      000591 C6 50                 1291 	add	a, #0x50
      000593 47                    1292 	ld	b, a
                                   1293 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      000594 21r00r00              1294 	ld	hl, #___current_metasprite
      000597 36r00                 1295 	ld	(hl), #<(_metasprite_sequential_2x3)
      000599 23                    1296 	inc	hl
      00059A 36s00                 1297 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   1298 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      00059C 21r00r00              1299 	ld	hl, #___current_base_tile
      00059F 36 E4                 1300 	ld	(hl), #0xe4
                                   1301 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      0005A1 3E 08                 1302 	ld	a, #0x08
      0005A3 F5                    1303 	push	af
      0005A4 33                    1304 	inc	sp
      0005A5 0E 12                 1305 	ld	c, #0x12
      0005A7 C5                    1306 	push	bc
      0005A8 CDr00r00              1307 	call	___move_metasprite
      0005AB E8 03                 1308 	add	sp, #3
                                   1309 ;src/main.c:516: !MUSIC(settings) * 16u + SETTINGS_SPLIT_X * 8u,
      0005AD FAr6Cr01              1310 	ld	a, (#_settings)
      0005B0 E6 10                 1311 	and	a, #0x10
      0005B2 F6 00                 1312 	or	a,#0x00
      0005B4 D6 01                 1313 	sub	a,#0x01
      0005B6 3E 00                 1314 	ld	a, #0x00
      0005B8 17                    1315 	rla
      0005B9 CB 37                 1316 	swap	a
      0005BB E6 F0                 1317 	and	a, #0xf0
      0005BD C6 50                 1318 	add	a, #0x50
      0005BF 47                    1319 	ld	b, a
                                   1320 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      0005C0 21r00r00              1321 	ld	hl, #___current_metasprite
      0005C3 36r00                 1322 	ld	(hl), #<(_metasprite_sequential_2x3)
      0005C5 23                    1323 	inc	hl
      0005C6 36s00                 1324 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   1325 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      0005C8 21r00r00              1326 	ld	hl, #___current_base_tile
      0005CB 36 E4                 1327 	ld	(hl), #0xe4
                                   1328 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      0005CD 3E 28                 1329 	ld	a, #0x28
      0005CF F5                    1330 	push	af
      0005D0 33                    1331 	inc	sp
      0005D1 0E 18                 1332 	ld	c, #0x18
      0005D3 C5                    1333 	push	bc
      0005D4 CDr00r00              1334 	call	___move_metasprite
      0005D7 E8 03                 1335 	add	sp, #3
                                   1336 ;src/main.c:522: ANIMATION_SPEED(settings) * 16u + SETTINGS_SPLIT_X * 8u,
      0005D9 FAr6Cr01              1337 	ld	a, (#_settings)
      0005DC E6 0C                 1338 	and	a, #0x0c
      0005DE 4F                    1339 	ld	c, a
      0005DF 06 00                 1340 	ld	b, #0x00
      0005E1 CB 38                 1341 	srl	b
      0005E3 CB 19                 1342 	rr	c
      0005E5 CB 38                 1343 	srl	b
      0005E7 CB 19                 1344 	rr	c
      0005E9 79                    1345 	ld	a, c
      0005EA CB 37                 1346 	swap	a
      0005EC E6 F0                 1347 	and	a, #0xf0
      0005EE C6 50                 1348 	add	a, #0x50
      0005F0 47                    1349 	ld	b, a
                                   1350 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      0005F1 21r00r00              1351 	ld	hl, #___current_metasprite
      0005F4 36r00                 1352 	ld	(hl), #<(_metasprite_sequential_2x3)
      0005F6 23                    1353 	inc	hl
      0005F7 36s00                 1354 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   1355 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      0005F9 21r00r00              1356 	ld	hl, #___current_base_tile
      0005FC 36 E4                 1357 	ld	(hl), #0xe4
                                   1358 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      0005FE 3E 48                 1359 	ld	a, #0x48
      000600 F5                    1360 	push	af
      000601 33                    1361 	inc	sp
      000602 0E 1E                 1362 	ld	c, #0x1e
      000604 C5                    1363 	push	bc
      000605 CDr00r00              1364 	call	___move_metasprite
      000608 E8 03                 1365 	add	sp, #3
                                   1366 ;src/main.c:524: );
                                   1367 ;src/main.c:525: }
      00060A C9                    1368 	ret
                                   1369 ;src/main.c:540: void dynamic_metasprite_end_animation(void)
                                   1370 ;	---------------------------------
                                   1371 ; Function dynamic_metasprite_end_animation
                                   1372 ; ---------------------------------
      00060B                       1373 _dynamic_metasprite_end_animation::
                                   1374 ;src/main.c:542: metasprite_2x3_hide(SPRITE_DYNAMIC);
      00060B AF                    1375 	xor	a, a
      00060C F5                    1376 	push	af
      00060D 33                    1377 	inc	sp
      00060E CDr28r05              1378 	call	_metasprite_2x3_hide
      000611 33                    1379 	inc	sp
                                   1380 ;src/main.c:543: flags &= ~FLAG_PLAYING_ANIMATION;
      000612 21r6Br01              1381 	ld	hl, #_flags
      000615 7E                    1382 	ld	a, (hl)
      000616 E6 FB                 1383 	and	a, #0xfb
      000618 77                    1384 	ld	(hl), a
                                   1385 ;src/main.c:544: dynamic_metasprite.target_frames = -1;
      000619 21r7Ar01              1386 	ld	hl, #(_dynamic_metasprite + 0x0008)
      00061C 36 FF                 1387 	ld	(hl), #0xff
                                   1388 ;src/main.c:545: }
      00061E C9                    1389 	ret
                                   1390 ;src/main.c:547: void dynamic_metasprite_splash_screen_callback(void)
                                   1391 ;	---------------------------------
                                   1392 ; Function dynamic_metasprite_splash_screen_callback
                                   1393 ; ---------------------------------
      00061F                       1394 _dynamic_metasprite_splash_screen_callback::
      00061F E8 F2                 1395 	add	sp, #-14
                                   1396 ;src/main.c:549: const UINT8 offsets[] = {
      000621 F8 00                 1397 	ldhl	sp,	#0
      000623 4D                    1398 	ld	c, l
      000624 44                    1399 	ld	b, h
      000625 AF                    1400 	xor	a, a
      000626 02                    1401 	ld	(bc), a
      000627 69                    1402 	ld	l, c
      000628 60                    1403 	ld	h, b
      000629 23                    1404 	inc	hl
      00062A 36 06                 1405 	ld	(hl), #0x06
      00062C 69                    1406 	ld	l, c
      00062D 60                    1407 	ld	h, b
      00062E 23                    1408 	inc	hl
      00062F 23                    1409 	inc	hl
      000630 36 0C                 1410 	ld	(hl), #0x0c
      000632 69                    1411 	ld	l, c
      000633 60                    1412 	ld	h, b
      000634 23                    1413 	inc	hl
      000635 23                    1414 	inc	hl
      000636 23                    1415 	inc	hl
      000637 36 12                 1416 	ld	(hl), #0x12
      000639 21 04 00              1417 	ld	hl, #0x0004
      00063C 09                    1418 	add	hl, bc
      00063D 36 18                 1419 	ld	(hl), #0x18
      00063F 21 05 00              1420 	ld	hl, #0x0005
      000642 09                    1421 	add	hl, bc
      000643 36 1E                 1422 	ld	(hl), #0x1e
      000645 21 06 00              1423 	ld	hl, #0x0006
      000648 09                    1424 	add	hl, bc
      000649 36 12                 1425 	ld	(hl), #0x12
      00064B 21 07 00              1426 	ld	hl, #0x0007
      00064E 09                    1427 	add	hl, bc
      00064F 36 24                 1428 	ld	(hl), #0x24
      000651 21 08 00              1429 	ld	hl, #0x0008
      000654 09                    1430 	add	hl, bc
      000655 36 2A                 1431 	ld	(hl), #0x2a
                                   1432 ;src/main.c:560: draw_sequential_card(1u + dynamic_metasprite.data[0] * 2u, 2u, OFFSET_BKG_TITLE + offsets[dynamic_metasprite.data[0]]);
      000657 21r7Fr01              1433 	ld	hl, #(_dynamic_metasprite + 0x000d)
      00065A 6E                    1434 	ld	l, (hl)
      00065B 79                    1435 	ld	a, c
      00065C 85                    1436 	add	a, l
      00065D 5F                    1437 	ld	e, a
      00065E 78                    1438 	ld	a, b
      00065F CE 00                 1439 	adc	a, #0x00
      000661 57                    1440 	ld	d, a
      000662 1A                    1441 	ld	a, (de)
      000663 C6 80                 1442 	add	a, #0x80
      000665 29                    1443 	add	hl, hl
      000666 2C                    1444 	inc	l
      000667 C5                    1445 	push	bc
      000668 57                    1446 	ld	d,a
      000669 1E 02                 1447 	ld	e,#0x02
      00066B D5                    1448 	push	de
      00066C 7D                    1449 	ld	a, l
      00066D F5                    1450 	push	af
      00066E 33                    1451 	inc	sp
      00066F CDr51r01              1452 	call	_draw_sequential_card
      000672 E8 03                 1453 	add	sp, #3
      000674 C1                    1454 	pop	bc
                                   1455 ;src/main.c:561: if (dynamic_metasprite.data[0] == 8u) {
      000675 FAr7Fr01              1456 	ld	a, (#(_dynamic_metasprite + 0x000d) + 0)
      000678 FE 08                 1457 	cp	a, #0x08
      00067A 20 05                 1458 	jr	NZ, 00102$
                                   1459 ;src/main.c:562: dynamic_metasprite_end_animation();
      00067C CDr0Br06              1460 	call	_dynamic_metasprite_end_animation
                                   1461 ;src/main.c:563: return;
      00067F 18 41                 1462 	jr	00103$
      000681                       1463 00102$:
                                   1464 ;src/main.c:565: dynamic_metasprite.data[0]++;
      000681 3C                    1465 	inc	a
      000682 F8 09                 1466 	ldhl	sp,	#9
      000684 77                    1467 	ld	(hl), a
      000685 11r7Fr01              1468 	ld	de, #(_dynamic_metasprite + 0x000d)
      000688 7E                    1469 	ld	a, (hl)
      000689 12                    1470 	ld	(de), a
                                   1471 ;src/main.c:566: dynamic_metasprite.elapsed_frames = 0;
      00068A 21r7Br01              1472 	ld	hl, #(_dynamic_metasprite + 0x0009)
      00068D 36 00                 1473 	ld	(hl), #0x00
                                   1474 ;src/main.c:567: dynamic_metasprite.dist[0] += 16;
      00068F 11r76r01              1475 	ld	de, #(_dynamic_metasprite + 0x0004)
      000692 1A                    1476 	ld	a, (de)
      000693 F8 0A                 1477 	ldhl	sp,	#10
      000695 22                    1478 	ld	(hl+), a
      000696 13                    1479 	inc	de
      000697 1A                    1480 	ld	a, (de)
                                   1481 ;c
      000698 32                    1482 	ld	(hl-), a
      000699 2A                    1483 	ld	a, (hl+)
      00069A 5F                    1484 	ld	e, a
      00069B 56                    1485 	ld	d, (hl)
      00069C 21 10 00              1486 	ld	hl, #0x0010
      00069F 19                    1487 	add	hl, de
      0006A0 E5                    1488 	push	hl
      0006A1 7D                    1489 	ld	a, l
      0006A2 F8 0E                 1490 	ldhl	sp,	#14
      0006A4 77                    1491 	ld	(hl), a
      0006A5 E1                    1492 	pop	hl
      0006A6 7C                    1493 	ld	a, h
      0006A7 F8 0D                 1494 	ldhl	sp,	#13
      0006A9 77                    1495 	ld	(hl), a
      0006AA 11r76r01              1496 	ld	de, #(_dynamic_metasprite + 0x0004)
      0006AD 2B                    1497 	dec	hl
      0006AE 7E                    1498 	ld	a, (hl)
      0006AF 12                    1499 	ld	(de), a
      0006B0 13                    1500 	inc	de
      0006B1 23                    1501 	inc	hl
      0006B2 7E                    1502 	ld	a, (hl)
      0006B3 12                    1503 	ld	(de), a
                                   1504 ;src/main.c:568: dynamic_metasprite.metasprite_offset = OFFSET_SPRITE_TITLE + offsets[dynamic_metasprite.data[0]];
      0006B4 F8 09                 1505 	ldhl	sp,	#9
      0006B6 6E                    1506 	ld	l, (hl)
      0006B7 26 00                 1507 	ld	h, #0x00
      0006B9 09                    1508 	add	hl, bc
      0006BA 4D                    1509 	ld	c, l
      0006BB 44                    1510 	ld	b, h
      0006BC 0A                    1511 	ld	a, (bc)
      0006BD C6 80                 1512 	add	a, #0x80
      0006BF EAr7Er01              1513 	ld	(#(_dynamic_metasprite + 0x000c)),a
      0006C2                       1514 00103$:
                                   1515 ;src/main.c:569: }
      0006C2 E8 0E                 1516 	add	sp, #14
      0006C4 C9                    1517 	ret
                                   1518 ;src/main.c:571: inline void dynamic_metasprite_splash_screen(void)
                                   1519 ;	---------------------------------
                                   1520 ; Function dynamic_metasprite_splash_screen
                                   1521 ; ---------------------------------
      0006C5                       1522 _dynamic_metasprite_splash_screen::
                                   1523 ;src/main.c:573: dynamic_metasprite.src[0] = 72;
      0006C5 21r72r01              1524 	ld	hl, #_dynamic_metasprite
      0006C8 36 48                 1525 	ld	(hl), #0x48
      0006CA 23                    1526 	inc	hl
      0006CB 36 00                 1527 	ld	(hl), #0x00
                                   1528 ;src/main.c:574: dynamic_metasprite.src[1] = -24;
      0006CD 21r74r01              1529 	ld	hl, #(_dynamic_metasprite + 0x0002)
      0006D0 36 E8                 1530 	ld	(hl), #0xe8
      0006D2 23                    1531 	inc	hl
      0006D3 36 FF                 1532 	ld	(hl), #0xff
                                   1533 ;src/main.c:575: dynamic_metasprite.dist[0] = -64;
      0006D5 21r76r01              1534 	ld	hl, #(_dynamic_metasprite + 0x0004)
      0006D8 36 C0                 1535 	ld	(hl), #0xc0
      0006DA 23                    1536 	inc	hl
      0006DB 36 FF                 1537 	ld	(hl), #0xff
                                   1538 ;src/main.c:576: dynamic_metasprite.dist[1] = 40;
      0006DD 21r78r01              1539 	ld	hl, #(_dynamic_metasprite + 0x0006)
      0006E0 36 28                 1540 	ld	(hl), #0x28
      0006E2 23                    1541 	inc	hl
      0006E3 36 00                 1542 	ld	(hl), #0x00
                                   1543 ;src/main.c:577: dynamic_metasprite.target_frames = TARGET_FRAMES_SPLASH_SCREEN;
      0006E5 21r7Ar01              1544 	ld	hl, #(_dynamic_metasprite + 0x0008)
      0006E8 36 20                 1545 	ld	(hl), #0x20
                                   1546 ;src/main.c:578: dynamic_metasprite.elapsed_frames = 0;
      0006EA 21r7Br01              1547 	ld	hl, #(_dynamic_metasprite + 0x0009)
      0006ED 36 00                 1548 	ld	(hl), #0x00
                                   1549 ;src/main.c:579: dynamic_metasprite.metasprite = metasprite_sequential_2x3;
      0006EF 21r7Cr01              1550 	ld	hl, #(_dynamic_metasprite + 0x000a)
      0006F2 36r00                 1551 	ld	(hl), #<(_metasprite_sequential_2x3)
      0006F4 23                    1552 	inc	hl
      0006F5 36s00                 1553 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   1554 ;src/main.c:580: dynamic_metasprite.metasprite_offset = OFFSET_SPRITE_TITLE + OFFSET_TITLE_S;
      0006F7 21r7Er01              1555 	ld	hl, #(_dynamic_metasprite + 0x000c)
      0006FA 36 80                 1556 	ld	(hl), #0x80
                                   1557 ;src/main.c:581: dynamic_metasprite.data[0] = 0;
      0006FC 21r7Fr01              1558 	ld	hl, #(_dynamic_metasprite + 0x000d)
      0006FF 36 00                 1559 	ld	(hl), #0x00
                                   1560 ;src/main.c:582: dynamic_metasprite.callback = &dynamic_metasprite_splash_screen_callback;
      000701 21r85r01              1561 	ld	hl, #(_dynamic_metasprite + 0x0013)
      000704 36r1F                 1562 	ld	(hl), #<(_dynamic_metasprite_splash_screen_callback)
      000706 23                    1563 	inc	hl
      000707 36s06                 1564 	ld	(hl), #>(_dynamic_metasprite_splash_screen_callback)
                                   1565 ;src/main.c:583: flags |= FLAG_PLAYING_ANIMATION;
      000709 21r6Br01              1566 	ld	hl, #_flags
      00070C 7E                    1567 	ld	a, (hl)
      00070D F6 04                 1568 	or	a, #0x04
      00070F 77                    1569 	ld	(hl), a
                                   1570 ;src/main.c:584: }
      000710 C9                    1571 	ret
                                   1572 ;src/main.c:586: void dynamic_metasprite_fold_pile(void)
                                   1573 ;	---------------------------------
                                   1574 ; Function dynamic_metasprite_fold_pile
                                   1575 ; ---------------------------------
      000711                       1576 _dynamic_metasprite_fold_pile::
      000711 E8 FA                 1577 	add	sp, #-6
                                   1578 ;src/main.c:588: UINT8 pile_idx = dynamic_metasprite.data[3] & 0xF;
      000713 FAr82r01              1579 	ld	a, (#(_dynamic_metasprite + 0x0010) + 0)
      000716 E6 0F                 1580 	and	a, #0x0f
                                   1581 ;src/main.c:589: if (!pile_idx) {
      000718 4F                    1582 	ld	c, a
      000719 B7                    1583 	or	a, a
      00071A 20 23                 1584 	jr	NZ, 00104$
                                   1585 ;src/main.c:590: dynamic_metasprite_end_animation();
      00071C CDr0Br06              1586 	call	_dynamic_metasprite_end_animation
                                   1587 ;src/main.c:591: if (num_folded_piles == 8u) {//NOTE: THIS IS WHERE GAME ENDS
      00071F FAr6Dr01              1588 	ld	a, (#_num_folded_piles)
      000722 D6 08                 1589 	sub	a, #0x08
      000724 C2rB6r07              1590 	jp	NZ,00105$
                                   1591 ;src/main.c:592: metasprite_2x3_hide(SPRITE_FRAME);
      000727 3E 0C                 1592 	ld	a, #0x0c
      000729 F5                    1593 	push	af
      00072A 33                    1594 	inc	sp
      00072B CDr28r05              1595 	call	_metasprite_2x3_hide
      00072E 33                    1596 	inc	sp
                                   1597 ;src/main.c:593: add_leaderboard();
      00072F CDrFFr15              1598 	call	_add_leaderboard
                                   1599 ;src/main.c:594: start_leaderboard();
      000732 CDrDFr15              1600 	call	_start_leaderboard
                                   1601 ;src/main.c:595: score = START_SCORE;
      000735 21r6Er01              1602 	ld	hl, #_score
      000738 3E F4                 1603 	ld	a, #0xf4
      00073A 22                    1604 	ld	(hl+), a
      00073B 36 01                 1605 	ld	(hl), #0x01
                                   1606 ;src/main.c:597: return;
      00073D 18 77                 1607 	jr	00105$
      00073F                       1608 00104$:
                                   1609 ;src/main.c:600: num_folded_piles++;
      00073F 21r6Dr01              1610 	ld	hl, #_num_folded_piles
      000742 34                    1611 	inc	(hl)
                                   1612 ;src/main.c:602: Pile *pile = IDX_PTR(piles, pile_idx);
      000743 06 00                 1613 	ld	b, #0x00
      000745 69                    1614 	ld	l, c
      000746 60                    1615 	ld	h, b
      000747 29                    1616 	add	hl, hl
      000748 29                    1617 	add	hl, hl
      000749 09                    1618 	add	hl, bc
      00074A 3Er38                 1619 	ld	a, #<(_piles)
      00074C 85                    1620 	add	a, l
      00074D 47                    1621 	ld	b, a
      00074E 3Es01                 1622 	ld	a, #>(_piles)
      000750 8C                    1623 	adc	a, h
      000751 F8 00                 1624 	ldhl	sp,	#0
      000753 70                    1625 	ld	(hl), b
      000754 23                    1626 	inc	hl
      000755 77                    1627 	ld	(hl), a
                                   1628 ;src/main.c:603: UINT8 x = pile_idx * 16u;
      000756 79                    1629 	ld	a, c
      000757 CB 37                 1630 	swap	a
      000759 E6 F0                 1631 	and	a, #0xf0
      00075B 23                    1632 	inc	hl
      00075C 77                    1633 	ld	(hl), a
                                   1634 ;src/main.c:612: dynamic_metasprite.data[3] >> 4u
      00075D FAr82r01              1635 	ld	a, (#(_dynamic_metasprite + 0x0010) + 0)
      000760 CB 37                 1636 	swap	a
      000762 E6 0F                 1637 	and	a, #0x0f
      000764 23                    1638 	inc	hl
      000765 77                    1639 	ld	(hl), a
                                   1640 ;src/main.c:610: pile->base,
      000766 D1                    1641 	pop	de
      000767 D5                    1642 	push	de
      000768 1A                    1643 	ld	a, (de)
      000769 23                    1644 	inc	hl
      00076A 22                    1645 	ld	(hl+), a
      00076B 13                    1646 	inc	de
      00076C 1A                    1647 	ld	a, (de)
      00076D 77                    1648 	ld	(hl), a
                                   1649 ;src/main.c:604: dynamic_metasprite_fold(pile->top->data,
      00076E C1                    1650 	pop	bc
      00076F C5                    1651 	push	bc
      000770 03                    1652 	inc	bc
      000771 03                    1653 	inc	bc
      000772 69                    1654 	ld	l, c
      000773 60                    1655 	ld	h, b
      000774 2A                    1656 	ld	a, (hl+)
      000775 66                    1657 	ld	h, (hl)
      000776 6F                    1658 	ld	l, a
      000777 23                    1659 	inc	hl
      000778 23                    1660 	inc	hl
      000779 56                    1661 	ld	d, (hl)
      00077A C5                    1662 	push	bc
      00077B F8 05                 1663 	ldhl	sp,	#5
      00077D 7E                    1664 	ld	a, (hl)
      00077E F5                    1665 	push	af
      00077F 33                    1666 	inc	sp
      000780 AF                    1667 	xor	a, a
      000781 F5                    1668 	push	af
      000782 33                    1669 	inc	sp
      000783 23                    1670 	inc	hl
      000784 2A                    1671 	ld	a, (hl+)
      000785 66                    1672 	ld	h, (hl)
      000786 6F                    1673 	ld	l, a
      000787 E5                    1674 	push	hl
      000788 3E 0D                 1675 	ld	a, #0x0d
      00078A F5                    1676 	push	af
      00078B 33                    1677 	inc	sp
      00078C AF                    1678 	xor	a, a
      00078D F5                    1679 	push	af
      00078E 33                    1680 	inc	sp
      00078F F8 0A                 1681 	ldhl	sp,	#10
      000791 46                    1682 	ld	b, (hl)
      000792 0E 78                 1683 	ld	c, #0x78
      000794 C5                    1684 	push	bc
      000795 7E                    1685 	ld	a, (hl)
      000796 F5                    1686 	push	af
      000797 33                    1687 	inc	sp
      000798 D5                    1688 	push	de
      000799 33                    1689 	inc	sp
      00079A CDr28r0A              1690 	call	_dynamic_metasprite_fold
      00079D E8 0A                 1691 	add	sp, #10
      00079F C1                    1692 	pop	bc
                                   1693 ;src/main.c:614: pile->base = NULL;
      0007A0 E1                    1694 	pop	hl
      0007A1 E5                    1695 	push	hl
      0007A2 AF                    1696 	xor	a, a
      0007A3 22                    1697 	ld	(hl+), a
      0007A4 77                    1698 	ld	(hl), a
                                   1699 ;src/main.c:615: pile->top = NULL;
      0007A5 AF                    1700 	xor	a, a
      0007A6 02                    1701 	ld	(bc), a
      0007A7 03                    1702 	inc	bc
      0007A8 02                    1703 	ld	(bc), a
                                   1704 ;src/main.c:616: pile->height = 0;
                                   1705 ;c
      0007A9 D1                    1706 	pop	de
      0007AA D5                    1707 	push	de
      0007AB 21 04 00              1708 	ld	hl, #0x0004
      0007AE 19                    1709 	add	hl, de
      0007AF 4D                    1710 	ld	c, l
      0007B0 44                    1711 	ld	b, h
      0007B1 AF                    1712 	xor	a, a
      0007B2 02                    1713 	ld	(bc), a
                                   1714 ;src/main.c:617: cursor_adjust_height();
      0007B3 CDrB1r0C              1715 	call	_cursor_adjust_height
      0007B6                       1716 00105$:
                                   1717 ;src/main.c:618: }
      0007B6 E8 06                 1718 	add	sp, #6
      0007B8 C9                    1719 	ret
                                   1720 ;src/main.c:620: void dynamic_metasprite_unfold_callback(void)
                                   1721 ;	---------------------------------
                                   1722 ; Function dynamic_metasprite_unfold_callback
                                   1723 ; ---------------------------------
      0007B9                       1724 _dynamic_metasprite_unfold_callback::
      0007B9 E8 FC                 1725 	add	sp, #-4
                                   1726 ;src/main.c:622: Card const *card = dynamic_metasprite.data_ptr;
      0007BB 21r83r01              1727 	ld	hl, #(_dynamic_metasprite + 0x0011)
      0007BE 2A                    1728 	ld	a, (hl+)
      0007BF 4F                    1729 	ld	c, a
      0007C0 46                    1730 	ld	b, (hl)
                                   1731 ;src/main.c:623: if (!card->next_card) {
      0007C1 59                    1732 	ld	e, c
      0007C2 50                    1733 	ld	d, b
      0007C3 1A                    1734 	ld	a, (de)
      0007C4 F8 00                 1735 	ldhl	sp,	#0
      0007C6 22                    1736 	ld	(hl+), a
      0007C7 13                    1737 	inc	de
      0007C8 1A                    1738 	ld	a, (de)
      0007C9 77                    1739 	ld	(hl), a
                                   1740 ;src/main.c:624: draw_card(dynamic_metasprite.data[1] / 8u, (UINT8)dynamic_metasprite.src[1] / 8u + 1u, card->data);
      0007CA 03                    1741 	inc	bc
      0007CB 03                    1742 	inc	bc
      0007CC 23                    1743 	inc	hl
      0007CD 79                    1744 	ld	a, c
      0007CE 22                    1745 	ld	(hl+), a
                                   1746 ;src/main.c:623: if (!card->next_card) {
      0007CF 78                    1747 	ld	a, b
      0007D0 32                    1748 	ld	(hl-), a
      0007D1 2B                    1749 	dec	hl
      0007D2 3A                    1750 	ld	a, (hl-)
      0007D3 B6                    1751 	or	a, (hl)
      0007D4 20 74                 1752 	jr	NZ, 00102$
                                   1753 ;src/main.c:624: draw_card(dynamic_metasprite.data[1] / 8u, (UINT8)dynamic_metasprite.src[1] / 8u + 1u, card->data);
      0007D6 F8 02                 1754 	ldhl	sp,#2
      0007D8 2A                    1755 	ld	a, (hl+)
      0007D9 5F                    1756 	ld	e, a
      0007DA 56                    1757 	ld	d, (hl)
      0007DB 1A                    1758 	ld	a, (de)
      0007DC F8 00                 1759 	ldhl	sp,	#0
      0007DE 77                    1760 	ld	(hl), a
      0007DF FAr74r01              1761 	ld	a, (#(_dynamic_metasprite + 0x0002) + 0)
      0007E2 F8 03                 1762 	ldhl	sp,	#3
      0007E4 77                    1763 	ld	(hl), a
      0007E5 F8 03                 1764 	ldhl	sp,	#3
      0007E7 3A                    1765 	ld	a, (hl-)
      0007E8 77                    1766 	ld	(hl), a
      0007E9 AF                    1767 	xor	a, a
      0007EA 23                    1768 	inc	hl
      0007EB 77                    1769 	ld	(hl), a
      0007EC CB 3E                 1770 	srl	(hl)
      0007EE 2B                    1771 	dec	hl
      0007EF CB 1E                 1772 	rr	(hl)
      0007F1 23                    1773 	inc	hl
      0007F2 CB 3E                 1774 	srl	(hl)
      0007F4 2B                    1775 	dec	hl
      0007F5 CB 1E                 1776 	rr	(hl)
      0007F7 23                    1777 	inc	hl
      0007F8 CB 3E                 1778 	srl	(hl)
      0007FA 2B                    1779 	dec	hl
      0007FB CB 1E                 1780 	rr	(hl)
      0007FD 2A                    1781 	ld	a, (hl+)
      0007FE 77                    1782 	ld	(hl), a
      0007FF 3C                    1783 	inc	a
      000800 2B                    1784 	dec	hl
      000801 2B                    1785 	dec	hl
      000802 77                    1786 	ld	(hl), a
      000803 FAr80r01              1787 	ld	a, (#(_dynamic_metasprite + 0x000e) + 0)
      000806 F8 03                 1788 	ldhl	sp,	#3
      000808 77                    1789 	ld	(hl), a
      000809 F8 03                 1790 	ldhl	sp,	#3
      00080B 3A                    1791 	ld	a, (hl-)
      00080C 77                    1792 	ld	(hl), a
      00080D AF                    1793 	xor	a, a
      00080E 23                    1794 	inc	hl
      00080F 77                    1795 	ld	(hl), a
      000810 CB 3E                 1796 	srl	(hl)
      000812 2B                    1797 	dec	hl
      000813 CB 1E                 1798 	rr	(hl)
      000815 23                    1799 	inc	hl
      000816 CB 3E                 1800 	srl	(hl)
      000818 2B                    1801 	dec	hl
      000819 CB 1E                 1802 	rr	(hl)
      00081B 23                    1803 	inc	hl
      00081C CB 3E                 1804 	srl	(hl)
      00081E 2B                    1805 	dec	hl
      00081F CB 1E                 1806 	rr	(hl)
      000821 46                    1807 	ld	b, (hl)
                                   1808 ;src/main.c:371: draw_card_top(x, y, card_data);
      000822 C5                    1809 	push	bc
      000823 2B                    1810 	dec	hl
      000824 2B                    1811 	dec	hl
      000825 7E                    1812 	ld	a, (hl)
      000826 F5                    1813 	push	af
      000827 33                    1814 	inc	sp
      000828 23                    1815 	inc	hl
      000829 7E                    1816 	ld	a, (hl)
      00082A F5                    1817 	push	af
      00082B 33                    1818 	inc	sp
      00082C C5                    1819 	push	bc
      00082D 33                    1820 	inc	sp
      00082E CDr60r00              1821 	call	_draw_card_top
      000831 E8 03                 1822 	add	sp, #3
      000833 C1                    1823 	pop	bc
                                   1824 ;src/main.c:372: draw_card_bottom(x, y + 1u, card_data);
      000834 F8 01                 1825 	ldhl	sp,	#1
      000836 7E                    1826 	ld	a, (hl)
      000837 3C                    1827 	inc	a
      000838 2B                    1828 	dec	hl
      000839 66                    1829 	ld	h, (hl)
      00083A E5                    1830 	push	hl
      00083B 33                    1831 	inc	sp
      00083C F5                    1832 	push	af
      00083D 33                    1833 	inc	sp
      00083E C5                    1834 	push	bc
      00083F 33                    1835 	inc	sp
      000840 CDrCDr00              1836 	call	_draw_card_bottom
      000843 E8 03                 1837 	add	sp, #3
                                   1838 ;src/main.c:625: dynamic_metasprite_fold_pile();
      000845 CDr11r07              1839 	call	_dynamic_metasprite_fold_pile
                                   1840 ;src/main.c:626: return;
      000848 18 4E                 1841 	jr	00104$
      00084A                       1842 00102$:
                                   1843 ;src/main.c:628: dynamic_metasprite.data_ptr = card->next_card;
      00084A C1                    1844 	pop	bc
      00084B C5                    1845 	push	bc
      00084C 21r83r01              1846 	ld	hl, #(_dynamic_metasprite + 0x0011)
      00084F 79                    1847 	ld	a, c
      000850 22                    1848 	ld	(hl+), a
      000851 70                    1849 	ld	(hl), b
                                   1850 ;src/main.c:629: dynamic_metasprite.src[1] += 8;
      000852 21r74r01              1851 	ld	hl, #(_dynamic_metasprite + 0x0002)
      000855 2A                    1852 	ld	a, (hl+)
      000856 4F                    1853 	ld	c, a
      000857 46                    1854 	ld	b, (hl)
      000858 21 08 00              1855 	ld	hl, #0x0008
      00085B 09                    1856 	add	hl, bc
      00085C 4D                    1857 	ld	c, l
      00085D 44                    1858 	ld	b, h
      00085E 21r74r01              1859 	ld	hl, #(_dynamic_metasprite + 0x0002)
      000861 79                    1860 	ld	a, c
      000862 22                    1861 	ld	(hl+), a
      000863 70                    1862 	ld	(hl), b
                                   1863 ;src/main.c:630: draw_card_top(dynamic_metasprite.data[1] / 8u, dynamic_metasprite.src[1] / 8u, card->data);
      000864 F8 02                 1864 	ldhl	sp,#2
      000866 2A                    1865 	ld	a, (hl+)
      000867 5F                    1866 	ld	e, a
      000868 56                    1867 	ld	d, (hl)
      000869 1A                    1868 	ld	a, (de)
      00086A 77                    1869 	ld	(hl), a
      00086B CB 38                 1870 	srl	b
      00086D CB 19                 1871 	rr	c
      00086F CB 38                 1872 	srl	b
      000871 CB 19                 1873 	rr	c
      000873 CB 38                 1874 	srl	b
      000875 CB 19                 1875 	rr	c
      000877 FAr80r01              1876 	ld	a, (#(_dynamic_metasprite + 0x000e) + 0)
      00087A 5F                    1877 	ld	e, a
      00087B 16 00                 1878 	ld	d, #0x00
      00087D CB 3A                 1879 	srl	d
      00087F CB 1B                 1880 	rr	e
      000881 CB 3A                 1881 	srl	d
      000883 CB 1B                 1882 	rr	e
      000885 CB 3A                 1883 	srl	d
      000887 CB 1B                 1884 	rr	e
      000889 7E                    1885 	ld	a, (hl)
      00088A F5                    1886 	push	af
      00088B 33                    1887 	inc	sp
      00088C 51                    1888 	ld	d, c
      00088D D5                    1889 	push	de
      00088E CDr60r00              1890 	call	_draw_card_top
      000891 E8 03                 1891 	add	sp, #3
                                   1892 ;src/main.c:631: dynamic_metasprite.elapsed_frames = 0;
      000893 21r7Br01              1893 	ld	hl, #(_dynamic_metasprite + 0x0009)
      000896 36 00                 1894 	ld	(hl), #0x00
      000898                       1895 00104$:
                                   1896 ;src/main.c:632: }
      000898 E8 04                 1897 	add	sp, #4
      00089A C9                    1898 	ret
                                   1899 ;src/main.c:634: void dynamic_metasprite_move_stack_callback(void)
                                   1900 ;	---------------------------------
                                   1901 ; Function dynamic_metasprite_move_stack_callback
                                   1902 ; ---------------------------------
      00089B                       1903 _dynamic_metasprite_move_stack_callback::
                                   1904 ;src/main.c:636: if (dynamic_metasprite.data[0] & BITMASK_DYNAMIC_METASPRITE_UNFOLD) {
      00089B FAr7Fr01              1905 	ld	a, (#(_dynamic_metasprite + 0x000d) + 0)
      00089E 07                    1906 	rlca
      00089F D2r11r07              1907 	jp	NC,_dynamic_metasprite_fold_pile
                                   1908 ;src/main.c:637: dynamic_metasprite.src[0] = dynamic_metasprite.data[1];
      0008A2 FAr80r01              1909 	ld	a, (#(_dynamic_metasprite + 0x000e) + 0)
      0008A5 4F                    1910 	ld	c, a
      0008A6 06 00                 1911 	ld	b, #0x00
      0008A8 21r72r01              1912 	ld	hl, #_dynamic_metasprite
      0008AB 79                    1913 	ld	a, c
      0008AC 22                    1914 	ld	(hl+), a
                                   1915 ;src/main.c:638: dynamic_metasprite.src[1] = dynamic_metasprite.data[2] - 8u;
      0008AD 78                    1916 	ld	a, b
      0008AE 22                    1917 	ld	(hl+), a
      0008AF 01r81r01              1918 	ld	bc, #_dynamic_metasprite + 15
      0008B2 0A                    1919 	ld	a, (bc)
      0008B3 4F                    1920 	ld	c, a
      0008B4 06 00                 1921 	ld	b, #0x00
      0008B6 79                    1922 	ld	a, c
      0008B7 C6 F8                 1923 	add	a, #0xf8
      0008B9 4F                    1924 	ld	c, a
      0008BA 78                    1925 	ld	a, b
      0008BB CE FF                 1926 	adc	a, #0xff
      0008BD 71                    1927 	ld	(hl), c
      0008BE 23                    1928 	inc	hl
      0008BF 77                    1929 	ld	(hl), a
                                   1930 ;src/main.c:639: dynamic_metasprite.dist[0] = 0;
      0008C0 21r76r01              1931 	ld	hl, #(_dynamic_metasprite + 0x0004)
      0008C3 AF                    1932 	xor	a, a
      0008C4 22                    1933 	ld	(hl+), a
      0008C5 77                    1934 	ld	(hl), a
                                   1935 ;src/main.c:640: dynamic_metasprite.dist[1] = 8;
      0008C6 21r78r01              1936 	ld	hl, #(_dynamic_metasprite + 0x0006)
      0008C9 3E 08                 1937 	ld	a, #0x08
      0008CB 22                    1938 	ld	(hl+), a
      0008CC 36 00                 1939 	ld	(hl), #0x00
                                   1940 ;src/main.c:641: dynamic_metasprite.target_frames = animation_speeds[ANIMATION_SPEED(settings)].fold_target_frames;
      0008CE 01r7Ar01              1941 	ld	bc, #_dynamic_metasprite + 8
      0008D1 FAr6Cr01              1942 	ld	a, (#_settings)
      0008D4 E6 0C                 1943 	and	a, #0x0c
      0008D6 6F                    1944 	ld	l, a
      0008D7 26 00                 1945 	ld	h, #0x00
      0008D9 CB 3C                 1946 	srl	h
      0008DB CB 1D                 1947 	rr	l
      0008DD CB 3C                 1948 	srl	h
      0008DF CB 1D                 1949 	rr	l
      0008E1 29                    1950 	add	hl, hl
      0008E2 11r26r00              1951 	ld	de, #_animation_speeds
      0008E5 19                    1952 	add	hl, de
      0008E6 7E                    1953 	ld	a, (hl)
      0008E7 02                    1954 	ld	(bc), a
                                   1955 ;src/main.c:642: dynamic_metasprite.callback = &dynamic_metasprite_unfold_callback;
      0008E8 21r85r01              1956 	ld	hl, #(_dynamic_metasprite + 0x0013)
      0008EB 36rB9                 1957 	ld	(hl), #<(_dynamic_metasprite_unfold_callback)
      0008ED 23                    1958 	inc	hl
      0008EE 36s07                 1959 	ld	(hl), #>(_dynamic_metasprite_unfold_callback)
                                   1960 ;src/main.c:643: dynamic_metasprite_unfold_callback();
                                   1961 ;src/main.c:645: dynamic_metasprite_fold_pile();
                                   1962 ;src/main.c:647: }
      0008F0 C3rB9r07              1963 	jp	_dynamic_metasprite_unfold_callback
                                   1964 ;src/main.c:649: void dynamic_metasprite_fold_callback(void)
                                   1965 ;	---------------------------------
                                   1966 ; Function dynamic_metasprite_fold_callback
                                   1967 ; ---------------------------------
      0008F3                       1968 _dynamic_metasprite_fold_callback::
      0008F3 E8 FC                 1969 	add	sp, #-4
                                   1970 ;src/main.c:651: dynamic_metasprite.src[1] -= 8;
      0008F5 21r74r01              1971 	ld	hl, #(_dynamic_metasprite + 0x0002)
      0008F8 2A                    1972 	ld	a, (hl+)
      0008F9 4F                    1973 	ld	c, a
      0008FA 46                    1974 	ld	b, (hl)
      0008FB 79                    1975 	ld	a, c
      0008FC C6 F8                 1976 	add	a, #0xf8
      0008FE 4F                    1977 	ld	c, a
      0008FF 78                    1978 	ld	a, b
      000900 CE FF                 1979 	adc	a, #0xff
      000902 47                    1980 	ld	b, a
      000903 21r74r01              1981 	ld	hl, #(_dynamic_metasprite + 0x0002)
      000906 79                    1982 	ld	a, c
      000907 22                    1983 	ld	(hl+), a
      000908 70                    1984 	ld	(hl), b
                                   1985 ;src/main.c:652: dynamic_metasprite.elapsed_frames = 0;
      000909 21r7Br01              1986 	ld	hl, #(_dynamic_metasprite + 0x0009)
      00090C 36 00                 1987 	ld	(hl), #0x00
                                   1988 ;src/main.c:653: clear_bkg_2x1((UINT8)dynamic_metasprite.src[0] / 8u, (UINT8)dynamic_metasprite.src[1] / 8u + 2u);
      00090E FAr74r01              1989 	ld	a, (#(_dynamic_metasprite + 0x0002) + 0)
      000911 4F                    1990 	ld	c, a
      000912 06 00                 1991 	ld	b, #0x00
      000914 CB 38                 1992 	srl	b
      000916 CB 19                 1993 	rr	c
      000918 CB 38                 1994 	srl	b
      00091A CB 19                 1995 	rr	c
      00091C CB 38                 1996 	srl	b
      00091E CB 19                 1997 	rr	c
      000920 0C                    1998 	inc	c
      000921 0C                    1999 	inc	c
      000922 FAr72r01              2000 	ld	a, (#_dynamic_metasprite + 0)
      000925 5F                    2001 	ld	e, a
      000926 16 00                 2002 	ld	d, #0x00
      000928 CB 3A                 2003 	srl	d
      00092A CB 1B                 2004 	rr	e
      00092C CB 3A                 2005 	srl	d
      00092E CB 1B                 2006 	rr	e
      000930 CB 3A                 2007 	srl	d
      000932 CB 1B                 2008 	rr	e
      000934 43                    2009 	ld	b, e
                                   2010 ;src/main.c:346: set_bkg_tile_xy(x, y, OFFSET_BKG_NONE);
      000935 AF                    2011 	xor	a, a
      000936 F5                    2012 	push	af
      000937 33                    2013 	inc	sp
      000938 79                    2014 	ld	a, c
      000939 F5                    2015 	push	af
      00093A 33                    2016 	inc	sp
      00093B C5                    2017 	push	bc
      00093C 33                    2018 	inc	sp
      00093D CDr00r00              2019 	call	_set_bkg_tile_xy
      000940 E8 03                 2020 	add	sp, #3
                                   2021 ;src/main.c:347: set_bkg_tile_xy(x + 1u, y, OFFSET_BKG_NONE);
      000942 04                    2022 	inc	b
      000943 AF                    2023 	xor	a, a
      000944 F5                    2024 	push	af
      000945 33                    2025 	inc	sp
      000946 79                    2026 	ld	a, c
      000947 F5                    2027 	push	af
      000948 33                    2028 	inc	sp
      000949 C5                    2029 	push	bc
      00094A 33                    2030 	inc	sp
      00094B CDr00r00              2031 	call	_set_bkg_tile_xy
      00094E E8 03                 2032 	add	sp, #3
                                   2033 ;src/main.c:654: if (dynamic_metasprite.data[0] & ~BITMASK_DYNAMIC_METASPRITE_UNFOLD) {
      000950 01r7Fr01              2034 	ld	bc, #_dynamic_metasprite + 13
      000953 0A                    2035 	ld	a, (bc)
      000954 5F                    2036 	ld	e, a
      000955 E6 7F                 2037 	and	a, #0x7f
      000957 28 06                 2038 	jr	Z, 00105$
                                   2039 ;src/main.c:655: dynamic_metasprite.data[0]--;
      000959 7B                    2040 	ld	a, e
      00095A 3D                    2041 	dec	a
      00095B 02                    2042 	ld	(bc), a
      00095C C3r25r0A              2043 	jp	00109$
      00095F                       2044 00105$:
                                   2045 ;src/main.c:657: if (cursor.card_to_show) {
      00095F 21r89r01              2046 	ld	hl, #(_cursor + 0x0002)
      000962 2A                    2047 	ld	a, (hl+)
      000963 4F                    2048 	ld	c, a
      000964 46                    2049 	ld	b, (hl)
                                   2050 ;src/main.c:653: clear_bkg_2x1((UINT8)dynamic_metasprite.src[0] / 8u, (UINT8)dynamic_metasprite.src[1] / 8u + 2u);
      000965 11r74r01              2051 	ld	de, #(_dynamic_metasprite + 0x0002)
      000968 1A                    2052 	ld	a, (de)
      000969 F8 02                 2053 	ldhl	sp,	#2
      00096B 22                    2054 	ld	(hl+), a
      00096C 13                    2055 	inc	de
      00096D 1A                    2056 	ld	a, (de)
      00096E 77                    2057 	ld	(hl), a
      00096F 11r72r01              2058 	ld	de, #_dynamic_metasprite
      000972 1A                    2059 	ld	a, (de)
      000973 F8 00                 2060 	ldhl	sp,	#0
      000975 22                    2061 	ld	(hl+), a
      000976 13                    2062 	inc	de
      000977 1A                    2063 	ld	a, (de)
      000978 77                    2064 	ld	(hl), a
                                   2065 ;src/main.c:658: draw_card(dynamic_metasprite.src[0] / 8u, dynamic_metasprite.src[1] / 8u - 1u, cursor.card_to_show->data);
      000979 D1                    2066 	pop	de
      00097A D5                    2067 	push	de
      00097B 23                    2068 	inc	hl
      00097C 23                    2069 	inc	hl
      00097D CB 3E                 2070 	srl	(hl)
      00097F 2B                    2071 	dec	hl
      000980 CB 1E                 2072 	rr	(hl)
      000982 23                    2073 	inc	hl
      000983 CB 3E                 2074 	srl	(hl)
      000985 2B                    2075 	dec	hl
      000986 CB 1E                 2076 	rr	(hl)
      000988 23                    2077 	inc	hl
      000989 CB 3E                 2078 	srl	(hl)
      00098B 2B                    2079 	dec	hl
      00098C CB 1E                 2080 	rr	(hl)
      00098E CB 3A                 2081 	srl	d
      000990 CB 1B                 2082 	rr	e
      000992 CB 3A                 2083 	srl	d
      000994 CB 1B                 2084 	rr	e
      000996 CB 3A                 2085 	srl	d
      000998 CB 1B                 2086 	rr	e
      00099A 6E                    2087 	ld	l, (hl)
                                   2088 ;src/main.c:657: if (cursor.card_to_show) {
      00099B 78                    2089 	ld	a, b
      00099C B1                    2090 	or	a, c
      00099D 28 27                 2091 	jr	Z, 00102$
                                   2092 ;src/main.c:658: draw_card(dynamic_metasprite.src[0] / 8u, dynamic_metasprite.src[1] / 8u - 1u, cursor.card_to_show->data);
      00099F 03                    2093 	inc	bc
      0009A0 03                    2094 	inc	bc
      0009A1 0A                    2095 	ld	a, (bc)
      0009A2 47                    2096 	ld	b, a
      0009A3 55                    2097 	ld	d, l
      0009A4 15                    2098 	dec	d
                                   2099 ;src/main.c:371: draw_card_top(x, y, card_data);
      0009A5 C5                    2100 	push	bc
      0009A6 D5                    2101 	push	de
      0009A7 4A                    2102 	ld	c, d
      0009A8 C5                    2103 	push	bc
      0009A9 7B                    2104 	ld	a, e
      0009AA F5                    2105 	push	af
      0009AB 33                    2106 	inc	sp
      0009AC CDr60r00              2107 	call	_draw_card_top
      0009AF E8 03                 2108 	add	sp, #3
      0009B1 D1                    2109 	pop	de
      0009B2 C1                    2110 	pop	bc
                                   2111 ;src/main.c:372: draw_card_bottom(x, y + 1u, card_data);
      0009B3 7A                    2112 	ld	a, d
      0009B4 3C                    2113 	inc	a
      0009B5 C5                    2114 	push	bc
      0009B6 33                    2115 	inc	sp
      0009B7 57                    2116 	ld	d,a
      0009B8 D5                    2117 	push	de
      0009B9 CDrCDr00              2118 	call	_draw_card_bottom
      0009BC E8 03                 2119 	add	sp, #3
                                   2120 ;src/main.c:659: cursor.card_to_show = NULL;
      0009BE 21r89r01              2121 	ld	hl, #(_cursor + 0x0002)
      0009C1 AF                    2122 	xor	a, a
      0009C2 22                    2123 	ld	(hl+), a
      0009C3 77                    2124 	ld	(hl), a
      0009C4 18 0C                 2125 	jr	00103$
      0009C6                       2126 00102$:
                                   2127 ;src/main.c:661: draw_sequential_card(dynamic_metasprite.src[0] / 8u, dynamic_metasprite.src[1] / 8u, OFFSET_BKG_CARD + OFFSET_CARD_OUTLINE);
      0009C6 3E DE                 2128 	ld	a, #0xde
      0009C8 F5                    2129 	push	af
      0009C9 7D                    2130 	ld	a, l
      0009CA 33                    2131 	inc	sp
      0009CB 57                    2132 	ld	d,a
      0009CC D5                    2133 	push	de
      0009CD CDr51r01              2134 	call	_draw_sequential_card
      0009D0 E8 03                 2135 	add	sp, #3
      0009D2                       2136 00103$:
                                   2137 ;src/main.c:663: dynamic_metasprite.dist[0] = (INT16)dynamic_metasprite.data[1] - dynamic_metasprite.src[0];
      0009D2 FAr80r01              2138 	ld	a, (#(_dynamic_metasprite + 0x000e) + 0)
      0009D5 4F                    2139 	ld	c, a
      0009D6 06 00                 2140 	ld	b, #0x00
      0009D8 21r72r01              2141 	ld	hl, #_dynamic_metasprite
      0009DB 2A                    2142 	ld	a, (hl+)
      0009DC 66                    2143 	ld	h, (hl)
      0009DD 6F                    2144 	ld	l, a
      0009DE 79                    2145 	ld	a, c
      0009DF 95                    2146 	sub	a, l
      0009E0 4F                    2147 	ld	c, a
      0009E1 78                    2148 	ld	a, b
      0009E2 9C                    2149 	sbc	a, h
      0009E3 47                    2150 	ld	b, a
      0009E4 21r76r01              2151 	ld	hl, #(_dynamic_metasprite + 0x0004)
      0009E7 79                    2152 	ld	a, c
      0009E8 22                    2153 	ld	(hl+), a
      0009E9 70                    2154 	ld	(hl), b
                                   2155 ;src/main.c:664: dynamic_metasprite.dist[1] = (INT16)dynamic_metasprite.data[2] - dynamic_metasprite.src[1];
      0009EA FAr81r01              2156 	ld	a, (#(_dynamic_metasprite + 0x000f) + 0)
      0009ED 4F                    2157 	ld	c, a
      0009EE 06 00                 2158 	ld	b, #0x00
      0009F0 21r74r01              2159 	ld	hl, #(_dynamic_metasprite + 0x0002)
      0009F3 2A                    2160 	ld	a, (hl+)
      0009F4 66                    2161 	ld	h, (hl)
      0009F5 6F                    2162 	ld	l, a
      0009F6 79                    2163 	ld	a, c
      0009F7 95                    2164 	sub	a, l
      0009F8 4F                    2165 	ld	c, a
      0009F9 78                    2166 	ld	a, b
      0009FA 9C                    2167 	sbc	a, h
      0009FB 47                    2168 	ld	b, a
      0009FC 21r78r01              2169 	ld	hl, #(_dynamic_metasprite + 0x0006)
      0009FF 79                    2170 	ld	a, c
      000A00 22                    2171 	ld	(hl+), a
      000A01 70                    2172 	ld	(hl), b
                                   2173 ;src/main.c:665: dynamic_metasprite.target_frames = animation_speeds[ANIMATION_SPEED(settings)].move_target_frames;
      000A02 01r7Ar01              2174 	ld	bc, #_dynamic_metasprite + 8
      000A05 FAr6Cr01              2175 	ld	a, (#_settings)
      000A08 E6 0C                 2176 	and	a, #0x0c
      000A0A 6F                    2177 	ld	l, a
      000A0B 26 00                 2178 	ld	h, #0x00
      000A0D CB 3C                 2179 	srl	h
      000A0F CB 1D                 2180 	rr	l
      000A11 CB 3C                 2181 	srl	h
      000A13 CB 1D                 2182 	rr	l
      000A15 29                    2183 	add	hl, hl
      000A16 11r26r00              2184 	ld	de, #_animation_speeds
      000A19 19                    2185 	add	hl, de
      000A1A 23                    2186 	inc	hl
      000A1B 7E                    2187 	ld	a, (hl)
      000A1C 02                    2188 	ld	(bc), a
                                   2189 ;src/main.c:666: dynamic_metasprite.callback = &dynamic_metasprite_move_stack_callback;
      000A1D 21r85r01              2190 	ld	hl, #(_dynamic_metasprite + 0x0013)
      000A20 36r9B                 2191 	ld	(hl), #<(_dynamic_metasprite_move_stack_callback)
      000A22 23                    2192 	inc	hl
      000A23 36s08                 2193 	ld	(hl), #>(_dynamic_metasprite_move_stack_callback)
      000A25                       2194 00109$:
                                   2195 ;src/main.c:669: }
      000A25 E8 04                 2196 	add	sp, #4
      000A27 C9                    2197 	ret
                                   2198 ;src/main.c:671: void dynamic_metasprite_fold(const UINT8 top_card_data, const UINT8 src_x, const UINT8 src_y, const UINT8 dest_x, const UINT8 dest_y, const UINT8 stack_height, const Card *base_card, const UINT8 unfold, const UINT8 piles_to_clear)
                                   2199 ;	---------------------------------
                                   2200 ; Function dynamic_metasprite_fold
                                   2201 ; ---------------------------------
      000A28                       2202 _dynamic_metasprite_fold::
                                   2203 ;src/main.c:673: set_metasprite_card(top_card_data);
      000A28 F8 02                 2204 	ldhl	sp,	#2
      000A2A 7E                    2205 	ld	a, (hl)
      000A2B F5                    2206 	push	af
      000A2C 33                    2207 	inc	sp
      000A2D CDr46r05              2208 	call	_set_metasprite_card
      000A30 33                    2209 	inc	sp
                                   2210 ;src/main.c:675: dynamic_metasprite.metasprite = metasprite_custom_2x3;
      000A31 21r7Cr01              2211 	ld	hl, #(_dynamic_metasprite + 0x000a)
      000A34 36r00                 2212 	ld	(hl), #<(_metasprite_custom_2x3)
      000A36 23                    2213 	inc	hl
      000A37 36s00                 2214 	ld	(hl), #>(_metasprite_custom_2x3)
                                   2215 ;src/main.c:676: dynamic_metasprite.metasprite_offset = OFFSET_SPRITE_CARD;
      000A39 21r7Er01              2216 	ld	hl, #(_dynamic_metasprite + 0x000c)
      000A3C 36 B0                 2217 	ld	(hl), #0xb0
                                   2218 ;src/main.c:678: dynamic_metasprite.data[0] = (stack_height - 1u) | unfold;
      000A3E 01r7Fr01              2219 	ld	bc, #_dynamic_metasprite + 13
      000A41 F8 07                 2220 	ldhl	sp,	#7
      000A43 7E                    2221 	ld	a, (hl)
      000A44 3D                    2222 	dec	a
      000A45 F8 0A                 2223 	ldhl	sp,	#10
      000A47 B6                    2224 	or	a, (hl)
      000A48 02                    2225 	ld	(bc), a
                                   2226 ;src/main.c:679: dynamic_metasprite.data[1] = dest_x;
      000A49 11r80r01              2227 	ld	de, #(_dynamic_metasprite + 0x000e)
      000A4C F8 05                 2228 	ldhl	sp,	#5
      000A4E 7E                    2229 	ld	a, (hl)
      000A4F 12                    2230 	ld	(de), a
                                   2231 ;src/main.c:680: dynamic_metasprite.data[2] = dest_y;
      000A50 11r81r01              2232 	ld	de, #(_dynamic_metasprite + 0x000f)
      000A53 23                    2233 	inc	hl
      000A54 7E                    2234 	ld	a, (hl)
      000A55 12                    2235 	ld	(de), a
                                   2236 ;src/main.c:681: dynamic_metasprite.data[3] = piles_to_clear;
      000A56 11r82r01              2237 	ld	de, #(_dynamic_metasprite + 0x0010)
      000A59 F8 0B                 2238 	ldhl	sp,	#11
      000A5B 7E                    2239 	ld	a, (hl)
      000A5C 12                    2240 	ld	(de), a
                                   2241 ;src/main.c:682: dynamic_metasprite.data_ptr = base_card;
      000A5D 2B                    2242 	dec	hl
      000A5E 2B                    2243 	dec	hl
      000A5F 2B                    2244 	dec	hl
      000A60 2A                    2245 	ld	a, (hl+)
      000A61 4F                    2246 	ld	c, a
      000A62 46                    2247 	ld	b, (hl)
      000A63 21r83r01              2248 	ld	hl, #(_dynamic_metasprite + 0x0011)
      000A66 79                    2249 	ld	a, c
      000A67 22                    2250 	ld	(hl+), a
      000A68 70                    2251 	ld	(hl), b
                                   2252 ;src/main.c:684: dynamic_metasprite.src[0] = src_x;
      000A69 F8 03                 2253 	ldhl	sp,	#3
      000A6B 4E                    2254 	ld	c, (hl)
      000A6C 06 00                 2255 	ld	b, #0x00
      000A6E 21r72r01              2256 	ld	hl, #_dynamic_metasprite
      000A71 79                    2257 	ld	a, c
      000A72 22                    2258 	ld	(hl+), a
      000A73 70                    2259 	ld	(hl), b
                                   2260 ;src/main.c:685: dynamic_metasprite.src[1] = src_y + 8u;
      000A74 F8 04                 2261 	ldhl	sp,	#4
      000A76 4E                    2262 	ld	c, (hl)
      000A77 06 00                 2263 	ld	b, #0x00
      000A79 79                    2264 	ld	a, c
      000A7A C6 08                 2265 	add	a, #0x08
      000A7C 4F                    2266 	ld	c, a
      000A7D 30 01                 2267 	jr	NC, 00110$
      000A7F 04                    2268 	inc	b
      000A80                       2269 00110$:
      000A80 21r74r01              2270 	ld	hl, #(_dynamic_metasprite + 0x0002)
      000A83 79                    2271 	ld	a, c
      000A84 22                    2272 	ld	(hl+), a
      000A85 70                    2273 	ld	(hl), b
                                   2274 ;src/main.c:687: flags |= FLAG_PLAYING_ANIMATION;
      000A86 21r6Br01              2275 	ld	hl, #_flags
      000A89 7E                    2276 	ld	a, (hl)
      000A8A F6 04                 2277 	or	a, #0x04
      000A8C 77                    2278 	ld	(hl), a
                                   2279 ;src/main.c:689: if (stack_height > 1) {
      000A8D 3E 01                 2280 	ld	a, #0x01
      000A8F F8 07                 2281 	ldhl	sp,	#7
      000A91 96                    2282 	sub	a, (hl)
      000A92 D2rF3r08              2283 	jp	NC,_dynamic_metasprite_fold_callback
                                   2284 ;src/main.c:690: dynamic_metasprite.dist[0] = 0;
      000A95 21r76r01              2285 	ld	hl, #(_dynamic_metasprite + 0x0004)
      000A98 AF                    2286 	xor	a, a
      000A99 22                    2287 	ld	(hl+), a
      000A9A 77                    2288 	ld	(hl), a
                                   2289 ;src/main.c:691: dynamic_metasprite.dist[1] = -8;
      000A9B 21r78r01              2290 	ld	hl, #(_dynamic_metasprite + 0x0006)
      000A9E 3E F8                 2291 	ld	a, #0xf8
      000AA0 22                    2292 	ld	(hl+), a
      000AA1 36 FF                 2293 	ld	(hl), #0xff
                                   2294 ;src/main.c:692: dynamic_metasprite.target_frames = animation_speeds[ANIMATION_SPEED(settings)].fold_target_frames;
      000AA3 01r7Ar01              2295 	ld	bc, #_dynamic_metasprite + 8
      000AA6 FAr6Cr01              2296 	ld	a, (#_settings)
      000AA9 E6 0C                 2297 	and	a, #0x0c
      000AAB 6F                    2298 	ld	l, a
      000AAC 26 00                 2299 	ld	h, #0x00
      000AAE CB 3C                 2300 	srl	h
      000AB0 CB 1D                 2301 	rr	l
      000AB2 CB 3C                 2302 	srl	h
      000AB4 CB 1D                 2303 	rr	l
      000AB6 29                    2304 	add	hl, hl
      000AB7 11r26r00              2305 	ld	de, #_animation_speeds
      000ABA 19                    2306 	add	hl, de
      000ABB 7E                    2307 	ld	a, (hl)
      000ABC 02                    2308 	ld	(bc), a
                                   2309 ;src/main.c:693: dynamic_metasprite.callback = &dynamic_metasprite_fold_callback;
      000ABD 21r85r01              2310 	ld	hl, #(_dynamic_metasprite + 0x0013)
      000AC0 36rF3                 2311 	ld	(hl), #<(_dynamic_metasprite_fold_callback)
      000AC2 23                    2312 	inc	hl
      000AC3 36s08                 2313 	ld	(hl), #>(_dynamic_metasprite_fold_callback)
                                   2314 ;src/main.c:695: dynamic_metasprite_fold_callback();
                                   2315 ;src/main.c:696: }
      000AC5 C3rF3r08              2316 	jp  _dynamic_metasprite_fold_callback
                                   2317 ;src/main.c:698: void dynamic_metasprite_deal_callback(void)
                                   2318 ;	---------------------------------
                                   2319 ; Function dynamic_metasprite_deal_callback
                                   2320 ; ---------------------------------
      000AC8                       2321 _dynamic_metasprite_deal_callback::
      000AC8 E8 FC                 2322 	add	sp, #-4
                                   2323 ;src/main.c:700: Pile *pile = IDX_PTR(piles, dynamic_metasprite.data[0]);
      000ACA 21r7Fr01              2324 	ld	hl, #(_dynamic_metasprite + 0x000d)
      000ACD 4E                    2325 	ld	c, (hl)
      000ACE 06 00                 2326 	ld	b, #0x00
      000AD0 69                    2327 	ld	l, c
      000AD1 60                    2328 	ld	h, b
      000AD2 29                    2329 	add	hl, hl
      000AD3 29                    2330 	add	hl, hl
      000AD4 09                    2331 	add	hl, bc
      000AD5 3Er38                 2332 	ld	a, #<(_piles)
      000AD7 85                    2333 	add	a, l
      000AD8 47                    2334 	ld	b, a
      000AD9 3Es01                 2335 	ld	a, #>(_piles)
      000ADB 8C                    2336 	adc	a, h
      000ADC F8 00                 2337 	ldhl	sp,	#0
      000ADE 70                    2338 	ld	(hl), b
      000ADF 23                    2339 	inc	hl
      000AE0 77                    2340 	ld	(hl), a
                                   2341 ;src/main.c:701: draw_card(dynamic_metasprite.data[0] * 2u, 2u + pile->height, pile->top->data);
      000AE1 E1                    2342 	pop	hl
      000AE2 E5                    2343 	push	hl
      000AE3 23                    2344 	inc	hl
      000AE4 23                    2345 	inc	hl
      000AE5 2A                    2346 	ld	a, (hl+)
      000AE6 66                    2347 	ld	h, (hl)
      000AE7 6F                    2348 	ld	l, a
      000AE8 23                    2349 	inc	hl
      000AE9 23                    2350 	inc	hl
      000AEA 46                    2351 	ld	b, (hl)
                                   2352 ;c
      000AEB D1                    2353 	pop	de
      000AEC D5                    2354 	push	de
      000AED 21 04 00              2355 	ld	hl, #0x0004
      000AF0 19                    2356 	add	hl, de
      000AF1 5D                    2357 	ld	e, l
      000AF2 54                    2358 	ld	d, h
      000AF3 1A                    2359 	ld	a, (de)
      000AF4 C6 02                 2360 	add	a, #0x02
      000AF6 57                    2361 	ld	d, a
      000AF7 CB 21                 2362 	sla	c
                                   2363 ;src/main.c:371: draw_card_top(x, y, card_data);
      000AF9 C5                    2364 	push	bc
      000AFA D5                    2365 	push	de
      000AFB C5                    2366 	push	bc
      000AFC 33                    2367 	inc	sp
      000AFD 59                    2368 	ld	e, c
      000AFE D5                    2369 	push	de
      000AFF CDr60r00              2370 	call	_draw_card_top
      000B02 E8 03                 2371 	add	sp, #3
      000B04 D1                    2372 	pop	de
      000B05 C1                    2373 	pop	bc
                                   2374 ;src/main.c:372: draw_card_bottom(x, y + 1u, card_data);
      000B06 14                    2375 	inc	d
      000B07 C5                    2376 	push	bc
      000B08 33                    2377 	inc	sp
      000B09 59                    2378 	ld	e, c
      000B0A D5                    2379 	push	de
      000B0B CDrCDr00              2380 	call	_draw_card_bottom
      000B0E E8 03                 2381 	add	sp, #3
                                   2382 ;src/main.c:702: if (dynamic_metasprite.data[0] == 9u) {
      000B10 21r7Fr01              2383 	ld	hl, #(_dynamic_metasprite + 0x000d)
      000B13 4E                    2384 	ld	c, (hl)
      000B14 79                    2385 	ld	a, c
      000B15 D6 09                 2386 	sub	a, #0x09
      000B17 20 1B                 2387 	jr	NZ, 00104$
                                   2388 ;src/main.c:703: if (top_card_idx == 104u)
      000B19 FAr6Ar01              2389 	ld	a, (#_top_card_idx)
      000B1C D6 68                 2390 	sub	a, #0x68
      000B1E 20 0F                 2391 	jr	NZ, 00102$
                                   2392 ;src/main.c:704: draw_sequential_card(0, 0, OFFSET_BKG_CARD + OFFSET_CARD_OUTLINE);
      000B20 3E DE                 2393 	ld	a, #0xde
      000B22 F5                    2394 	push	af
      000B23 33                    2395 	inc	sp
      000B24 AF                    2396 	xor	a, a
      000B25 F5                    2397 	push	af
      000B26 33                    2398 	inc	sp
      000B27 AF                    2399 	xor	a, a
      000B28 F5                    2400 	push	af
      000B29 33                    2401 	inc	sp
      000B2A CDr51r01              2402 	call	_draw_sequential_card
      000B2D E8 03                 2403 	add	sp, #3
      000B2F                       2404 00102$:
                                   2405 ;src/main.c:705: dynamic_metasprite_end_animation();
      000B2F CDr0Br06              2406 	call	_dynamic_metasprite_end_animation
                                   2407 ;src/main.c:706: return;
      000B32 18 48                 2408 	jr	00106$
      000B34                       2409 00104$:
                                   2410 ;src/main.c:708: pile++;
                                   2411 ;c
      000B34 D1                    2412 	pop	de
      000B35 D5                    2413 	push	de
      000B36 21 05 00              2414 	ld	hl, #0x0005
      000B39 19                    2415 	add	hl, de
      000B3A E5                    2416 	push	hl
      000B3B 7D                    2417 	ld	a, l
      000B3C F8 04                 2418 	ldhl	sp,	#4
      000B3E 77                    2419 	ld	(hl), a
      000B3F E1                    2420 	pop	hl
      000B40 7C                    2421 	ld	a, h
      000B41 F8 03                 2422 	ldhl	sp,	#3
      000B43 77                    2423 	ld	(hl), a
                                   2424 ;src/main.c:709: dynamic_metasprite.data[0]++;
      000B44 0C                    2425 	inc	c
      000B45 21r7Fr01              2426 	ld	hl, #(_dynamic_metasprite + 0x000d)
      000B48 71                    2427 	ld	(hl), c
                                   2428 ;src/main.c:710: dynamic_metasprite.dist[0] += 16;
      000B49 21r76r01              2429 	ld	hl, #(_dynamic_metasprite + 0x0004)
      000B4C 2A                    2430 	ld	a, (hl+)
      000B4D 4F                    2431 	ld	c, a
      000B4E 46                    2432 	ld	b, (hl)
      000B4F 21 10 00              2433 	ld	hl, #0x0010
      000B52 09                    2434 	add	hl, bc
      000B53 4D                    2435 	ld	c, l
      000B54 44                    2436 	ld	b, h
      000B55 21r76r01              2437 	ld	hl, #(_dynamic_metasprite + 0x0004)
      000B58 79                    2438 	ld	a, c
      000B59 22                    2439 	ld	(hl+), a
      000B5A 70                    2440 	ld	(hl), b
                                   2441 ;src/main.c:711: dynamic_metasprite.dist[1] = (INT16)(2u + pile->height) * 8;
                                   2442 ;c
      000B5B F8 02                 2443 	ldhl	sp,#2
      000B5D 2A                    2444 	ld	a, (hl+)
      000B5E 5F                    2445 	ld	e, a
      000B5F 56                    2446 	ld	d, (hl)
      000B60 21 04 00              2447 	ld	hl, #0x0004
      000B63 19                    2448 	add	hl, de
      000B64 4D                    2449 	ld	c, l
      000B65 44                    2450 	ld	b, h
      000B66 0A                    2451 	ld	a, (bc)
      000B67 6F                    2452 	ld	l, a
      000B68 26 00                 2453 	ld	h, #0x00
      000B6A 23                    2454 	inc	hl
      000B6B 23                    2455 	inc	hl
      000B6C 29                    2456 	add	hl, hl
      000B6D 29                    2457 	add	hl, hl
      000B6E 29                    2458 	add	hl, hl
      000B6F 4D                    2459 	ld	c, l
      000B70 44                    2460 	ld	b, h
      000B71 21r78r01              2461 	ld	hl, #(_dynamic_metasprite + 0x0006)
      000B74 79                    2462 	ld	a, c
      000B75 22                    2463 	ld	(hl+), a
      000B76 70                    2464 	ld	(hl), b
                                   2465 ;src/main.c:712: dynamic_metasprite.elapsed_frames = 0;
      000B77 21r7Br01              2466 	ld	hl, #(_dynamic_metasprite + 0x0009)
      000B7A 36 00                 2467 	ld	(hl), #0x00
      000B7C                       2468 00106$:
                                   2469 ;src/main.c:713: }
      000B7C E8 04                 2470 	add	sp, #4
      000B7E C9                    2471 	ret
                                   2472 ;src/main.c:715: void dynamic_metasprite_deal(void)
                                   2473 ;	---------------------------------
                                   2474 ; Function dynamic_metasprite_deal
                                   2475 ; ---------------------------------
      000B7F                       2476 _dynamic_metasprite_deal::
                                   2477 ;src/main.c:717: Pile *pile = IDX_PTR(piles, 0);
                                   2478 ;src/main.c:718: dynamic_metasprite.src[0] = 0;
      000B7F 21r72r01              2479 	ld	hl, #_dynamic_metasprite
      000B82 AF                    2480 	xor	a, a
      000B83 22                    2481 	ld	(hl+), a
      000B84 77                    2482 	ld	(hl), a
                                   2483 ;src/main.c:719: dynamic_metasprite.src[1] = 0;
      000B85 21r74r01              2484 	ld	hl, #(_dynamic_metasprite + 0x0002)
      000B88 AF                    2485 	xor	a, a
      000B89 22                    2486 	ld	(hl+), a
      000B8A 77                    2487 	ld	(hl), a
                                   2488 ;src/main.c:720: dynamic_metasprite.dist[0] = 0;
      000B8B 21r76r01              2489 	ld	hl, #(_dynamic_metasprite + 0x0004)
      000B8E AF                    2490 	xor	a, a
      000B8F 22                    2491 	ld	(hl+), a
      000B90 77                    2492 	ld	(hl), a
                                   2493 ;src/main.c:721: dynamic_metasprite.dist[1] = (INT16)(2u + pile->height) * 8;
      000B91 FAr3Cr01              2494 	ld	a, (#(_piles + 0x0004) + 0)
      000B94 26 00                 2495 	ld	h, #0x00
      000B96 6F                    2496 	ld	l, a
      000B97 23                    2497 	inc	hl
      000B98 23                    2498 	inc	hl
      000B99 29                    2499 	add	hl, hl
      000B9A 29                    2500 	add	hl, hl
      000B9B 29                    2501 	add	hl, hl
      000B9C 4D                    2502 	ld	c, l
      000B9D 44                    2503 	ld	b, h
      000B9E 21r78r01              2504 	ld	hl, #(_dynamic_metasprite + 0x0006)
      000BA1 79                    2505 	ld	a, c
      000BA2 22                    2506 	ld	(hl+), a
      000BA3 70                    2507 	ld	(hl), b
                                   2508 ;src/main.c:722: dynamic_metasprite.elapsed_frames = 0;
      000BA4 21r7Br01              2509 	ld	hl, #(_dynamic_metasprite + 0x0009)
      000BA7 36 00                 2510 	ld	(hl), #0x00
                                   2511 ;src/main.c:723: dynamic_metasprite.target_frames = animation_speeds[ANIMATION_SPEED(settings)].move_target_frames;
      000BA9 FAr6Cr01              2512 	ld	a, (#_settings)
      000BAC 0E 00                 2513 	ld	c, #0x00
      000BAE E6 0C                 2514 	and	a, #0x0c
      000BB0 6F                    2515 	ld	l, a
      000BB1 26 00                 2516 	ld	h, #0x00
      000BB3 CB 3C                 2517 	srl	h
      000BB5 CB 1D                 2518 	rr	l
      000BB7 CB 3C                 2519 	srl	h
      000BB9 CB 1D                 2520 	rr	l
      000BBB 29                    2521 	add	hl, hl
      000BBC 11r26r00              2522 	ld	de, #_animation_speeds
      000BBF 19                    2523 	add	hl, de
      000BC0 23                    2524 	inc	hl
      000BC1 7E                    2525 	ld	a, (hl)
      000BC2 EAr7Ar01              2526 	ld	(#(_dynamic_metasprite + 0x0008)),a
                                   2527 ;src/main.c:724: dynamic_metasprite.metasprite = metasprite_sequential_2x3;
      000BC5 21r7Cr01              2528 	ld	hl, #(_dynamic_metasprite + 0x000a)
      000BC8 36r00                 2529 	ld	(hl), #<(_metasprite_sequential_2x3)
      000BCA 23                    2530 	inc	hl
      000BCB 36s00                 2531 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   2532 ;src/main.c:725: dynamic_metasprite.metasprite_offset = OFFSET_SPRITE_CARD + OFFSET_CARD_BACK;
      000BCD 21r7Er01              2533 	ld	hl, #(_dynamic_metasprite + 0x000c)
      000BD0 36 C7                 2534 	ld	(hl), #0xc7
                                   2535 ;src/main.c:726: dynamic_metasprite.data[0] = 0;
      000BD2 21r7Fr01              2536 	ld	hl, #(_dynamic_metasprite + 0x000d)
      000BD5 36 00                 2537 	ld	(hl), #0x00
                                   2538 ;src/main.c:727: dynamic_metasprite.callback = &dynamic_metasprite_deal_callback;
      000BD7 21r85r01              2539 	ld	hl, #(_dynamic_metasprite + 0x0013)
      000BDA 36rC8                 2540 	ld	(hl), #<(_dynamic_metasprite_deal_callback)
      000BDC 23                    2541 	inc	hl
      000BDD 36s0A                 2542 	ld	(hl), #>(_dynamic_metasprite_deal_callback)
                                   2543 ;src/main.c:728: flags |= FLAG_PLAYING_ANIMATION;
      000BDF 21r6Br01              2544 	ld	hl, #_flags
      000BE2 7E                    2545 	ld	a, (hl)
      000BE3 F6 04                 2546 	or	a, #0x04
      000BE5 77                    2547 	ld	(hl), a
                                   2548 ;src/main.c:729: }
      000BE6 C9                    2549 	ret
                                   2550 ;src/main.c:731: inline void dynamic_metasprite_process(void)
                                   2551 ;	---------------------------------
                                   2552 ; Function dynamic_metasprite_process
                                   2553 ; ---------------------------------
      000BE7                       2554 _dynamic_metasprite_process::
      000BE7 E8 FB                 2555 	add	sp, #-5
                                   2556 ;src/main.c:733: if (dynamic_metasprite.elapsed_frames >= dynamic_metasprite.target_frames)
      000BE9 21r7Br01              2557 	ld	hl, #(_dynamic_metasprite + 0x0009)
      000BEC 4E                    2558 	ld	c, (hl)
      000BED 21r7Ar01              2559 	ld	hl, #(_dynamic_metasprite + 0x0008)
      000BF0 46                    2560 	ld	b, (hl)
      000BF1 58                    2561 	ld	e, b
      000BF2 79                    2562 	ld	a,c
      000BF3 57                    2563 	ld	d,a
      000BF4 90                    2564 	sub	a, b
      000BF5 CB 7B                 2565 	bit	7, e
      000BF7 28 07                 2566 	jr	Z, 00124$
      000BF9 CB 7A                 2567 	bit	7, d
      000BFB 20 08                 2568 	jr	NZ, 00125$
      000BFD BF                    2569 	cp	a, a
      000BFE 18 05                 2570 	jr	00125$
      000C00                       2571 00124$:
      000C00 CB 7A                 2572 	bit	7, d
      000C02 28 01                 2573 	jr	Z, 00125$
      000C04 37                    2574 	scf
      000C05                       2575 00125$:
                                   2576 ;src/main.c:734: return;
      000C05 D2rAEr0C              2577 	jp	NC,00107$
                                   2578 ;src/main.c:736: dynamic_metasprite.elapsed_frames++;
      000C08 0C                    2579 	inc	c
      000C09 21r7Br01              2580 	ld	hl, #(_dynamic_metasprite + 0x0009)
      000C0C 71                    2581 	ld	(hl), c
                                   2582 ;src/main.c:741: dynamic_metasprite.src[1] + (dynamic_metasprite.dist[1] * dynamic_metasprite.elapsed_frames / dynamic_metasprite.target_frames)
      000C0D FAr74r01              2583 	ld	a, (#(_dynamic_metasprite + 0x0002) + 0)
      000C10 F8 00                 2584 	ldhl	sp,	#0
      000C12 77                    2585 	ld	(hl), a
      000C13 21r78r01              2586 	ld	hl, #(_dynamic_metasprite + 0x0006)
      000C16 2A                    2587 	ld	a, (hl+)
      000C17 66                    2588 	ld	h, (hl)
      000C18 6F                    2589 	ld	l, a
      000C19 79                    2590 	ld	a, c
      000C1A 17                    2591 	rla
      000C1B 9F                    2592 	sbc	a, a
      000C1C 47                    2593 	ld	b, a
      000C1D C5                    2594 	push	bc
      000C1E C5                    2595 	push	bc
      000C1F E5                    2596 	push	hl
      000C20 CDr00r00              2597 	call	__mulint
      000C23 E8 04                 2598 	add	sp, #4
      000C25 E5                    2599 	push	hl
      000C26 F8 07                 2600 	ldhl	sp,	#7
      000C28 73                    2601 	ld	(hl), e
      000C29 F8 08                 2602 	ldhl	sp,	#8
      000C2B 72                    2603 	ld	(hl), d
      000C2C E1                    2604 	pop	hl
      000C2D C1                    2605 	pop	bc
      000C2E FAr7Ar01              2606 	ld	a, (#(_dynamic_metasprite + 0x0008) + 0)
      000C31 F8 01                 2607 	ldhl	sp,	#1
      000C33 77                    2608 	ld	(hl), a
      000C34 17                    2609 	rla
      000C35 9F                    2610 	sbc	a, a
      000C36 23                    2611 	inc	hl
      000C37 77                    2612 	ld	(hl), a
      000C38 C5                    2613 	push	bc
      000C39 2B                    2614 	dec	hl
      000C3A 2A                    2615 	ld	a, (hl+)
      000C3B 66                    2616 	ld	h, (hl)
      000C3C 6F                    2617 	ld	l, a
      000C3D E5                    2618 	push	hl
      000C3E F8 07                 2619 	ldhl	sp,	#7
      000C40 2A                    2620 	ld	a, (hl+)
      000C41 66                    2621 	ld	h, (hl)
      000C42 6F                    2622 	ld	l, a
      000C43 E5                    2623 	push	hl
      000C44 CDr00r00              2624 	call	__divsint
      000C47 E8 04                 2625 	add	sp, #4
      000C49 C1                    2626 	pop	bc
      000C4A 7B                    2627 	ld	a, e
      000C4B F8 00                 2628 	ldhl	sp,	#0
      000C4D 86                    2629 	add	a, (hl)
      000C4E F8 03                 2630 	ldhl	sp,	#3
      000C50 77                    2631 	ld	(hl), a
                                   2632 ;src/main.c:740: dynamic_metasprite.src[0] + (dynamic_metasprite.dist[0] * dynamic_metasprite.elapsed_frames / dynamic_metasprite.target_frames),
      000C51 FAr72r01              2633 	ld	a, (#_dynamic_metasprite + 0)
      000C54 F8 04                 2634 	ldhl	sp,	#4
      000C56 77                    2635 	ld	(hl), a
      000C57 21r76r01              2636 	ld	hl, #(_dynamic_metasprite + 0x0004)
      000C5A 2A                    2637 	ld	a, (hl+)
      000C5B 66                    2638 	ld	h, (hl)
      000C5C 6F                    2639 	ld	l, a
      000C5D C5                    2640 	push	bc
      000C5E E5                    2641 	push	hl
      000C5F CDr00r00              2642 	call	__mulint
      000C62 E8 04                 2643 	add	sp, #4
      000C64 F8 01                 2644 	ldhl	sp,	#1
      000C66 2A                    2645 	ld	a, (hl+)
      000C67 66                    2646 	ld	h, (hl)
      000C68 6F                    2647 	ld	l, a
      000C69 E5                    2648 	push	hl
      000C6A D5                    2649 	push	de
      000C6B CDr00r00              2650 	call	__divsint
      000C6E E8 04                 2651 	add	sp, #4
      000C70 7B                    2652 	ld	a, e
      000C71 F8 04                 2653 	ldhl	sp,	#4
      000C73 86                    2654 	add	a, (hl)
      000C74 47                    2655 	ld	b, a
                                   2656 ;src/main.c:738: dynamic_metasprite.metasprite_offset,
      000C75 FAr7Er01              2657 	ld	a, (#(_dynamic_metasprite + 0x000c) + 0)
      000C78 EAr00r00              2658 	ld	(#___current_base_tile),a
                                   2659 ;src/main.c:737: move_metasprite(dynamic_metasprite.metasprite,
      000C7B 21r7Cr01              2660 	ld	hl, #(_dynamic_metasprite + 0x000a)
      000C7E 2A                    2661 	ld	a, (hl+)
      000C7F 66                    2662 	ld	h, (hl)
                                   2663 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      000C80 EAr00r00              2664 	ld	(___current_metasprite), a
      000C83 7C                    2665 	ld	a, h
      000C84 EAr01r00              2666 	ld	(___current_metasprite + 1), a
                                   2667 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      000C87 F8 03                 2668 	ldhl	sp,	#3
      000C89 7E                    2669 	ld	a, (hl)
      000C8A F5                    2670 	push	af
      000C8B 33                    2671 	inc	sp
      000C8C C5                    2672 	push	bc
      000C8D 33                    2673 	inc	sp
      000C8E AF                    2674 	xor	a, a
      000C8F F5                    2675 	push	af
      000C90 33                    2676 	inc	sp
      000C91 CDr00r00              2677 	call	___move_metasprite
      000C94 E8 03                 2678 	add	sp, #3
                                   2679 ;src/main.c:743: if (dynamic_metasprite.elapsed_frames == dynamic_metasprite.target_frames
      000C96 FAr7Br01              2680 	ld	a, (#(_dynamic_metasprite + 0x0009) + 0)
      000C99 21r7Ar01              2681 	ld	hl, #(_dynamic_metasprite + 0x0008)
      000C9C 4E                    2682 	ld	c, (hl)
      000C9D 91                    2683 	sub	a, c
      000C9E 20 0E                 2684 	jr	NZ, 00107$
                                   2685 ;src/main.c:744: && dynamic_metasprite.callback)
      000CA0 21r85r01              2686 	ld	hl, #(_dynamic_metasprite + 0x0013)
      000CA3 2A                    2687 	ld	a, (hl+)
      000CA4 4F                    2688 	ld	c, a
      000CA5 66                    2689 	ld	h, (hl)
      000CA6 7C                    2690 	ld	a, h
      000CA7 B1                    2691 	or	a, c
      000CA8 28 04                 2692 	jr	Z, 00107$
                                   2693 ;src/main.c:745: dynamic_metasprite.callback();
      000CAA 69                    2694 	ld	l, c
      000CAB CDr00r00              2695 	call	___sdcc_call_hl
      000CAE                       2696 00107$:
                                   2697 ;src/main.c:746: }
      000CAE E8 05                 2698 	add	sp, #5
      000CB0 C9                    2699 	ret
                                   2700 ;src/main.c:753: void cursor_adjust_height(void)
                                   2701 ;	---------------------------------
                                   2702 ; Function cursor_adjust_height
                                   2703 ; ---------------------------------
      000CB1                       2704 _cursor_adjust_height::
                                   2705 ;src/main.c:755: Pile *pile = IDX_PTR(piles, cursor.pile_idx);
      000CB1 01r38r01              2706 	ld	bc, #_piles+0
      000CB4 FAr8Dr01              2707 	ld	a, (#(_cursor + 0x0006) + 0)
      000CB7 5F                    2708 	ld	e, a
      000CB8 16 00                 2709 	ld	d, #0x00
      000CBA 6B                    2710 	ld	l, e
      000CBB 62                    2711 	ld	h, d
      000CBC 29                    2712 	add	hl, hl
      000CBD 29                    2713 	add	hl, hl
      000CBE 19                    2714 	add	hl, de
      000CBF 09                    2715 	add	hl, bc
                                   2716 ;src/main.c:756: if (cursor.height >= pile->height)
      000CC0 01r8Er01              2717 	ld	bc, #_cursor + 7
      000CC3 0A                    2718 	ld	a, (bc)
      000CC4 57                    2719 	ld	d, a
      000CC5 23                    2720 	inc	hl
      000CC6 23                    2721 	inc	hl
      000CC7 23                    2722 	inc	hl
      000CC8 23                    2723 	inc	hl
      000CC9 5E                    2724 	ld	e, (hl)
      000CCA 7A                    2725 	ld	a, d
      000CCB 93                    2726 	sub	a, e
      000CCC D8                    2727 	ret	C
                                   2728 ;src/main.c:757: cursor.height = pile->height - !!pile->height;
      000CCD 7B                    2729 	ld	a, e
      000CCE D6 01                 2730 	sub	a,#0x01
      000CD0 3E 00                 2731 	ld	a, #0x00
      000CD2 17                    2732 	rla
      000CD3 EE 01                 2733 	xor	a, #0x01
      000CD5 57                    2734 	ld	d, a
      000CD6 7B                    2735 	ld	a, e
      000CD7 92                    2736 	sub	a, d
      000CD8 02                    2737 	ld	(bc), a
                                   2738 ;src/main.c:758: }
      000CD9 C9                    2739 	ret
                                   2740 ;src/main.c:760: inline void cursor_grab_stack(void)
                                   2741 ;	---------------------------------
                                   2742 ; Function cursor_grab_stack
                                   2743 ; ---------------------------------
      000CDA                       2744 _cursor_grab_stack::
      000CDA E8 F9                 2745 	add	sp, #-7
                                   2746 ;src/main.c:763: Pile *pile = IDX_PTR(piles, cursor.pile_idx);
      000CDC 01r38r01              2747 	ld	bc, #_piles+0
      000CDF FAr8Dr01              2748 	ld	a, (#(_cursor + 0x0006) + 0)
      000CE2 5F                    2749 	ld	e, a
      000CE3 16 00                 2750 	ld	d, #0x00
      000CE5 6B                    2751 	ld	l, e
      000CE6 62                    2752 	ld	h, d
      000CE7 29                    2753 	add	hl, hl
      000CE8 29                    2754 	add	hl, hl
      000CE9 19                    2755 	add	hl, de
      000CEA 09                    2756 	add	hl, bc
      000CEB 4D                    2757 	ld	c, l
      000CEC 7C                    2758 	ld	a, h
      000CED F8 02                 2759 	ldhl	sp,	#2
      000CEF 71                    2760 	ld	(hl), c
      000CF0 23                    2761 	inc	hl
                                   2762 ;src/main.c:764: Card *top = pile->base;
      000CF1 32                    2763 	ld	(hl-), a
      000CF2 2A                    2764 	ld	a, (hl+)
      000CF3 5F                    2765 	ld	e, a
      000CF4 56                    2766 	ld	d, (hl)
      000CF5 1A                    2767 	ld	a, (de)
      000CF6 23                    2768 	inc	hl
      000CF7 23                    2769 	inc	hl
      000CF8 22                    2770 	ld	(hl+), a
      000CF9 13                    2771 	inc	de
      000CFA 1A                    2772 	ld	a, (de)
      000CFB 77                    2773 	ld	(hl), a
                                   2774 ;src/main.c:765: for (i = 1; i < cursor.height; i++)
      000CFC 06 01                 2775 	ld	b, #0x01
      000CFE                       2776 00109$:
      000CFE 21r8Er01              2777 	ld	hl, #(_cursor + 0x0007)
      000D01 4E                    2778 	ld	c, (hl)
      000D02 78                    2779 	ld	a, b
      000D03 91                    2780 	sub	a, c
      000D04 30 0E                 2781 	jr	NC, 00101$
                                   2782 ;src/main.c:766: top = top->next_card;
      000D06 F8 05                 2783 	ldhl	sp,#5
      000D08 2A                    2784 	ld	a, (hl+)
      000D09 5F                    2785 	ld	e, a
      000D0A 56                    2786 	ld	d, (hl)
      000D0B 1A                    2787 	ld	a, (de)
      000D0C 2B                    2788 	dec	hl
      000D0D 22                    2789 	ld	(hl+), a
      000D0E 13                    2790 	inc	de
      000D0F 1A                    2791 	ld	a, (de)
      000D10 77                    2792 	ld	(hl), a
                                   2793 ;src/main.c:765: for (i = 1; i < cursor.height; i++)
      000D11 04                    2794 	inc	b
      000D12 18 EA                 2795 	jr	00109$
      000D14                       2796 00101$:
                                   2797 ;src/main.c:767: Card *stack = cursor.height ? top->next_card : top;
      000D14 79                    2798 	ld	a, c
      000D15 B7                    2799 	or	a, a
      000D16 28 0E                 2800 	jr	Z, 00113$
      000D18 F8 05                 2801 	ldhl	sp,#5
      000D1A 2A                    2802 	ld	a, (hl+)
      000D1B 5F                    2803 	ld	e, a
      000D1C 56                    2804 	ld	d, (hl)
      000D1D 1A                    2805 	ld	a, (de)
      000D1E F8 00                 2806 	ldhl	sp,	#0
      000D20 22                    2807 	ld	(hl+), a
      000D21 13                    2808 	inc	de
      000D22 1A                    2809 	ld	a, (de)
      000D23 77                    2810 	ld	(hl), a
      000D24 18 08                 2811 	jr	00114$
      000D26                       2812 00113$:
      000D26 F8 05                 2813 	ldhl	sp,	#5
      000D28 2A                    2814 	ld	a, (hl+)
      000D29 5E                    2815 	ld	e, (hl)
      000D2A F8 00                 2816 	ldhl	sp,	#0
      000D2C 22                    2817 	ld	(hl+), a
      000D2D 73                    2818 	ld	(hl), e
      000D2E                       2819 00114$:
      000D2E C1                    2820 	pop	bc
      000D2F C5                    2821 	push	bc
                                   2822 ;src/main.c:768: if (!(VISIBLE(stack->data) && is_stack_coherent(stack)))
      000D30 59                    2823 	ld	e, c
      000D31 50                    2824 	ld	d, b
      000D32 13                    2825 	inc	de
      000D33 13                    2826 	inc	de
      000D34 1A                    2827 	ld	a, (de)
      000D35 CB 77                 2828 	bit	6, a
      000D37 28 76                 2829 	jr	Z, 00111$
      000D39 C5                    2830 	push	bc
      000D3A C5                    2831 	push	bc
      000D3B CDr89r12              2832 	call	_is_stack_coherent
      000D3E E8 02                 2833 	add	sp, #2
      000D40 7B                    2834 	ld	a, e
      000D41 C1                    2835 	pop	bc
      000D42 B7                    2836 	or	a, a
                                   2837 ;src/main.c:769: return;
      000D43 28 6A                 2838 	jr	Z, 00111$
                                   2839 ;src/main.c:771: cursor.held_card = stack;
      000D45 21r87r01              2840 	ld	hl, #_cursor
      000D48 79                    2841 	ld	a, c
      000D49 22                    2842 	ld	(hl+), a
      000D4A 70                    2843 	ld	(hl), b
                                   2844 ;src/main.c:772: cursor.hand_pile_idx = cursor.pile_idx;
      000D4B 01r8Cr01              2845 	ld	bc, #_cursor + 5
      000D4E FAr8Dr01              2846 	ld	a, (#(_cursor + 0x0006) + 0)
      000D51 02                    2847 	ld	(bc), a
                                   2848 ;src/main.c:773: cursor.held_stack_size = pile->height - cursor.height;
                                   2849 ;c
      000D52 F8 02                 2850 	ldhl	sp,#2
      000D54 2A                    2851 	ld	a, (hl+)
      000D55 5F                    2852 	ld	e, a
      000D56 56                    2853 	ld	d, (hl)
      000D57 21 04 00              2854 	ld	hl, #0x0004
      000D5A 19                    2855 	add	hl, de
      000D5B 4D                    2856 	ld	c, l
      000D5C 44                    2857 	ld	b, h
      000D5D 0A                    2858 	ld	a, (bc)
      000D5E 21r8Er01              2859 	ld	hl, #(_cursor + 0x0007)
      000D61 6E                    2860 	ld	l, (hl)
      000D62 95                    2861 	sub	a, l
      000D63 EAr8Br01              2862 	ld	(#(_cursor + 0x0004)),a
                                   2863 ;src/main.c:774: pile->height = cursor.height;
      000D66 FAr8Er01              2864 	ld	a, (#(_cursor + 0x0007) + 0)
      000D69 02                    2865 	ld	(bc), a
                                   2866 ;src/main.c:775: flags |= FLAG_REDRAW_HAND;
      000D6A 21r6Br01              2867 	ld	hl, #_flags
      000D6D 7E                    2868 	ld	a, (hl)
      000D6E F6 02                 2869 	or	a, #0x02
      000D70 77                    2870 	ld	(hl), a
                                   2871 ;src/main.c:776: if (cursor.height) {
      000D71 FAr8Er01              2872 	ld	a, (#(_cursor + 0x0007) + 0)
      000D74 F8 04                 2873 	ldhl	sp,	#4
      000D76 77                    2874 	ld	(hl), a
                                   2875 ;src/main.c:777: pile->top = top;
      000D77 F8 02                 2876 	ldhl	sp,#2
      000D79 2A                    2877 	ld	a, (hl+)
      000D7A 4F                    2878 	ld	c, a
      000D7B 46                    2879 	ld	b, (hl)
      000D7C 03                    2880 	inc	bc
      000D7D 03                    2881 	inc	bc
                                   2882 ;src/main.c:779: cursor.card_to_show = top;
                                   2883 ;src/main.c:776: if (cursor.height) {
      000D7E 23                    2884 	inc	hl
      000D7F 7E                    2885 	ld	a, (hl)
      000D80 B7                    2886 	or	a, a
      000D81 28 1A                 2887 	jr	Z, 00106$
                                   2888 ;src/main.c:777: pile->top = top;
      000D83 23                    2889 	inc	hl
      000D84 2A                    2890 	ld	a, (hl+)
      000D85 02                    2891 	ld	(bc), a
      000D86 03                    2892 	inc	bc
      000D87 7E                    2893 	ld	a, (hl)
      000D88 02                    2894 	ld	(bc), a
                                   2895 ;src/main.c:778: top->next_card = NULL;
      000D89 2B                    2896 	dec	hl
      000D8A 2A                    2897 	ld	a, (hl+)
      000D8B 66                    2898 	ld	h, (hl)
      000D8C 6F                    2899 	ld	l, a
      000D8D AF                    2900 	xor	a, a
      000D8E 22                    2901 	ld	(hl+), a
      000D8F 77                    2902 	ld	(hl), a
                                   2903 ;src/main.c:779: cursor.card_to_show = top;
      000D90 11r89r01              2904 	ld	de, #(_cursor + 0x0002)
      000D93 F8 05                 2905 	ldhl	sp,	#5
      000D95 7E                    2906 	ld	a, (hl)
      000D96 12                    2907 	ld	(de), a
      000D97 13                    2908 	inc	de
      000D98 23                    2909 	inc	hl
      000D99 7E                    2910 	ld	a, (hl)
      000D9A 12                    2911 	ld	(de), a
      000D9B 18 12                 2912 	jr	00111$
      000D9D                       2913 00106$:
                                   2914 ;src/main.c:781: pile->base = NULL;
      000D9D F8 02                 2915 	ldhl	sp,	#2
      000D9F 2A                    2916 	ld	a, (hl+)
      000DA0 66                    2917 	ld	h, (hl)
      000DA1 6F                    2918 	ld	l, a
      000DA2 AF                    2919 	xor	a, a
      000DA3 22                    2920 	ld	(hl+), a
      000DA4 77                    2921 	ld	(hl), a
                                   2922 ;src/main.c:782: pile->top = NULL;
      000DA5 AF                    2923 	xor	a, a
      000DA6 02                    2924 	ld	(bc), a
      000DA7 03                    2925 	inc	bc
      000DA8 02                    2926 	ld	(bc), a
                                   2927 ;src/main.c:783: cursor.card_to_show = NULL;
      000DA9 21r89r01              2928 	ld	hl, #(_cursor + 0x0002)
      000DAC AF                    2929 	xor	a, a
      000DAD 22                    2930 	ld	(hl+), a
      000DAE 77                    2931 	ld	(hl), a
      000DAF                       2932 00111$:
                                   2933 ;src/main.c:785: }
      000DAF E8 07                 2934 	add	sp, #7
      000DB1 C9                    2935 	ret
                                   2936 ;src/main.c:787: inline void cursor_place_stack(void)
                                   2937 ;	---------------------------------
                                   2938 ; Function cursor_place_stack
                                   2939 ; ---------------------------------
      000DB2                       2940 _cursor_place_stack::
      000DB2 E8 FE                 2941 	add	sp, #-2
                                   2942 ;src/main.c:789: Pile *pile = IDX_PTR(piles, cursor.hand_pile_idx);
      000DB4 01r38r01              2943 	ld	bc, #_piles+0
      000DB7 FAr8Cr01              2944 	ld	a, (#(_cursor + 0x0005) + 0)
      000DBA F8 01                 2945 	ldhl	sp,	#1
      000DBC 77                    2946 	ld	(hl), a
      000DBD F8 01                 2947 	ldhl	sp,	#1
      000DBF 5E                    2948 	ld	e, (hl)
      000DC0 16 00                 2949 	ld	d, #0x00
      000DC2 6B                    2950 	ld	l, e
      000DC3 62                    2951 	ld	h, d
      000DC4 29                    2952 	add	hl, hl
      000DC5 29                    2953 	add	hl, hl
      000DC6 19                    2954 	add	hl, de
      000DC7 09                    2955 	add	hl, bc
      000DC8 4D                    2956 	ld	c, l
      000DC9 44                    2957 	ld	b, h
                                   2958 ;src/main.c:790: if (cursor.hand_pile_idx == cursor.pile_idx) {
      000DCA 21r8Dr01              2959 	ld	hl, #_cursor + 6
      000DCD 5E                    2960 	ld	e, (hl)
      000DCE F8 01                 2961 	ldhl	sp,	#1
      000DD0 7E                    2962 	ld	a, (hl)
      000DD1 93                    2963 	sub	a, e
      000DD2 20 08                 2964 	jr	NZ, 00105$
                                   2965 ;src/main.c:791: pile_append_cursor_stack(pile);
      000DD4 C5                    2966 	push	bc
      000DD5 CDr4Dr13              2967 	call	_pile_append_cursor_stack
      000DD8 E8 02                 2968 	add	sp, #2
      000DDA 18 46                 2969 	jr	00107$
      000DDC                       2970 00105$:
                                   2971 ;src/main.c:792: } else if (!pile->height
      000DDC 21 04 00              2972 	ld	hl, #0x0004
      000DDF 09                    2973 	add	hl, bc
      000DE0 7E                    2974 	ld	a, (hl)
      000DE1 B7                    2975 	or	a, a
      000DE2 28 2C                 2976 	jr	Z, 00101$
                                   2977 ;src/main.c:793: || RANK(pile->top->data) == RANK(cursor.held_card->data) + 1u) {
      000DE4 69                    2978 	ld	l, c
      000DE5 60                    2979 	ld	h, b
      000DE6 23                    2980 	inc	hl
      000DE7 23                    2981 	inc	hl
      000DE8 2A                    2982 	ld	a, (hl+)
      000DE9 66                    2983 	ld	h, (hl)
      000DEA 6F                    2984 	ld	l, a
      000DEB 23                    2985 	inc	hl
      000DEC 23                    2986 	inc	hl
      000DED 7E                    2987 	ld	a, (hl)
      000DEE E6 0F                 2988 	and	a, #0x0f
      000DF0 F8 00                 2989 	ldhl	sp,	#0
      000DF2 77                    2990 	ld	(hl), a
      000DF3 AF                    2991 	xor	a, a
      000DF4 23                    2992 	inc	hl
      000DF5 77                    2993 	ld	(hl), a
      000DF6 21r87r01              2994 	ld	hl, #_cursor
      000DF9 2A                    2995 	ld	a, (hl+)
      000DFA 66                    2996 	ld	h, (hl)
      000DFB 6F                    2997 	ld	l, a
      000DFC 23                    2998 	inc	hl
      000DFD 23                    2999 	inc	hl
      000DFE 7E                    3000 	ld	a, (hl)
      000DFF E6 0F                 3001 	and	a, #0x0f
      000E01 16 00                 3002 	ld	d, #0x00
      000E03 5F                    3003 	ld	e, a
      000E04 13                    3004 	inc	de
      000E05 F8 00                 3005 	ldhl	sp,	#0
      000E07 7E                    3006 	ld	a, (hl)
      000E08 93                    3007 	sub	a, e
      000E09 20 17                 3008 	jr	NZ, 00107$
      000E0B 23                    3009 	inc	hl
      000E0C 7E                    3010 	ld	a, (hl)
      000E0D 92                    3011 	sub	a, d
      000E0E 20 12                 3012 	jr	NZ, 00107$
      000E10                       3013 00101$:
                                   3014 ;src/main.c:794: pile_append_cursor_stack(pile);
      000E10 C5                    3015 	push	bc
      000E11 CDr4Dr13              3016 	call	_pile_append_cursor_stack
      000E14 E8 02                 3017 	add	sp, #2
                                   3018 ;src/main.c:795: score--;
      000E16 21r6Fr01              3019 	ld	hl, #_score + 1
      000E19 2B                    3020 	dec	hl
      000E1A 2A                    3021 	ld	a, (hl+)
      000E1B 5F                    3022 	ld	e, a
      000E1C 56                    3023 	ld	d, (hl)
      000E1D 1B                    3024 	dec	de
      000E1E 2B                    3025 	dec	hl
      000E1F 7B                    3026 	ld	a, e
      000E20 22                    3027 	ld	(hl+), a
      000E21 72                    3028 	ld	(hl), d
      000E22                       3029 00107$:
                                   3030 ;src/main.c:797: }
      000E22 E8 02                 3031 	add	sp, #2
      000E24 C9                    3032 	ret
                                   3033 ;src/main.c:799: void set_cursor_setting(void)
                                   3034 ;	---------------------------------
                                   3035 ; Function set_cursor_setting
                                   3036 ; ---------------------------------
      000E25                       3037 _set_cursor_setting::
                                   3038 ;src/main.c:801: switch (cursor.pile_idx) {
      000E25 21r8Dr01              3039 	ld	hl, #_cursor + 6
      000E28 4E                    3040 	ld	c, (hl)
                                   3041 ;src/main.c:804: settings |= cursor.height;
      000E29 11r8Er01              3042 	ld	de, #_cursor + 7
                                   3043 ;src/main.c:801: switch (cursor.pile_idx) {
      000E2C 79                    3044 	ld	a, c
      000E2D B7                    3045 	or	a, a
      000E2E 28 0F                 3046 	jr	Z, 00101$
      000E30 79                    3047 	ld	a, c
      000E31 3D                    3048 	dec	a
      000E32 28 18                 3049 	jr	Z, 00102$
      000E34 79                    3050 	ld	a,c
      000E35 FE 02                 3051 	cp	a,#0x02
      000E37 28 29                 3052 	jr	Z, 00103$
      000E39 D6 03                 3053 	sub	a, #0x03
      000E3B CAr34r15              3054 	jp	Z,_start_game
      000E3E C9                    3055 	ret
                                   3056 ;src/main.c:802: case 0u:
      000E3F                       3057 00101$:
                                   3058 ;src/main.c:803: settings &= ~BITMASK_SETTING_NUM_SUITS;
      000E3F 21r6Cr01              3059 	ld	hl, #_settings
      000E42 7E                    3060 	ld	a, (hl)
      000E43 E6 FC                 3061 	and	a, #0xfc
      000E45 77                    3062 	ld	(hl), a
                                   3063 ;src/main.c:804: settings |= cursor.height;
      000E46 1A                    3064 	ld	a, (de)
      000E47 B6                    3065 	or	a, (hl)
      000E48 77                    3066 	ld	(hl), a
                                   3067 ;src/main.c:805: draw_setting_frame_metasprites();
                                   3068 ;src/main.c:806: break;
      000E49 C3r88r05              3069 	jp  _draw_setting_frame_metasprites
                                   3070 ;src/main.c:807: case 1u:
      000E4C                       3071 00102$:
                                   3072 ;src/main.c:808: settings &= ~BITMASK_SETTING_MUSIC;
      000E4C 21r6Cr01              3073 	ld	hl, #_settings
      000E4F 7E                    3074 	ld	a, (hl)
      000E50 E6 EF                 3075 	and	a, #0xef
      000E52 77                    3076 	ld	(hl), a
                                   3077 ;src/main.c:809: settings |= !cursor.height << BIT_OFFSET_SETTING_MUSIC;
      000E53 1A                    3078 	ld	a, (de)
      000E54 D6 01                 3079 	sub	a,#0x01
      000E56 3E 00                 3080 	ld	a, #0x00
      000E58 17                    3081 	rla
      000E59 CB 37                 3082 	swap	a
      000E5B E6 F0                 3083 	and	a, #0xf0
      000E5D B6                    3084 	or	a, (hl)
      000E5E 77                    3085 	ld	(hl), a
                                   3086 ;src/main.c:810: draw_setting_frame_metasprites();
                                   3087 ;src/main.c:811: break;
      000E5F C3r88r05              3088 	jp  _draw_setting_frame_metasprites
                                   3089 ;src/main.c:812: case 2u:
      000E62                       3090 00103$:
                                   3091 ;src/main.c:813: settings &= ~BITMASK_SETTING_ANIMATION_SPEED;
      000E62 21r6Cr01              3092 	ld	hl, #_settings
      000E65 7E                    3093 	ld	a, (hl)
      000E66 E6 F3                 3094 	and	a, #0xf3
      000E68 77                    3095 	ld	(hl), a
                                   3096 ;src/main.c:814: settings |= cursor.height << BIT_OFFSET_SETTING_ANIMATION_SPEED;
      000E69 1A                    3097 	ld	a, (de)
      000E6A 87                    3098 	add	a, a
      000E6B 87                    3099 	add	a, a
      000E6C B6                    3100 	or	a, (hl)
      000E6D 77                    3101 	ld	(hl), a
                                   3102 ;src/main.c:815: draw_setting_frame_metasprites();
                                   3103 ;src/main.c:816: break;
                                   3104 ;src/main.c:817: case 3u:
                                   3105 ;src/main.c:818: start_game();
                                   3106 ;src/main.c:820: }
                                   3107 ;src/main.c:821: }
      000E6E C3r88r05              3108 	jp	_draw_setting_frame_metasprites
                                   3109 ;src/main.c:823: inline void cursor_process(void)
                                   3110 ;	---------------------------------
                                   3111 ; Function cursor_process
                                   3112 ; ---------------------------------
      000E71                       3113 _cursor_process::
      000E71 E8 FA                 3114 	add	sp, #-6
                                   3115 ;src/main.c:825: switch (flags & FLAG_GAME_STATE) {
      000E73 FAr6Br01              3116 	ld	a, (#_flags)
      000E76 E6 18                 3117 	and	a, #0x18
      000E78 4F                    3118 	ld	c, a
      000E79 06 00                 3119 	ld	b, #0x00
      000E7B 79                    3120 	ld	a, c
      000E7C B7                    3121 	or	a, a
      000E7D B0                    3122 	or	a, b
      000E7E CAr61r10              3123 	jp	Z,00127$
                                   3124 ;src/main.c:827: return;
      000E81 18 00                 3125 	jr	00102$
                                   3126 ;src/main.c:828: }
      000E83                       3127 00102$:
                                   3128 ;src/main.c:829: cursor.anim_ctr++;
      000E83 21r8Fr01              3129 	ld	hl, #_cursor + 8
      000E86 46                    3130 	ld	b, (hl)
      000E87 04                    3131 	inc	b
      000E88 70                    3132 	ld	(hl), b
                                   3133 ;src/main.c:830: cursor.anim_ctr &= (1u << (CURSOR_PERIOD_LOGSCALE + 1u)) - 1u;
      000E89 CB B8                 3134 	res	7, b
      000E8B 70                    3135 	ld	(hl), b
                                   3136 ;src/main.c:831: UINT8 prev_anim_frame = cursor.anim_frame;
      000E8C 21r90r01              3137 	ld	hl, #(_cursor + 0x0009)
      000E8F 4E                    3138 	ld	c, (hl)
                                   3139 ;src/main.c:832: cursor.anim_frame = cursor.anim_ctr >> CURSOR_PERIOD_LOGSCALE;
      000E90 78                    3140 	ld	a, b
      000E91 07                    3141 	rlca
      000E92 07                    3142 	rlca
      000E93 E6 03                 3143 	and	a, #0x03
      000E95 EAr90r01              3144 	ld	(#(_cursor + 0x0009)),a
                                   3145 ;src/main.c:833: if (cursor.anim_frame != prev_anim_frame)
      000E98 91                    3146 	sub	a, c
      000E99 28 07                 3147 	jr	Z, 00104$
                                   3148 ;src/main.c:834: flags |= FLAG_REDRAW_CURSOR;
      000E9B 21r6Br01              3149 	ld	hl, #_flags
      000E9E 7E                    3150 	ld	a, (hl)
      000E9F F6 01                 3151 	or	a, #0x01
      000EA1 77                    3152 	ld	(hl), a
      000EA2                       3153 00104$:
                                   3154 ;src/main.c:836: if (flags & FLAG_REDRAW_CURSOR) {
      000EA2 FAr6Br01              3155 	ld	a, (#_flags)
      000EA5 0F                    3156 	rrca
      000EA6 D2r03r10              3157 	jp	NC,00115$
                                   3158 ;src/main.c:837: flags &= ~FLAG_REDRAW_CURSOR;
      000EA9 21r6Br01              3159 	ld	hl, #_flags
      000EAC 7E                    3160 	ld	a, (hl)
      000EAD E6 FE                 3161 	and	a, #0xfe
      000EAF 77                    3162 	ld	(hl), a
                                   3163 ;src/main.c:838: switch (flags & FLAG_GAME_STATE) {
      000EB0 7E                    3164 	ld	a, (hl)
      000EB1 E6 18                 3165 	and	a, #0x18
      000EB3 47                    3166 	ld	b, a
      000EB4 0E 00                 3167 	ld	c, #0x00
      000EB6 78                    3168 	ld	a, b
      000EB7 D6 08                 3169 	sub	a, #0x08
      000EB9 B1                    3170 	or	a, c
      000EBA 28 74                 3171 	jr	Z, 00106$
                                   3172 ;src/main.c:844: SETTINGS_PAD_Y * 8u + cursor.pile_idx * 32u
                                   3173 ;src/main.c:843: cursor.height * 16u + SETTINGS_SPLIT_X * 8u,
                                   3174 ;src/main.c:838: switch (flags & FLAG_GAME_STATE) {
      000EBC 78                    3175 	ld	a, b
      000EBD D6 10                 3176 	sub	a, #0x10
      000EBF B1                    3177 	or	a, c
      000EC0 CAr77r0F              3178 	jp	Z,00109$
      000EC3 78                    3179 	ld	a, b
      000EC4 D6 18                 3180 	sub	a, #0x18
      000EC6 B1                    3181 	or	a, c
      000EC7 C2r03r10              3182 	jp	NZ,00115$
                                   3183 ;src/main.c:844: SETTINGS_PAD_Y * 8u + cursor.pile_idx * 32u
      000ECA FAr8Dr01              3184 	ld	a, (#(_cursor + 0x0006) + 0)
      000ECD CB 37                 3185 	swap	a
      000ECF 07                    3186 	rlca
      000ED0 E6 E0                 3187 	and	a, #0xe0
      000ED2 C6 08                 3188 	add	a, #0x08
      000ED4 F8 02                 3189 	ldhl	sp,	#2
      000ED6 77                    3190 	ld	(hl), a
                                   3191 ;src/main.c:843: cursor.height * 16u + SETTINGS_SPLIT_X * 8u,
      000ED7 FAr8Er01              3192 	ld	a, (#(_cursor + 0x0007) + 0)
      000EDA CB 37                 3193 	swap	a
      000EDC E6 F0                 3194 	and	a, #0xf0
      000EDE C6 50                 3195 	add	a, #0x50
      000EE0 23                    3196 	inc	hl
      000EE1 77                    3197 	ld	(hl), a
                                   3198 ;src/main.c:840: move_metasprite(cursor_metasprites[cursor.anim_frame],
      000EE2 FAr90r01              3199 	ld	a, (#(_cursor + 0x0009) + 0)
      000EE5 23                    3200 	inc	hl
      000EE6 77                    3201 	ld	(hl), a
      000EE7 AF                    3202 	xor	a, a
      000EE8 23                    3203 	inc	hl
      000EE9 32                    3204 	ld	(hl-), a
      000EEA 7E                    3205 	ld	a, (hl)
      000EEB F8 00                 3206 	ldhl	sp,	#0
      000EED 77                    3207 	ld	(hl), a
      000EEE F8 05                 3208 	ldhl	sp,	#5
      000EF0 7E                    3209 	ld	a, (hl)
      000EF1 F8 01                 3210 	ldhl	sp,	#1
      000EF3 32                    3211 	ld	(hl-), a
      000EF4 CB 26                 3212 	sla	(hl)
      000EF6 23                    3213 	inc	hl
      000EF7 CB 16                 3214 	rl	(hl)
                                   3215 ;c
      000EF9 11r00r00              3216 	ld	de, #_cursor_metasprites
      000EFC E1                    3217 	pop	hl
      000EFD E5                    3218 	push	hl
      000EFE 19                    3219 	add	hl, de
      000EFF E5                    3220 	push	hl
      000F00 7D                    3221 	ld	a, l
      000F01 F8 06                 3222 	ldhl	sp,	#6
      000F03 77                    3223 	ld	(hl), a
      000F04 E1                    3224 	pop	hl
      000F05 7C                    3225 	ld	a, h
      000F06 F8 05                 3226 	ldhl	sp,	#5
      000F08 32                    3227 	ld	(hl-), a
      000F09 2A                    3228 	ld	a, (hl+)
      000F0A 5F                    3229 	ld	e, a
      000F0B 56                    3230 	ld	d, (hl)
      000F0C 1A                    3231 	ld	a, (de)
      000F0D 2B                    3232 	dec	hl
      000F0E 22                    3233 	ld	(hl+), a
      000F0F 13                    3234 	inc	de
      000F10 1A                    3235 	ld	a, (de)
                                   3236 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      000F11 32                    3237 	ld	(hl-), a
      000F12 2A                    3238 	ld	a, (hl+)
      000F13 5E                    3239 	ld	e, (hl)
      000F14 21r00r00              3240 	ld	hl, #___current_metasprite
      000F17 22                    3241 	ld	(hl+), a
      000F18 73                    3242 	ld	(hl), e
                                   3243 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      000F19 21r00r00              3244 	ld	hl, #___current_base_tile
      000F1C 36 01                 3245 	ld	(hl), #0x01
                                   3246 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      000F1E F8 02                 3247 	ldhl	sp,	#2
      000F20 7E                    3248 	ld	a, (hl)
      000F21 F5                    3249 	push	af
      000F22 33                    3250 	inc	sp
      000F23 23                    3251 	inc	hl
      000F24 56                    3252 	ld	d, (hl)
      000F25 1E 0C                 3253 	ld	e,#0x0c
      000F27 D5                    3254 	push	de
      000F28 CDr00r00              3255 	call	___move_metasprite
      000F2B E8 03                 3256 	add	sp, #3
                                   3257 ;src/main.c:846: break;
      000F2D C3r03r10              3258 	jp	00115$
                                   3259 ;src/main.c:847: case FLAG_GAME_STATE_LEADERBOARD:
      000F30                       3260 00106$:
                                   3261 ;src/main.c:848: if (selected_leaderboard) {
      000F30 21r71r01              3262 	ld	hl, #_selected_leaderboard + 1
      000F33 3A                    3263 	ld	a, (hl-)
      000F34 B6                    3264 	or	a, (hl)
      000F35 CAr03r10              3265 	jp	Z, 00115$
                                   3266 ;src/main.c:849: set_sprite_tile(SPRITE_FRAME, OFFSET_SPRITE_CURSOR + OFFSET_CURSOR_UNDERLINE + cursor.anim_frame);
      000F38 FAr90r01              3267 	ld	a, (#(_cursor + 0x0009) + 0)
      000F3B C6 09                 3268 	add	a, #0x09
      000F3D F8 05                 3269 	ldhl	sp,	#5
      000F3F 77                    3270 	ld	(hl), a
                                   3271 ;/home/wojtek/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      000F40 11r32r00              3272 	ld	de, #(_shadow_OAM + 0x0032)
      000F43 7E                    3273 	ld	a, (hl)
      000F44 12                    3274 	ld	(de), a
                                   3275 ;src/main.c:850: move_sprite(SPRITE_FRAME, (LEADERBOARD_NAME_X + 1u) * 8u + cursor.pile_idx * 8u, 16u + cursor.height * 8u);
      000F45 FAr8Er01              3276 	ld	a, (#(_cursor + 0x0007) + 0)
      000F48 F8 05                 3277 	ldhl	sp,	#5
      000F4A 77                    3278 	ld	(hl), a
      000F4B F8 05                 3279 	ldhl	sp,	#5
      000F4D 7E                    3280 	ld	a, (hl)
      000F4E 87                    3281 	add	a, a
      000F4F 87                    3282 	add	a, a
      000F50 87                    3283 	add	a, a
      000F51 77                    3284 	ld	(hl), a
      000F52 7E                    3285 	ld	a, (hl)
      000F53 C6 10                 3286 	add	a, #0x10
      000F55 2B                    3287 	dec	hl
      000F56 77                    3288 	ld	(hl), a
      000F57 FAr8Dr01              3289 	ld	a, (#(_cursor + 0x0006) + 0)
      000F5A F8 05                 3290 	ldhl	sp,	#5
      000F5C 77                    3291 	ld	(hl), a
      000F5D F8 05                 3292 	ldhl	sp,	#5
      000F5F 7E                    3293 	ld	a, (hl)
      000F60 87                    3294 	add	a, a
      000F61 87                    3295 	add	a, a
      000F62 87                    3296 	add	a, a
      000F63 77                    3297 	ld	(hl), a
      000F64 7E                    3298 	ld	a, (hl)
      000F65 C6 48                 3299 	add	a, #0x48
      000F67 77                    3300 	ld	(hl), a
                                   3301 ;/home/wojtek/gbdk/include/gb/gb.h:1218: OAM_item_t * itm = &shadow_OAM[nb];
                                   3302 ;/home/wojtek/gbdk/include/gb/gb.h:1219: itm->y=y, itm->x=x;
      000F68 11r30r00              3303 	ld	de, #(_shadow_OAM + 0x0030)
      000F6B 2B                    3304 	dec	hl
      000F6C 7E                    3305 	ld	a, (hl)
      000F6D 12                    3306 	ld	(de), a
      000F6E 11r31r00              3307 	ld	de, #(_shadow_OAM + 0x0031)
      000F71 23                    3308 	inc	hl
      000F72 7E                    3309 	ld	a, (hl)
      000F73 12                    3310 	ld	(de), a
                                   3311 ;src/main.c:852: break;
      000F74 C3r03r10              3312 	jp	00115$
                                   3313 ;src/main.c:853: case FLAG_GAME_STATE_INGAME:
      000F77                       3314 00109$:
                                   3315 ;src/main.c:854: if (cursor.pile_idx == PILE_IDX_DECK)
      000F77 FAr8Dr01              3316 	ld	a, (#(_cursor + 0x0006) + 0)
      000F7A F8 05                 3317 	ldhl	sp,	#5
      000F7C 77                    3318 	ld	(hl), a
                                   3319 ;src/main.c:831: UINT8 prev_anim_frame = cursor.anim_frame;
      000F7D FAr90r01              3320 	ld	a, (#(_cursor + 0x0009) + 0)
                                   3321 ;src/main.c:855: move_metasprite(cursor_metasprites[cursor.anim_frame],
      000F80 0E 00                 3322 	ld	c, #0x00
      000F82 87                    3323 	add	a, a
      000F83 CB 11                 3324 	rl	c
      000F85 F8 02                 3325 	ldhl	sp,	#2
      000F87 22                    3326 	ld	(hl+), a
                                   3327 ;src/main.c:854: if (cursor.pile_idx == PILE_IDX_DECK)
      000F88 79                    3328 	ld	a, c
      000F89 22                    3329 	ld	(hl+), a
      000F8A 23                    3330 	inc	hl
      000F8B 7E                    3331 	ld	a, (hl)
      000F8C D6 0A                 3332 	sub	a, #0x0a
      000F8E 20 37                 3333 	jr	NZ, 00111$
                                   3334 ;src/main.c:855: move_metasprite(cursor_metasprites[cursor.anim_frame],
                                   3335 ;c
      000F90 11r00r00              3336 	ld	de, #_cursor_metasprites
      000F93 F8 02                 3337 	ldhl	sp,	#2
      000F95 2A                    3338 	ld	a, (hl+)
      000F96 66                    3339 	ld	h, (hl)
      000F97 6F                    3340 	ld	l, a
      000F98 19                    3341 	add	hl, de
      000F99 E5                    3342 	push	hl
      000F9A 7D                    3343 	ld	a, l
      000F9B F8 06                 3344 	ldhl	sp,	#6
      000F9D 77                    3345 	ld	(hl), a
      000F9E E1                    3346 	pop	hl
      000F9F 7C                    3347 	ld	a, h
      000FA0 F8 05                 3348 	ldhl	sp,	#5
      000FA2 32                    3349 	ld	(hl-), a
      000FA3 2A                    3350 	ld	a, (hl+)
      000FA4 5F                    3351 	ld	e, a
      000FA5 56                    3352 	ld	d, (hl)
      000FA6 1A                    3353 	ld	a, (de)
      000FA7 2B                    3354 	dec	hl
      000FA8 22                    3355 	ld	(hl+), a
      000FA9 13                    3356 	inc	de
      000FAA 1A                    3357 	ld	a, (de)
                                   3358 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      000FAB 32                    3359 	ld	(hl-), a
      000FAC 2A                    3360 	ld	a, (hl+)
      000FAD 5E                    3361 	ld	e, (hl)
      000FAE 21r00r00              3362 	ld	hl, #___current_metasprite
      000FB1 22                    3363 	ld	(hl+), a
      000FB2 73                    3364 	ld	(hl), e
                                   3365 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      000FB3 21r00r00              3366 	ld	hl, #___current_base_tile
      000FB6 36 01                 3367 	ld	(hl), #0x01
                                   3368 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      000FB8 AF                    3369 	xor	a, a
      000FB9 F5                    3370 	push	af
      000FBA 33                    3371 	inc	sp
      000FBB AF                    3372 	xor	a, a
      000FBC 57                    3373 	ld	d,a
      000FBD 1E 0C                 3374 	ld	e,#0x0c
      000FBF D5                    3375 	push	de
      000FC0 CDr00r00              3376 	call	___move_metasprite
      000FC3 E8 03                 3377 	add	sp, #3
                                   3378 ;src/main.c:860: );
      000FC5 18 3C                 3379 	jr	00115$
      000FC7                       3380 00111$:
                                   3381 ;src/main.c:866: (cursor.height + 3u) * 8u
      000FC7 FAr8Er01              3382 	ld	a, (#(_cursor + 0x0007) + 0)
      000FCA F8 04                 3383 	ldhl	sp,	#4
      000FCC 77                    3384 	ld	(hl), a
      000FCD F8 04                 3385 	ldhl	sp,	#4
      000FCF 34                    3386 	inc	(hl)
      000FD0 34                    3387 	inc	(hl)
      000FD1 34                    3388 	inc	(hl)
      000FD2 7E                    3389 	ld	a, (hl)
      000FD3 87                    3390 	add	a, a
      000FD4 87                    3391 	add	a, a
      000FD5 87                    3392 	add	a, a
                                   3393 ;src/main.c:865: cursor.pile_idx * 16u,
      000FD6 22                    3394 	ld	(hl+), a
      000FD7 7E                    3395 	ld	a, (hl)
      000FD8 CB 37                 3396 	swap	a
      000FDA E6 F0                 3397 	and	a, #0xf0
      000FDC 77                    3398 	ld	(hl), a
                                   3399 ;src/main.c:862: move_metasprite(cursor_metasprites[cursor.anim_frame],
                                   3400 ;c
      000FDD 11r00r00              3401 	ld	de, #_cursor_metasprites
      000FE0 F8 02                 3402 	ldhl	sp,	#2
      000FE2 2A                    3403 	ld	a, (hl+)
      000FE3 66                    3404 	ld	h, (hl)
      000FE4 6F                    3405 	ld	l, a
      000FE5 19                    3406 	add	hl, de
      000FE6 2A                    3407 	ld	a, (hl+)
      000FE7 4F                    3408 	ld	c, a
      000FE8 46                    3409 	ld	b, (hl)
                                   3410 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      000FE9 21r00r00              3411 	ld	hl, #___current_metasprite
      000FEC 79                    3412 	ld	a, c
      000FED 22                    3413 	ld	(hl+), a
      000FEE 70                    3414 	ld	(hl), b
                                   3415 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      000FEF 21r00r00              3416 	ld	hl, #___current_base_tile
      000FF2 36 01                 3417 	ld	(hl), #0x01
                                   3418 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      000FF4 F8 04                 3419 	ldhl	sp,	#4
      000FF6 7E                    3420 	ld	a, (hl)
      000FF7 F5                    3421 	push	af
      000FF8 33                    3422 	inc	sp
      000FF9 23                    3423 	inc	hl
      000FFA 56                    3424 	ld	d, (hl)
      000FFB 1E 0C                 3425 	ld	e,#0x0c
      000FFD D5                    3426 	push	de
      000FFE CDr00r00              3427 	call	___move_metasprite
      001001 E8 03                 3428 	add	sp, #3
                                   3429 ;src/main.c:869: }
      001003                       3430 00115$:
                                   3431 ;src/main.c:872: if (flags & FLAG_REDRAW_HAND) {
      001003 FAr6Br01              3432 	ld	a, (#_flags)
      001006 CB 4F                 3433 	bit	1, a
      001008 28 57                 3434 	jr	Z, 00127$
                                   3435 ;src/main.c:873: flags &= ~FLAG_REDRAW_HAND;
      00100A 21r6Br01              3436 	ld	hl, #_flags
      00100D 7E                    3437 	ld	a, (hl)
      00100E E6 FD                 3438 	and	a, #0xfd
      001010 77                    3439 	ld	(hl), a
                                   3440 ;src/main.c:874: if (cursor.held_card) {
      001011 21r87r01              3441 	ld	hl, #_cursor
      001014 2A                    3442 	ld	a, (hl+)
      001015 B6                    3443 	or	a,(hl)
      001016 28 41                 3444 	jr	Z, 00117$
                                   3445 ;src/main.c:875: UINT8 height = piles[cursor.hand_pile_idx].height;
      001018 21r8Cr01              3446 	ld	hl, #(_cursor + 0x0005)
      00101B 4E                    3447 	ld	c, (hl)
      00101C 06 00                 3448 	ld	b, #0x00
      00101E 69                    3449 	ld	l, c
      00101F 60                    3450 	ld	h, b
      001020 29                    3451 	add	hl, hl
      001021 29                    3452 	add	hl, hl
      001022 09                    3453 	add	hl, bc
      001023 11r38r01              3454 	ld	de, #_piles
      001026 19                    3455 	add	hl, de
      001027 23                    3456 	inc	hl
      001028 23                    3457 	inc	hl
      001029 23                    3458 	inc	hl
      00102A 23                    3459 	inc	hl
      00102B 5E                    3460 	ld	e, (hl)
                                   3461 ;src/main.c:880: (height + !height + 2u) * 8u
      00102C 7B                    3462 	ld	a, e
      00102D D6 01                 3463 	sub	a,#0x01
      00102F 3E 00                 3464 	ld	a, #0x00
      001031 17                    3465 	rla
      001032 83                    3466 	add	a, e
      001033 C6 02                 3467 	add	a, #0x02
      001035 87                    3468 	add	a, a
      001036 87                    3469 	add	a, a
      001037 87                    3470 	add	a, a
      001038 47                    3471 	ld	b, a
                                   3472 ;src/main.c:879: cursor.hand_pile_idx * 16u,
      001039 79                    3473 	ld	a, c
      00103A CB 37                 3474 	swap	a
      00103C E6 F0                 3475 	and	a, #0xf0
      00103E 57                    3476 	ld	d, a
                                   3477 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      00103F 21r00r00              3478 	ld	hl, #___current_metasprite
      001042 36r00                 3479 	ld	(hl), #<(_metasprite_sequential_2x3)
      001044 23                    3480 	inc	hl
      001045 36s00                 3481 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   3482 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      001047 21r00r00              3483 	ld	hl, #___current_base_tile
      00104A 36 03                 3484 	ld	(hl), #0x03
                                   3485 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      00104C 4A                    3486 	ld	c, d
      00104D C5                    3487 	push	bc
      00104E 3E 06                 3488 	ld	a, #0x06
      001050 F5                    3489 	push	af
      001051 33                    3490 	inc	sp
      001052 CDr00r00              3491 	call	___move_metasprite
      001055 E8 03                 3492 	add	sp, #3
                                   3493 ;src/main.c:881: );
      001057 18 08                 3494 	jr	00127$
      001059                       3495 00117$:
                                   3496 ;src/main.c:883: metasprite_2x3_hide(SPRITE_HAND);
      001059 3E 06                 3497 	ld	a, #0x06
      00105B F5                    3498 	push	af
      00105C 33                    3499 	inc	sp
      00105D CDr28r05              3500 	call	_metasprite_2x3_hide
      001060 33                    3501 	inc	sp
      001061                       3502 00127$:
                                   3503 ;src/main.c:886: }
      001061 E8 06                 3504 	add	sp, #6
      001063 C9                    3505 	ret
                                   3506 ;src/main.c:892: void init_deck(void)
                                   3507 ;	---------------------------------
                                   3508 ; Function init_deck
                                   3509 ; ---------------------------------
      001064                       3510 _init_deck::
      001064 E8 F0                 3511 	add	sp, #-16
                                   3512 ;src/main.c:894: Card *card = IDX_PTR(deck, 0);
      001066 01r00r00              3513 	ld	bc, #_deck
                                   3514 ;src/main.c:900: UINT8 suit_increment = 4u >> NUM_SUITS(settings);
      001069 FAr6Cr01              3515 	ld	a, (#_settings)
      00106C E6 03                 3516 	and	a, #0x03
      00106E 6F                    3517 	ld	l, a
      00106F 11 04 00              3518 	ld	de, #0x0004
      001072 2C                    3519 	inc	l
      001073 18 04                 3520 	jr	00210$
      001075                       3521 00209$:
      001075 CB 3A                 3522 	srl	d
      001077 CB 1B                 3523 	rr	e
      001079                       3524 00210$:
      001079 2D                    3525 	dec	l
      00107A 20 F9                 3526 	jr	NZ, 00209$
      00107C F8 05                 3527 	ldhl	sp,	#5
      00107E 73                    3528 	ld	(hl), e
                                   3529 ;src/main.c:901: UINT8 i_max = suit_increment * 2u;
      00107F 7E                    3530 	ld	a, (hl)
      001080 87                    3531 	add	a, a
      001081 23                    3532 	inc	hl
      001082 77                    3533 	ld	(hl), a
                                   3534 ;src/main.c:902: for (suit = 0; suit < 4u; suit += suit_increment) {
      001083 AF                    3535 	xor	a, a
      001084 F8 0B                 3536 	ldhl	sp,	#11
      001086 77                    3537 	ld	(hl), a
                                   3538 ;src/main.c:903: for (rank = 0; rank < 13u; rank++) {
      001087                       3539 00131$:
      001087 F8 0B                 3540 	ldhl	sp,	#11
      001089 7E                    3541 	ld	a, (hl)
      00108A CB 37                 3542 	swap	a
      00108C E6 F0                 3543 	and	a, #0xf0
      00108E F8 07                 3544 	ldhl	sp,	#7
      001090 77                    3545 	ld	(hl), a
      001091 AF                    3546 	xor	a, a
      001092 F8 0C                 3547 	ldhl	sp,	#12
      001094 77                    3548 	ld	(hl), a
                                   3549 ;src/main.c:904: for (i = 0; i < i_max; i++) {
      001095                       3550 00130$:
      001095 F8 0C                 3551 	ldhl	sp,	#12
      001097 7E                    3552 	ld	a, (hl)
      001098 F8 07                 3553 	ldhl	sp,	#7
      00109A B6                    3554 	or	a, (hl)
      00109B 23                    3555 	inc	hl
      00109C 77                    3556 	ld	(hl), a
      00109D F8 0D                 3557 	ldhl	sp,	#13
      00109F 79                    3558 	ld	a, c
      0010A0 22                    3559 	ld	(hl+), a
      0010A1 70                    3560 	ld	(hl), b
      0010A2 AF                    3561 	xor	a, a
      0010A3 23                    3562 	inc	hl
      0010A4 77                    3563 	ld	(hl), a
      0010A5                       3564 00112$:
      0010A5 F8 0F                 3565 	ldhl	sp,	#15
      0010A7 7E                    3566 	ld	a, (hl)
      0010A8 F8 06                 3567 	ldhl	sp,	#6
      0010AA 96                    3568 	sub	a, (hl)
      0010AB 30 30                 3569 	jr	NC, 00143$
                                   3570 ;src/main.c:905: card->data = rank | (suit << BIT_OFFSET_CARD_SUIT);
                                   3571 ;c
      0010AD F8 0D                 3572 	ldhl	sp,#13
      0010AF 2A                    3573 	ld	a, (hl+)
      0010B0 5F                    3574 	ld	e, a
      0010B1 56                    3575 	ld	d, (hl)
      0010B2 21 02 00              3576 	ld	hl, #0x0002
      0010B5 19                    3577 	add	hl, de
      0010B6 E5                    3578 	push	hl
      0010B7 7D                    3579 	ld	a, l
      0010B8 F8 0B                 3580 	ldhl	sp,	#11
      0010BA 77                    3581 	ld	(hl), a
      0010BB E1                    3582 	pop	hl
      0010BC 7C                    3583 	ld	a, h
      0010BD F8 0A                 3584 	ldhl	sp,	#10
      0010BF 32                    3585 	ld	(hl-), a
      0010C0 2A                    3586 	ld	a, (hl+)
      0010C1 5F                    3587 	ld	e, a
      0010C2 3A                    3588 	ld	a, (hl-)
      0010C3 57                    3589 	ld	d, a
      0010C4 2B                    3590 	dec	hl
      0010C5 7E                    3591 	ld	a, (hl)
      0010C6 12                    3592 	ld	(de), a
                                   3593 ;src/main.c:906: card++;
                                   3594 ;c
      0010C7 F8 0D                 3595 	ldhl	sp,#13
      0010C9 2A                    3596 	ld	a, (hl+)
      0010CA 5F                    3597 	ld	e, a
      0010CB 56                    3598 	ld	d, (hl)
      0010CC 21 03 00              3599 	ld	hl, #0x0003
      0010CF 19                    3600 	add	hl, de
      0010D0 E5                    3601 	push	hl
      0010D1 7D                    3602 	ld	a, l
      0010D2 F8 0F                 3603 	ldhl	sp,	#15
      0010D4 77                    3604 	ld	(hl), a
      0010D5 E1                    3605 	pop	hl
      0010D6 7C                    3606 	ld	a, h
      0010D7 F8 0E                 3607 	ldhl	sp,	#14
                                   3608 ;src/main.c:904: for (i = 0; i < i_max; i++) {
      0010D9 22                    3609 	ld	(hl+), a
      0010DA 34                    3610 	inc	(hl)
      0010DB 18 C8                 3611 	jr	00112$
      0010DD                       3612 00143$:
      0010DD F8 0D                 3613 	ldhl	sp,#13
      0010DF 2A                    3614 	ld	a, (hl+)
      0010E0 4F                    3615 	ld	c, a
                                   3616 ;src/main.c:903: for (rank = 0; rank < 13u; rank++) {
      0010E1 3A                    3617 	ld	a, (hl-)
      0010E2 47                    3618 	ld	b, a
      0010E3 2B                    3619 	dec	hl
      0010E4 34                    3620 	inc	(hl)
      0010E5 7E                    3621 	ld	a, (hl)
      0010E6 D6 0D                 3622 	sub	a, #0x0d
      0010E8 38 AB                 3623 	jr	C, 00130$
                                   3624 ;src/main.c:902: for (suit = 0; suit < 4u; suit += suit_increment) {
      0010EA 2B                    3625 	dec	hl
      0010EB 7E                    3626 	ld	a, (hl)
      0010EC F8 05                 3627 	ldhl	sp,	#5
      0010EE 86                    3628 	add	a, (hl)
      0010EF F8 0B                 3629 	ldhl	sp,	#11
      0010F1 77                    3630 	ld	(hl), a
      0010F2 D6 04                 3631 	sub	a, #0x04
      0010F4 38 91                 3632 	jr	C, 00131$
                                   3633 ;src/main.c:912: card = IDX_PTR(deck, 103u);
      0010F6 23                    3634 	inc	hl
      0010F7 23                    3635 	inc	hl
      0010F8 3Er35                 3636 	ld	a, #<((_deck + 0x0135))
      0010FA 22                    3637 	ld	(hl+), a
      0010FB 36s01                 3638 	ld	(hl), #>((_deck + 0x0135))
                                   3639 ;src/main.c:913: for (i = 103u; i; i--) {
      0010FD F8 02                 3640 	ldhl	sp,	#2
      0010FF 7D                    3641 	ld	a, l
      001100 54                    3642 	ld	d, h
      001101 F8 07                 3643 	ldhl	sp,	#7
      001103 22                    3644 	ld	(hl+), a
      001104 7A                    3645 	ld	a, d
      001105 32                    3646 	ld	(hl-), a
      001106 2A                    3647 	ld	a, (hl+)
      001107 5E                    3648 	ld	e, (hl)
      001108 23                    3649 	inc	hl
      001109 22                    3650 	ld	(hl+), a
      00110A 73                    3651 	ld	(hl), e
      00110B F8 0F                 3652 	ldhl	sp,	#15
      00110D 36 67                 3653 	ld	(hl), #0x67
      00110F                       3654 00118$:
                                   3655 ;src/main.c:914: Card *swap = IDX_PTR(deck, (UINT8)rand() % i);
      00110F CDr00r00              3656 	call	_rand
      001112 7B                    3657 	ld	a, e
      001113 F8 0F                 3658 	ldhl	sp,	#15
      001115 66                    3659 	ld	h, (hl)
      001116 E5                    3660 	push	hl
      001117 33                    3661 	inc	sp
      001118 F5                    3662 	push	af
      001119 33                    3663 	inc	sp
      00111A CDr00r00              3664 	call	__moduchar
      00111D E8 02                 3665 	add	sp, #2
      00111F 4B                    3666 	ld	c, e
      001120 06 00                 3667 	ld	b, #0x00
      001122 69                    3668 	ld	l, c
      001123 60                    3669 	ld	h, b
      001124 29                    3670 	add	hl, hl
      001125 09                    3671 	add	hl, bc
      001126 7D                    3672 	ld	a, l
      001127 C6r00                 3673 	add	a, #<(_deck)
      001129 4F                    3674 	ld	c, a
      00112A 7C                    3675 	ld	a, h
      00112B CEs00                 3676 	adc	a, #>(_deck)
      00112D 47                    3677 	ld	b, a
      00112E F8 0B                 3678 	ldhl	sp,	#11
      001130 79                    3679 	ld	a, c
      001131 22                    3680 	ld	(hl+), a
                                   3681 ;src/main.c:916: temp = *card;
      001132 78                    3682 	ld	a, b
      001133 22                    3683 	ld	(hl+), a
      001134 2A                    3684 	ld	a, (hl+)
      001135 5F                    3685 	ld	e, a
      001136 56                    3686 	ld	d, (hl)
      001137 F8 07                 3687 	ldhl	sp,#7
      001139 2A                    3688 	ld	a, (hl+)
      00113A 4F                    3689 	ld	c, a
      00113B 46                    3690 	ld	b, (hl)
      00113C 21 03 00              3691 	ld	hl, #0x0003
      00113F E5                    3692 	push	hl
      001140 D5                    3693 	push	de
      001141 C5                    3694 	push	bc
      001142 CDr00r00              3695 	call	___memcpy
      001145 E8 06                 3696 	add	sp, #6
                                   3697 ;src/main.c:917: *card = *swap;
      001147 F8 0B                 3698 	ldhl	sp,#11
      001149 2A                    3699 	ld	a, (hl+)
      00114A 5F                    3700 	ld	e, a
      00114B 2A                    3701 	ld	a, (hl+)
      00114C 57                    3702 	ld	d, a
      00114D 2A                    3703 	ld	a, (hl+)
      00114E 4F                    3704 	ld	c, a
      00114F 46                    3705 	ld	b, (hl)
      001150 21 03 00              3706 	ld	hl, #0x0003
      001153 E5                    3707 	push	hl
      001154 D5                    3708 	push	de
      001155 C5                    3709 	push	bc
      001156 CDr00r00              3710 	call	___memcpy
      001159 E8 06                 3711 	add	sp, #6
                                   3712 ;src/main.c:918: *swap = temp;
      00115B F8 09                 3713 	ldhl	sp,#9
      00115D 2A                    3714 	ld	a, (hl+)
      00115E 5F                    3715 	ld	e, a
      00115F 2A                    3716 	ld	a, (hl+)
      001160 57                    3717 	ld	d, a
      001161 2A                    3718 	ld	a, (hl+)
      001162 4F                    3719 	ld	c, a
      001163 46                    3720 	ld	b, (hl)
      001164 21 03 00              3721 	ld	hl, #0x0003
      001167 E5                    3722 	push	hl
      001168 D5                    3723 	push	de
      001169 C5                    3724 	push	bc
      00116A CDr00r00              3725 	call	___memcpy
      00116D E8 06                 3726 	add	sp, #6
                                   3727 ;src/main.c:919: card--;
      00116F F8 0D                 3728 	ldhl	sp,#13
      001171 2A                    3729 	ld	a, (hl+)
      001172 5F                    3730 	ld	e, a
      001173 56                    3731 	ld	d, (hl)
      001174 21 03 00              3732 	ld	hl, #0x0003
      001177 7B                    3733 	ld	a, e
      001178 95                    3734 	sub	a, l
      001179 5F                    3735 	ld	e, a
      00117A 7A                    3736 	ld	a, d
      00117B 9C                    3737 	sbc	a, h
      00117C F8 0E                 3738 	ldhl	sp,	#14
      00117E 32                    3739 	ld	(hl-), a
                                   3740 ;src/main.c:913: for (i = 103u; i; i--) {
      00117F 7B                    3741 	ld	a, e
      001180 22                    3742 	ld	(hl+), a
      001181 23                    3743 	inc	hl
      001182 35                    3744 	dec	(hl)
      001183 20 8A                 3745 	jr	NZ, 00118$
                                   3746 ;src/main.c:923: card = IDX_PTR(deck, 0);
      001185 01r00r00              3747 	ld	bc, #_deck
                                   3748 ;src/main.c:924: for (i = 0; i < 44u; i++) {
      001188 AF                    3749 	xor	a, a
      001189 77                    3750 	ld	(hl), a
      00118A                       3751 00120$:
                                   3752 ;src/main.c:925: card->next_card = IDX_PTR(deck, i + 10u);
      00118A F8 0F                 3753 	ldhl	sp,	#15
      00118C 5E                    3754 	ld	e, (hl)
      00118D 16 00                 3755 	ld	d, #0x00
      00118F 6B                    3756 	ld	l, e
      001190 62                    3757 	ld	h, d
      001191 29                    3758 	add	hl, hl
      001192 19                    3759 	add	hl, de
      001193 11r00r00              3760 	ld	de, #_deck
      001196 19                    3761 	add	hl, de
      001197 11 1E 00              3762 	ld	de, #0x001e
      00119A 19                    3763 	add	hl, de
      00119B 5D                    3764 	ld	e, l
      00119C 54                    3765 	ld	d, h
      00119D 69                    3766 	ld	l, c
      00119E 60                    3767 	ld	h, b
      00119F 7B                    3768 	ld	a, e
      0011A0 22                    3769 	ld	(hl+), a
      0011A1 72                    3770 	ld	(hl), d
                                   3771 ;src/main.c:926: card++;
      0011A2 03                    3772 	inc	bc
      0011A3 03                    3773 	inc	bc
      0011A4 03                    3774 	inc	bc
                                   3775 ;src/main.c:924: for (i = 0; i < 44u; i++) {
      0011A5 F8 0F                 3776 	ldhl	sp,	#15
      0011A7 34                    3777 	inc	(hl)
      0011A8 7E                    3778 	ld	a, (hl)
      0011A9 D6 2C                 3779 	sub	a, #0x2c
      0011AB 38 DD                 3780 	jr	C, 00120$
      0011AD 5E                    3781 	ld	e, (hl)
      0011AE                       3782 00123$:
                                   3783 ;src/main.c:928: for (; i < 104u; i++) {
      0011AE 7B                    3784 	ld	a, e
      0011AF D6 68                 3785 	sub	a, #0x68
      0011B1 30 11                 3786 	jr	NC, 00106$
                                   3787 ;src/main.c:929: card->data |= BITMASK_CARD_VISIBLE;
      0011B3 69                    3788 	ld	l, c
      0011B4 60                    3789 	ld	h, b
      0011B5 23                    3790 	inc	hl
      0011B6 23                    3791 	inc	hl
      0011B7 CB F6                 3792 	set	6, (hl)
                                   3793 ;src/main.c:930: card->next_card = NULL;
      0011B9 69                    3794 	ld	l, c
      0011BA 60                    3795 	ld	h, b
      0011BB AF                    3796 	xor	a, a
      0011BC 22                    3797 	ld	(hl+), a
      0011BD 77                    3798 	ld	(hl), a
                                   3799 ;src/main.c:931: card++;
      0011BE 03                    3800 	inc	bc
      0011BF 03                    3801 	inc	bc
      0011C0 03                    3802 	inc	bc
                                   3803 ;src/main.c:928: for (; i < 104u; i++) {
      0011C1 1C                    3804 	inc	e
      0011C2 18 EA                 3805 	jr	00123$
      0011C4                       3806 00106$:
                                   3807 ;src/main.c:934: card = IDX_PTR(deck, 0);
      0011C4 F8 0B                 3808 	ldhl	sp,	#11
      0011C6 3Er00                 3809 	ld	a, #<(_deck)
      0011C8 22                    3810 	ld	(hl+), a
                                   3811 ;src/main.c:935: Pile *pile = IDX_PTR(piles, 0);
      0011C9 3Es00                 3812 	ld	a, #>(_deck)
      0011CB 22                    3813 	ld	(hl+), a
      0011CC 3Er38                 3814 	ld	a, #<(_piles)
      0011CE 22                    3815 	ld	(hl+), a
      0011CF 36s01                 3816 	ld	(hl), #>(_piles)
                                   3817 ;src/main.c:936: for (i = 0; i < 10; i++) {
      0011D1 AF                    3818 	xor	a, a
      0011D2 23                    3819 	inc	hl
      0011D3 77                    3820 	ld	(hl), a
      0011D4                       3821 00125$:
                                   3822 ;src/main.c:937: pile->base = card;
      0011D4 F8 0D                 3823 	ldhl	sp,#13
      0011D6 2A                    3824 	ld	a, (hl+)
      0011D7 5F                    3825 	ld	e, a
      0011D8 56                    3826 	ld	d, (hl)
      0011D9 F8 0B                 3827 	ldhl	sp,	#11
      0011DB 7E                    3828 	ld	a, (hl)
      0011DC 12                    3829 	ld	(de), a
      0011DD 13                    3830 	inc	de
      0011DE 23                    3831 	inc	hl
      0011DF 7E                    3832 	ld	a, (hl)
      0011E0 12                    3833 	ld	(de), a
                                   3834 ;src/main.c:939: pile->top = IDX_PTR(deck, 50u + i);
                                   3835 ;c
      0011E1 23                    3836 	inc	hl
      0011E2 2A                    3837 	ld	a, (hl+)
      0011E3 5F                    3838 	ld	e, a
      0011E4 56                    3839 	ld	d, (hl)
      0011E5 21 02 00              3840 	ld	hl, #0x0002
      0011E8 19                    3841 	add	hl, de
      0011E9 E5                    3842 	push	hl
      0011EA 7D                    3843 	ld	a, l
      0011EB F8 07                 3844 	ldhl	sp,	#7
      0011ED 77                    3845 	ld	(hl), a
      0011EE E1                    3846 	pop	hl
      0011EF 7C                    3847 	ld	a, h
      0011F0 F8 06                 3848 	ldhl	sp,	#6
      0011F2 77                    3849 	ld	(hl), a
      0011F3 F8 0F                 3850 	ldhl	sp,	#15
      0011F5 4E                    3851 	ld	c, (hl)
      0011F6 06 00                 3852 	ld	b, #0x00
      0011F8 69                    3853 	ld	l, c
      0011F9 60                    3854 	ld	h, b
      0011FA 29                    3855 	add	hl, hl
      0011FB 09                    3856 	add	hl, bc
      0011FC 33                    3857 	inc	sp
      0011FD 33                    3858 	inc	sp
      0011FE E5                    3859 	push	hl
                                   3860 ;src/main.c:940: pile->height = 6u;
                                   3861 ;c
      0011FF F8 0D                 3862 	ldhl	sp,#13
      001201 2A                    3863 	ld	a, (hl+)
      001202 5F                    3864 	ld	e, a
      001203 56                    3865 	ld	d, (hl)
      001204 21 04 00              3866 	ld	hl, #0x0004
      001207 19                    3867 	add	hl, de
      001208 E5                    3868 	push	hl
      001209 7D                    3869 	ld	a, l
      00120A F8 09                 3870 	ldhl	sp,	#9
      00120C 77                    3871 	ld	(hl), a
      00120D E1                    3872 	pop	hl
      00120E 7C                    3873 	ld	a, h
      00120F F8 08                 3874 	ldhl	sp,	#8
      001211 77                    3875 	ld	(hl), a
                                   3876 ;src/main.c:938: if (i < 4u) {
      001212 F8 0F                 3877 	ldhl	sp,	#15
      001214 7E                    3878 	ld	a, (hl)
      001215 D6 04                 3879 	sub	a, #0x04
      001217 30 26                 3880 	jr	NC, 00108$
                                   3881 ;src/main.c:939: pile->top = IDX_PTR(deck, 50u + i);
                                   3882 ;c
      001219 D1                    3883 	pop	de
      00121A D5                    3884 	push	de
      00121B 21r96r00              3885 	ld	hl, #(_deck + 0x0096)
      00121E 19                    3886 	add	hl, de
      00121F E5                    3887 	push	hl
      001220 7D                    3888 	ld	a, l
      001221 F8 0B                 3889 	ldhl	sp,	#11
      001223 77                    3890 	ld	(hl), a
      001224 E1                    3891 	pop	hl
      001225 7C                    3892 	ld	a, h
      001226 F8 0A                 3893 	ldhl	sp,	#10
      001228 77                    3894 	ld	(hl), a
      001229 F8 05                 3895 	ldhl	sp,#5
      00122B 2A                    3896 	ld	a, (hl+)
      00122C 5F                    3897 	ld	e, a
      00122D 56                    3898 	ld	d, (hl)
      00122E F8 09                 3899 	ldhl	sp,	#9
      001230 7E                    3900 	ld	a, (hl)
      001231 12                    3901 	ld	(de), a
      001232 13                    3902 	inc	de
      001233 23                    3903 	inc	hl
      001234 7E                    3904 	ld	a, (hl)
      001235 12                    3905 	ld	(de), a
                                   3906 ;src/main.c:940: pile->height = 6u;
      001236 F8 07                 3907 	ldhl	sp,	#7
      001238 2A                    3908 	ld	a, (hl+)
      001239 66                    3909 	ld	h, (hl)
      00123A 6F                    3910 	ld	l, a
      00123B 36 06                 3911 	ld	(hl), #0x06
      00123D 18 17                 3912 	jr	00109$
      00123F                       3913 00108$:
                                   3914 ;src/main.c:942: pile->top = IDX_PTR(deck, 40u + i);
                                   3915 ;c
      00123F 11r78r00              3916 	ld	de, #(_deck + 0x0078)
      001242 E1                    3917 	pop	hl
      001243 E5                    3918 	push	hl
      001244 19                    3919 	add	hl, de
      001245 4D                    3920 	ld	c, l
      001246 44                    3921 	ld	b, h
      001247 F8 05                 3922 	ldhl	sp,	#5
      001249 2A                    3923 	ld	a, (hl+)
      00124A 66                    3924 	ld	h, (hl)
      00124B 6F                    3925 	ld	l, a
      00124C 79                    3926 	ld	a, c
      00124D 22                    3927 	ld	(hl+), a
      00124E 70                    3928 	ld	(hl), b
                                   3929 ;src/main.c:943: pile->height = 5u;
      00124F F8 07                 3930 	ldhl	sp,	#7
      001251 2A                    3931 	ld	a, (hl+)
      001252 66                    3932 	ld	h, (hl)
      001253 6F                    3933 	ld	l, a
      001254 36 05                 3934 	ld	(hl), #0x05
      001256                       3935 00109$:
                                   3936 ;src/main.c:946: card++;
                                   3937 ;c
      001256 F8 0B                 3938 	ldhl	sp,#11
      001258 2A                    3939 	ld	a, (hl+)
      001259 5F                    3940 	ld	e, a
      00125A 56                    3941 	ld	d, (hl)
      00125B 21 03 00              3942 	ld	hl, #0x0003
      00125E 19                    3943 	add	hl, de
      00125F E5                    3944 	push	hl
      001260 7D                    3945 	ld	a, l
      001261 F8 0D                 3946 	ldhl	sp,	#13
      001263 77                    3947 	ld	(hl), a
      001264 E1                    3948 	pop	hl
      001265 7C                    3949 	ld	a, h
      001266 F8 0C                 3950 	ldhl	sp,	#12
                                   3951 ;src/main.c:947: pile++;
                                   3952 ;c
      001268 22                    3953 	ld	(hl+), a
      001269 2A                    3954 	ld	a, (hl+)
      00126A 5F                    3955 	ld	e, a
      00126B 56                    3956 	ld	d, (hl)
      00126C 21 05 00              3957 	ld	hl, #0x0005
      00126F 19                    3958 	add	hl, de
      001270 E5                    3959 	push	hl
      001271 7D                    3960 	ld	a, l
      001272 F8 0F                 3961 	ldhl	sp,	#15
      001274 77                    3962 	ld	(hl), a
      001275 E1                    3963 	pop	hl
      001276 7C                    3964 	ld	a, h
      001277 F8 0E                 3965 	ldhl	sp,	#14
                                   3966 ;src/main.c:936: for (i = 0; i < 10; i++) {
      001279 22                    3967 	ld	(hl+), a
      00127A 34                    3968 	inc	(hl)
      00127B 7E                    3969 	ld	a, (hl)
      00127C D6 0A                 3970 	sub	a, #0x0a
      00127E DArD4r11              3971 	jp	C, 00125$
                                   3972 ;src/main.c:950: top_card_idx = 54u;
      001281 21r6Ar01              3973 	ld	hl, #_top_card_idx
      001284 36 36                 3974 	ld	(hl), #0x36
                                   3975 ;src/main.c:951: }
      001286 E8 10                 3976 	add	sp, #16
      001288 C9                    3977 	ret
                                   3978 ;src/main.c:953: UINT8 is_stack_coherent(Card *card)
                                   3979 ;	---------------------------------
                                   3980 ; Function is_stack_coherent
                                   3981 ; ---------------------------------
      001289                       3982 _is_stack_coherent::
      001289 E8 FE                 3983 	add	sp, #-2
                                   3984 ;src/main.c:955: while (card->next_card) {
      00128B                       3985 00103$:
      00128B F8 04                 3986 	ldhl	sp,#4
      00128D 2A                    3987 	ld	a, (hl+)
      00128E 4F                    3988 	ld	c, a
      00128F 46                    3989 	ld	b, (hl)
      001290 59                    3990 	ld	e, c
      001291 50                    3991 	ld	d, b
      001292 1A                    3992 	ld	a, (de)
      001293 F8 00                 3993 	ldhl	sp,	#0
      001295 22                    3994 	ld	(hl+), a
      001296 13                    3995 	inc	de
      001297 1A                    3996 	ld	a, (de)
      001298 77                    3997 	ld	(hl), a
      001299 3A                    3998 	ld	a, (hl-)
      00129A B6                    3999 	or	a, (hl)
      00129B 28 27                 4000 	jr	Z, 00105$
                                   4001 ;src/main.c:956: UINT8 prev_data = card->data;
      00129D 03                    4002 	inc	bc
      00129E 03                    4003 	inc	bc
      00129F 78                    4004 	ld	a, b
      0012A0 69                    4005 	ld	l, c
      0012A1 67                    4006 	ld	h, a
      0012A2 4E                    4007 	ld	c, (hl)
                                   4008 ;src/main.c:957: card = card->next_card;
      0012A3 F8 00                 4009 	ldhl	sp,	#0
      0012A5 2A                    4010 	ld	a, (hl+)
      0012A6 5E                    4011 	ld	e, (hl)
      0012A7 F8 04                 4012 	ldhl	sp,	#4
      0012A9 22                    4013 	ld	(hl+), a
                                   4014 ;src/main.c:958: if (prev_data != card->data + 1u)
      0012AA 7B                    4015 	ld	a, e
      0012AB 32                    4016 	ld	(hl-), a
      0012AC 2A                    4017 	ld	a, (hl+)
      0012AD 5F                    4018 	ld	e, a
      0012AE 56                    4019 	ld	d, (hl)
      0012AF 13                    4020 	inc	de
      0012B0 13                    4021 	inc	de
      0012B1 1A                    4022 	ld	a, (de)
      0012B2 5F                    4023 	ld	e, a
      0012B3 16 00                 4024 	ld	d, #0x00
      0012B5 13                    4025 	inc	de
      0012B6 06 00                 4026 	ld	b, #0x00
      0012B8 79                    4027 	ld	a, c
      0012B9 93                    4028 	sub	a, e
      0012BA 20 04                 4029 	jr	NZ, 00123$
      0012BC 78                    4030 	ld	a, b
      0012BD 92                    4031 	sub	a, d
      0012BE 28 CB                 4032 	jr	Z, 00103$
      0012C0                       4033 00123$:
                                   4034 ;src/main.c:959: return 0u;
      0012C0 1E 00                 4035 	ld	e, #0x00
      0012C2 18 02                 4036 	jr	00106$
      0012C4                       4037 00105$:
                                   4038 ;src/main.c:961: return 1u;
      0012C4 1E 01                 4039 	ld	e, #0x01
      0012C6                       4040 00106$:
                                   4041 ;src/main.c:962: }
      0012C6 E8 02                 4042 	add	sp, #2
      0012C8 C9                    4043 	ret
                                   4044 ;src/main.c:964: inline void deal(void)
                                   4045 ;	---------------------------------
                                   4046 ; Function deal
                                   4047 ; ---------------------------------
      0012C9                       4048 _deal::
      0012C9 E8 FB                 4049 	add	sp, #-5
                                   4050 ;src/main.c:967: Pile *pile = IDX_PTR(piles, 0);
      0012CB 01r38r01              4051 	ld	bc, #_piles
                                   4052 ;src/main.c:970: for (i = 0; i < 10u; i++) {
      0012CE 1E 00                 4053 	ld	e, #0x00
      0012D0                       4054 00105$:
                                   4055 ;src/main.c:971: if (!pile->height)
      0012D0 21 04 00              4056 	ld	hl, #0x0004
      0012D3 09                    4057 	add	hl, bc
      0012D4 7E                    4058 	ld	a, (hl)
      0012D5 B7                    4059 	or	a, a
                                   4060 ;src/main.c:972: return;
      0012D6 28 72                 4061 	jr	Z, 00110$
                                   4062 ;src/main.c:973: pile++;
      0012D8 03                    4063 	inc	bc
      0012D9 03                    4064 	inc	bc
      0012DA 03                    4065 	inc	bc
      0012DB 03                    4066 	inc	bc
      0012DC 03                    4067 	inc	bc
                                   4068 ;src/main.c:970: for (i = 0; i < 10u; i++) {
      0012DD 1C                    4069 	inc	e
      0012DE 7B                    4070 	ld	a, e
      0012DF D6 0A                 4071 	sub	a, #0x0a
      0012E1 38 ED                 4072 	jr	C, 00105$
                                   4073 ;src/main.c:976: pile = IDX_PTR(piles, 0);
      0012E3 F8 02                 4074 	ldhl	sp,	#2
      0012E5 3Er38                 4075 	ld	a, #<(_piles)
      0012E7 22                    4076 	ld	(hl+), a
      0012E8 36s01                 4077 	ld	(hl), #>(_piles)
                                   4078 ;src/main.c:977: Card *deck_top = IDX_PTR(deck, top_card_idx);
      0012EA 21r6Ar01              4079 	ld	hl, #_top_card_idx
      0012ED 4E                    4080 	ld	c, (hl)
      0012EE 06 00                 4081 	ld	b, #0x00
      0012F0 69                    4082 	ld	l, c
      0012F1 60                    4083 	ld	h, b
      0012F2 29                    4084 	add	hl, hl
      0012F3 09                    4085 	add	hl, bc
      0012F4 01r00r00              4086 	ld	bc,#_deck
      0012F7 09                    4087 	add	hl,bc
      0012F8 4D                    4088 	ld	c, l
      0012F9 44                    4089 	ld	b, h
                                   4090 ;src/main.c:978: top_card_idx += 10u;
      0012FA 21r6Ar01              4091 	ld	hl, #_top_card_idx
      0012FD 7E                    4092 	ld	a, (hl)
      0012FE C6 0A                 4093 	add	a, #0x0a
      001300 77                    4094 	ld	(hl), a
                                   4095 ;src/main.c:981: for (i = 0; i < 10u; i++) {
      001301 F8 04                 4096 	ldhl	sp,	#4
      001303 36 0A                 4097 	ld	(hl), #0x0a
      001305                       4098 00109$:
                                   4099 ;src/main.c:982: pile->top->next_card = deck_top;
                                   4100 ;c
      001305 F8 02                 4101 	ldhl	sp,#2
      001307 2A                    4102 	ld	a, (hl+)
      001308 5F                    4103 	ld	e, a
      001309 56                    4104 	ld	d, (hl)
      00130A 21 02 00              4105 	ld	hl, #0x0002
      00130D 19                    4106 	add	hl, de
      00130E 33                    4107 	inc	sp
      00130F 33                    4108 	inc	sp
      001310 5D                    4109 	ld	e, l
      001311 54                    4110 	ld	d, h
      001312 D5                    4111 	push	de
      001313 1A                    4112 	ld	a, (de)
      001314 6F                    4113 	ld	l, a
      001315 13                    4114 	inc	de
      001316 1A                    4115 	ld	a, (de)
      001317 67                    4116 	ld	h, a
      001318 79                    4117 	ld	a, c
      001319 22                    4118 	ld	(hl+), a
      00131A 70                    4119 	ld	(hl), b
                                   4120 ;src/main.c:983: pile->top = deck_top;
      00131B E1                    4121 	pop	hl
      00131C E5                    4122 	push	hl
      00131D 79                    4123 	ld	a, c
      00131E 22                    4124 	ld	(hl+), a
      00131F 70                    4125 	ld	(hl), b
                                   4126 ;src/main.c:984: pile->height++;
                                   4127 ;c
      001320 F8 02                 4128 	ldhl	sp,#2
      001322 2A                    4129 	ld	a, (hl+)
      001323 5F                    4130 	ld	e, a
      001324 56                    4131 	ld	d, (hl)
      001325 21 04 00              4132 	ld	hl, #0x0004
      001328 19                    4133 	add	hl, de
      001329 5D                    4134 	ld	e, l
      00132A 54                    4135 	ld	d, h
      00132B 1A                    4136 	ld	a, (de)
      00132C 3C                    4137 	inc	a
      00132D 12                    4138 	ld	(de), a
                                   4139 ;src/main.c:985: deck_top++;
      00132E 03                    4140 	inc	bc
      00132F 03                    4141 	inc	bc
      001330 03                    4142 	inc	bc
                                   4143 ;src/main.c:986: pile++;
                                   4144 ;c
      001331 F8 02                 4145 	ldhl	sp,#2
      001333 2A                    4146 	ld	a, (hl+)
      001334 5F                    4147 	ld	e, a
      001335 56                    4148 	ld	d, (hl)
      001336 21 05 00              4149 	ld	hl, #0x0005
      001339 19                    4150 	add	hl, de
      00133A E5                    4151 	push	hl
      00133B 7D                    4152 	ld	a, l
      00133C F8 04                 4153 	ldhl	sp,	#4
      00133E 77                    4154 	ld	(hl), a
      00133F E1                    4155 	pop	hl
      001340 7C                    4156 	ld	a, h
      001341 F8 03                 4157 	ldhl	sp,	#3
      001343 22                    4158 	ld	(hl+), a
                                   4159 ;src/main.c:981: for (i = 0; i < 10u; i++) {
      001344 35                    4160 	dec	(hl)
      001345 20 BE                 4161 	jr	NZ, 00109$
                                   4162 ;src/main.c:989: dynamic_metasprite_deal();
      001347 CDr7Fr0B              4163 	call	_dynamic_metasprite_deal
      00134A                       4164 00110$:
                                   4165 ;src/main.c:990: }
      00134A E8 05                 4166 	add	sp, #5
      00134C C9                    4167 	ret
                                   4168 ;src/main.c:992: void pile_append_cursor_stack(Pile *pile)
                                   4169 ;	---------------------------------
                                   4170 ; Function pile_append_cursor_stack
                                   4171 ; ---------------------------------
      00134D                       4172 _pile_append_cursor_stack::
      00134D E8 F3                 4173 	add	sp, #-13
                                   4174 ;src/main.c:994: if (pile->height)
      00134F F8 0F                 4175 	ldhl	sp,	#15
      001351 2A                    4176 	ld	a, (hl+)
      001352 5E                    4177 	ld	e, (hl)
      001353 F8 00                 4178 	ldhl	sp,	#0
      001355 22                    4179 	ld	(hl+), a
      001356 73                    4180 	ld	(hl), e
                                   4181 ;c
      001357 D1                    4182 	pop	de
      001358 D5                    4183 	push	de
      001359 21 04 00              4184 	ld	hl, #0x0004
      00135C 19                    4185 	add	hl, de
      00135D E5                    4186 	push	hl
      00135E 7D                    4187 	ld	a, l
      00135F F8 04                 4188 	ldhl	sp,	#4
      001361 77                    4189 	ld	(hl), a
      001362 E1                    4190 	pop	hl
      001363 7C                    4191 	ld	a, h
      001364 F8 03                 4192 	ldhl	sp,	#3
      001366 32                    4193 	ld	(hl-), a
      001367 2A                    4194 	ld	a, (hl+)
      001368 5F                    4195 	ld	e, a
      001369 56                    4196 	ld	d, (hl)
      00136A 1A                    4197 	ld	a, (de)
      00136B F8 0C                 4198 	ldhl	sp,	#12
      00136D 77                    4199 	ld	(hl), a
                                   4200 ;src/main.c:995: pile->top->next_card = cursor.held_card;
                                   4201 ;c
      00136E D1                    4202 	pop	de
      00136F D5                    4203 	push	de
      001370 21 02 00              4204 	ld	hl, #0x0002
      001373 19                    4205 	add	hl, de
      001374 E5                    4206 	push	hl
      001375 7D                    4207 	ld	a, l
      001376 F8 06                 4208 	ldhl	sp,	#6
      001378 77                    4209 	ld	(hl), a
      001379 E1                    4210 	pop	hl
      00137A 7C                    4211 	ld	a, h
      00137B F8 05                 4212 	ldhl	sp,	#5
      00137D 77                    4213 	ld	(hl), a
                                   4214 ;src/main.c:994: if (pile->height)
      00137E F8 0C                 4215 	ldhl	sp,	#12
      001380 7E                    4216 	ld	a, (hl)
      001381 B7                    4217 	or	a, a
      001382 28 1C                 4218 	jr	Z, 00102$
                                   4219 ;src/main.c:995: pile->top->next_card = cursor.held_card;
      001384 F8 04                 4220 	ldhl	sp,#4
      001386 2A                    4221 	ld	a, (hl+)
      001387 5F                    4222 	ld	e, a
      001388 56                    4223 	ld	d, (hl)
      001389 1A                    4224 	ld	a, (de)
      00138A F8 0B                 4225 	ldhl	sp,	#11
      00138C 22                    4226 	ld	(hl+), a
      00138D 13                    4227 	inc	de
      00138E 1A                    4228 	ld	a, (de)
      00138F 77                    4229 	ld	(hl), a
      001390 21r87r01              4230 	ld	hl, #_cursor
      001393 2A                    4231 	ld	a, (hl+)
      001394 4F                    4232 	ld	c, a
      001395 46                    4233 	ld	b, (hl)
      001396 F8 0B                 4234 	ldhl	sp,	#11
      001398 2A                    4235 	ld	a, (hl+)
      001399 66                    4236 	ld	h, (hl)
      00139A 6F                    4237 	ld	l, a
      00139B 79                    4238 	ld	a, c
      00139C 22                    4239 	ld	(hl+), a
      00139D 70                    4240 	ld	(hl), b
      00139E 18 13                 4241 	jr	00103$
      0013A0                       4242 00102$:
                                   4243 ;src/main.c:997: pile->base = cursor.held_card;
      0013A0 11r87r01              4244 	ld	de, #_cursor
      0013A3 1A                    4245 	ld	a, (de)
      0013A4 F8 0B                 4246 	ldhl	sp,	#11
      0013A6 22                    4247 	ld	(hl+), a
      0013A7 13                    4248 	inc	de
      0013A8 1A                    4249 	ld	a, (de)
      0013A9 77                    4250 	ld	(hl), a
      0013AA D1                    4251 	pop	de
      0013AB D5                    4252 	push	de
      0013AC 2B                    4253 	dec	hl
      0013AD 7E                    4254 	ld	a, (hl)
      0013AE 12                    4255 	ld	(de), a
      0013AF 13                    4256 	inc	de
      0013B0 23                    4257 	inc	hl
      0013B1 7E                    4258 	ld	a, (hl)
      0013B2 12                    4259 	ld	(de), a
      0013B3                       4260 00103$:
                                   4261 ;src/main.c:999: Pile *src_pile = IDX_PTR(piles, cursor.pile_idx);
      0013B3 01r38r01              4262 	ld	bc, #_piles+0
      0013B6 FAr8Dr01              4263 	ld	a, (#(_cursor + 0x0006) + 0)
      0013B9 5F                    4264 	ld	e, a
      0013BA 16 00                 4265 	ld	d, #0x00
      0013BC 6B                    4266 	ld	l, e
      0013BD 62                    4267 	ld	h, d
      0013BE 29                    4268 	add	hl, hl
      0013BF 29                    4269 	add	hl, hl
      0013C0 19                    4270 	add	hl, de
      0013C1 09                    4271 	add	hl, bc
      0013C2 4D                    4272 	ld	c, l
      0013C3 7C                    4273 	ld	a, h
      0013C4 F8 06                 4274 	ldhl	sp,	#6
      0013C6 71                    4275 	ld	(hl), c
      0013C7 23                    4276 	inc	hl
      0013C8 77                    4277 	ld	(hl), a
                                   4278 ;src/main.c:1000: Card *top_card = cursor.held_card;
      0013C9 11r87r01              4279 	ld	de, #_cursor
      0013CC 1A                    4280 	ld	a, (de)
      0013CD 23                    4281 	inc	hl
      0013CE 22                    4282 	ld	(hl+), a
      0013CF 13                    4283 	inc	de
      0013D0 1A                    4284 	ld	a, (de)
      0013D1 77                    4285 	ld	(hl), a
                                   4286 ;src/main.c:1001: while (top_card->next_card)
      0013D2                       4287 00104$:
      0013D2 F8 08                 4288 	ldhl	sp,#8
      0013D4 2A                    4289 	ld	a, (hl+)
      0013D5 5F                    4290 	ld	e, a
      0013D6 56                    4291 	ld	d, (hl)
      0013D7 1A                    4292 	ld	a, (de)
      0013D8 23                    4293 	inc	hl
      0013D9 23                    4294 	inc	hl
      0013DA 22                    4295 	ld	(hl+), a
      0013DB 13                    4296 	inc	de
      0013DC 1A                    4297 	ld	a, (de)
      0013DD 77                    4298 	ld	(hl), a
      0013DE 3A                    4299 	ld	a, (hl-)
      0013DF B6                    4300 	or	a, (hl)
      0013E0 28 08                 4301 	jr	Z, 00106$
                                   4302 ;src/main.c:1002: top_card = top_card->next_card;
      0013E2 2A                    4303 	ld	a, (hl+)
      0013E3 5E                    4304 	ld	e, (hl)
      0013E4 F8 08                 4305 	ldhl	sp,	#8
      0013E6 22                    4306 	ld	(hl+), a
      0013E7 73                    4307 	ld	(hl), e
      0013E8 18 E8                 4308 	jr	00104$
      0013EA                       4309 00106$:
                                   4310 ;src/main.c:1003: pile->top = top_card;
      0013EA F8 04                 4311 	ldhl	sp,#4
      0013EC 2A                    4312 	ld	a, (hl+)
      0013ED 5F                    4313 	ld	e, a
      0013EE 56                    4314 	ld	d, (hl)
      0013EF F8 08                 4315 	ldhl	sp,	#8
      0013F1 7E                    4316 	ld	a, (hl)
      0013F2 12                    4317 	ld	(de), a
      0013F3 13                    4318 	inc	de
      0013F4 23                    4319 	inc	hl
      0013F5 7E                    4320 	ld	a, (hl)
      0013F6 12                    4321 	ld	(de), a
                                   4322 ;src/main.c:1004: cursor.height = pile->height - !!pile->height;
      0013F7 F8 02                 4323 	ldhl	sp,#2
      0013F9 2A                    4324 	ld	a, (hl+)
      0013FA 5F                    4325 	ld	e, a
      0013FB 56                    4326 	ld	d, (hl)
      0013FC 1A                    4327 	ld	a, (de)
      0013FD 47                    4328 	ld	b, a
      0013FE D6 01                 4329 	sub	a,#0x01
      001400 3E 00                 4330 	ld	a, #0x00
      001402 17                    4331 	rla
      001403 EE 01                 4332 	xor	a, #0x01
      001405 4F                    4333 	ld	c, a
      001406 78                    4334 	ld	a, b
      001407 91                    4335 	sub	a, c
      001408 EAr8Er01              4336 	ld	(#(_cursor + 0x0007)),a
                                   4337 ;src/main.c:1005: pile->height += cursor.held_stack_size;
      00140B F8 02                 4338 	ldhl	sp,#2
      00140D 2A                    4339 	ld	a, (hl+)
      00140E 5F                    4340 	ld	e, a
      00140F 56                    4341 	ld	d, (hl)
      001410 1A                    4342 	ld	a, (de)
      001411 4F                    4343 	ld	c, a
      001412 FAr8Br01              4344 	ld	a, (#(_cursor + 0x0004) + 0)
      001415 81                    4345 	add	a, c
      001416 4F                    4346 	ld	c, a
      001417 2B                    4347 	dec	hl
      001418 2A                    4348 	ld	a, (hl+)
      001419 66                    4349 	ld	h, (hl)
      00141A 6F                    4350 	ld	l, a
      00141B 71                    4351 	ld	(hl), c
                                   4352 ;src/main.c:1006: if (cursor.hand_pile_idx != cursor.pile_idx) {
      00141C FAr8Cr01              4353 	ld	a, (#(_cursor + 0x0005) + 0)
      00141F 21r8Dr01              4354 	ld	hl, #(_cursor + 0x0006)
      001422 4E                    4355 	ld	c, (hl)
      001423 91                    4356 	sub	a, c
      001424 CAr1Er15              4357 	jp	Z,00116$
                                   4358 ;src/main.c:1007: UINT8 piles_to_clear = 0;
      001427 AF                    4359 	xor	a, a
      001428 F8 0C                 4360 	ldhl	sp,	#12
      00142A 77                    4361 	ld	(hl), a
                                   4362 ;src/main.c:1008: if (src_pile->height == 13u && is_stack_coherent(src_pile->base)) {
                                   4363 ;c
      00142B F8 06                 4364 	ldhl	sp,#6
      00142D 2A                    4365 	ld	a, (hl+)
      00142E 5F                    4366 	ld	e, a
      00142F 56                    4367 	ld	d, (hl)
      001430 21 04 00              4368 	ld	hl, #0x0004
      001433 19                    4369 	add	hl, de
      001434 E5                    4370 	push	hl
      001435 7D                    4371 	ld	a, l
      001436 F8 0C                 4372 	ldhl	sp,	#12
      001438 77                    4373 	ld	(hl), a
      001439 E1                    4374 	pop	hl
      00143A 7C                    4375 	ld	a, h
      00143B F8 0B                 4376 	ldhl	sp,	#11
      00143D 32                    4377 	ld	(hl-), a
      00143E 2A                    4378 	ld	a, (hl+)
      00143F 5F                    4379 	ld	e, a
      001440 56                    4380 	ld	d, (hl)
      001441 1A                    4381 	ld	a, (de)
      001442 D6 0D                 4382 	sub	a, #0x0d
      001444 20 1A                 4383 	jr	NZ, 00108$
      001446 F8 06                 4384 	ldhl	sp,#6
      001448 2A                    4385 	ld	a, (hl+)
      001449 5F                    4386 	ld	e, a
      00144A 56                    4387 	ld	d, (hl)
      00144B 1A                    4388 	ld	a, (de)
      00144C 4F                    4389 	ld	c, a
      00144D 13                    4390 	inc	de
      00144E 1A                    4391 	ld	a, (de)
      00144F 47                    4392 	ld	b, a
      001450 C5                    4393 	push	bc
      001451 CDr89r12              4394 	call	_is_stack_coherent
      001454 E8 02                 4395 	add	sp, #2
      001456 7B                    4396 	ld	a, e
      001457 B7                    4397 	or	a, a
      001458 28 06                 4398 	jr	Z, 00108$
                                   4399 ;src/main.c:1009: piles_to_clear = cursor.pile_idx;
      00145A FAr8Dr01              4400 	ld	a, (#(_cursor + 0x0006) + 0)
      00145D F8 0C                 4401 	ldhl	sp,	#12
      00145F 77                    4402 	ld	(hl), a
      001460                       4403 00108$:
                                   4404 ;src/main.c:1011: if (pile->height == 13u && is_stack_coherent(pile->base)) {
      001460 F8 02                 4405 	ldhl	sp,#2
      001462 2A                    4406 	ld	a, (hl+)
      001463 5F                    4407 	ld	e, a
      001464 56                    4408 	ld	d, (hl)
      001465 1A                    4409 	ld	a, (de)
      001466 D6 0D                 4410 	sub	a, #0x0d
      001468 20 32                 4411 	jr	NZ, 00111$
      00146A D1                    4412 	pop	de
      00146B D5                    4413 	push	de
      00146C 1A                    4414 	ld	a, (de)
      00146D 4F                    4415 	ld	c, a
      00146E 13                    4416 	inc	de
      00146F 1A                    4417 	ld	a, (de)
      001470 47                    4418 	ld	b, a
      001471 C5                    4419 	push	bc
      001472 CDr89r12              4420 	call	_is_stack_coherent
      001475 E8 02                 4421 	add	sp, #2
      001477 7B                    4422 	ld	a, e
      001478 B7                    4423 	or	a, a
      001479 28 21                 4424 	jr	Z, 00111$
                                   4425 ;src/main.c:1012: cursor.height = 0;
      00147B 21r8Er01              4426 	ld	hl, #(_cursor + 0x0007)
      00147E 36 00                 4427 	ld	(hl), #0x00
                                   4428 ;src/main.c:1006: if (cursor.hand_pile_idx != cursor.pile_idx) {
      001480 FAr8Cr01              4429 	ld	a, (#(_cursor + 0x0005) + 0)
      001483 F8 07                 4430 	ldhl	sp,	#7
      001485 77                    4431 	ld	(hl), a
                                   4432 ;src/main.c:1013: piles_to_clear |= piles_to_clear ? cursor.hand_pile_idx << 4u : cursor.hand_pile_idx;
      001486 F8 0C                 4433 	ldhl	sp,	#12
      001488 7E                    4434 	ld	a, (hl)
      001489 B7                    4435 	or	a, a
      00148A 28 09                 4436 	jr	Z, 00119$
      00148C F8 07                 4437 	ldhl	sp,	#7
      00148E 7E                    4438 	ld	a, (hl)
      00148F CB 37                 4439 	swap	a
      001491 E6 F0                 4440 	and	a, #0xf0
      001493 18 03                 4441 	jr	00120$
      001495                       4442 00119$:
      001495 F8 07                 4443 	ldhl	sp,	#7
      001497 7E                    4444 	ld	a, (hl)
      001498                       4445 00120$:
      001498 F8 0C                 4446 	ldhl	sp,	#12
      00149A B6                    4447 	or	a, (hl)
      00149B 77                    4448 	ld	(hl), a
      00149C                       4449 00111$:
                                   4450 ;src/main.c:1016: if (cursor.card_to_show)
      00149C 11r89r01              4451 	ld	de, #(_cursor + 0x0002)
      00149F 1A                    4452 	ld	a, (de)
      0014A0 F8 06                 4453 	ldhl	sp,	#6
      0014A2 22                    4454 	ld	(hl+), a
      0014A3 13                    4455 	inc	de
      0014A4 1A                    4456 	ld	a, (de)
      0014A5 77                    4457 	ld	(hl), a
      0014A6 3A                    4458 	ld	a, (hl-)
      0014A7 B6                    4459 	or	a, (hl)
      0014A8 28 07                 4460 	jr	Z, 00114$
                                   4461 ;src/main.c:1017: cursor.card_to_show->data |= BITMASK_CARD_VISIBLE;
      0014AA 2A                    4462 	ld	a, (hl+)
      0014AB 66                    4463 	ld	h, (hl)
      0014AC 6F                    4464 	ld	l, a
      0014AD 23                    4465 	inc	hl
      0014AE 23                    4466 	inc	hl
      0014AF CB F6                 4467 	set	6, (hl)
      0014B1                       4468 00114$:
                                   4469 ;src/main.c:1023: cursor.held_card,
      0014B1 11r87r01              4470 	ld	de, #_cursor
      0014B4 1A                    4471 	ld	a, (de)
      0014B5 F8 06                 4472 	ldhl	sp,	#6
      0014B7 22                    4473 	ld	(hl+), a
      0014B8 13                    4474 	inc	de
      0014B9 1A                    4475 	ld	a, (de)
      0014BA 77                    4476 	ld	(hl), a
                                   4477 ;src/main.c:1022: cursor.held_stack_size,
      0014BB 21r8Br01              4478 	ld	hl, #(_cursor + 0x0004)
      0014BE 4E                    4479 	ld	c, (hl)
                                   4480 ;src/main.c:1021: (pile->height + 3u - cursor.held_stack_size) * 8u,
      0014BF F8 02                 4481 	ldhl	sp,#2
      0014C1 2A                    4482 	ld	a, (hl+)
      0014C2 5F                    4483 	ld	e, a
      0014C3 56                    4484 	ld	d, (hl)
      0014C4 1A                    4485 	ld	a, (de)
      0014C5 C6 03                 4486 	add	a, #0x03
      0014C7 91                    4487 	sub	a, c
      0014C8 87                    4488 	add	a, a
      0014C9 87                    4489 	add	a, a
      0014CA 87                    4490 	add	a, a
      0014CB 23                    4491 	inc	hl
      0014CC 77                    4492 	ld	(hl), a
                                   4493 ;src/main.c:1020: (src_pile->height + 2u + cursor.held_stack_size) * 8u, cursor.hand_pile_idx * 16u,
      0014CD FAr8Cr01              4494 	ld	a, (#(_cursor + 0x0005) + 0)
      0014D0 CB 37                 4495 	swap	a
      0014D2 E6 F0                 4496 	and	a, #0xf0
      0014D4 23                    4497 	inc	hl
      0014D5 77                    4498 	ld	(hl), a
      0014D6 F8 0A                 4499 	ldhl	sp,#10
      0014D8 2A                    4500 	ld	a, (hl+)
      0014D9 5F                    4501 	ld	e, a
      0014DA 56                    4502 	ld	d, (hl)
      0014DB 1A                    4503 	ld	a, (de)
      0014DC C6 02                 4504 	add	a, #0x02
      0014DE 81                    4505 	add	a, c
      0014DF 87                    4506 	add	a, a
      0014E0 87                    4507 	add	a, a
      0014E1 87                    4508 	add	a, a
      0014E2 77                    4509 	ld	(hl), a
                                   4510 ;src/main.c:1019: cursor.pile_idx * 16u,
      0014E3 FAr8Dr01              4511 	ld	a, (#(_cursor + 0x0006) + 0)
      0014E6 CB 37                 4512 	swap	a
      0014E8 E6 F0                 4513 	and	a, #0xf0
                                   4514 ;src/main.c:1018: dynamic_metasprite_fold(top_card->data,
      0014EA F8 08                 4515 	ldhl	sp,	#8
      0014EC F5                    4516 	push	af
      0014ED 2A                    4517 	ld	a, (hl+)
      0014EE 66                    4518 	ld	h, (hl)
      0014EF 6F                    4519 	ld	l, a
      0014F0 F1                    4520 	pop	af
      0014F1 23                    4521 	inc	hl
      0014F2 23                    4522 	inc	hl
      0014F3 5E                    4523 	ld	e, (hl)
      0014F4 F8 0C                 4524 	ldhl	sp,	#12
      0014F6 66                    4525 	ld	h, (hl)
      0014F7 E5                    4526 	push	hl
      0014F8 33                    4527 	inc	sp
      0014F9 26 80                 4528 	ld	h, #0x80
      0014FB E5                    4529 	push	hl
      0014FC 33                    4530 	inc	sp
      0014FD F8 08                 4531 	ldhl	sp,	#8
      0014FF F5                    4532 	push	af
      001500 2A                    4533 	ld	a, (hl+)
      001501 66                    4534 	ld	h, (hl)
      001502 6F                    4535 	ld	l, a
      001503 F1                    4536 	pop	af
      001504 E5                    4537 	push	hl
      001505 61                    4538 	ld	h, c
      001506 E5                    4539 	push	hl
      001507 33                    4540 	inc	sp
      001508 F8 09                 4541 	ldhl	sp,	#9
      00150A 66                    4542 	ld	h, (hl)
      00150B E5                    4543 	push	hl
      00150C 33                    4544 	inc	sp
      00150D F8 0B                 4545 	ldhl	sp,	#11
      00150F 66                    4546 	ld	h, (hl)
      001510 E5                    4547 	push	hl
      001511 33                    4548 	inc	sp
      001512 F8 12                 4549 	ldhl	sp,	#18
      001514 66                    4550 	ld	h, (hl)
      001515 E5                    4551 	push	hl
      001516 33                    4552 	inc	sp
      001517 57                    4553 	ld	d,a
      001518 D5                    4554 	push	de
      001519 CDr28r0A              4555 	call	_dynamic_metasprite_fold
      00151C E8 0A                 4556 	add	sp, #10
      00151E                       4557 00116$:
                                   4558 ;src/main.c:1029: cursor.held_card = NULL;
      00151E 21r87r01              4559 	ld	hl, #_cursor
      001521 AF                    4560 	xor	a, a
      001522 22                    4561 	ld	(hl+), a
      001523 77                    4562 	ld	(hl), a
                                   4563 ;src/main.c:1030: cursor.pile_idx = cursor.hand_pile_idx;
      001524 FAr8Cr01              4564 	ld	a, (#(_cursor + 0x0005) + 0)
      001527 EAr8Dr01              4565 	ld	(#(_cursor + 0x0006)),a
                                   4566 ;src/main.c:1031: flags |= FLAG_REDRAW_CURSOR;
      00152A 21r6Br01              4567 	ld	hl, #_flags
      00152D 7E                    4568 	ld	a, (hl)
      00152E F6 01                 4569 	or	a, #0x01
      001530 77                    4570 	ld	(hl), a
                                   4571 ;src/main.c:1032: }
      001531 E8 0D                 4572 	add	sp, #13
      001533 C9                    4573 	ret
                                   4574 ;src/main.c:1038: void start_game(void)
                                   4575 ;	---------------------------------
                                   4576 ; Function start_game
                                   4577 ; ---------------------------------
      001534                       4578 _start_game::
                                   4579 ;src/main.c:1040: flags &= ~FLAG_GAME_STATE;
      001534 21r6Br01              4580 	ld	hl, #_flags
      001537 7E                    4581 	ld	a, (hl)
      001538 E6 E7                 4582 	and	a, #0xe7
                                   4583 ;src/main.c:1041: flags |= FLAG_GAME_STATE_INGAME | FLAG_REDRAW_CURSOR;
      00153A 77                    4584 	ld	(hl), a
      00153B F6 11                 4585 	or	a, #0x11
      00153D 77                    4586 	ld	(hl), a
                                   4587 ;src/main.c:1042: cursor.pile_idx = 0;
      00153E 21r8Dr01              4588 	ld	hl, #(_cursor + 0x0006)
      001541 36 00                 4589 	ld	(hl), #0x00
                                   4590 ;src/main.c:1043: cursor.height = 0;
      001543 21r8Er01              4591 	ld	hl, #(_cursor + 0x0007)
      001546 36 00                 4592 	ld	(hl), #0x00
                                   4593 ;src/main.c:1044: metasprite_2x3_hide(SPRITE_FRAME_1);
      001548 3E 12                 4594 	ld	a, #0x12
      00154A F5                    4595 	push	af
      00154B 33                    4596 	inc	sp
      00154C CDr28r05              4597 	call	_metasprite_2x3_hide
      00154F 33                    4598 	inc	sp
                                   4599 ;src/main.c:1045: metasprite_2x3_hide(SPRITE_FRAME_2);
      001550 3E 18                 4600 	ld	a, #0x18
      001552 F5                    4601 	push	af
      001553 33                    4602 	inc	sp
      001554 CDr28r05              4603 	call	_metasprite_2x3_hide
      001557 33                    4604 	inc	sp
                                   4605 ;src/main.c:1046: metasprite_2x3_hide(SPRITE_FRAME_3);
      001558 3E 1E                 4606 	ld	a, #0x1e
      00155A F5                    4607 	push	af
      00155B 33                    4608 	inc	sp
      00155C CDr28r05              4609 	call	_metasprite_2x3_hide
      00155F 33                    4610 	inc	sp
                                   4611 ;src/main.c:1047: init_deck();
      001560 CDr64r10              4612 	call	_init_deck
                                   4613 ;src/main.c:1048: clear_bkg();
      001563 CDrC2r01              4614 	call	_clear_bkg
                                   4615 ;src/main.c:1049: draw_bkg_game();
                                   4616 ;src/main.c:1050: }
      001566 C3rE0r01              4617 	jp  _draw_bkg_game
                                   4618 ;src/main.c:1052: inline void start_settings(void)
                                   4619 ;	---------------------------------
                                   4620 ; Function start_settings
                                   4621 ; ---------------------------------
      001569                       4622 _start_settings::
                                   4623 ;src/main.c:1054: flags &= ~FLAG_GAME_STATE;
      001569 21r6Br01              4624 	ld	hl, #_flags
      00156C 7E                    4625 	ld	a, (hl)
      00156D E6 E7                 4626 	and	a, #0xe7
                                   4627 ;src/main.c:1055: flags |= FLAG_GAME_STATE_SETTINGS | FLAG_REDRAW_CURSOR;
      00156F 77                    4628 	ld	(hl), a
      001570 F6 19                 4629 	or	a, #0x19
      001572 77                    4630 	ld	(hl), a
                                   4631 ;src/main.c:1056: cursor.pile_idx = 0;
      001573 21r8Dr01              4632 	ld	hl, #(_cursor + 0x0006)
      001576 36 00                 4633 	ld	(hl), #0x00
                                   4634 ;src/main.c:1057: cursor.height = 0;
      001578 21r8Er01              4635 	ld	hl, #(_cursor + 0x0007)
      00157B 36 00                 4636 	ld	(hl), #0x00
                                   4637 ;src/main.c:1058: draw_setting_frame_metasprites();
      00157D CDr88r05              4638 	call	_draw_setting_frame_metasprites
                                   4639 ;src/main.c:1059: clear_bkg();
      001580 CDrC2r01              4640 	call	_clear_bkg
                                   4641 ;src/main.c:1060: draw_bkg_settings();
                                   4642 ;src/main.c:1061: }
      001583 C3r1Fr03              4643 	jp  _draw_bkg_settings
                                   4644 ;src/main.c:1063: void start_splash_screen(void)
                                   4645 ;	---------------------------------
                                   4646 ; Function start_splash_screen
                                   4647 ; ---------------------------------
      001586                       4648 _start_splash_screen::
                                   4649 ;src/main.c:1065: flags &= ~FLAG_GAME_STATE;
      001586 21r6Br01              4650 	ld	hl, #_flags
      001589 7E                    4651 	ld	a, (hl)
      00158A E6 E7                 4652 	and	a, #0xe7
      00158C 77                    4653 	ld	(hl), a
                                   4654 ;src/main.c:1066: flags |= FLAG_GAME_STATE_SPLASH;
                                   4655 ;src/main.c:1067: clear_bkg();
      00158D CDrC2r01              4656 	call	_clear_bkg
                                   4657 ;src/main.c:1068: draw_bkg_splash_screen();
      001590 CDr80r02              4658 	call	_draw_bkg_splash_screen
                                   4659 ;src/main.c:573: dynamic_metasprite.src[0] = 72;
      001593 21r72r01              4660 	ld	hl, #_dynamic_metasprite
      001596 36 48                 4661 	ld	(hl), #0x48
      001598 23                    4662 	inc	hl
      001599 36 00                 4663 	ld	(hl), #0x00
                                   4664 ;src/main.c:574: dynamic_metasprite.src[1] = -24;
      00159B 21r74r01              4665 	ld	hl, #(_dynamic_metasprite + 0x0002)
      00159E 36 E8                 4666 	ld	(hl), #0xe8
      0015A0 23                    4667 	inc	hl
      0015A1 36 FF                 4668 	ld	(hl), #0xff
                                   4669 ;src/main.c:575: dynamic_metasprite.dist[0] = -64;
      0015A3 21r76r01              4670 	ld	hl, #(_dynamic_metasprite + 0x0004)
      0015A6 36 C0                 4671 	ld	(hl), #0xc0
      0015A8 23                    4672 	inc	hl
      0015A9 36 FF                 4673 	ld	(hl), #0xff
                                   4674 ;src/main.c:576: dynamic_metasprite.dist[1] = 40;
      0015AB 21r78r01              4675 	ld	hl, #(_dynamic_metasprite + 0x0006)
      0015AE 36 28                 4676 	ld	(hl), #0x28
      0015B0 23                    4677 	inc	hl
      0015B1 36 00                 4678 	ld	(hl), #0x00
                                   4679 ;src/main.c:577: dynamic_metasprite.target_frames = TARGET_FRAMES_SPLASH_SCREEN;
      0015B3 21r7Ar01              4680 	ld	hl, #(_dynamic_metasprite + 0x0008)
      0015B6 36 20                 4681 	ld	(hl), #0x20
                                   4682 ;src/main.c:578: dynamic_metasprite.elapsed_frames = 0;
      0015B8 21r7Br01              4683 	ld	hl, #(_dynamic_metasprite + 0x0009)
      0015BB 36 00                 4684 	ld	(hl), #0x00
                                   4685 ;src/main.c:579: dynamic_metasprite.metasprite = metasprite_sequential_2x3;
      0015BD 21r7Cr01              4686 	ld	hl, #(_dynamic_metasprite + 0x000a)
      0015C0 36r00                 4687 	ld	(hl), #<(_metasprite_sequential_2x3)
      0015C2 23                    4688 	inc	hl
      0015C3 36s00                 4689 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   4690 ;src/main.c:580: dynamic_metasprite.metasprite_offset = OFFSET_SPRITE_TITLE + OFFSET_TITLE_S;
      0015C5 21r7Er01              4691 	ld	hl, #(_dynamic_metasprite + 0x000c)
      0015C8 36 80                 4692 	ld	(hl), #0x80
                                   4693 ;src/main.c:581: dynamic_metasprite.data[0] = 0;
      0015CA 21r7Fr01              4694 	ld	hl, #(_dynamic_metasprite + 0x000d)
      0015CD 36 00                 4695 	ld	(hl), #0x00
                                   4696 ;src/main.c:582: dynamic_metasprite.callback = &dynamic_metasprite_splash_screen_callback;
      0015CF 21r85r01              4697 	ld	hl, #(_dynamic_metasprite + 0x0013)
      0015D2 36r1F                 4698 	ld	(hl), #<(_dynamic_metasprite_splash_screen_callback)
      0015D4 23                    4699 	inc	hl
      0015D5 36s06                 4700 	ld	(hl), #>(_dynamic_metasprite_splash_screen_callback)
                                   4701 ;src/main.c:583: flags |= FLAG_PLAYING_ANIMATION;
      0015D7 21r6Br01              4702 	ld	hl, #_flags
      0015DA 7E                    4703 	ld	a, (hl)
      0015DB F6 04                 4704 	or	a, #0x04
      0015DD 77                    4705 	ld	(hl), a
                                   4706 ;src/main.c:1069: dynamic_metasprite_splash_screen();
                                   4707 ;src/main.c:1070: }
      0015DE C9                    4708 	ret
                                   4709 ;src/main.c:1072: void start_leaderboard(void)
                                   4710 ;	---------------------------------
                                   4711 ; Function start_leaderboard
                                   4712 ; ---------------------------------
      0015DF                       4713 _start_leaderboard::
                                   4714 ;src/main.c:1074: ENABLE_RAM_MBC1;
      0015DF 21 00 00              4715 	ld	hl, #0x0000
      0015E2 36 0A                 4716 	ld	(hl), #0x0a
                                   4717 ;src/main.c:1075: flags &= ~FLAG_GAME_STATE;
      0015E4 21r6Br01              4718 	ld	hl, #_flags
      0015E7 7E                    4719 	ld	a, (hl)
      0015E8 E6 E7                 4720 	and	a, #0xe7
                                   4721 ;src/main.c:1076: flags |= FLAG_GAME_STATE_LEADERBOARD;
      0015EA 77                    4722 	ld	(hl), a
      0015EB F6 08                 4723 	or	a, #0x08
      0015ED 77                    4724 	ld	(hl), a
                                   4725 ;src/main.c:1077: cursor.pile_idx = 0;
      0015EE 21r8Dr01              4726 	ld	hl, #(_cursor + 0x0006)
      0015F1 36 00                 4727 	ld	(hl), #0x00
                                   4728 ;src/main.c:1078: clear_bkg();
      0015F3 CDrC2r01              4729 	call	_clear_bkg
                                   4730 ;src/main.c:1079: draw_bkg_leaderboard();
      0015F6 CDrF9r03              4731 	call	_draw_bkg_leaderboard
                                   4732 ;src/main.c:1080: DISABLE_RAM_MBC1;
      0015F9 21 00 00              4733 	ld	hl, #0x0000
      0015FC 36 00                 4734 	ld	(hl), #0x00
                                   4735 ;src/main.c:1081: }
      0015FE C9                    4736 	ret
                                   4737 ;src/main.c:1083: void add_leaderboard(void)
                                   4738 ;	---------------------------------
                                   4739 ; Function add_leaderboard
                                   4740 ; ---------------------------------
      0015FF                       4741 _add_leaderboard::
      0015FF E8 FD                 4742 	add	sp, #-3
                                   4743 ;src/main.c:1085: ENABLE_RAM_MBC1;
      001601 21 00 00              4744 	ld	hl, #0x0000
      001604 36 0A                 4745 	ld	(hl), #0x0a
                                   4746 ;src/main.c:1086: LeaderBoard *iter = leaderboard[NUM_SUITS(settings)];
      001606 01r00r00              4747 	ld	bc, #_leaderboard+0
      001609 FAr6Cr01              4748 	ld	a, (#_settings)
      00160C E6 03                 4749 	and	a, #0x03
      00160E 6F                    4750 	ld	l, a
      00160F 26 00                 4751 	ld	h, #0x00
      001611 5D                    4752 	ld	e, l
      001612 54                    4753 	ld	d, h
      001613 29                    4754 	add	hl, hl
      001614 19                    4755 	add	hl, de
      001615 29                    4756 	add	hl, hl
      001616 19                    4757 	add	hl, de
      001617 29                    4758 	add	hl, hl
      001618 19                    4759 	add	hl, de
      001619 09                    4760 	add	hl, bc
      00161A 4D                    4761 	ld	c, l
      00161B 44                    4762 	ld	b, h
                                   4763 ;src/main.c:1088: for (i = 0; i < 3u; i++) {
      00161C AF                    4764 	xor	a, a
      00161D F8 02                 4765 	ldhl	sp,	#2
      00161F 77                    4766 	ld	(hl), a
      001620                       4767 00106$:
                                   4768 ;src/main.c:1089: if (score > iter->score)
      001620 69                    4769 	ld	l, c
      001621 60                    4770 	ld	h, b
      001622 23                    4771 	inc	hl
      001623 23                    4772 	inc	hl
      001624 23                    4773 	inc	hl
      001625 5D                    4774 	ld	e, l
      001626 54                    4775 	ld	d, h
      001627 1A                    4776 	ld	a, (de)
      001628 F8 00                 4777 	ldhl	sp,	#0
      00162A 22                    4778 	ld	(hl+), a
      00162B 13                    4779 	inc	de
      00162C 1A                    4780 	ld	a, (de)
      00162D 77                    4781 	ld	(hl), a
      00162E F8 00                 4782 	ldhl	sp,	#0
      001630 5D                    4783 	ld	e, l
      001631 54                    4784 	ld	d, h
      001632 21r6Er01              4785 	ld	hl, #_score
      001635 1A                    4786 	ld	a, (de)
      001636 96                    4787 	sub	a, (hl)
      001637 23                    4788 	inc	hl
      001638 13                    4789 	inc	de
      001639 1A                    4790 	ld	a, (de)
      00163A 9E                    4791 	sbc	a, (hl)
      00163B 38 0D                 4792 	jr	C, 00103$
                                   4793 ;src/main.c:1091: iter++;
      00163D 03                    4794 	inc	bc
      00163E 03                    4795 	inc	bc
      00163F 03                    4796 	inc	bc
      001640 03                    4797 	inc	bc
      001641 03                    4798 	inc	bc
                                   4799 ;src/main.c:1088: for (i = 0; i < 3u; i++) {
      001642 F8 02                 4800 	ldhl	sp,	#2
      001644 34                    4801 	inc	(hl)
      001645 7E                    4802 	ld	a, (hl)
      001646 D6 03                 4803 	sub	a, #0x03
      001648 38 D6                 4804 	jr	C, 00106$
      00164A                       4805 00103$:
                                   4806 ;src/main.c:1093: if (i == 3u)
      00164A F8 02                 4807 	ldhl	sp,	#2
      00164C 7E                    4808 	ld	a, (hl)
      00164D D6 03                 4809 	sub	a, #0x03
      00164F 28 3F                 4810 	jr	Z, 00108$
                                   4811 ;src/main.c:1094: return;
      001651 18 00                 4812 	jr	00105$
      001653                       4813 00105$:
                                   4814 ;src/main.c:1095: iter->score = score;
      001653 59                    4815 	ld	e, c
      001654 50                    4816 	ld	d, b
      001655 13                    4817 	inc	de
      001656 13                    4818 	inc	de
      001657 13                    4819 	inc	de
      001658 21r6Er01              4820 	ld	hl, #_score
      00165B 7E                    4821 	ld	a, (hl)
      00165C 12                    4822 	ld	(de), a
      00165D 13                    4823 	inc	de
      00165E 23                    4824 	inc	hl
      00165F 7E                    4825 	ld	a, (hl)
      001660 12                    4826 	ld	(de), a
                                   4827 ;src/main.c:1096: iter->name[0] = 0x0B;
      001661 3E 0B                 4828 	ld	a, #0x0b
      001663 02                    4829 	ld	(bc), a
                                   4830 ;src/main.c:1097: iter->name[1] = 0x0B;
      001664 69                    4831 	ld	l, c
      001665 60                    4832 	ld	h, b
      001666 23                    4833 	inc	hl
      001667 36 0B                 4834 	ld	(hl), #0x0b
                                   4835 ;src/main.c:1098: iter->name[2] = 0x0B;
      001669 69                    4836 	ld	l, c
      00166A 60                    4837 	ld	h, b
      00166B 23                    4838 	inc	hl
      00166C 23                    4839 	inc	hl
      00166D 36 0B                 4840 	ld	(hl), #0x0b
                                   4841 ;src/main.c:1099: selected_leaderboard = iter;
      00166F 21r70r01              4842 	ld	hl, #_selected_leaderboard
      001672 79                    4843 	ld	a, c
      001673 22                    4844 	ld	(hl+), a
      001674 70                    4845 	ld	(hl), b
                                   4846 ;src/main.c:1100: cursor.height = LEADERBOARD_PAD_Y + NUM_SUITS(settings) * 4u + i;
      001675 FAr6Cr01              4847 	ld	a, (#_settings)
      001678 E6 03                 4848 	and	a, #0x03
      00167A 87                    4849 	add	a, a
      00167B 87                    4850 	add	a, a
      00167C C6 04                 4851 	add	a, #0x04
      00167E F8 02                 4852 	ldhl	sp,	#2
      001680 86                    4853 	add	a, (hl)
      001681 EAr8Er01              4854 	ld	(#(_cursor + 0x0007)),a
                                   4855 ;src/main.c:1101: flags |= FLAG_REDRAW_CURSOR;
      001684 21r6Br01              4856 	ld	hl, #_flags
      001687 7E                    4857 	ld	a, (hl)
      001688 F6 01                 4858 	or	a, #0x01
      00168A 77                    4859 	ld	(hl), a
                                   4860 ;src/main.c:1102: DISABLE_RAM_MBC1;
      00168B 21 00 00              4861 	ld	hl, #0x0000
      00168E 36 00                 4862 	ld	(hl), #0x00
      001690                       4863 00108$:
                                   4864 ;src/main.c:1103: }
      001690 E8 03                 4865 	add	sp, #3
      001692 C9                    4866 	ret
                                   4867 ;src/main.c:1105: void nvram_check(void)
                                   4868 ;	---------------------------------
                                   4869 ; Function nvram_check
                                   4870 ; ---------------------------------
      001693                       4871 _nvram_check::
                                   4872 ;src/main.c:1107: ENABLE_RAM_MBC1;
      001693 21 00 00              4873 	ld	hl, #0x0000
      001696 36 0A                 4874 	ld	(hl), #0x0a
                                   4875 ;src/main.c:1108: if (nvram_check_data != NVRAM_SET) {
      001698 21r00r00              4876 	ld	hl, #_nvram_check_data
      00169B 7E                    4877 	ld	a, (hl)
      00169C D6 37                 4878 	sub	a, #0x37
      00169E 20 11                 4879 	jr	NZ, 00121$
      0016A0 23                    4880 	inc	hl
      0016A1 7E                    4881 	ld	a, (hl)
      0016A2 3D                    4882 	dec	a
      0016A3 20 0C                 4883 	jr	NZ, 00121$
      0016A5 23                    4884 	inc	hl
      0016A6 7E                    4885 	ld	a, (hl)
      0016A7 D6 3E                 4886 	sub	a, #0x3e
      0016A9 20 06                 4887 	jr	NZ, 00121$
      0016AB 23                    4888 	inc	hl
      0016AC 7E                    4889 	ld	a, (hl)
      0016AD D6 CD                 4890 	sub	a, #0xcd
      0016AF 28 30                 4891 	jr	Z, 00103$
      0016B1                       4892 00121$:
                                   4893 ;src/main.c:1109: nvram_check_data = NVRAM_SET;
      0016B1 21r00r00              4894 	ld	hl, #_nvram_check_data
      0016B4 3E 37                 4895 	ld	a, #0x37
      0016B6 22                    4896 	ld	(hl+), a
      0016B7 3E 01                 4897 	ld	a, #0x01
      0016B9 22                    4898 	ld	(hl+), a
      0016BA 3E 3E                 4899 	ld	a, #0x3e
      0016BC 22                    4900 	ld	(hl+), a
      0016BD 36 CD                 4901 	ld	(hl), #0xcd
                                   4902 ;src/main.c:1110: LeaderBoard *iter = IDX_PTR(leaderboard[0], 0u);
      0016BF 01r00r00              4903 	ld	bc, #_leaderboard+0
                                   4904 ;src/main.c:1112: for (i = 0; i < NUM_LEADERBOARD; i++) {
      0016C2 1E 09                 4905 	ld	e, #0x09
      0016C4                       4906 00106$:
                                   4907 ;src/main.c:1113: iter->score = 0u;
      0016C4 69                    4908 	ld	l, c
      0016C5 60                    4909 	ld	h, b
      0016C6 23                    4910 	inc	hl
      0016C7 23                    4911 	inc	hl
      0016C8 23                    4912 	inc	hl
      0016C9 AF                    4913 	xor	a, a
      0016CA 22                    4914 	ld	(hl+), a
      0016CB 77                    4915 	ld	(hl), a
                                   4916 ;src/main.c:1114: iter->name[0] = 0u;
      0016CC AF                    4917 	xor	a, a
      0016CD 02                    4918 	ld	(bc), a
                                   4919 ;src/main.c:1115: iter->name[1] = 0u;
      0016CE 69                    4920 	ld	l, c
      0016CF 60                    4921 	ld	h, b
      0016D0 23                    4922 	inc	hl
      0016D1 36 00                 4923 	ld	(hl), #0x00
                                   4924 ;src/main.c:1116: iter->name[2] = 0u;
      0016D3 69                    4925 	ld	l, c
      0016D4 60                    4926 	ld	h, b
      0016D5 23                    4927 	inc	hl
      0016D6 23                    4928 	inc	hl
      0016D7 36 00                 4929 	ld	(hl), #0x00
                                   4930 ;src/main.c:1117: iter++;
      0016D9 03                    4931 	inc	bc
      0016DA 03                    4932 	inc	bc
      0016DB 03                    4933 	inc	bc
      0016DC 03                    4934 	inc	bc
      0016DD 03                    4935 	inc	bc
                                   4936 ;src/main.c:1112: for (i = 0; i < NUM_LEADERBOARD; i++) {
      0016DE 1D                    4937 	dec	e
      0016DF 20 E3                 4938 	jr	NZ, 00106$
      0016E1                       4939 00103$:
                                   4940 ;src/main.c:1120: DISABLE_RAM_MBC1;
      0016E1 21 00 00              4941 	ld	hl, #0x0000
      0016E4 36 00                 4942 	ld	(hl), #0x00
                                   4943 ;src/main.c:1121: }
      0016E6 C9                    4944 	ret
                                   4945 ;src/main.c:1123: void inc_letter(const INT8 inc)
                                   4946 ;	---------------------------------
                                   4947 ; Function inc_letter
                                   4948 ; ---------------------------------
      0016E7                       4949 _inc_letter::
                                   4950 ;src/main.c:1125: ENABLE_RAM_MBC1;
      0016E7 21 00 00              4951 	ld	hl, #0x0000
      0016EA 36 0A                 4952 	ld	(hl), #0x0a
                                   4953 ;src/main.c:1126: UINT8 *letter = &selected_leaderboard->name[cursor.pile_idx];
      0016EC 21r71r01              4954 	ld	hl, #_selected_leaderboard + 1
      0016EF 2B                    4955 	dec	hl
      0016F0 2A                    4956 	ld	a, (hl+)
      0016F1 4F                    4957 	ld	c, a
      0016F2 46                    4958 	ld	b, (hl)
      0016F3 FAr8Dr01              4959 	ld	a, (#(_cursor + 0x0006) + 0)
      0016F6 81                    4960 	add	a, c
      0016F7 4F                    4961 	ld	c, a
      0016F8 3E 00                 4962 	ld	a, #0x00
      0016FA 88                    4963 	adc	a, b
      0016FB 47                    4964 	ld	b, a
                                   4965 ;src/main.c:1127: *letter = (INT8)*letter + inc;
      0016FC 0A                    4966 	ld	a, (bc)
      0016FD F8 02                 4967 	ldhl	sp,	#2
      0016FF 86                    4968 	add	a, (hl)
                                   4969 ;src/main.c:1128: if (*letter < 0x0Bu)
      001700 02                    4970 	ld	(bc), a
      001701 5F                    4971 	ld	e, a
      001702 D6 0B                 4972 	sub	a, #0x0b
      001704 30 05                 4973 	jr	NC, 00104$
                                   4974 ;src/main.c:1129: *letter = 0x24u;
      001706 3E 24                 4975 	ld	a, #0x24
      001708 02                    4976 	ld	(bc), a
      001709 18 08                 4977 	jr	00105$
      00170B                       4978 00104$:
                                   4979 ;src/main.c:1130: else if (*letter > 0x24u)
      00170B 3E 24                 4980 	ld	a, #0x24
      00170D 93                    4981 	sub	a, e
      00170E 30 03                 4982 	jr	NC, 00105$
                                   4983 ;src/main.c:1131: *letter = 0x0Bu;
      001710 3E 0B                 4984 	ld	a, #0x0b
      001712 02                    4985 	ld	(bc), a
      001713                       4986 00105$:
                                   4987 ;src/main.c:1132: set_bkg_tile_xy(LEADERBOARD_NAME_X + cursor.pile_idx, cursor.height, *letter);
      001713 0A                    4988 	ld	a, (bc)
      001714 4F                    4989 	ld	c, a
      001715 21r8Er01              4990 	ld	hl, #(_cursor + 0x0007)
      001718 46                    4991 	ld	b, (hl)
      001719 FAr8Dr01              4992 	ld	a, (#(_cursor + 0x0006) + 0)
      00171C C6 08                 4993 	add	a, #0x08
      00171E 61                    4994 	ld	h, c
      00171F 68                    4995 	ld	l, b
      001720 E5                    4996 	push	hl
      001721 F5                    4997 	push	af
      001722 33                    4998 	inc	sp
      001723 CDr00r00              4999 	call	_set_bkg_tile_xy
      001726 E8 03                 5000 	add	sp, #3
                                   5001 ;src/main.c:1133: DISABLE_RAM_MBC1;
      001728 21 00 00              5002 	ld	hl, #0x0000
      00172B 36 00                 5003 	ld	(hl), #0x00
                                   5004 ;src/main.c:1134: }
      00172D C9                    5005 	ret
                                   5006 ;src/main.c:1136: inline void input_process(void)
                                   5007 ;	---------------------------------
                                   5008 ; Function input_process
                                   5009 ; ---------------------------------
      00172E                       5010 _input_process::
      00172E E8 F1                 5011 	add	sp, #-15
                                   5012 ;src/main.c:1139: UINT8 input = joypad();
      001730 CDr00r00              5013 	call	_joypad
      001733 F8 00                 5014 	ldhl	sp,	#0
      001735 73                    5015 	ld	(hl), e
                                   5016 ;src/main.c:1140: UINT8 new_input = input & ~prev_input;
      001736 FAr91r01              5017 	ld	a, (#_input_process_prev_input_65536_371)
      001739 2F                    5018 	cpl
      00173A F8 00                 5019 	ldhl	sp,	#0
      00173C A6                    5020 	and	a, (hl)
                                   5021 ;src/main.c:1141: if (new_input) {
      00173D 4F                    5022 	ld	c, a
      00173E B7                    5023 	or	a, a
      00173F CArDFr1B              5024 	jp	Z, 00206$
                                   5025 ;src/main.c:1142: switch (flags & FLAG_GAME_STATE) {
      001742 FAr6Br01              5026 	ld	a, (#_flags)
      001745 E6 18                 5027 	and	a, #0x18
      001747 47                    5028 	ld	b, a
      001748 1E 00                 5029 	ld	e, #0x00
                                   5030 ;src/main.c:1144: if (new_input & J_START) {
      00174A 79                    5031 	ld	a, c
      00174B E6 80                 5032 	and	a, #0x80
      00174D F8 01                 5033 	ldhl	sp,	#1
      00174F 77                    5034 	ld	(hl), a
      001750 AF                    5035 	xor	a, a
      001751 23                    5036 	inc	hl
      001752 77                    5037 	ld	(hl), a
                                   5038 ;src/main.c:1146: if (flags & FLAG_PLAYING_ANIMATION)
      001753 FAr6Br01              5039 	ld	a, (#_flags)
      001756 F8 03                 5040 	ldhl	sp,	#3
      001758 77                    5041 	ld	(hl), a
                                   5042 ;src/main.c:1142: switch (flags & FLAG_GAME_STATE) {
      001759 78                    5043 	ld	a, b
      00175A B7                    5044 	or	a, a
      00175B B3                    5045 	or	a, e
      00175C 28 47                 5046 	jr	Z, 00101$
                                   5047 ;src/main.c:1162: } else if (new_input & J_A) {
      00175E 79                    5048 	ld	a, c
      00175F E6 10                 5049 	and	a, #0x10
      001761 23                    5050 	inc	hl
      001762 77                    5051 	ld	(hl), a
      001763 AF                    5052 	xor	a, a
      001764 23                    5053 	inc	hl
      001765 77                    5054 	ld	(hl), a
                                   5055 ;src/main.c:1170: && cursor.pile_idx < 2u) {
      001766 79                    5056 	ld	a, c
      001767 E6 01                 5057 	and	a, #0x01
      001769 23                    5058 	inc	hl
      00176A 77                    5059 	ld	(hl), a
      00176B AF                    5060 	xor	a, a
      00176C 23                    5061 	inc	hl
      00176D 77                    5062 	ld	(hl), a
                                   5063 ;src/main.c:1173: && cursor.pile_idx) {
      00176E 79                    5064 	ld	a, c
      00176F E6 02                 5065 	and	a, #0x02
      001771 23                    5066 	inc	hl
      001772 77                    5067 	ld	(hl), a
      001773 AF                    5068 	xor	a, a
      001774 23                    5069 	inc	hl
      001775 77                    5070 	ld	(hl), a
                                   5071 ;src/main.c:1175: } else if (new_input & J_UP) {
      001776 79                    5072 	ld	a, c
      001777 E6 04                 5073 	and	a, #0x04
      001779 23                    5074 	inc	hl
      00177A 77                    5075 	ld	(hl), a
      00177B AF                    5076 	xor	a, a
      00177C 23                    5077 	inc	hl
      00177D 77                    5078 	ld	(hl), a
                                   5079 ;src/main.c:1177: } else if (new_input & J_DOWN) {
      00177E 79                    5080 	ld	a, c
      00177F E6 08                 5081 	and	a, #0x08
      001781 23                    5082 	inc	hl
      001782 77                    5083 	ld	(hl), a
      001783 AF                    5084 	xor	a, a
      001784 23                    5085 	inc	hl
      001785 77                    5086 	ld	(hl), a
                                   5087 ;src/main.c:1156: flags |= FLAG_REDRAW_CURSOR;
      001786 F8 03                 5088 	ldhl	sp,	#3
      001788 7E                    5089 	ld	a, (hl)
      001789 F6 01                 5090 	or	a, #0x01
      00178B F8 0E                 5091 	ldhl	sp,	#14
      00178D 77                    5092 	ld	(hl), a
                                   5093 ;src/main.c:1142: switch (flags & FLAG_GAME_STATE) {
      00178E 78                    5094 	ld	a, b
      00178F D6 08                 5095 	sub	a, #0x08
      001791 B3                    5096 	or	a, e
      001792 28 61                 5097 	jr	Z, 00111$
      001794 78                    5098 	ld	a, b
      001795 D6 10                 5099 	sub	a, #0x10
      001797 B3                    5100 	or	a, e
      001798 CAr1Ar19              5101 	jp	Z,00161$
      00179B 78                    5102 	ld	a, b
      00179C D6 18                 5103 	sub	a, #0x18
      00179E B3                    5104 	or	a, e
      00179F CAr97r18              5105 	jp	Z,00140$
      0017A2 C3rDFr1B              5106 	jp	00206$
                                   5107 ;src/main.c:1143: case FLAG_GAME_STATE_SPLASH:
      0017A5                       5108 00101$:
                                   5109 ;src/main.c:1144: if (new_input & J_START) {
      0017A5 F8 02                 5110 	ldhl	sp,	#2
      0017A7 3A                    5111 	ld	a, (hl-)
      0017A8 B6                    5112 	or	a, (hl)
      0017A9 28 36                 5113 	jr	Z, 00109$
                                   5114 ;src/main.c:1145: initrand(DIV_REG);
      0017AB F0r00                 5115 	ldh	a, (_DIV_REG+0)
      0017AD 4F                    5116 	ld	c, a
      0017AE 06 00                 5117 	ld	b, #0x00
      0017B0 C5                    5118 	push	bc
      0017B1 CDr00r00              5119 	call	_initrand
      0017B4 E8 02                 5120 	add	sp, #2
                                   5121 ;src/main.c:1146: if (flags & FLAG_PLAYING_ANIMATION)
      0017B6 FAr6Br01              5122 	ld	a, (#_flags)
      0017B9 CB 57                 5123 	bit	2, a
      0017BB 28 03                 5124 	jr	Z, 00103$
                                   5125 ;src/main.c:1147: dynamic_metasprite_end_animation();
      0017BD CDr0Br06              5126 	call	_dynamic_metasprite_end_animation
      0017C0                       5127 00103$:
                                   5128 ;src/main.c:1054: flags &= ~FLAG_GAME_STATE;
      0017C0 21r6Br01              5129 	ld	hl, #_flags
      0017C3 7E                    5130 	ld	a, (hl)
      0017C4 E6 E7                 5131 	and	a, #0xe7
      0017C6 77                    5132 	ld	(hl), a
                                   5133 ;src/main.c:1055: flags |= FLAG_GAME_STATE_SETTINGS | FLAG_REDRAW_CURSOR;
      0017C7 7E                    5134 	ld	a, (hl)
      0017C8 F6 19                 5135 	or	a, #0x19
      0017CA 77                    5136 	ld	(hl), a
                                   5137 ;src/main.c:1056: cursor.pile_idx = 0;
      0017CB 21r8Dr01              5138 	ld	hl, #(_cursor + 0x0006)
      0017CE 36 00                 5139 	ld	(hl), #0x00
                                   5140 ;src/main.c:1057: cursor.height = 0;
      0017D0 21r8Er01              5141 	ld	hl, #(_cursor + 0x0007)
      0017D3 36 00                 5142 	ld	(hl), #0x00
                                   5143 ;src/main.c:1058: draw_setting_frame_metasprites();
      0017D5 CDr88r05              5144 	call	_draw_setting_frame_metasprites
                                   5145 ;src/main.c:1059: clear_bkg();
      0017D8 CDrC2r01              5146 	call	_clear_bkg
                                   5147 ;src/main.c:1060: draw_bkg_settings();
      0017DB CDr1Fr03              5148 	call	_draw_bkg_settings
                                   5149 ;src/main.c:1148: start_settings();
      0017DE C3rDFr1B              5150 	jp	00206$
      0017E1                       5151 00109$:
                                   5152 ;src/main.c:1149: } else if (new_input & J_SELECT) {
      0017E1 CB 71                 5153 	bit	6, c
      0017E3 CArDFr1B              5154 	jp	Z,00206$
                                   5155 ;src/main.c:1150: if (flags & FLAG_PLAYING_ANIMATION)
      0017E6 F8 03                 5156 	ldhl	sp,	#3
      0017E8 CB 56                 5157 	bit	2, (hl)
      0017EA 28 03                 5158 	jr	Z, 00105$
                                   5159 ;src/main.c:1151: dynamic_metasprite_end_animation();
      0017EC CDr0Br06              5160 	call	_dynamic_metasprite_end_animation
      0017EF                       5161 00105$:
                                   5162 ;src/main.c:1152: start_leaderboard();
      0017EF CDrDFr15              5163 	call	_start_leaderboard
                                   5164 ;src/main.c:1154: break;
      0017F2 C3rDFr1B              5165 	jp	00206$
                                   5166 ;src/main.c:1155: case FLAG_GAME_STATE_LEADERBOARD:
      0017F5                       5167 00111$:
                                   5168 ;src/main.c:1156: flags |= FLAG_REDRAW_CURSOR;
      0017F5 F8 0E                 5169 	ldhl	sp,	#14
      0017F7 7E                    5170 	ld	a, (hl)
      0017F8 EAr6Br01              5171 	ld	(#_flags),a
                                   5172 ;src/main.c:1157: if (selected_leaderboard) {
      0017FB 21r71r01              5173 	ld	hl, #_selected_leaderboard + 1
      0017FE 3A                    5174 	ld	a, (hl-)
      0017FF B6                    5175 	or	a, (hl)
      001800 CAr8Br18              5176 	jp	Z, 00138$
                                   5177 ;src/main.c:1159: && cursor.pile_idx == 2u) {
      001803 F8 02                 5178 	ldhl	sp,	#2
      001805 3A                    5179 	ld	a, (hl-)
      001806 B6                    5180 	or	a, (hl)
      001807 28 17                 5181 	jr	Z, 00132$
      001809 FAr8Dr01              5182 	ld	a, (#(_cursor + 0x0006) + 0)
      00180C D6 02                 5183 	sub	a, #0x02
      00180E 20 10                 5184 	jr	NZ, 00132$
                                   5185 ;src/main.c:1160: selected_leaderboard = NULL;
      001810 21r70r01              5186 	ld	hl, #_selected_leaderboard
      001813 3E 00                 5187 	ld	a, #0x00
      001815 22                    5188 	ld	(hl+), a
      001816 36 00                 5189 	ld	(hl), #0x00
                                   5190 ;/home/wojtek/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      001818 21r32r00              5191 	ld	hl, #(_shadow_OAM + 0x0032)
      00181B 36 00                 5192 	ld	(hl), #0x00
                                   5193 ;src/main.c:1161: set_sprite_tile(SPRITE_FRAME, OFFSET_SPRITE_NONE);
      00181D C3rDFr1B              5194 	jp	00206$
      001820                       5195 00132$:
                                   5196 ;src/main.c:1162: } else if (new_input & J_A) {
      001820 F8 05                 5197 	ldhl	sp,	#5
      001822 3A                    5198 	ld	a, (hl-)
      001823 B6                    5199 	or	a, (hl)
      001824 28 1D                 5200 	jr	Z, 00129$
                                   5201 ;src/main.c:1163: if (cursor.pile_idx == 2u) {
      001826 01r8Dr01              5202 	ld	bc, #_cursor+6
      001829 0A                    5203 	ld	a, (bc)
      00182A FE 02                 5204 	cp	a, #0x02
      00182C 20 10                 5205 	jr	NZ, 00113$
                                   5206 ;src/main.c:1164: selected_leaderboard = NULL;
      00182E 21r70r01              5207 	ld	hl, #_selected_leaderboard
      001831 3E 00                 5208 	ld	a, #0x00
      001833 22                    5209 	ld	(hl+), a
      001834 36 00                 5210 	ld	(hl), #0x00
                                   5211 ;/home/wojtek/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      001836 21r32r00              5212 	ld	hl, #(_shadow_OAM + 0x0032)
      001839 36 00                 5213 	ld	(hl), #0x00
                                   5214 ;src/main.c:1165: set_sprite_tile(SPRITE_FRAME, OFFSET_SPRITE_NONE);
      00183B C3rDFr1B              5215 	jp	00206$
      00183E                       5216 00113$:
                                   5217 ;src/main.c:1167: cursor.pile_idx++;
      00183E 3C                    5218 	inc	a
      00183F 02                    5219 	ld	(bc), a
      001840 C3rDFr1B              5220 	jp	00206$
      001843                       5221 00129$:
                                   5222 ;src/main.c:1170: && cursor.pile_idx < 2u) {
      001843 F8 07                 5223 	ldhl	sp,	#7
      001845 3A                    5224 	ld	a, (hl-)
      001846 B6                    5225 	or	a, (hl)
      001847 28 0D                 5226 	jr	Z, 00125$
      001849 01r8Dr01              5227 	ld	bc, #_cursor+6
      00184C 0A                    5228 	ld	a, (bc)
      00184D FE 02                 5229 	cp	a, #0x02
      00184F 30 05                 5230 	jr	NC, 00125$
                                   5231 ;src/main.c:1171: cursor.pile_idx++;
      001851 3C                    5232 	inc	a
      001852 02                    5233 	ld	(bc), a
      001853 C3rDFr1B              5234 	jp	00206$
      001856                       5235 00125$:
                                   5236 ;src/main.c:1173: && cursor.pile_idx) {
      001856 F8 09                 5237 	ldhl	sp,	#9
      001858 3A                    5238 	ld	a, (hl-)
      001859 B6                    5239 	or	a, (hl)
      00185A 28 0C                 5240 	jr	Z, 00121$
      00185C 01r8Dr01              5241 	ld	bc, #_cursor+6
      00185F 0A                    5242 	ld	a, (bc)
      001860 B7                    5243 	or	a, a
      001861 28 05                 5244 	jr	Z, 00121$
                                   5245 ;src/main.c:1174: cursor.pile_idx--;
      001863 3D                    5246 	dec	a
      001864 02                    5247 	ld	(bc), a
      001865 C3rDFr1B              5248 	jp	00206$
      001868                       5249 00121$:
                                   5250 ;src/main.c:1175: } else if (new_input & J_UP) {
      001868 F8 0B                 5251 	ldhl	sp,	#11
      00186A 3A                    5252 	ld	a, (hl-)
      00186B B6                    5253 	or	a, (hl)
      00186C 28 0B                 5254 	jr	Z, 00118$
                                   5255 ;src/main.c:1176: inc_letter(1);
      00186E 3E 01                 5256 	ld	a, #0x01
      001870 F5                    5257 	push	af
      001871 33                    5258 	inc	sp
      001872 CDrE7r16              5259 	call	_inc_letter
      001875 33                    5260 	inc	sp
      001876 C3rDFr1B              5261 	jp	00206$
      001879                       5262 00118$:
                                   5263 ;src/main.c:1177: } else if (new_input & J_DOWN) {
      001879 F8 0D                 5264 	ldhl	sp,	#13
      00187B 3A                    5265 	ld	a, (hl-)
      00187C B6                    5266 	or	a, (hl)
      00187D CArDFr1B              5267 	jp	Z, 00206$
                                   5268 ;src/main.c:1178: inc_letter(-1);
      001880 3E FF                 5269 	ld	a, #0xff
      001882 F5                    5270 	push	af
      001883 33                    5271 	inc	sp
      001884 CDrE7r16              5272 	call	_inc_letter
      001887 33                    5273 	inc	sp
      001888 C3rDFr1B              5274 	jp	00206$
      00188B                       5275 00138$:
                                   5276 ;src/main.c:1180: } else if (new_input & (J_START | J_SELECT | J_A | J_B)) {
      00188B 79                    5277 	ld	a, c
      00188C E6 F0                 5278 	and	a, #0xf0
      00188E CArDFr1B              5279 	jp	Z,00206$
                                   5280 ;src/main.c:1181: start_splash_screen();
      001891 CDr86r15              5281 	call	_start_splash_screen
                                   5282 ;src/main.c:1183: break;
      001894 C3rDFr1B              5283 	jp	00206$
                                   5284 ;src/main.c:1184: case FLAG_GAME_STATE_SETTINGS:
      001897                       5285 00140$:
                                   5286 ;src/main.c:1185: flags |= FLAG_REDRAW_CURSOR;
      001897 F8 0E                 5287 	ldhl	sp,	#14
      001899 7E                    5288 	ld	a, (hl)
      00189A EAr6Br01              5289 	ld	(#_flags),a
                                   5290 ;src/main.c:1186: if (new_input & J_START) {
      00189D F8 02                 5291 	ldhl	sp,	#2
      00189F 3A                    5292 	ld	a, (hl-)
      0018A0 B6                    5293 	or	a, (hl)
      0018A1 28 05                 5294 	jr	Z, 00157$
                                   5295 ;src/main.c:1187: start_game();
      0018A3 CDr34r15              5296 	call	_start_game
      0018A6 18 65                 5297 	jr	00158$
      0018A8                       5298 00157$:
                                   5299 ;src/main.c:1189: && cursor.height) {
      0018A8 F8 09                 5300 	ldhl	sp,	#9
      0018AA 3A                    5301 	ld	a, (hl-)
      0018AB B6                    5302 	or	a, (hl)
      0018AC 28 0B                 5303 	jr	Z, 00153$
      0018AE 01r8Er01              5304 	ld	bc, #_cursor+7
      0018B1 0A                    5305 	ld	a, (bc)
      0018B2 B7                    5306 	or	a, a
      0018B3 28 04                 5307 	jr	Z, 00153$
                                   5308 ;src/main.c:1190: cursor.height--;
      0018B5 3D                    5309 	dec	a
      0018B6 02                    5310 	ld	(bc), a
      0018B7 18 54                 5311 	jr	00158$
      0018B9                       5312 00153$:
                                   5313 ;src/main.c:1192: && cursor.height + 1u < setting_pile_heights[cursor.pile_idx]) {
      0018B9 F8 07                 5314 	ldhl	sp,	#7
      0018BB 3A                    5315 	ld	a, (hl-)
      0018BC B6                    5316 	or	a, (hl)
      0018BD 28 23                 5317 	jr	Z, 00149$
      0018BF 21r8Er01              5318 	ld	hl, #(_cursor + 0x0007)
      0018C2 4E                    5319 	ld	c, (hl)
      0018C3 59                    5320 	ld	e, c
      0018C4 16 00                 5321 	ld	d, #0x00
      0018C6 13                    5322 	inc	de
      0018C7 FAr8Dr01              5323 	ld	a, (#_cursor + 6)
      0018CA C6r5C                 5324 	add	a, #<(_setting_pile_heights)
      0018CC 6F                    5325 	ld	l, a
      0018CD 3E 00                 5326 	ld	a, #0x00
      0018CF CEs00                 5327 	adc	a, #>(_setting_pile_heights)
      0018D1 67                    5328 	ld	h, a
      0018D2 6E                    5329 	ld	l, (hl)
      0018D3 06 00                 5330 	ld	b, #0x00
      0018D5 7B                    5331 	ld	a, e
      0018D6 95                    5332 	sub	a, l
      0018D7 7A                    5333 	ld	a, d
      0018D8 98                    5334 	sbc	a, b
      0018D9 30 07                 5335 	jr	NC, 00149$
                                   5336 ;src/main.c:1193: cursor.height++;
      0018DB 0C                    5337 	inc	c
      0018DC 21r8Er01              5338 	ld	hl, #(_cursor + 0x0007)
      0018DF 71                    5339 	ld	(hl), c
      0018E0 18 2B                 5340 	jr	00158$
      0018E2                       5341 00149$:
                                   5342 ;src/main.c:1195: && cursor.pile_idx) {
      0018E2 F8 0B                 5343 	ldhl	sp,	#11
      0018E4 3A                    5344 	ld	a, (hl-)
      0018E5 B6                    5345 	or	a, (hl)
      0018E6 28 10                 5346 	jr	Z, 00145$
      0018E8 01r8Dr01              5347 	ld	bc, #_cursor + 6
      0018EB 0A                    5348 	ld	a, (bc)
      0018EC B7                    5349 	or	a, a
      0018ED 28 09                 5350 	jr	Z, 00145$
                                   5351 ;src/main.c:1196: cursor.pile_idx--;
      0018EF 3D                    5352 	dec	a
      0018F0 02                    5353 	ld	(bc), a
                                   5354 ;src/main.c:1197: cursor.height = 0;
      0018F1 21r8Er01              5355 	ld	hl, #(_cursor + 0x0007)
      0018F4 36 00                 5356 	ld	(hl), #0x00
      0018F6 18 15                 5357 	jr	00158$
      0018F8                       5358 00145$:
                                   5359 ;src/main.c:1199: && cursor.pile_idx < NUM_SETTING_PILES - 1u) {
      0018F8 F8 0D                 5360 	ldhl	sp,	#13
      0018FA 3A                    5361 	ld	a, (hl-)
      0018FB B6                    5362 	or	a, (hl)
      0018FC 28 0F                 5363 	jr	Z, 00158$
      0018FE 01r8Dr01              5364 	ld	bc, #_cursor + 6
      001901 0A                    5365 	ld	a, (bc)
      001902 FE 03                 5366 	cp	a, #0x03
      001904 30 07                 5367 	jr	NC, 00158$
                                   5368 ;src/main.c:1200: cursor.pile_idx++;
      001906 3C                    5369 	inc	a
      001907 02                    5370 	ld	(bc), a
                                   5371 ;src/main.c:1201: cursor.height = 0;
      001908 21r8Er01              5372 	ld	hl, #(_cursor + 0x0007)
      00190B 36 00                 5373 	ld	(hl), #0x00
      00190D                       5374 00158$:
                                   5375 ;src/main.c:1203: if (new_input & J_A) {
      00190D F8 05                 5376 	ldhl	sp,	#5
      00190F 3A                    5377 	ld	a, (hl-)
      001910 B6                    5378 	or	a, (hl)
      001911 CArDFr1B              5379 	jp	Z, 00206$
                                   5380 ;src/main.c:1204: set_cursor_setting();
      001914 CDr25r0E              5381 	call	_set_cursor_setting
                                   5382 ;src/main.c:1206: break;
      001917 C3rDFr1B              5383 	jp	00206$
                                   5384 ;src/main.c:1207: case FLAG_GAME_STATE_INGAME:
      00191A                       5385 00161$:
                                   5386 ;src/main.c:1208: if (cursor.held_card) {
      00191A 21r87r01              5387 	ld	hl, #_cursor
      00191D 2A                    5388 	ld	a, (hl+)
      00191E B6                    5389 	or	a,(hl)
      00191F CArD4r19              5390 	jp	Z, 00202$
                                   5391 ;src/main.c:1209: flags |= FLAG_REDRAW_HAND;
      001922 F8 03                 5392 	ldhl	sp,	#3
      001924 7E                    5393 	ld	a, (hl)
      001925 F6 02                 5394 	or	a, #0x02
      001927 EAr6Br01              5395 	ld	(#_flags),a
                                   5396 ;src/main.c:1211: && cursor.hand_pile_idx != 0) {
      00192A F8 09                 5397 	ldhl	sp,	#9
      00192C 3A                    5398 	ld	a, (hl-)
      00192D B6                    5399 	or	a, (hl)
      00192E 28 0B                 5400 	jr	Z, 00166$
      001930 01r8Cr01              5401 	ld	bc, #_cursor+5
      001933 0A                    5402 	ld	a, (bc)
      001934 B7                    5403 	or	a, a
      001935 28 04                 5404 	jr	Z, 00166$
                                   5405 ;src/main.c:1212: cursor.hand_pile_idx--;
      001937 3D                    5406 	dec	a
      001938 02                    5407 	ld	(bc), a
      001939 18 10                 5408 	jr	00167$
      00193B                       5409 00166$:
                                   5410 ;src/main.c:1214: && cursor.hand_pile_idx < 9) {
      00193B F8 07                 5411 	ldhl	sp,	#7
      00193D 3A                    5412 	ld	a, (hl-)
      00193E B6                    5413 	or	a, (hl)
      00193F 28 0A                 5414 	jr	Z, 00167$
      001941 01r8Cr01              5415 	ld	bc, #_cursor+5
      001944 0A                    5416 	ld	a, (bc)
      001945 FE 09                 5417 	cp	a, #0x09
      001947 30 02                 5418 	jr	NC, 00167$
                                   5419 ;src/main.c:1215: cursor.hand_pile_idx++;
      001949 3C                    5420 	inc	a
      00194A 02                    5421 	ld	(bc), a
      00194B                       5422 00167$:
                                   5423 ;src/main.c:1218: && ~flags & FLAG_PLAYING_ANIMATION) {
      00194B F8 05                 5424 	ldhl	sp,	#5
      00194D 3A                    5425 	ld	a, (hl-)
      00194E B6                    5426 	or	a, (hl)
      00194F CArDFr1B              5427 	jp	Z, 00206$
      001952 FAr6Br01              5428 	ld	a, (#_flags)
      001955 06 00                 5429 	ld	b, #0x00
      001957 2F                    5430 	cpl
      001958 4F                    5431 	ld	c, a
      001959 78                    5432 	ld	a, b
      00195A 2F                    5433 	cpl
      00195B CB 51                 5434 	bit	2, c
      00195D CArDFr1B              5435 	jp	Z,00206$
                                   5436 ;src/main.c:789: Pile *pile = IDX_PTR(piles, cursor.hand_pile_idx);
      001960 01r38r01              5437 	ld	bc, #_piles+0
      001963 FAr8Cr01              5438 	ld	a, (#(_cursor + 0x0005) + 0)
      001966 F8 0E                 5439 	ldhl	sp,	#14
      001968 77                    5440 	ld	(hl), a
      001969 F8 0E                 5441 	ldhl	sp,	#14
      00196B 5E                    5442 	ld	e, (hl)
      00196C 16 00                 5443 	ld	d, #0x00
      00196E 6B                    5444 	ld	l, e
      00196F 62                    5445 	ld	h, d
      001970 29                    5446 	add	hl, hl
      001971 29                    5447 	add	hl, hl
      001972 19                    5448 	add	hl, de
      001973 09                    5449 	add	hl, bc
      001974 4D                    5450 	ld	c, l
      001975 44                    5451 	ld	b, h
                                   5452 ;src/main.c:790: if (cursor.hand_pile_idx == cursor.pile_idx) {
      001976 21r8Dr01              5453 	ld	hl, #_cursor + 6
      001979 5E                    5454 	ld	e, (hl)
      00197A F8 0E                 5455 	ldhl	sp,	#14
      00197C 7E                    5456 	ld	a, (hl)
      00197D 93                    5457 	sub	a, e
      00197E 20 09                 5458 	jr	NZ, 00214$
                                   5459 ;src/main.c:791: pile_append_cursor_stack(pile);
      001980 C5                    5460 	push	bc
      001981 CDr4Dr13              5461 	call	_pile_append_cursor_stack
      001984 E8 02                 5462 	add	sp, #2
      001986 C3rDFr1B              5463 	jp	00206$
      001989                       5464 00214$:
                                   5465 ;src/main.c:792: } else if (!pile->height
      001989 21 04 00              5466 	ld	hl, #0x0004
      00198C 09                    5467 	add	hl, bc
      00198D 7E                    5468 	ld	a, (hl)
      00198E B7                    5469 	or	a, a
      00198F 28 2E                 5470 	jr	Z, 00212$
                                   5471 ;src/main.c:793: || RANK(pile->top->data) == RANK(cursor.held_card->data) + 1u) {
      001991 69                    5472 	ld	l, c
      001992 60                    5473 	ld	h, b
      001993 23                    5474 	inc	hl
      001994 23                    5475 	inc	hl
      001995 2A                    5476 	ld	a, (hl+)
      001996 66                    5477 	ld	h, (hl)
      001997 6F                    5478 	ld	l, a
      001998 23                    5479 	inc	hl
      001999 23                    5480 	inc	hl
      00199A 7E                    5481 	ld	a, (hl)
      00199B E6 0F                 5482 	and	a, #0x0f
      00199D F8 0D                 5483 	ldhl	sp,	#13
      00199F 77                    5484 	ld	(hl), a
      0019A0 AF                    5485 	xor	a, a
      0019A1 23                    5486 	inc	hl
      0019A2 77                    5487 	ld	(hl), a
      0019A3 21r87r01              5488 	ld	hl, #_cursor
      0019A6 2A                    5489 	ld	a, (hl+)
      0019A7 66                    5490 	ld	h, (hl)
      0019A8 6F                    5491 	ld	l, a
      0019A9 23                    5492 	inc	hl
      0019AA 23                    5493 	inc	hl
      0019AB 7E                    5494 	ld	a, (hl)
      0019AC E6 0F                 5495 	and	a, #0x0f
      0019AE 5F                    5496 	ld	e, a
      0019AF 16 00                 5497 	ld	d, #0x00
      0019B1 13                    5498 	inc	de
      0019B2 F8 0D                 5499 	ldhl	sp,	#13
      0019B4 7E                    5500 	ld	a, (hl)
      0019B5 93                    5501 	sub	a, e
      0019B6 C2rDFr1B              5502 	jp	NZ,00206$
      0019B9 23                    5503 	inc	hl
      0019BA 7E                    5504 	ld	a, (hl)
      0019BB 92                    5505 	sub	a, d
      0019BC C2rDFr1B              5506 	jp	NZ,00206$
      0019BF                       5507 00212$:
                                   5508 ;src/main.c:794: pile_append_cursor_stack(pile);
      0019BF C5                    5509 	push	bc
      0019C0 CDr4Dr13              5510 	call	_pile_append_cursor_stack
      0019C3 E8 02                 5511 	add	sp, #2
                                   5512 ;src/main.c:795: score--;
      0019C5 21r6Fr01              5513 	ld	hl, #_score + 1
      0019C8 2B                    5514 	dec	hl
      0019C9 2A                    5515 	ld	a, (hl+)
      0019CA 5F                    5516 	ld	e, a
      0019CB 56                    5517 	ld	d, (hl)
      0019CC 1B                    5518 	dec	de
      0019CD 2B                    5519 	dec	hl
      0019CE 7B                    5520 	ld	a, e
      0019CF 22                    5521 	ld	(hl+), a
      0019D0 72                    5522 	ld	(hl), d
                                   5523 ;src/main.c:1219: cursor_place_stack();
      0019D1 C3rDFr1B              5524 	jp	00206$
      0019D4                       5525 00202$:
                                   5526 ;src/main.c:1222: flags |= FLAG_REDRAW_CURSOR;
      0019D4 F8 0E                 5527 	ldhl	sp,	#14
      0019D6 7E                    5528 	ld	a, (hl)
      0019D7 EAr6Br01              5529 	ld	(#_flags),a
                                   5530 ;src/main.c:1223: if (new_input & J_DOWN) {
      0019DA F8 0D                 5531 	ldhl	sp,	#13
      0019DC 3A                    5532 	ld	a, (hl-)
      0019DD B6                    5533 	or	a, (hl)
      0019DE 28 3C                 5534 	jr	Z, 00192$
                                   5535 ;src/main.c:1224: if (cursor.pile_idx == PILE_IDX_DECK)
      0019E0 21r8Dr01              5536 	ld	hl, #_cursor + 6
      0019E3 46                    5537 	ld	b, (hl)
      0019E4 78                    5538 	ld	a, b
                                   5539 ;src/main.c:1225: cursor.pile_idx = 0;
      0019E5 D6 0A                 5540 	sub	a,#0x0a
      0019E7 20 03                 5541 	jr	NZ, 00175$
      0019E9 77                    5542 	ld	(hl),a
      0019EA 18 73                 5543 	jr	00193$
      0019EC                       5544 00175$:
                                   5545 ;src/main.c:1226: else if (cursor.height + 1u < piles[cursor.pile_idx].height)
      0019EC 21r8Er01              5546 	ld	hl, #(_cursor + 0x0007)
      0019EF 4E                    5547 	ld	c, (hl)
      0019F0 59                    5548 	ld	e, c
      0019F1 16 00                 5549 	ld	d, #0x00
      0019F3 13                    5550 	inc	de
      0019F4 F8 0D                 5551 	ldhl	sp,	#13
      0019F6 7B                    5552 	ld	a, e
      0019F7 22                    5553 	ld	(hl+), a
      0019F8 72                    5554 	ld	(hl), d
      0019F9 58                    5555 	ld	e, b
      0019FA 16 00                 5556 	ld	d, #0x00
      0019FC 6B                    5557 	ld	l, e
      0019FD 62                    5558 	ld	h, d
      0019FE 29                    5559 	add	hl, hl
      0019FF 29                    5560 	add	hl, hl
      001A00 19                    5561 	add	hl, de
      001A01 11r38r01              5562 	ld	de, #_piles
      001A04 19                    5563 	add	hl, de
      001A05 23                    5564 	inc	hl
      001A06 23                    5565 	inc	hl
      001A07 23                    5566 	inc	hl
      001A08 23                    5567 	inc	hl
      001A09 5E                    5568 	ld	e, (hl)
      001A0A 06 00                 5569 	ld	b, #0x00
      001A0C F8 0D                 5570 	ldhl	sp,	#13
      001A0E 7E                    5571 	ld	a, (hl)
      001A0F 93                    5572 	sub	a, e
      001A10 23                    5573 	inc	hl
      001A11 7E                    5574 	ld	a, (hl)
      001A12 98                    5575 	sbc	a, b
      001A13 30 4A                 5576 	jr	NC, 00193$
                                   5577 ;src/main.c:1227: cursor.height++;
      001A15 0C                    5578 	inc	c
      001A16 21r8Er01              5579 	ld	hl, #(_cursor + 0x0007)
      001A19 71                    5580 	ld	(hl), c
      001A1A 18 43                 5581 	jr	00193$
      001A1C                       5582 00192$:
                                   5583 ;src/main.c:1228: } else if (new_input & J_UP) {
      001A1C F8 0B                 5584 	ldhl	sp,	#11
      001A1E 3A                    5585 	ld	a, (hl-)
      001A1F B6                    5586 	or	a, (hl)
      001A20 28 12                 5587 	jr	Z, 00189$
                                   5588 ;src/main.c:1229: if (cursor.height == 0)
      001A22 01r8Er01              5589 	ld	bc, #_cursor + 7
      001A25 0A                    5590 	ld	a, (bc)
      001A26 B7                    5591 	or	a, a
      001A27 20 07                 5592 	jr	NZ, 00178$
                                   5593 ;src/main.c:1230: cursor.pile_idx = PILE_IDX_DECK;
      001A29 21r8Dr01              5594 	ld	hl, #(_cursor + 0x0006)
      001A2C 36 0A                 5595 	ld	(hl), #0x0a
      001A2E 18 2F                 5596 	jr	00193$
      001A30                       5597 00178$:
                                   5598 ;src/main.c:1232: cursor.height--;
      001A30 3D                    5599 	dec	a
      001A31 02                    5600 	ld	(bc), a
      001A32 18 2B                 5601 	jr	00193$
      001A34                       5602 00189$:
                                   5603 ;src/main.c:1234: && cursor.pile_idx != 0
      001A34 F8 09                 5604 	ldhl	sp,	#9
      001A36 3A                    5605 	ld	a, (hl-)
      001A37 B6                    5606 	or	a, (hl)
      001A38 28 12                 5607 	jr	Z, 00184$
      001A3A 01r8Dr01              5608 	ld	bc, #_cursor+6
      001A3D 0A                    5609 	ld	a, (bc)
      001A3E B7                    5610 	or	a, a
      001A3F 28 0B                 5611 	jr	Z, 00184$
                                   5612 ;src/main.c:1235: && cursor.pile_idx != PILE_IDX_DECK) {
      001A41 FE 0A                 5613 	cp	a, #0x0a
      001A43 28 07                 5614 	jr	Z, 00184$
                                   5615 ;src/main.c:1236: cursor.pile_idx--;
      001A45 3D                    5616 	dec	a
      001A46 02                    5617 	ld	(bc), a
                                   5618 ;src/main.c:1237: cursor_adjust_height();
      001A47 CDrB1r0C              5619 	call	_cursor_adjust_height
      001A4A 18 13                 5620 	jr	00193$
      001A4C                       5621 00184$:
                                   5622 ;src/main.c:1239: && cursor.pile_idx < PILE_IDX_DECK - 1u) {
      001A4C F8 07                 5623 	ldhl	sp,	#7
      001A4E 3A                    5624 	ld	a, (hl-)
      001A4F B6                    5625 	or	a, (hl)
      001A50 28 0D                 5626 	jr	Z, 00193$
      001A52 01r8Dr01              5627 	ld	bc, #_cursor+6
      001A55 0A                    5628 	ld	a, (bc)
      001A56 FE 09                 5629 	cp	a, #0x09
      001A58 30 05                 5630 	jr	NC, 00193$
                                   5631 ;src/main.c:1240: cursor.pile_idx++;
      001A5A 3C                    5632 	inc	a
      001A5B 02                    5633 	ld	(bc), a
                                   5634 ;src/main.c:1241: cursor_adjust_height();
      001A5C CDrB1r0C              5635 	call	_cursor_adjust_height
      001A5F                       5636 00193$:
                                   5637 ;src/main.c:1244: && ~flags & FLAG_PLAYING_ANIMATION) {
      001A5F F8 05                 5638 	ldhl	sp,	#5
      001A61 3A                    5639 	ld	a, (hl-)
      001A62 B6                    5640 	or	a, (hl)
      001A63 CArDFr1B              5641 	jp	Z, 00206$
      001A66 FAr6Br01              5642 	ld	a, (#_flags)
      001A69 06 00                 5643 	ld	b, #0x00
      001A6B 2F                    5644 	cpl
      001A6C 4F                    5645 	ld	c, a
      001A6D 78                    5646 	ld	a, b
      001A6E 2F                    5647 	cpl
      001A6F CB 51                 5648 	bit	2, c
      001A71 CArDFr1B              5649 	jp	Z,00206$
                                   5650 ;src/main.c:1245: if (cursor.pile_idx == PILE_IDX_DECK && top_card_idx != 104u)
      001A74 21r8Dr01              5651 	ld	hl, #(_cursor + 0x0006)
      001A77 4E                    5652 	ld	c, (hl)
      001A78 79                    5653 	ld	a, c
      001A79 D6 0A                 5654 	sub	a, #0x0a
      001A7B C2r15r1B              5655 	jp	NZ,00195$
      001A7E FAr6Ar01              5656 	ld	a, (#_top_card_idx)
      001A81 D6 68                 5657 	sub	a, #0x68
      001A83 CAr15r1B              5658 	jp	Z,00195$
                                   5659 ;src/main.c:967: Pile *pile = IDX_PTR(piles, 0);
      001A86 01r38r01              5660 	ld	bc, #_piles
                                   5661 ;src/main.c:970: for (i = 0; i < 10u; i++) {
      001A89 1E 00                 5662 	ld	e, #0x00
      001A8B                       5663 00230$:
                                   5664 ;src/main.c:971: if (!pile->height)
      001A8B 21 04 00              5665 	ld	hl, #0x0004
      001A8E 09                    5666 	add	hl, bc
      001A8F 7E                    5667 	ld	a, (hl)
      001A90 B7                    5668 	or	a, a
      001A91 CArDFr1B              5669 	jp	Z, 00206$
                                   5670 ;src/main.c:973: pile++;
      001A94 03                    5671 	inc	bc
      001A95 03                    5672 	inc	bc
      001A96 03                    5673 	inc	bc
      001A97 03                    5674 	inc	bc
      001A98 03                    5675 	inc	bc
                                   5676 ;src/main.c:970: for (i = 0; i < 10u; i++) {
      001A99 1C                    5677 	inc	e
      001A9A 7B                    5678 	ld	a, e
      001A9B D6 0A                 5679 	sub	a, #0x0a
      001A9D 38 EC                 5680 	jr	C, 00230$
                                   5681 ;src/main.c:976: pile = IDX_PTR(piles, 0);
      001A9F F8 0C                 5682 	ldhl	sp,	#12
      001AA1 3Er38                 5683 	ld	a, #<(_piles)
      001AA3 22                    5684 	ld	(hl+), a
      001AA4 36s01                 5685 	ld	(hl), #>(_piles)
                                   5686 ;src/main.c:977: Card *deck_top = IDX_PTR(deck, top_card_idx);
      001AA6 21r6Ar01              5687 	ld	hl, #_top_card_idx
      001AA9 4E                    5688 	ld	c, (hl)
      001AAA 06 00                 5689 	ld	b, #0x00
      001AAC 69                    5690 	ld	l, c
      001AAD 60                    5691 	ld	h, b
      001AAE 29                    5692 	add	hl, hl
      001AAF 09                    5693 	add	hl, bc
      001AB0 01r00r00              5694 	ld	bc,#_deck
      001AB3 09                    5695 	add	hl,bc
      001AB4 4D                    5696 	ld	c, l
      001AB5 44                    5697 	ld	b, h
                                   5698 ;src/main.c:978: top_card_idx += 10u;
      001AB6 21r6Ar01              5699 	ld	hl, #_top_card_idx
      001AB9 7E                    5700 	ld	a, (hl)
      001ABA C6 0A                 5701 	add	a, #0x0a
      001ABC 77                    5702 	ld	(hl), a
                                   5703 ;src/main.c:981: for (i = 0; i < 10u; i++) {
      001ABD F8 0E                 5704 	ldhl	sp,	#14
      001ABF 36 0A                 5705 	ld	(hl), #0x0a
      001AC1                       5706 00234$:
                                   5707 ;src/main.c:982: pile->top->next_card = deck_top;
                                   5708 ;c
      001AC1 F8 0C                 5709 	ldhl	sp,#12
      001AC3 2A                    5710 	ld	a, (hl+)
      001AC4 5F                    5711 	ld	e, a
      001AC5 56                    5712 	ld	d, (hl)
      001AC6 21 02 00              5713 	ld	hl, #0x0002
      001AC9 19                    5714 	add	hl, de
      001ACA E5                    5715 	push	hl
      001ACB 7D                    5716 	ld	a, l
      001ACC F8 0C                 5717 	ldhl	sp,	#12
      001ACE 77                    5718 	ld	(hl), a
      001ACF E1                    5719 	pop	hl
      001AD0 7C                    5720 	ld	a, h
      001AD1 F8 0B                 5721 	ldhl	sp,	#11
      001AD3 32                    5722 	ld	(hl-), a
      001AD4 2A                    5723 	ld	a, (hl+)
      001AD5 5F                    5724 	ld	e, a
      001AD6 56                    5725 	ld	d, (hl)
      001AD7 1A                    5726 	ld	a, (de)
      001AD8 6F                    5727 	ld	l, a
      001AD9 13                    5728 	inc	de
      001ADA 1A                    5729 	ld	a, (de)
      001ADB 67                    5730 	ld	h, a
      001ADC 79                    5731 	ld	a, c
      001ADD 22                    5732 	ld	(hl+), a
      001ADE 70                    5733 	ld	(hl), b
                                   5734 ;src/main.c:983: pile->top = deck_top;
      001ADF F8 0A                 5735 	ldhl	sp,	#10
      001AE1 2A                    5736 	ld	a, (hl+)
      001AE2 66                    5737 	ld	h, (hl)
      001AE3 6F                    5738 	ld	l, a
      001AE4 79                    5739 	ld	a, c
      001AE5 22                    5740 	ld	(hl+), a
      001AE6 70                    5741 	ld	(hl), b
                                   5742 ;src/main.c:984: pile->height++;
                                   5743 ;c
      001AE7 F8 0C                 5744 	ldhl	sp,#12
      001AE9 2A                    5745 	ld	a, (hl+)
      001AEA 5F                    5746 	ld	e, a
      001AEB 56                    5747 	ld	d, (hl)
      001AEC 21 04 00              5748 	ld	hl, #0x0004
      001AEF 19                    5749 	add	hl, de
      001AF0 5D                    5750 	ld	e, l
      001AF1 54                    5751 	ld	d, h
      001AF2 1A                    5752 	ld	a, (de)
      001AF3 3C                    5753 	inc	a
      001AF4 12                    5754 	ld	(de), a
                                   5755 ;src/main.c:985: deck_top++;
      001AF5 03                    5756 	inc	bc
      001AF6 03                    5757 	inc	bc
      001AF7 03                    5758 	inc	bc
                                   5759 ;src/main.c:986: pile++;
                                   5760 ;c
      001AF8 F8 0C                 5761 	ldhl	sp,#12
      001AFA 2A                    5762 	ld	a, (hl+)
      001AFB 5F                    5763 	ld	e, a
      001AFC 56                    5764 	ld	d, (hl)
      001AFD 21 05 00              5765 	ld	hl, #0x0005
      001B00 19                    5766 	add	hl, de
      001B01 E5                    5767 	push	hl
      001B02 7D                    5768 	ld	a, l
      001B03 F8 0E                 5769 	ldhl	sp,	#14
      001B05 77                    5770 	ld	(hl), a
      001B06 E1                    5771 	pop	hl
      001B07 7C                    5772 	ld	a, h
      001B08 F8 0D                 5773 	ldhl	sp,	#13
      001B0A 22                    5774 	ld	(hl+), a
                                   5775 ;src/main.c:981: for (i = 0; i < 10u; i++) {
      001B0B 35                    5776 	dec	(hl)
      001B0C 7E                    5777 	ld	a, (hl)
      001B0D 20 B2                 5778 	jr	NZ, 00234$
                                   5779 ;src/main.c:989: dynamic_metasprite_deal();
      001B0F CDr7Fr0B              5780 	call	_dynamic_metasprite_deal
                                   5781 ;src/main.c:1246: deal();
      001B12 C3rDFr1B              5782 	jp	00206$
      001B15                       5783 00195$:
                                   5784 ;src/main.c:763: Pile *pile = IDX_PTR(piles, cursor.pile_idx);
      001B15 06 00                 5785 	ld	b, #0x00
      001B17 69                    5786 	ld	l, c
      001B18 60                    5787 	ld	h, b
      001B19 29                    5788 	add	hl, hl
      001B1A 29                    5789 	add	hl, hl
      001B1B 09                    5790 	add	hl, bc
      001B1C 3Er38                 5791 	ld	a, #<(_piles)
      001B1E 85                    5792 	add	a, l
      001B1F 4F                    5793 	ld	c, a
      001B20 3Es01                 5794 	ld	a, #>(_piles)
      001B22 8C                    5795 	adc	a, h
      001B23 47                    5796 	ld	b, a
      001B24 F8 0A                 5797 	ldhl	sp,	#10
      001B26 79                    5798 	ld	a, c
      001B27 22                    5799 	ld	(hl+), a
                                   5800 ;src/main.c:764: Card *top = pile->base;
      001B28 78                    5801 	ld	a, b
      001B29 32                    5802 	ld	(hl-), a
      001B2A 2A                    5803 	ld	a, (hl+)
      001B2B 5F                    5804 	ld	e, a
      001B2C 56                    5805 	ld	d, (hl)
      001B2D 1A                    5806 	ld	a, (de)
      001B2E 23                    5807 	inc	hl
      001B2F 23                    5808 	inc	hl
      001B30 22                    5809 	ld	(hl+), a
      001B31 13                    5810 	inc	de
      001B32 1A                    5811 	ld	a, (de)
      001B33 77                    5812 	ld	(hl), a
                                   5813 ;src/main.c:765: for (i = 1; i < cursor.height; i++)
      001B34 06 01                 5814 	ld	b, #0x01
      001B36                       5815 00236$:
      001B36 21r8Er01              5816 	ld	hl, #(_cursor + 0x0007)
      001B39 4E                    5817 	ld	c, (hl)
      001B3A 78                    5818 	ld	a, b
      001B3B 91                    5819 	sub	a, c
      001B3C 30 0E                 5820 	jr	NC, 00222$
                                   5821 ;src/main.c:766: top = top->next_card;
      001B3E F8 0D                 5822 	ldhl	sp,#13
      001B40 2A                    5823 	ld	a, (hl+)
      001B41 5F                    5824 	ld	e, a
      001B42 56                    5825 	ld	d, (hl)
      001B43 1A                    5826 	ld	a, (de)
      001B44 2B                    5827 	dec	hl
      001B45 22                    5828 	ld	(hl+), a
      001B46 13                    5829 	inc	de
      001B47 1A                    5830 	ld	a, (de)
      001B48 77                    5831 	ld	(hl), a
                                   5832 ;src/main.c:765: for (i = 1; i < cursor.height; i++)
      001B49 04                    5833 	inc	b
      001B4A 18 EA                 5834 	jr	00236$
      001B4C                       5835 00222$:
                                   5836 ;src/main.c:767: Card *stack = cursor.height ? top->next_card : top;
      001B4C 79                    5837 	ld	a, c
      001B4D B7                    5838 	or	a, a
      001B4E 28 0C                 5839 	jr	Z, 00240$
      001B50 F8 0D                 5840 	ldhl	sp,#13
      001B52 2A                    5841 	ld	a, (hl+)
      001B53 5F                    5842 	ld	e, a
      001B54 56                    5843 	ld	d, (hl)
      001B55 1A                    5844 	ld	a, (de)
      001B56 4F                    5845 	ld	c, a
      001B57 13                    5846 	inc	de
      001B58 1A                    5847 	ld	a, (de)
      001B59 47                    5848 	ld	b, a
      001B5A 18 05                 5849 	jr	00241$
      001B5C                       5850 00240$:
      001B5C F8 0D                 5851 	ldhl	sp,#13
      001B5E 2A                    5852 	ld	a, (hl+)
      001B5F 4F                    5853 	ld	c, a
      001B60 46                    5854 	ld	b, (hl)
      001B61                       5855 00241$:
                                   5856 ;src/main.c:768: if (!(VISIBLE(stack->data) && is_stack_coherent(stack)))
      001B61 59                    5857 	ld	e, c
      001B62 50                    5858 	ld	d, b
      001B63 13                    5859 	inc	de
      001B64 13                    5860 	inc	de
      001B65 1A                    5861 	ld	a, (de)
      001B66 CB 77                 5862 	bit	6, a
      001B68 28 75                 5863 	jr	Z, 00206$
      001B6A C5                    5864 	push	bc
      001B6B C5                    5865 	push	bc
      001B6C CDr89r12              5866 	call	_is_stack_coherent
      001B6F E8 02                 5867 	add	sp, #2
      001B71 7B                    5868 	ld	a, e
      001B72 C1                    5869 	pop	bc
      001B73 B7                    5870 	or	a, a
      001B74 28 69                 5871 	jr	Z, 00206$
                                   5872 ;src/main.c:771: cursor.held_card = stack;
      001B76 21r87r01              5873 	ld	hl, #_cursor
      001B79 79                    5874 	ld	a, c
      001B7A 22                    5875 	ld	(hl+), a
      001B7B 70                    5876 	ld	(hl), b
                                   5877 ;src/main.c:772: cursor.hand_pile_idx = cursor.pile_idx;
      001B7C FAr8Dr01              5878 	ld	a, (#(_cursor + 0x0006) + 0)
      001B7F EAr8Cr01              5879 	ld	(#(_cursor + 0x0005)),a
                                   5880 ;src/main.c:773: cursor.held_stack_size = pile->height - cursor.height;
                                   5881 ;c
      001B82 F8 0A                 5882 	ldhl	sp,#10
      001B84 2A                    5883 	ld	a, (hl+)
      001B85 5F                    5884 	ld	e, a
      001B86 56                    5885 	ld	d, (hl)
      001B87 21 04 00              5886 	ld	hl, #0x0004
      001B8A 19                    5887 	add	hl, de
      001B8B 4D                    5888 	ld	c, l
      001B8C 44                    5889 	ld	b, h
      001B8D 0A                    5890 	ld	a, (bc)
      001B8E 21r8Er01              5891 	ld	hl, #(_cursor + 0x0007)
      001B91 6E                    5892 	ld	l, (hl)
      001B92 95                    5893 	sub	a, l
      001B93 EAr8Br01              5894 	ld	(#(_cursor + 0x0004)),a
                                   5895 ;src/main.c:774: pile->height = cursor.height;
      001B96 FAr8Er01              5896 	ld	a, (#(_cursor + 0x0007) + 0)
      001B99 02                    5897 	ld	(bc), a
                                   5898 ;src/main.c:775: flags |= FLAG_REDRAW_HAND;
      001B9A 21r6Br01              5899 	ld	hl, #_flags
      001B9D 7E                    5900 	ld	a, (hl)
      001B9E F6 02                 5901 	or	a, #0x02
      001BA0 77                    5902 	ld	(hl), a
                                   5903 ;src/main.c:776: if (cursor.height) {
      001BA1 FAr8Er01              5904 	ld	a, (#(_cursor + 0x0007) + 0)
      001BA4 F8 0C                 5905 	ldhl	sp,	#12
      001BA6 77                    5906 	ld	(hl), a
                                   5907 ;src/main.c:777: pile->top = top;
      001BA7 F8 0A                 5908 	ldhl	sp,#10
      001BA9 2A                    5909 	ld	a, (hl+)
      001BAA 4F                    5910 	ld	c, a
      001BAB 46                    5911 	ld	b, (hl)
      001BAC 03                    5912 	inc	bc
      001BAD 03                    5913 	inc	bc
                                   5914 ;src/main.c:779: cursor.card_to_show = top;
                                   5915 ;src/main.c:776: if (cursor.height) {
      001BAE 23                    5916 	inc	hl
      001BAF 7E                    5917 	ld	a, (hl)
      001BB0 B7                    5918 	or	a, a
      001BB1 28 1A                 5919 	jr	Z, 00227$
                                   5920 ;src/main.c:777: pile->top = top;
      001BB3 23                    5921 	inc	hl
      001BB4 2A                    5922 	ld	a, (hl+)
      001BB5 02                    5923 	ld	(bc), a
      001BB6 03                    5924 	inc	bc
      001BB7 7E                    5925 	ld	a, (hl)
      001BB8 02                    5926 	ld	(bc), a
                                   5927 ;src/main.c:778: top->next_card = NULL;
      001BB9 2B                    5928 	dec	hl
      001BBA 2A                    5929 	ld	a, (hl+)
      001BBB 66                    5930 	ld	h, (hl)
      001BBC 6F                    5931 	ld	l, a
      001BBD AF                    5932 	xor	a, a
      001BBE 22                    5933 	ld	(hl+), a
      001BBF 77                    5934 	ld	(hl), a
                                   5935 ;src/main.c:779: cursor.card_to_show = top;
      001BC0 11r89r01              5936 	ld	de, #(_cursor + 0x0002)
      001BC3 F8 0D                 5937 	ldhl	sp,	#13
      001BC5 7E                    5938 	ld	a, (hl)
      001BC6 12                    5939 	ld	(de), a
      001BC7 13                    5940 	inc	de
      001BC8 23                    5941 	inc	hl
      001BC9 7E                    5942 	ld	a, (hl)
      001BCA 12                    5943 	ld	(de), a
      001BCB 18 12                 5944 	jr	00206$
      001BCD                       5945 00227$:
                                   5946 ;src/main.c:781: pile->base = NULL;
      001BCD F8 0A                 5947 	ldhl	sp,	#10
      001BCF 2A                    5948 	ld	a, (hl+)
      001BD0 66                    5949 	ld	h, (hl)
      001BD1 6F                    5950 	ld	l, a
      001BD2 AF                    5951 	xor	a, a
      001BD3 22                    5952 	ld	(hl+), a
      001BD4 77                    5953 	ld	(hl), a
                                   5954 ;src/main.c:782: pile->top = NULL;
      001BD5 AF                    5955 	xor	a, a
      001BD6 02                    5956 	ld	(bc), a
      001BD7 03                    5957 	inc	bc
      001BD8 02                    5958 	ld	(bc), a
                                   5959 ;src/main.c:783: cursor.card_to_show = NULL;
      001BD9 21r89r01              5960 	ld	hl, #(_cursor + 0x0002)
      001BDC AF                    5961 	xor	a, a
      001BDD 22                    5962 	ld	(hl+), a
      001BDE 77                    5963 	ld	(hl), a
                                   5964 ;src/main.c:1252: }
      001BDF                       5965 00206$:
                                   5966 ;src/main.c:1254: prev_input = input;
      001BDF F8 00                 5967 	ldhl	sp,	#0
      001BE1 7E                    5968 	ld	a, (hl)
      001BE2 EAr91r01              5969 	ld	(#_input_process_prev_input_65536_371),a
                                   5970 ;src/main.c:1255: }
      001BE5 E8 0F                 5971 	add	sp, #15
      001BE7 C9                    5972 	ret
                                   5973 ;src/main.c:1257: void main(void)
                                   5974 ;	---------------------------------
                                   5975 ; Function main
                                   5976 ; ---------------------------------
      001BE8                       5977 _main::
      001BE8 E8 F1                 5978 	add	sp, #-15
                                   5979 ;src/main.c:1259: font_init();
      001BEA CDr00r00              5980 	call	_font_init
                                   5981 ;src/main.c:1260: font_t font = font_load(font_min);
      001BED 21r00r00              5982 	ld	hl, #_font_min
      001BF0 E5                    5983 	push	hl
      001BF1 CDr00r00              5984 	call	_font_load
      001BF4 E8 02                 5985 	add	sp, #2
                                   5986 ;src/main.c:1261: font_set(font);
      001BF6 D5                    5987 	push	de
      001BF7 CDr00r00              5988 	call	_font_set
      001BFA E8 02                 5989 	add	sp, #2
                                   5990 ;src/main.c:1262: set_bkg_data(OFFSET_BKG_FONT_ADDON, N_FONT_ADDON, font_addon);
      001BFC 21r00r00              5991 	ld	hl, #_font_addon
      001BFF E5                    5992 	push	hl
      001C00 11 25 01              5993 	ld	de, #0x0125
      001C03 D5                    5994 	push	de
      001C04 CDr00r00              5995 	call	_set_bkg_data
      001C07 E8 04                 5996 	add	sp, #4
                                   5997 ;src/main.c:1264: set_bkg_data(OFFSET_BKG_TITLE, N_TITLE, title_textures);
      001C09 21r00r00              5998 	ld	hl, #_title_textures
      001C0C E5                    5999 	push	hl
      001C0D 11 80 30              6000 	ld	de, #0x3080
      001C10 D5                    6001 	push	de
      001C11 CDr00r00              6002 	call	_set_bkg_data
      001C14 E8 04                 6003 	add	sp, #4
                                   6004 ;src/main.c:1265: set_bkg_data(OFFSET_BKG_CARD, N_CARD, card_textures);
      001C16 21r00r00              6005 	ld	hl, #_card_textures
      001C19 E5                    6006 	push	hl
      001C1A 11 B0 3A              6007 	ld	de, #0x3ab0
      001C1D D5                    6008 	push	de
      001C1E CDr00r00              6009 	call	_set_bkg_data
      001C21 E8 04                 6010 	add	sp, #4
                                   6011 ;src/main.c:1266: set_bkg_data(OFFSET_BKG_CARD_ADDON, N_CARD_ADDON, card_addon);
      001C23 21r00r00              6012 	ld	hl, #_card_addon
      001C26 E5                    6013 	push	hl
      001C27 11 26 17              6014 	ld	de, #0x1726
      001C2A D5                    6015 	push	de
      001C2B CDr00r00              6016 	call	_set_bkg_data
      001C2E E8 04                 6017 	add	sp, #4
                                   6018 ;src/main.c:1267: set_bkg_data(OFFSET_BKG_BUTTON, N_BUTTON, button_textures);
      001C30 21r00r00              6019 	ld	hl, #_button_textures
      001C33 E5                    6020 	push	hl
      001C34 11 3D 07              6021 	ld	de, #0x073d
      001C37 D5                    6022 	push	de
      001C38 CDr00r00              6023 	call	_set_bkg_data
      001C3B E8 04                 6024 	add	sp, #4
                                   6025 ;src/main.c:1268: set_sprite_data(OFFSET_SPRITE_CURSOR, N_CURSOR, cursor_textures);
      001C3D 21r00r00              6026 	ld	hl, #_cursor_textures
      001C40 E5                    6027 	push	hl
      001C41 11 01 0A              6028 	ld	de, #0x0a01
      001C44 D5                    6029 	push	de
      001C45 CDr00r00              6030 	call	_set_sprite_data
      001C48 E8 04                 6031 	add	sp, #4
                                   6032 ;src/main.c:1270: nvram_check();
      001C4A CDr93r16              6033 	call	_nvram_check
                                   6034 ;src/main.c:1272: start_splash_screen();
      001C4D CDr86r15              6035 	call	_start_splash_screen
                                   6036 ;src/main.c:1274: SHOW_BKG;
      001C50 F0r00                 6037 	ldh	a, (_LCDC_REG+0)
      001C52 F6 01                 6038 	or	a, #0x01
      001C54 E0r00                 6039 	ldh	(_LCDC_REG+0),a
                                   6040 ;src/main.c:1275: SHOW_SPRITES;
      001C56 F0r00                 6041 	ldh	a, (_LCDC_REG+0)
      001C58 F6 02                 6042 	or	a, #0x02
      001C5A E0r00                 6043 	ldh	(_LCDC_REG+0),a
                                   6044 ;src/main.c:1276: DISPLAY_ON;
      001C5C F0r00                 6045 	ldh	a, (_LCDC_REG+0)
      001C5E F6 80                 6046 	or	a, #0x80
      001C60 E0r00                 6047 	ldh	(_LCDC_REG+0),a
                                   6048 ;src/main.c:1278: while (1) {
      001C62                       6049 00102$:
                                   6050 ;src/main.c:1139: UINT8 input = joypad();
      001C62 CDr00r00              6051 	call	_joypad
      001C65 F8 00                 6052 	ldhl	sp,	#0
      001C67 73                    6053 	ld	(hl), e
                                   6054 ;src/main.c:1140: UINT8 new_input = input & ~prev_input;
      001C68 FAr92r01              6055 	ld	a, (#_main_prev_input_327681_434)
      001C6B 2F                    6056 	cpl
      001C6C F8 00                 6057 	ldhl	sp,	#0
      001C6E A6                    6058 	and	a, (hl)
                                   6059 ;src/main.c:1141: if (new_input) {
      001C6F 4F                    6060 	ld	c, a
      001C70 B7                    6061 	or	a, a
      001C71 CAr11r21              6062 	jp	Z, 00232$
                                   6063 ;src/main.c:1142: switch (flags & FLAG_GAME_STATE) {
      001C74 FAr6Br01              6064 	ld	a, (#_flags)
      001C77 E6 18                 6065 	and	a, #0x18
      001C79 47                    6066 	ld	b, a
      001C7A 1E 00                 6067 	ld	e, #0x00
                                   6068 ;src/main.c:1144: if (new_input & J_START) {
      001C7C 79                    6069 	ld	a, c
      001C7D E6 80                 6070 	and	a, #0x80
      001C7F F8 01                 6071 	ldhl	sp,	#1
      001C81 77                    6072 	ld	(hl), a
      001C82 AF                    6073 	xor	a, a
      001C83 23                    6074 	inc	hl
      001C84 77                    6075 	ld	(hl), a
                                   6076 ;src/main.c:1146: if (flags & FLAG_PLAYING_ANIMATION)
      001C85 FAr6Br01              6077 	ld	a, (#_flags)
      001C88 F8 03                 6078 	ldhl	sp,	#3
      001C8A 77                    6079 	ld	(hl), a
                                   6080 ;src/main.c:1142: switch (flags & FLAG_GAME_STATE) {
      001C8B 78                    6081 	ld	a, b
      001C8C B7                    6082 	or	a, a
      001C8D B3                    6083 	or	a, e
      001C8E 28 47                 6084 	jr	Z, 00114$
                                   6085 ;src/main.c:1162: } else if (new_input & J_A) {
      001C90 79                    6086 	ld	a, c
      001C91 E6 10                 6087 	and	a, #0x10
      001C93 23                    6088 	inc	hl
      001C94 77                    6089 	ld	(hl), a
      001C95 AF                    6090 	xor	a, a
      001C96 23                    6091 	inc	hl
      001C97 77                    6092 	ld	(hl), a
                                   6093 ;src/main.c:1170: && cursor.pile_idx < 2u) {
      001C98 79                    6094 	ld	a, c
      001C99 E6 01                 6095 	and	a, #0x01
      001C9B 23                    6096 	inc	hl
      001C9C 77                    6097 	ld	(hl), a
      001C9D AF                    6098 	xor	a, a
      001C9E 23                    6099 	inc	hl
      001C9F 77                    6100 	ld	(hl), a
                                   6101 ;src/main.c:1173: && cursor.pile_idx) {
      001CA0 79                    6102 	ld	a, c
      001CA1 E6 02                 6103 	and	a, #0x02
      001CA3 23                    6104 	inc	hl
      001CA4 77                    6105 	ld	(hl), a
      001CA5 AF                    6106 	xor	a, a
      001CA6 23                    6107 	inc	hl
      001CA7 77                    6108 	ld	(hl), a
                                   6109 ;src/main.c:1175: } else if (new_input & J_UP) {
      001CA8 79                    6110 	ld	a, c
      001CA9 E6 04                 6111 	and	a, #0x04
      001CAB 23                    6112 	inc	hl
      001CAC 77                    6113 	ld	(hl), a
      001CAD AF                    6114 	xor	a, a
      001CAE 23                    6115 	inc	hl
      001CAF 77                    6116 	ld	(hl), a
                                   6117 ;src/main.c:1177: } else if (new_input & J_DOWN) {
      001CB0 79                    6118 	ld	a, c
      001CB1 E6 08                 6119 	and	a, #0x08
      001CB3 23                    6120 	inc	hl
      001CB4 77                    6121 	ld	(hl), a
      001CB5 AF                    6122 	xor	a, a
      001CB6 23                    6123 	inc	hl
      001CB7 77                    6124 	ld	(hl), a
                                   6125 ;src/main.c:1156: flags |= FLAG_REDRAW_CURSOR;
      001CB8 F8 03                 6126 	ldhl	sp,	#3
      001CBA 7E                    6127 	ld	a, (hl)
      001CBB F6 01                 6128 	or	a, #0x01
      001CBD F8 0E                 6129 	ldhl	sp,	#14
      001CBF 77                    6130 	ld	(hl), a
                                   6131 ;src/main.c:1142: switch (flags & FLAG_GAME_STATE) {
      001CC0 78                    6132 	ld	a, b
      001CC1 D6 08                 6133 	sub	a, #0x08
      001CC3 B3                    6134 	or	a, e
      001CC4 28 61                 6135 	jr	Z, 00115$
      001CC6 78                    6136 	ld	a, b
      001CC7 D6 10                 6137 	sub	a, #0x10
      001CC9 B3                    6138 	or	a, e
      001CCA CAr4Cr1E              6139 	jp	Z,00229$
      001CCD 78                    6140 	ld	a, b
      001CCE D6 18                 6141 	sub	a, #0x18
      001CD0 B3                    6142 	or	a, e
      001CD1 CArC9r1D              6143 	jp	Z,00146$
      001CD4 C3r11r21              6144 	jp	00232$
                                   6145 ;src/main.c:1143: case FLAG_GAME_STATE_SPLASH:
      001CD7                       6146 00114$:
                                   6147 ;src/main.c:1144: if (new_input & J_START) {
      001CD7 F8 02                 6148 	ldhl	sp,	#2
      001CD9 3A                    6149 	ld	a, (hl-)
      001CDA B6                    6150 	or	a, (hl)
      001CDB 28 36                 6151 	jr	Z, 00112$
                                   6152 ;src/main.c:1145: initrand(DIV_REG);
      001CDD F0r00                 6153 	ldh	a, (_DIV_REG+0)
      001CDF 4F                    6154 	ld	c, a
      001CE0 06 00                 6155 	ld	b, #0x00
      001CE2 C5                    6156 	push	bc
      001CE3 CDr00r00              6157 	call	_initrand
      001CE6 E8 02                 6158 	add	sp, #2
                                   6159 ;src/main.c:1146: if (flags & FLAG_PLAYING_ANIMATION)
      001CE8 FAr6Br01              6160 	ld	a, (#_flags)
      001CEB CB 57                 6161 	bit	2, a
      001CED 28 03                 6162 	jr	Z, 00105$
                                   6163 ;src/main.c:1147: dynamic_metasprite_end_animation();
      001CEF CDr0Br06              6164 	call	_dynamic_metasprite_end_animation
      001CF2                       6165 00105$:
                                   6166 ;src/main.c:1054: flags &= ~FLAG_GAME_STATE;
      001CF2 21r6Br01              6167 	ld	hl, #_flags
      001CF5 7E                    6168 	ld	a, (hl)
      001CF6 E6 E7                 6169 	and	a, #0xe7
      001CF8 77                    6170 	ld	(hl), a
                                   6171 ;src/main.c:1055: flags |= FLAG_GAME_STATE_SETTINGS | FLAG_REDRAW_CURSOR;
      001CF9 7E                    6172 	ld	a, (hl)
      001CFA F6 19                 6173 	or	a, #0x19
      001CFC 77                    6174 	ld	(hl), a
                                   6175 ;src/main.c:1056: cursor.pile_idx = 0;
      001CFD 21r8Dr01              6176 	ld	hl, #(_cursor + 0x0006)
      001D00 36 00                 6177 	ld	(hl), #0x00
                                   6178 ;src/main.c:1057: cursor.height = 0;
      001D02 21r8Er01              6179 	ld	hl, #(_cursor + 0x0007)
      001D05 36 00                 6180 	ld	(hl), #0x00
                                   6181 ;src/main.c:1058: draw_setting_frame_metasprites();
      001D07 CDr88r05              6182 	call	_draw_setting_frame_metasprites
                                   6183 ;src/main.c:1059: clear_bkg();
      001D0A CDrC2r01              6184 	call	_clear_bkg
                                   6185 ;src/main.c:1060: draw_bkg_settings();
      001D0D CDr1Fr03              6186 	call	_draw_bkg_settings
                                   6187 ;src/main.c:1148: start_settings();
      001D10 C3r11r21              6188 	jp	00232$
      001D13                       6189 00112$:
                                   6190 ;src/main.c:1149: } else if (new_input & J_SELECT) {
      001D13 CB 71                 6191 	bit	6, c
      001D15 CAr11r21              6192 	jp	Z,00232$
                                   6193 ;src/main.c:1150: if (flags & FLAG_PLAYING_ANIMATION)
      001D18 F8 03                 6194 	ldhl	sp,	#3
      001D1A CB 56                 6195 	bit	2, (hl)
      001D1C 28 03                 6196 	jr	Z, 00109$
                                   6197 ;src/main.c:1151: dynamic_metasprite_end_animation();
      001D1E CDr0Br06              6198 	call	_dynamic_metasprite_end_animation
      001D21                       6199 00109$:
                                   6200 ;src/main.c:1152: start_leaderboard();
      001D21 CDrDFr15              6201 	call	_start_leaderboard
                                   6202 ;src/main.c:1154: break;
      001D24 C3r11r21              6203 	jp	00232$
                                   6204 ;src/main.c:1155: case FLAG_GAME_STATE_LEADERBOARD:
      001D27                       6205 00115$:
                                   6206 ;src/main.c:1156: flags |= FLAG_REDRAW_CURSOR;
      001D27 F8 0E                 6207 	ldhl	sp,	#14
      001D29 7E                    6208 	ld	a, (hl)
      001D2A EAr6Br01              6209 	ld	(#_flags),a
                                   6210 ;src/main.c:1157: if (selected_leaderboard) {
      001D2D 21r71r01              6211 	ld	hl, #_selected_leaderboard + 1
      001D30 3A                    6212 	ld	a, (hl-)
      001D31 B6                    6213 	or	a, (hl)
      001D32 CArBDr1D              6214 	jp	Z, 00144$
                                   6215 ;src/main.c:1159: && cursor.pile_idx == 2u) {
      001D35 F8 02                 6216 	ldhl	sp,	#2
      001D37 3A                    6217 	ld	a, (hl-)
      001D38 B6                    6218 	or	a, (hl)
      001D39 28 17                 6219 	jr	Z, 00139$
      001D3B FAr8Dr01              6220 	ld	a, (#(_cursor + 0x0006) + 0)
      001D3E D6 02                 6221 	sub	a, #0x02
      001D40 20 10                 6222 	jr	NZ, 00139$
                                   6223 ;src/main.c:1160: selected_leaderboard = NULL;
      001D42 21r70r01              6224 	ld	hl, #_selected_leaderboard
      001D45 3E 00                 6225 	ld	a, #0x00
      001D47 22                    6226 	ld	(hl+), a
      001D48 36 00                 6227 	ld	(hl), #0x00
                                   6228 ;/home/wojtek/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      001D4A 21r32r00              6229 	ld	hl, #(_shadow_OAM + 0x0032)
      001D4D 36 00                 6230 	ld	(hl), #0x00
                                   6231 ;src/main.c:1161: set_sprite_tile(SPRITE_FRAME, OFFSET_SPRITE_NONE);
      001D4F C3r11r21              6232 	jp	00232$
      001D52                       6233 00139$:
                                   6234 ;src/main.c:1162: } else if (new_input & J_A) {
      001D52 F8 05                 6235 	ldhl	sp,	#5
      001D54 3A                    6236 	ld	a, (hl-)
      001D55 B6                    6237 	or	a, (hl)
      001D56 28 1D                 6238 	jr	Z, 00137$
                                   6239 ;src/main.c:1163: if (cursor.pile_idx == 2u) {
      001D58 01r8Dr01              6240 	ld	bc, #_cursor+6
      001D5B 0A                    6241 	ld	a, (bc)
      001D5C FE 02                 6242 	cp	a, #0x02
      001D5E 20 10                 6243 	jr	NZ, 00121$
                                   6244 ;src/main.c:1164: selected_leaderboard = NULL;
      001D60 21r70r01              6245 	ld	hl, #_selected_leaderboard
      001D63 3E 00                 6246 	ld	a, #0x00
      001D65 22                    6247 	ld	(hl+), a
      001D66 36 00                 6248 	ld	(hl), #0x00
                                   6249 ;/home/wojtek/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      001D68 21r32r00              6250 	ld	hl, #(_shadow_OAM + 0x0032)
      001D6B 36 00                 6251 	ld	(hl), #0x00
                                   6252 ;src/main.c:1165: set_sprite_tile(SPRITE_FRAME, OFFSET_SPRITE_NONE);
      001D6D C3r11r21              6253 	jp	00232$
      001D70                       6254 00121$:
                                   6255 ;src/main.c:1167: cursor.pile_idx++;
      001D70 3C                    6256 	inc	a
      001D71 02                    6257 	ld	(bc), a
      001D72 C3r11r21              6258 	jp	00232$
      001D75                       6259 00137$:
                                   6260 ;src/main.c:1170: && cursor.pile_idx < 2u) {
      001D75 F8 07                 6261 	ldhl	sp,	#7
      001D77 3A                    6262 	ld	a, (hl-)
      001D78 B6                    6263 	or	a, (hl)
      001D79 28 0D                 6264 	jr	Z, 00135$
      001D7B 01r8Dr01              6265 	ld	bc, #_cursor+6
      001D7E 0A                    6266 	ld	a, (bc)
      001D7F FE 02                 6267 	cp	a, #0x02
      001D81 30 05                 6268 	jr	NC, 00135$
                                   6269 ;src/main.c:1171: cursor.pile_idx++;
      001D83 3C                    6270 	inc	a
      001D84 02                    6271 	ld	(bc), a
      001D85 C3r11r21              6272 	jp	00232$
      001D88                       6273 00135$:
                                   6274 ;src/main.c:1173: && cursor.pile_idx) {
      001D88 F8 09                 6275 	ldhl	sp,	#9
      001D8A 3A                    6276 	ld	a, (hl-)
      001D8B B6                    6277 	or	a, (hl)
      001D8C 28 0C                 6278 	jr	Z, 00133$
      001D8E 01r8Dr01              6279 	ld	bc, #_cursor+6
      001D91 0A                    6280 	ld	a, (bc)
      001D92 B7                    6281 	or	a, a
      001D93 28 05                 6282 	jr	Z, 00133$
                                   6283 ;src/main.c:1174: cursor.pile_idx--;
      001D95 3D                    6284 	dec	a
      001D96 02                    6285 	ld	(bc), a
      001D97 C3r11r21              6286 	jp	00232$
      001D9A                       6287 00133$:
                                   6288 ;src/main.c:1175: } else if (new_input & J_UP) {
      001D9A F8 0B                 6289 	ldhl	sp,	#11
      001D9C 3A                    6290 	ld	a, (hl-)
      001D9D B6                    6291 	or	a, (hl)
      001D9E 28 0B                 6292 	jr	Z, 00131$
                                   6293 ;src/main.c:1176: inc_letter(1);
      001DA0 3E 01                 6294 	ld	a, #0x01
      001DA2 F5                    6295 	push	af
      001DA3 33                    6296 	inc	sp
      001DA4 CDrE7r16              6297 	call	_inc_letter
      001DA7 33                    6298 	inc	sp
      001DA8 C3r11r21              6299 	jp	00232$
      001DAB                       6300 00131$:
                                   6301 ;src/main.c:1177: } else if (new_input & J_DOWN) {
      001DAB F8 0D                 6302 	ldhl	sp,	#13
      001DAD 3A                    6303 	ld	a, (hl-)
      001DAE B6                    6304 	or	a, (hl)
      001DAF CAr11r21              6305 	jp	Z, 00232$
                                   6306 ;src/main.c:1178: inc_letter(-1);
      001DB2 3E FF                 6307 	ld	a, #0xff
      001DB4 F5                    6308 	push	af
      001DB5 33                    6309 	inc	sp
      001DB6 CDrE7r16              6310 	call	_inc_letter
      001DB9 33                    6311 	inc	sp
      001DBA C3r11r21              6312 	jp	00232$
      001DBD                       6313 00144$:
                                   6314 ;src/main.c:1180: } else if (new_input & (J_START | J_SELECT | J_A | J_B)) {
      001DBD 79                    6315 	ld	a, c
      001DBE E6 F0                 6316 	and	a, #0xf0
      001DC0 CAr11r21              6317 	jp	Z,00232$
                                   6318 ;src/main.c:1181: start_splash_screen();
      001DC3 CDr86r15              6319 	call	_start_splash_screen
                                   6320 ;src/main.c:1183: break;
      001DC6 C3r11r21              6321 	jp	00232$
                                   6322 ;src/main.c:1184: case FLAG_GAME_STATE_SETTINGS:
      001DC9                       6323 00146$:
                                   6324 ;src/main.c:1185: flags |= FLAG_REDRAW_CURSOR;
      001DC9 F8 0E                 6325 	ldhl	sp,	#14
      001DCB 7E                    6326 	ld	a, (hl)
      001DCC EAr6Br01              6327 	ld	(#_flags),a
                                   6328 ;src/main.c:1186: if (new_input & J_START) {
      001DCF F8 02                 6329 	ldhl	sp,	#2
      001DD1 3A                    6330 	ld	a, (hl-)
      001DD2 B6                    6331 	or	a, (hl)
      001DD3 28 05                 6332 	jr	Z, 00163$
                                   6333 ;src/main.c:1187: start_game();
      001DD5 CDr34r15              6334 	call	_start_game
      001DD8 18 65                 6335 	jr	00164$
      001DDA                       6336 00163$:
                                   6337 ;src/main.c:1189: && cursor.height) {
      001DDA F8 09                 6338 	ldhl	sp,	#9
      001DDC 3A                    6339 	ld	a, (hl-)
      001DDD B6                    6340 	or	a, (hl)
      001DDE 28 0B                 6341 	jr	Z, 00161$
      001DE0 01r8Er01              6342 	ld	bc, #_cursor+7
      001DE3 0A                    6343 	ld	a, (bc)
      001DE4 B7                    6344 	or	a, a
      001DE5 28 04                 6345 	jr	Z, 00161$
                                   6346 ;src/main.c:1190: cursor.height--;
      001DE7 3D                    6347 	dec	a
      001DE8 02                    6348 	ld	(bc), a
      001DE9 18 54                 6349 	jr	00164$
      001DEB                       6350 00161$:
                                   6351 ;src/main.c:1192: && cursor.height + 1u < setting_pile_heights[cursor.pile_idx]) {
      001DEB F8 07                 6352 	ldhl	sp,	#7
      001DED 3A                    6353 	ld	a, (hl-)
      001DEE B6                    6354 	or	a, (hl)
      001DEF 28 23                 6355 	jr	Z, 00159$
      001DF1 21r8Er01              6356 	ld	hl, #(_cursor + 0x0007)
      001DF4 4E                    6357 	ld	c, (hl)
      001DF5 59                    6358 	ld	e, c
      001DF6 16 00                 6359 	ld	d, #0x00
      001DF8 13                    6360 	inc	de
      001DF9 FAr8Dr01              6361 	ld	a, (#_cursor + 6)
      001DFC C6r5C                 6362 	add	a, #<(_setting_pile_heights)
      001DFE 6F                    6363 	ld	l, a
      001DFF 3E 00                 6364 	ld	a, #0x00
      001E01 CEs00                 6365 	adc	a, #>(_setting_pile_heights)
      001E03 67                    6366 	ld	h, a
      001E04 6E                    6367 	ld	l, (hl)
      001E05 06 00                 6368 	ld	b, #0x00
      001E07 7B                    6369 	ld	a, e
      001E08 95                    6370 	sub	a, l
      001E09 7A                    6371 	ld	a, d
      001E0A 98                    6372 	sbc	a, b
      001E0B 30 07                 6373 	jr	NC, 00159$
                                   6374 ;src/main.c:1193: cursor.height++;
      001E0D 0C                    6375 	inc	c
      001E0E 21r8Er01              6376 	ld	hl, #(_cursor + 0x0007)
      001E11 71                    6377 	ld	(hl), c
      001E12 18 2B                 6378 	jr	00164$
      001E14                       6379 00159$:
                                   6380 ;src/main.c:1195: && cursor.pile_idx) {
      001E14 F8 0B                 6381 	ldhl	sp,	#11
      001E16 3A                    6382 	ld	a, (hl-)
      001E17 B6                    6383 	or	a, (hl)
      001E18 28 10                 6384 	jr	Z, 00157$
      001E1A 01r8Dr01              6385 	ld	bc, #_cursor + 6
      001E1D 0A                    6386 	ld	a, (bc)
      001E1E B7                    6387 	or	a, a
      001E1F 28 09                 6388 	jr	Z, 00157$
                                   6389 ;src/main.c:1196: cursor.pile_idx--;
      001E21 3D                    6390 	dec	a
      001E22 02                    6391 	ld	(bc), a
                                   6392 ;src/main.c:1197: cursor.height = 0;
      001E23 21r8Er01              6393 	ld	hl, #(_cursor + 0x0007)
      001E26 36 00                 6394 	ld	(hl), #0x00
      001E28 18 15                 6395 	jr	00164$
      001E2A                       6396 00157$:
                                   6397 ;src/main.c:1199: && cursor.pile_idx < NUM_SETTING_PILES - 1u) {
      001E2A F8 0D                 6398 	ldhl	sp,	#13
      001E2C 3A                    6399 	ld	a, (hl-)
      001E2D B6                    6400 	or	a, (hl)
      001E2E 28 0F                 6401 	jr	Z, 00164$
      001E30 01r8Dr01              6402 	ld	bc, #_cursor + 6
      001E33 0A                    6403 	ld	a, (bc)
      001E34 FE 03                 6404 	cp	a, #0x03
      001E36 30 07                 6405 	jr	NC, 00164$
                                   6406 ;src/main.c:1200: cursor.pile_idx++;
      001E38 3C                    6407 	inc	a
      001E39 02                    6408 	ld	(bc), a
                                   6409 ;src/main.c:1201: cursor.height = 0;
      001E3A 21r8Er01              6410 	ld	hl, #(_cursor + 0x0007)
      001E3D 36 00                 6411 	ld	(hl), #0x00
      001E3F                       6412 00164$:
                                   6413 ;src/main.c:1203: if (new_input & J_A) {
      001E3F F8 05                 6414 	ldhl	sp,	#5
      001E41 3A                    6415 	ld	a, (hl-)
      001E42 B6                    6416 	or	a, (hl)
      001E43 CAr11r21              6417 	jp	Z, 00232$
                                   6418 ;src/main.c:1204: set_cursor_setting();
      001E46 CDr25r0E              6419 	call	_set_cursor_setting
                                   6420 ;src/main.c:1206: break;
      001E49 C3r11r21              6421 	jp	00232$
                                   6422 ;src/main.c:1207: case FLAG_GAME_STATE_INGAME:
      001E4C                       6423 00229$:
                                   6424 ;src/main.c:1208: if (cursor.held_card) {
      001E4C 21r87r01              6425 	ld	hl, #_cursor
      001E4F 2A                    6426 	ld	a, (hl+)
      001E50 B6                    6427 	or	a,(hl)
      001E51 CAr06r1F              6428 	jp	Z, 00227$
                                   6429 ;src/main.c:1209: flags |= FLAG_REDRAW_HAND;
      001E54 F8 03                 6430 	ldhl	sp,	#3
      001E56 7E                    6431 	ld	a, (hl)
      001E57 F6 02                 6432 	or	a, #0x02
      001E59 EAr6Br01              6433 	ld	(#_flags),a
                                   6434 ;src/main.c:1211: && cursor.hand_pile_idx != 0) {
      001E5C F8 09                 6435 	ldhl	sp,	#9
      001E5E 3A                    6436 	ld	a, (hl-)
      001E5F B6                    6437 	or	a, (hl)
      001E60 28 0B                 6438 	jr	Z, 00172$
      001E62 01r8Cr01              6439 	ld	bc, #_cursor+5
      001E65 0A                    6440 	ld	a, (bc)
      001E66 B7                    6441 	or	a, a
      001E67 28 04                 6442 	jr	Z, 00172$
                                   6443 ;src/main.c:1212: cursor.hand_pile_idx--;
      001E69 3D                    6444 	dec	a
      001E6A 02                    6445 	ld	(bc), a
      001E6B 18 10                 6446 	jr	00173$
      001E6D                       6447 00172$:
                                   6448 ;src/main.c:1214: && cursor.hand_pile_idx < 9) {
      001E6D F8 07                 6449 	ldhl	sp,	#7
      001E6F 3A                    6450 	ld	a, (hl-)
      001E70 B6                    6451 	or	a, (hl)
      001E71 28 0A                 6452 	jr	Z, 00173$
      001E73 01r8Cr01              6453 	ld	bc, #_cursor+5
      001E76 0A                    6454 	ld	a, (bc)
      001E77 FE 09                 6455 	cp	a, #0x09
      001E79 30 02                 6456 	jr	NC, 00173$
                                   6457 ;src/main.c:1215: cursor.hand_pile_idx++;
      001E7B 3C                    6458 	inc	a
      001E7C 02                    6459 	ld	(bc), a
      001E7D                       6460 00173$:
                                   6461 ;src/main.c:1218: && ~flags & FLAG_PLAYING_ANIMATION) {
      001E7D F8 05                 6462 	ldhl	sp,	#5
      001E7F 3A                    6463 	ld	a, (hl-)
      001E80 B6                    6464 	or	a, (hl)
      001E81 CAr11r21              6465 	jp	Z, 00232$
      001E84 FAr6Br01              6466 	ld	a, (#_flags)
      001E87 06 00                 6467 	ld	b, #0x00
      001E89 2F                    6468 	cpl
      001E8A 4F                    6469 	ld	c, a
      001E8B 78                    6470 	ld	a, b
      001E8C 2F                    6471 	cpl
      001E8D CB 51                 6472 	bit	2, c
      001E8F CAr11r21              6473 	jp	Z,00232$
                                   6474 ;src/main.c:789: Pile *pile = IDX_PTR(piles, cursor.hand_pile_idx);
      001E92 01r38r01              6475 	ld	bc, #_piles+0
      001E95 FAr8Cr01              6476 	ld	a, (#(_cursor + 0x0005) + 0)
      001E98 F8 0E                 6477 	ldhl	sp,	#14
      001E9A 77                    6478 	ld	(hl), a
      001E9B F8 0E                 6479 	ldhl	sp,	#14
      001E9D 5E                    6480 	ld	e, (hl)
      001E9E 16 00                 6481 	ld	d, #0x00
      001EA0 6B                    6482 	ld	l, e
      001EA1 62                    6483 	ld	h, d
      001EA2 29                    6484 	add	hl, hl
      001EA3 29                    6485 	add	hl, hl
      001EA4 19                    6486 	add	hl, de
      001EA5 09                    6487 	add	hl, bc
      001EA6 4D                    6488 	ld	c, l
      001EA7 44                    6489 	ld	b, h
                                   6490 ;src/main.c:790: if (cursor.hand_pile_idx == cursor.pile_idx) {
      001EA8 21r8Dr01              6491 	ld	hl, #_cursor + 6
      001EAB 5E                    6492 	ld	e, (hl)
      001EAC F8 0E                 6493 	ldhl	sp,	#14
      001EAE 7E                    6494 	ld	a, (hl)
      001EAF 93                    6495 	sub	a, e
      001EB0 20 09                 6496 	jr	NZ, 00179$
                                   6497 ;src/main.c:791: pile_append_cursor_stack(pile);
      001EB2 C5                    6498 	push	bc
      001EB3 CDr4Dr13              6499 	call	_pile_append_cursor_stack
      001EB6 E8 02                 6500 	add	sp, #2
      001EB8 C3r11r21              6501 	jp	00232$
      001EBB                       6502 00179$:
                                   6503 ;src/main.c:792: } else if (!pile->height
      001EBB 21 04 00              6504 	ld	hl, #0x0004
      001EBE 09                    6505 	add	hl, bc
      001EBF 7E                    6506 	ld	a, (hl)
      001EC0 B7                    6507 	or	a, a
      001EC1 28 2E                 6508 	jr	Z, 00177$
                                   6509 ;src/main.c:793: || RANK(pile->top->data) == RANK(cursor.held_card->data) + 1u) {
      001EC3 69                    6510 	ld	l, c
      001EC4 60                    6511 	ld	h, b
      001EC5 23                    6512 	inc	hl
      001EC6 23                    6513 	inc	hl
      001EC7 2A                    6514 	ld	a, (hl+)
      001EC8 66                    6515 	ld	h, (hl)
      001EC9 6F                    6516 	ld	l, a
      001ECA 23                    6517 	inc	hl
      001ECB 23                    6518 	inc	hl
      001ECC 7E                    6519 	ld	a, (hl)
      001ECD E6 0F                 6520 	and	a, #0x0f
      001ECF F8 0D                 6521 	ldhl	sp,	#13
      001ED1 77                    6522 	ld	(hl), a
      001ED2 AF                    6523 	xor	a, a
      001ED3 23                    6524 	inc	hl
      001ED4 77                    6525 	ld	(hl), a
      001ED5 21r87r01              6526 	ld	hl, #_cursor
      001ED8 2A                    6527 	ld	a, (hl+)
      001ED9 66                    6528 	ld	h, (hl)
      001EDA 6F                    6529 	ld	l, a
      001EDB 23                    6530 	inc	hl
      001EDC 23                    6531 	inc	hl
      001EDD 7E                    6532 	ld	a, (hl)
      001EDE E6 0F                 6533 	and	a, #0x0f
      001EE0 5F                    6534 	ld	e, a
      001EE1 16 00                 6535 	ld	d, #0x00
      001EE3 13                    6536 	inc	de
      001EE4 F8 0D                 6537 	ldhl	sp,	#13
      001EE6 7E                    6538 	ld	a, (hl)
      001EE7 93                    6539 	sub	a, e
      001EE8 C2r11r21              6540 	jp	NZ,00232$
      001EEB 23                    6541 	inc	hl
      001EEC 7E                    6542 	ld	a, (hl)
      001EED 92                    6543 	sub	a, d
      001EEE C2r11r21              6544 	jp	NZ,00232$
      001EF1                       6545 00177$:
                                   6546 ;src/main.c:794: pile_append_cursor_stack(pile);
      001EF1 C5                    6547 	push	bc
      001EF2 CDr4Dr13              6548 	call	_pile_append_cursor_stack
      001EF5 E8 02                 6549 	add	sp, #2
                                   6550 ;src/main.c:795: score--;
      001EF7 21r6Fr01              6551 	ld	hl, #_score + 1
      001EFA 2B                    6552 	dec	hl
      001EFB 2A                    6553 	ld	a, (hl+)
      001EFC 5F                    6554 	ld	e, a
      001EFD 56                    6555 	ld	d, (hl)
      001EFE 1B                    6556 	dec	de
      001EFF 2B                    6557 	dec	hl
      001F00 7B                    6558 	ld	a, e
      001F01 22                    6559 	ld	(hl+), a
      001F02 72                    6560 	ld	(hl), d
                                   6561 ;src/main.c:1219: cursor_place_stack();
      001F03 C3r11r21              6562 	jp	00232$
      001F06                       6563 00227$:
                                   6564 ;src/main.c:1222: flags |= FLAG_REDRAW_CURSOR;
      001F06 F8 0E                 6565 	ldhl	sp,	#14
      001F08 7E                    6566 	ld	a, (hl)
      001F09 EAr6Br01              6567 	ld	(#_flags),a
                                   6568 ;src/main.c:1223: if (new_input & J_DOWN) {
      001F0C F8 0D                 6569 	ldhl	sp,	#13
      001F0E 3A                    6570 	ld	a, (hl-)
      001F0F B6                    6571 	or	a, (hl)
      001F10 28 3C                 6572 	jr	Z, 00205$
                                   6573 ;src/main.c:1224: if (cursor.pile_idx == PILE_IDX_DECK)
      001F12 21r8Dr01              6574 	ld	hl, #_cursor + 6
      001F15 46                    6575 	ld	b, (hl)
      001F16 78                    6576 	ld	a, b
                                   6577 ;src/main.c:1225: cursor.pile_idx = 0;
      001F17 D6 0A                 6578 	sub	a,#0x0a
      001F19 20 03                 6579 	jr	NZ, 00188$
      001F1B 77                    6580 	ld	(hl),a
      001F1C 18 73                 6581 	jr	00206$
      001F1E                       6582 00188$:
                                   6583 ;src/main.c:1226: else if (cursor.height + 1u < piles[cursor.pile_idx].height)
      001F1E 21r8Er01              6584 	ld	hl, #(_cursor + 0x0007)
      001F21 4E                    6585 	ld	c, (hl)
      001F22 59                    6586 	ld	e, c
      001F23 16 00                 6587 	ld	d, #0x00
      001F25 13                    6588 	inc	de
      001F26 F8 0D                 6589 	ldhl	sp,	#13
      001F28 7B                    6590 	ld	a, e
      001F29 22                    6591 	ld	(hl+), a
      001F2A 72                    6592 	ld	(hl), d
      001F2B 58                    6593 	ld	e, b
      001F2C 16 00                 6594 	ld	d, #0x00
      001F2E 6B                    6595 	ld	l, e
      001F2F 62                    6596 	ld	h, d
      001F30 29                    6597 	add	hl, hl
      001F31 29                    6598 	add	hl, hl
      001F32 19                    6599 	add	hl, de
      001F33 11r38r01              6600 	ld	de, #_piles
      001F36 19                    6601 	add	hl, de
      001F37 23                    6602 	inc	hl
      001F38 23                    6603 	inc	hl
      001F39 23                    6604 	inc	hl
      001F3A 23                    6605 	inc	hl
      001F3B 5E                    6606 	ld	e, (hl)
      001F3C 06 00                 6607 	ld	b, #0x00
      001F3E F8 0D                 6608 	ldhl	sp,	#13
      001F40 7E                    6609 	ld	a, (hl)
      001F41 93                    6610 	sub	a, e
      001F42 23                    6611 	inc	hl
      001F43 7E                    6612 	ld	a, (hl)
      001F44 98                    6613 	sbc	a, b
      001F45 30 4A                 6614 	jr	NC, 00206$
                                   6615 ;src/main.c:1227: cursor.height++;
      001F47 0C                    6616 	inc	c
      001F48 21r8Er01              6617 	ld	hl, #(_cursor + 0x0007)
      001F4B 71                    6618 	ld	(hl), c
      001F4C 18 43                 6619 	jr	00206$
      001F4E                       6620 00205$:
                                   6621 ;src/main.c:1228: } else if (new_input & J_UP) {
      001F4E F8 0B                 6622 	ldhl	sp,	#11
      001F50 3A                    6623 	ld	a, (hl-)
      001F51 B6                    6624 	or	a, (hl)
      001F52 28 12                 6625 	jr	Z, 00203$
                                   6626 ;src/main.c:1229: if (cursor.height == 0)
      001F54 01r8Er01              6627 	ld	bc, #_cursor + 7
      001F57 0A                    6628 	ld	a, (bc)
      001F58 B7                    6629 	or	a, a
      001F59 20 07                 6630 	jr	NZ, 00192$
                                   6631 ;src/main.c:1230: cursor.pile_idx = PILE_IDX_DECK;
      001F5B 21r8Dr01              6632 	ld	hl, #(_cursor + 0x0006)
      001F5E 36 0A                 6633 	ld	(hl), #0x0a
      001F60 18 2F                 6634 	jr	00206$
      001F62                       6635 00192$:
                                   6636 ;src/main.c:1232: cursor.height--;
      001F62 3D                    6637 	dec	a
      001F63 02                    6638 	ld	(bc), a
      001F64 18 2B                 6639 	jr	00206$
      001F66                       6640 00203$:
                                   6641 ;src/main.c:1234: && cursor.pile_idx != 0
      001F66 F8 09                 6642 	ldhl	sp,	#9
      001F68 3A                    6643 	ld	a, (hl-)
      001F69 B6                    6644 	or	a, (hl)
      001F6A 28 12                 6645 	jr	Z, 00201$
      001F6C 01r8Dr01              6646 	ld	bc, #_cursor+6
      001F6F 0A                    6647 	ld	a, (bc)
      001F70 B7                    6648 	or	a, a
      001F71 28 0B                 6649 	jr	Z, 00201$
                                   6650 ;src/main.c:1235: && cursor.pile_idx != PILE_IDX_DECK) {
      001F73 FE 0A                 6651 	cp	a, #0x0a
      001F75 28 07                 6652 	jr	Z, 00201$
                                   6653 ;src/main.c:1236: cursor.pile_idx--;
      001F77 3D                    6654 	dec	a
      001F78 02                    6655 	ld	(bc), a
                                   6656 ;src/main.c:1237: cursor_adjust_height();
      001F79 CDrB1r0C              6657 	call	_cursor_adjust_height
      001F7C 18 13                 6658 	jr	00206$
      001F7E                       6659 00201$:
                                   6660 ;src/main.c:1239: && cursor.pile_idx < PILE_IDX_DECK - 1u) {
      001F7E F8 07                 6661 	ldhl	sp,	#7
      001F80 3A                    6662 	ld	a, (hl-)
      001F81 B6                    6663 	or	a, (hl)
      001F82 28 0D                 6664 	jr	Z, 00206$
      001F84 01r8Dr01              6665 	ld	bc, #_cursor+6
      001F87 0A                    6666 	ld	a, (bc)
      001F88 FE 09                 6667 	cp	a, #0x09
      001F8A 30 05                 6668 	jr	NC, 00206$
                                   6669 ;src/main.c:1240: cursor.pile_idx++;
      001F8C 3C                    6670 	inc	a
      001F8D 02                    6671 	ld	(bc), a
                                   6672 ;src/main.c:1241: cursor_adjust_height();
      001F8E CDrB1r0C              6673 	call	_cursor_adjust_height
      001F91                       6674 00206$:
                                   6675 ;src/main.c:1244: && ~flags & FLAG_PLAYING_ANIMATION) {
      001F91 F8 05                 6676 	ldhl	sp,	#5
      001F93 3A                    6677 	ld	a, (hl-)
      001F94 B6                    6678 	or	a, (hl)
      001F95 CAr11r21              6679 	jp	Z, 00232$
      001F98 FAr6Br01              6680 	ld	a, (#_flags)
      001F9B 06 00                 6681 	ld	b, #0x00
      001F9D 2F                    6682 	cpl
      001F9E 4F                    6683 	ld	c, a
      001F9F 78                    6684 	ld	a, b
      001FA0 2F                    6685 	cpl
      001FA1 CB 51                 6686 	bit	2, c
      001FA3 CAr11r21              6687 	jp	Z,00232$
                                   6688 ;src/main.c:1245: if (cursor.pile_idx == PILE_IDX_DECK && top_card_idx != 104u)
      001FA6 21r8Dr01              6689 	ld	hl, #(_cursor + 0x0006)
      001FA9 4E                    6690 	ld	c, (hl)
      001FAA 79                    6691 	ld	a, c
      001FAB D6 0A                 6692 	sub	a, #0x0a
      001FAD C2r47r20              6693 	jp	NZ,00223$
      001FB0 FAr6Ar01              6694 	ld	a, (#_top_card_idx)
      001FB3 D6 68                 6695 	sub	a, #0x68
      001FB5 CAr47r20              6696 	jp	Z,00223$
                                   6697 ;src/main.c:967: Pile *pile = IDX_PTR(piles, 0);
      001FB8 01r38r01              6698 	ld	bc, #_piles
                                   6699 ;src/main.c:970: for (i = 0; i < 10u; i++) {
      001FBB 1E 00                 6700 	ld	e, #0x00
      001FBD                       6701 00268$:
                                   6702 ;src/main.c:971: if (!pile->height)
      001FBD 21 04 00              6703 	ld	hl, #0x0004
      001FC0 09                    6704 	add	hl, bc
      001FC1 7E                    6705 	ld	a, (hl)
      001FC2 B7                    6706 	or	a, a
      001FC3 CAr11r21              6707 	jp	Z, 00232$
                                   6708 ;src/main.c:973: pile++;
      001FC6 03                    6709 	inc	bc
      001FC7 03                    6710 	inc	bc
      001FC8 03                    6711 	inc	bc
      001FC9 03                    6712 	inc	bc
      001FCA 03                    6713 	inc	bc
                                   6714 ;src/main.c:970: for (i = 0; i < 10u; i++) {
      001FCB 1C                    6715 	inc	e
      001FCC 7B                    6716 	ld	a, e
      001FCD D6 0A                 6717 	sub	a, #0x0a
      001FCF 38 EC                 6718 	jr	C, 00268$
                                   6719 ;src/main.c:976: pile = IDX_PTR(piles, 0);
      001FD1 F8 0C                 6720 	ldhl	sp,	#12
      001FD3 3Er38                 6721 	ld	a, #<(_piles)
      001FD5 22                    6722 	ld	(hl+), a
      001FD6 36s01                 6723 	ld	(hl), #>(_piles)
                                   6724 ;src/main.c:977: Card *deck_top = IDX_PTR(deck, top_card_idx);
      001FD8 21r6Ar01              6725 	ld	hl, #_top_card_idx
      001FDB 4E                    6726 	ld	c, (hl)
      001FDC 06 00                 6727 	ld	b, #0x00
      001FDE 69                    6728 	ld	l, c
      001FDF 60                    6729 	ld	h, b
      001FE0 29                    6730 	add	hl, hl
      001FE1 09                    6731 	add	hl, bc
      001FE2 01r00r00              6732 	ld	bc,#_deck
      001FE5 09                    6733 	add	hl,bc
      001FE6 4D                    6734 	ld	c, l
      001FE7 44                    6735 	ld	b, h
                                   6736 ;src/main.c:978: top_card_idx += 10u;
      001FE8 21r6Ar01              6737 	ld	hl, #_top_card_idx
      001FEB 7E                    6738 	ld	a, (hl)
      001FEC C6 0A                 6739 	add	a, #0x0a
      001FEE 77                    6740 	ld	(hl), a
                                   6741 ;src/main.c:981: for (i = 0; i < 10u; i++) {
      001FEF F8 0E                 6742 	ldhl	sp,	#14
      001FF1 36 0A                 6743 	ld	(hl), #0x0a
      001FF3                       6744 00272$:
                                   6745 ;src/main.c:982: pile->top->next_card = deck_top;
                                   6746 ;c
      001FF3 F8 0C                 6747 	ldhl	sp,#12
      001FF5 2A                    6748 	ld	a, (hl+)
      001FF6 5F                    6749 	ld	e, a
      001FF7 56                    6750 	ld	d, (hl)
      001FF8 21 02 00              6751 	ld	hl, #0x0002
      001FFB 19                    6752 	add	hl, de
      001FFC E5                    6753 	push	hl
      001FFD 7D                    6754 	ld	a, l
      001FFE F8 0C                 6755 	ldhl	sp,	#12
      002000 77                    6756 	ld	(hl), a
      002001 E1                    6757 	pop	hl
      002002 7C                    6758 	ld	a, h
      002003 F8 0B                 6759 	ldhl	sp,	#11
      002005 32                    6760 	ld	(hl-), a
      002006 2A                    6761 	ld	a, (hl+)
      002007 5F                    6762 	ld	e, a
      002008 56                    6763 	ld	d, (hl)
      002009 1A                    6764 	ld	a, (de)
      00200A 6F                    6765 	ld	l, a
      00200B 13                    6766 	inc	de
      00200C 1A                    6767 	ld	a, (de)
      00200D 67                    6768 	ld	h, a
      00200E 79                    6769 	ld	a, c
      00200F 22                    6770 	ld	(hl+), a
      002010 70                    6771 	ld	(hl), b
                                   6772 ;src/main.c:983: pile->top = deck_top;
      002011 F8 0A                 6773 	ldhl	sp,	#10
      002013 2A                    6774 	ld	a, (hl+)
      002014 66                    6775 	ld	h, (hl)
      002015 6F                    6776 	ld	l, a
      002016 79                    6777 	ld	a, c
      002017 22                    6778 	ld	(hl+), a
      002018 70                    6779 	ld	(hl), b
                                   6780 ;src/main.c:984: pile->height++;
                                   6781 ;c
      002019 F8 0C                 6782 	ldhl	sp,#12
      00201B 2A                    6783 	ld	a, (hl+)
      00201C 5F                    6784 	ld	e, a
      00201D 56                    6785 	ld	d, (hl)
      00201E 21 04 00              6786 	ld	hl, #0x0004
      002021 19                    6787 	add	hl, de
      002022 5D                    6788 	ld	e, l
      002023 54                    6789 	ld	d, h
      002024 1A                    6790 	ld	a, (de)
      002025 3C                    6791 	inc	a
      002026 12                    6792 	ld	(de), a
                                   6793 ;src/main.c:985: deck_top++;
      002027 03                    6794 	inc	bc
      002028 03                    6795 	inc	bc
      002029 03                    6796 	inc	bc
                                   6797 ;src/main.c:986: pile++;
                                   6798 ;c
      00202A F8 0C                 6799 	ldhl	sp,#12
      00202C 2A                    6800 	ld	a, (hl+)
      00202D 5F                    6801 	ld	e, a
      00202E 56                    6802 	ld	d, (hl)
      00202F 21 05 00              6803 	ld	hl, #0x0005
      002032 19                    6804 	add	hl, de
      002033 E5                    6805 	push	hl
      002034 7D                    6806 	ld	a, l
      002035 F8 0E                 6807 	ldhl	sp,	#14
      002037 77                    6808 	ld	(hl), a
      002038 E1                    6809 	pop	hl
      002039 7C                    6810 	ld	a, h
      00203A F8 0D                 6811 	ldhl	sp,	#13
      00203C 22                    6812 	ld	(hl+), a
                                   6813 ;src/main.c:981: for (i = 0; i < 10u; i++) {
      00203D 35                    6814 	dec	(hl)
      00203E 7E                    6815 	ld	a, (hl)
      00203F 20 B2                 6816 	jr	NZ, 00272$
                                   6817 ;src/main.c:989: dynamic_metasprite_deal();
      002041 CDr7Fr0B              6818 	call	_dynamic_metasprite_deal
                                   6819 ;src/main.c:1246: deal();
      002044 C3r11r21              6820 	jp	00232$
      002047                       6821 00223$:
                                   6822 ;src/main.c:763: Pile *pile = IDX_PTR(piles, cursor.pile_idx);
      002047 06 00                 6823 	ld	b, #0x00
      002049 69                    6824 	ld	l, c
      00204A 60                    6825 	ld	h, b
      00204B 29                    6826 	add	hl, hl
      00204C 29                    6827 	add	hl, hl
      00204D 09                    6828 	add	hl, bc
      00204E 3Er38                 6829 	ld	a, #<(_piles)
      002050 85                    6830 	add	a, l
      002051 4F                    6831 	ld	c, a
      002052 3Es01                 6832 	ld	a, #>(_piles)
      002054 8C                    6833 	adc	a, h
      002055 47                    6834 	ld	b, a
      002056 F8 0A                 6835 	ldhl	sp,	#10
      002058 79                    6836 	ld	a, c
      002059 22                    6837 	ld	(hl+), a
                                   6838 ;src/main.c:764: Card *top = pile->base;
      00205A 78                    6839 	ld	a, b
      00205B 32                    6840 	ld	(hl-), a
      00205C 2A                    6841 	ld	a, (hl+)
      00205D 5F                    6842 	ld	e, a
      00205E 56                    6843 	ld	d, (hl)
      00205F 1A                    6844 	ld	a, (de)
      002060 23                    6845 	inc	hl
      002061 23                    6846 	inc	hl
      002062 22                    6847 	ld	(hl+), a
      002063 13                    6848 	inc	de
      002064 1A                    6849 	ld	a, (de)
      002065 77                    6850 	ld	(hl), a
                                   6851 ;src/main.c:765: for (i = 1; i < cursor.height; i++)
      002066 06 01                 6852 	ld	b, #0x01
      002068                       6853 00274$:
      002068 21r8Er01              6854 	ld	hl, #(_cursor + 0x0007)
      00206B 4E                    6855 	ld	c, (hl)
      00206C 78                    6856 	ld	a, b
      00206D 91                    6857 	sub	a, c
      00206E 30 0E                 6858 	jr	NC, 00215$
                                   6859 ;src/main.c:766: top = top->next_card;
      002070 F8 0D                 6860 	ldhl	sp,#13
      002072 2A                    6861 	ld	a, (hl+)
      002073 5F                    6862 	ld	e, a
      002074 56                    6863 	ld	d, (hl)
      002075 1A                    6864 	ld	a, (de)
      002076 2B                    6865 	dec	hl
      002077 22                    6866 	ld	(hl+), a
      002078 13                    6867 	inc	de
      002079 1A                    6868 	ld	a, (de)
      00207A 77                    6869 	ld	(hl), a
                                   6870 ;src/main.c:765: for (i = 1; i < cursor.height; i++)
      00207B 04                    6871 	inc	b
      00207C 18 EA                 6872 	jr	00274$
      00207E                       6873 00215$:
                                   6874 ;src/main.c:767: Card *stack = cursor.height ? top->next_card : top;
      00207E 79                    6875 	ld	a, c
      00207F B7                    6876 	or	a, a
      002080 28 0C                 6877 	jr	Z, 00278$
      002082 F8 0D                 6878 	ldhl	sp,#13
      002084 2A                    6879 	ld	a, (hl+)
      002085 5F                    6880 	ld	e, a
      002086 56                    6881 	ld	d, (hl)
      002087 1A                    6882 	ld	a, (de)
      002088 4F                    6883 	ld	c, a
      002089 13                    6884 	inc	de
      00208A 1A                    6885 	ld	a, (de)
      00208B 47                    6886 	ld	b, a
      00208C 18 05                 6887 	jr	00279$
      00208E                       6888 00278$:
      00208E F8 0D                 6889 	ldhl	sp,#13
      002090 2A                    6890 	ld	a, (hl+)
      002091 4F                    6891 	ld	c, a
      002092 46                    6892 	ld	b, (hl)
      002093                       6893 00279$:
                                   6894 ;src/main.c:768: if (!(VISIBLE(stack->data) && is_stack_coherent(stack)))
      002093 59                    6895 	ld	e, c
      002094 50                    6896 	ld	d, b
      002095 13                    6897 	inc	de
      002096 13                    6898 	inc	de
      002097 1A                    6899 	ld	a, (de)
      002098 CB 77                 6900 	bit	6, a
      00209A 28 75                 6901 	jr	Z, 00232$
      00209C C5                    6902 	push	bc
      00209D C5                    6903 	push	bc
      00209E CDr89r12              6904 	call	_is_stack_coherent
      0020A1 E8 02                 6905 	add	sp, #2
      0020A3 7B                    6906 	ld	a, e
      0020A4 C1                    6907 	pop	bc
      0020A5 B7                    6908 	or	a, a
      0020A6 28 69                 6909 	jr	Z, 00232$
                                   6910 ;src/main.c:771: cursor.held_card = stack;
      0020A8 21r87r01              6911 	ld	hl, #_cursor
      0020AB 79                    6912 	ld	a, c
      0020AC 22                    6913 	ld	(hl+), a
      0020AD 70                    6914 	ld	(hl), b
                                   6915 ;src/main.c:772: cursor.hand_pile_idx = cursor.pile_idx;
      0020AE FAr8Dr01              6916 	ld	a, (#(_cursor + 0x0006) + 0)
      0020B1 EAr8Cr01              6917 	ld	(#(_cursor + 0x0005)),a
                                   6918 ;src/main.c:773: cursor.held_stack_size = pile->height - cursor.height;
                                   6919 ;c
      0020B4 F8 0A                 6920 	ldhl	sp,#10
      0020B6 2A                    6921 	ld	a, (hl+)
      0020B7 5F                    6922 	ld	e, a
      0020B8 56                    6923 	ld	d, (hl)
      0020B9 21 04 00              6924 	ld	hl, #0x0004
      0020BC 19                    6925 	add	hl, de
      0020BD 4D                    6926 	ld	c, l
      0020BE 44                    6927 	ld	b, h
      0020BF 0A                    6928 	ld	a, (bc)
      0020C0 21r8Er01              6929 	ld	hl, #(_cursor + 0x0007)
      0020C3 6E                    6930 	ld	l, (hl)
      0020C4 95                    6931 	sub	a, l
      0020C5 EAr8Br01              6932 	ld	(#(_cursor + 0x0004)),a
                                   6933 ;src/main.c:774: pile->height = cursor.height;
      0020C8 FAr8Er01              6934 	ld	a, (#(_cursor + 0x0007) + 0)
      0020CB 02                    6935 	ld	(bc), a
                                   6936 ;src/main.c:775: flags |= FLAG_REDRAW_HAND;
      0020CC 21r6Br01              6937 	ld	hl, #_flags
      0020CF 7E                    6938 	ld	a, (hl)
      0020D0 F6 02                 6939 	or	a, #0x02
      0020D2 77                    6940 	ld	(hl), a
                                   6941 ;src/main.c:776: if (cursor.height) {
      0020D3 FAr8Er01              6942 	ld	a, (#(_cursor + 0x0007) + 0)
      0020D6 F8 0C                 6943 	ldhl	sp,	#12
      0020D8 77                    6944 	ld	(hl), a
                                   6945 ;src/main.c:777: pile->top = top;
      0020D9 F8 0A                 6946 	ldhl	sp,#10
      0020DB 2A                    6947 	ld	a, (hl+)
      0020DC 4F                    6948 	ld	c, a
      0020DD 46                    6949 	ld	b, (hl)
      0020DE 03                    6950 	inc	bc
      0020DF 03                    6951 	inc	bc
                                   6952 ;src/main.c:779: cursor.card_to_show = top;
                                   6953 ;src/main.c:776: if (cursor.height) {
      0020E0 23                    6954 	inc	hl
      0020E1 7E                    6955 	ld	a, (hl)
      0020E2 B7                    6956 	or	a, a
      0020E3 28 1A                 6957 	jr	Z, 00220$
                                   6958 ;src/main.c:777: pile->top = top;
      0020E5 23                    6959 	inc	hl
      0020E6 2A                    6960 	ld	a, (hl+)
      0020E7 02                    6961 	ld	(bc), a
      0020E8 03                    6962 	inc	bc
      0020E9 7E                    6963 	ld	a, (hl)
      0020EA 02                    6964 	ld	(bc), a
                                   6965 ;src/main.c:778: top->next_card = NULL;
      0020EB 2B                    6966 	dec	hl
      0020EC 2A                    6967 	ld	a, (hl+)
      0020ED 66                    6968 	ld	h, (hl)
      0020EE 6F                    6969 	ld	l, a
      0020EF AF                    6970 	xor	a, a
      0020F0 22                    6971 	ld	(hl+), a
      0020F1 77                    6972 	ld	(hl), a
                                   6973 ;src/main.c:779: cursor.card_to_show = top;
      0020F2 11r89r01              6974 	ld	de, #(_cursor + 0x0002)
      0020F5 F8 0D                 6975 	ldhl	sp,	#13
      0020F7 7E                    6976 	ld	a, (hl)
      0020F8 12                    6977 	ld	(de), a
      0020F9 13                    6978 	inc	de
      0020FA 23                    6979 	inc	hl
      0020FB 7E                    6980 	ld	a, (hl)
      0020FC 12                    6981 	ld	(de), a
      0020FD 18 12                 6982 	jr	00232$
      0020FF                       6983 00220$:
                                   6984 ;src/main.c:781: pile->base = NULL;
      0020FF F8 0A                 6985 	ldhl	sp,	#10
      002101 2A                    6986 	ld	a, (hl+)
      002102 66                    6987 	ld	h, (hl)
      002103 6F                    6988 	ld	l, a
      002104 AF                    6989 	xor	a, a
      002105 22                    6990 	ld	(hl+), a
      002106 77                    6991 	ld	(hl), a
                                   6992 ;src/main.c:782: pile->top = NULL;
      002107 AF                    6993 	xor	a, a
      002108 02                    6994 	ld	(bc), a
      002109 03                    6995 	inc	bc
      00210A 02                    6996 	ld	(bc), a
                                   6997 ;src/main.c:783: cursor.card_to_show = NULL;
      00210B 21r89r01              6998 	ld	hl, #(_cursor + 0x0002)
      00210E AF                    6999 	xor	a, a
      00210F 22                    7000 	ld	(hl+), a
      002110 77                    7001 	ld	(hl), a
                                   7002 ;src/main.c:1252: }
      002111                       7003 00232$:
                                   7004 ;src/main.c:1254: prev_input = input;
      002111 F8 00                 7005 	ldhl	sp,	#0
      002113 7E                    7006 	ld	a, (hl)
      002114 EAr92r01              7007 	ld	(#_main_prev_input_327681_434),a
                                   7008 ;src/main.c:825: switch (flags & FLAG_GAME_STATE) {
      002117 FAr6Br01              7009 	ld	a, (#_flags)
      00211A E6 18                 7010 	and	a, #0x18
      00211C 47                    7011 	ld	b, a
      00211D 0E 00                 7012 	ld	c, #0x00
      00211F 78                    7013 	ld	a, b
      002120 B7                    7014 	or	a, a
      002121 B1                    7015 	or	a, c
      002122 CAr93r22              7016 	jp	Z,00260$
                                   7017 ;src/main.c:829: cursor.anim_ctr++;
      002125 21r8Fr01              7018 	ld	hl, #_cursor + 8
      002128 56                    7019 	ld	d, (hl)
      002129 14                    7020 	inc	d
      00212A 72                    7021 	ld	(hl), d
                                   7022 ;src/main.c:830: cursor.anim_ctr &= (1u << (CURSOR_PERIOD_LOGSCALE + 1u)) - 1u;
      00212B CB BA                 7023 	res	7, d
      00212D 72                    7024 	ld	(hl), d
                                   7025 ;src/main.c:831: UINT8 prev_anim_frame = cursor.anim_frame;
      00212E 01r90r01              7026 	ld	bc, #_cursor + 9
      002131 0A                    7027 	ld	a, (bc)
      002132 5F                    7028 	ld	e, a
                                   7029 ;src/main.c:832: cursor.anim_frame = cursor.anim_ctr >> CURSOR_PERIOD_LOGSCALE;
      002133 7A                    7030 	ld	a, d
      002134 07                    7031 	rlca
      002135 07                    7032 	rlca
      002136 E6 03                 7033 	and	a, #0x03
      002138 02                    7034 	ld	(bc), a
                                   7035 ;src/main.c:833: if (cursor.anim_frame != prev_anim_frame)
      002139 93                    7036 	sub	a, e
      00213A 28 07                 7037 	jr	Z, 00237$
                                   7038 ;src/main.c:834: flags |= FLAG_REDRAW_CURSOR;
      00213C 21r6Br01              7039 	ld	hl, #_flags
      00213F 7E                    7040 	ld	a, (hl)
      002140 F6 01                 7041 	or	a, #0x01
      002142 77                    7042 	ld	(hl), a
      002143                       7043 00237$:
                                   7044 ;src/main.c:836: if (flags & FLAG_REDRAW_CURSOR) {
      002143 FAr6Br01              7045 	ld	a, (#_flags)
      002146 0F                    7046 	rrca
      002147 D2r35r22              7047 	jp	NC,00253$
                                   7048 ;src/main.c:837: flags &= ~FLAG_REDRAW_CURSOR;
      00214A 21r6Br01              7049 	ld	hl, #_flags
      00214D 7E                    7050 	ld	a, (hl)
      00214E E6 FE                 7051 	and	a, #0xfe
      002150 77                    7052 	ld	(hl), a
                                   7053 ;src/main.c:838: switch (flags & FLAG_GAME_STATE) {
      002151 7E                    7054 	ld	a, (hl)
      002152 E6 18                 7055 	and	a, #0x18
      002154 6F                    7056 	ld	l, a
      002155 26 00                 7057 	ld	h, #0x00
      002157 7D                    7058 	ld	a, l
      002158 D6 08                 7059 	sub	a, #0x08
      00215A B4                    7060 	or	a, h
      00215B 28 4D                 7061 	jr	Z, 00244$
                                   7062 ;src/main.c:844: SETTINGS_PAD_Y * 8u + cursor.pile_idx * 32u
      00215D 11r8Dr01              7063 	ld	de, #_cursor + 6
                                   7064 ;src/main.c:843: cursor.height * 16u + SETTINGS_SPLIT_X * 8u,
                                   7065 ;src/main.c:838: switch (flags & FLAG_GAME_STATE) {
      002160 7D                    7066 	ld	a, l
      002161 D6 10                 7067 	sub	a, #0x10
      002163 B4                    7068 	or	a, h
      002164 28 6E                 7069 	jr	Z, 00250$
      002166 7D                    7070 	ld	a, l
      002167 D6 18                 7071 	sub	a, #0x18
      002169 B4                    7072 	or	a, h
      00216A C2r35r22              7073 	jp	NZ,00253$
                                   7074 ;src/main.c:844: SETTINGS_PAD_Y * 8u + cursor.pile_idx * 32u
      00216D 1A                    7075 	ld	a, (de)
      00216E CB 37                 7076 	swap	a
      002170 07                    7077 	rlca
      002171 E6 E0                 7078 	and	a, #0xe0
      002173 C6 08                 7079 	add	a, #0x08
      002175 F8 0D                 7080 	ldhl	sp,	#13
      002177 77                    7081 	ld	(hl), a
                                   7082 ;src/main.c:843: cursor.height * 16u + SETTINGS_SPLIT_X * 8u,
      002178 FAr8Er01              7083 	ld	a, (#(_cursor + 0x0007) + 0)
      00217B CB 37                 7084 	swap	a
      00217D E6 F0                 7085 	and	a, #0xf0
      00217F C6 50                 7086 	add	a, #0x50
      002181 23                    7087 	inc	hl
      002182 77                    7088 	ld	(hl), a
                                   7089 ;src/main.c:840: move_metasprite(cursor_metasprites[cursor.anim_frame],
      002183 11r00r00              7090 	ld	de, #_cursor_metasprites+0
      002186 0A                    7091 	ld	a, (bc)
      002187 6F                    7092 	ld	l, a
      002188 26 00                 7093 	ld	h, #0x00
      00218A 29                    7094 	add	hl, hl
      00218B 19                    7095 	add	hl, de
      00218C 2A                    7096 	ld	a, (hl+)
      00218D 4E                    7097 	ld	c, (hl)
                                   7098 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      00218E 21r00r00              7099 	ld	hl, #___current_metasprite
      002191 22                    7100 	ld	(hl+), a
      002192 71                    7101 	ld	(hl), c
                                   7102 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      002193 21r00r00              7103 	ld	hl, #___current_base_tile
      002196 36 01                 7104 	ld	(hl), #0x01
                                   7105 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      002198 F8 0D                 7106 	ldhl	sp,	#13
      00219A 7E                    7107 	ld	a, (hl)
      00219B F5                    7108 	push	af
      00219C 33                    7109 	inc	sp
      00219D 23                    7110 	inc	hl
      00219E 56                    7111 	ld	d, (hl)
      00219F 1E 0C                 7112 	ld	e,#0x0c
      0021A1 D5                    7113 	push	de
      0021A2 CDr00r00              7114 	call	___move_metasprite
      0021A5 E8 03                 7115 	add	sp, #3
                                   7116 ;src/main.c:846: break;
      0021A7 C3r35r22              7117 	jp	00253$
                                   7118 ;src/main.c:847: case FLAG_GAME_STATE_LEADERBOARD:
      0021AA                       7119 00244$:
                                   7120 ;src/main.c:848: if (selected_leaderboard) {
      0021AA 21r71r01              7121 	ld	hl, #_selected_leaderboard + 1
      0021AD 3A                    7122 	ld	a, (hl-)
      0021AE B6                    7123 	or	a, (hl)
      0021AF CAr35r22              7124 	jp	Z, 00253$
                                   7125 ;src/main.c:849: set_sprite_tile(SPRITE_FRAME, OFFSET_SPRITE_CURSOR + OFFSET_CURSOR_UNDERLINE + cursor.anim_frame);
      0021B2 0A                    7126 	ld	a, (bc)
      0021B3 C6 09                 7127 	add	a, #0x09
      0021B5 4F                    7128 	ld	c, a
                                   7129 ;/home/wojtek/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      0021B6 21r32r00              7130 	ld	hl, #(_shadow_OAM + 0x0032)
      0021B9 71                    7131 	ld	(hl), c
                                   7132 ;src/main.c:850: move_sprite(SPRITE_FRAME, (LEADERBOARD_NAME_X + 1u) * 8u + cursor.pile_idx * 8u, 16u + cursor.height * 8u);
      0021BA FAr8Er01              7133 	ld	a, (#(_cursor + 0x0007) + 0)
      0021BD 87                    7134 	add	a, a
      0021BE 87                    7135 	add	a, a
      0021BF 87                    7136 	add	a, a
      0021C0 C6 10                 7137 	add	a, #0x10
      0021C2 4F                    7138 	ld	c, a
      0021C3 FAr8Dr01              7139 	ld	a, (#(_cursor + 0x0006) + 0)
      0021C6 87                    7140 	add	a, a
      0021C7 87                    7141 	add	a, a
      0021C8 87                    7142 	add	a, a
      0021C9 C6 48                 7143 	add	a, #0x48
      0021CB 5F                    7144 	ld	e, a
                                   7145 ;/home/wojtek/gbdk/include/gb/gb.h:1218: OAM_item_t * itm = &shadow_OAM[nb];
      0021CC 21r30r00              7146 	ld	hl, #(_shadow_OAM + 0x0030)
                                   7147 ;/home/wojtek/gbdk/include/gb/gb.h:1219: itm->y=y, itm->x=x;
      0021CF 79                    7148 	ld	a, c
      0021D0 22                    7149 	ld	(hl+), a
      0021D1 73                    7150 	ld	(hl), e
                                   7151 ;src/main.c:852: break;
      0021D2 18 61                 7152 	jr	00253$
                                   7153 ;src/main.c:853: case FLAG_GAME_STATE_INGAME:
      0021D4                       7154 00250$:
                                   7155 ;src/main.c:854: if (cursor.pile_idx == PILE_IDX_DECK)
      0021D4 1A                    7156 	ld	a, (de)
      0021D5 F8 0E                 7157 	ldhl	sp,	#14
      0021D7 77                    7158 	ld	(hl), a
                                   7159 ;src/main.c:831: UINT8 prev_anim_frame = cursor.anim_frame;
      0021D8 0A                    7160 	ld	a, (bc)
                                   7161 ;src/main.c:855: move_metasprite(cursor_metasprites[cursor.anim_frame],
      0021D9 6F                    7162 	ld	l, a
      0021DA 26 00                 7163 	ld	h, #0x00
      0021DC 29                    7164 	add	hl, hl
      0021DD 4D                    7165 	ld	c, l
      0021DE 44                    7166 	ld	b, h
                                   7167 ;src/main.c:854: if (cursor.pile_idx == PILE_IDX_DECK)
      0021DF F8 0E                 7168 	ldhl	sp,	#14
      0021E1 7E                    7169 	ld	a, (hl)
      0021E2 D6 0A                 7170 	sub	a, #0x0a
      0021E4 20 1F                 7171 	jr	NZ, 00248$
                                   7172 ;src/main.c:855: move_metasprite(cursor_metasprites[cursor.anim_frame],
      0021E6 21r00r00              7173 	ld	hl, #_cursor_metasprites
      0021E9 09                    7174 	add	hl, bc
      0021EA 2A                    7175 	ld	a, (hl+)
      0021EB 4E                    7176 	ld	c, (hl)
                                   7177 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      0021EC 21r00r00              7178 	ld	hl, #___current_metasprite
      0021EF 22                    7179 	ld	(hl+), a
      0021F0 71                    7180 	ld	(hl), c
                                   7181 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      0021F1 21r00r00              7182 	ld	hl, #___current_base_tile
      0021F4 36 01                 7183 	ld	(hl), #0x01
                                   7184 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      0021F6 AF                    7185 	xor	a, a
      0021F7 F5                    7186 	push	af
      0021F8 33                    7187 	inc	sp
      0021F9 AF                    7188 	xor	a, a
      0021FA 57                    7189 	ld	d,a
      0021FB 1E 0C                 7190 	ld	e,#0x0c
      0021FD D5                    7191 	push	de
      0021FE CDr00r00              7192 	call	___move_metasprite
      002201 E8 03                 7193 	add	sp, #3
                                   7194 ;src/main.c:860: );
      002203 18 30                 7195 	jr	00253$
      002205                       7196 00248$:
                                   7197 ;src/main.c:866: (cursor.height + 3u) * 8u
      002205 FAr8Er01              7198 	ld	a, (#(_cursor + 0x0007) + 0)
      002208 C6 03                 7199 	add	a, #0x03
      00220A 87                    7200 	add	a, a
      00220B 87                    7201 	add	a, a
      00220C 87                    7202 	add	a, a
      00220D F8 0D                 7203 	ldhl	sp,	#13
                                   7204 ;src/main.c:865: cursor.pile_idx * 16u,
      00220F 22                    7205 	ld	(hl+), a
      002210 7E                    7206 	ld	a, (hl)
      002211 CB 37                 7207 	swap	a
      002213 E6 F0                 7208 	and	a, #0xf0
      002215 77                    7209 	ld	(hl), a
                                   7210 ;src/main.c:862: move_metasprite(cursor_metasprites[cursor.anim_frame],
      002216 21r00r00              7211 	ld	hl, #_cursor_metasprites
      002219 09                    7212 	add	hl, bc
      00221A 2A                    7213 	ld	a, (hl+)
      00221B 4E                    7214 	ld	c, (hl)
                                   7215 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      00221C 21r00r00              7216 	ld	hl, #___current_metasprite
      00221F 22                    7217 	ld	(hl+), a
      002220 71                    7218 	ld	(hl), c
                                   7219 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      002221 21r00r00              7220 	ld	hl, #___current_base_tile
      002224 36 01                 7221 	ld	(hl), #0x01
                                   7222 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      002226 F8 0D                 7223 	ldhl	sp,	#13
      002228 7E                    7224 	ld	a, (hl)
      002229 F5                    7225 	push	af
      00222A 33                    7226 	inc	sp
      00222B 23                    7227 	inc	hl
      00222C 56                    7228 	ld	d, (hl)
      00222D 1E 0C                 7229 	ld	e,#0x0c
      00222F D5                    7230 	push	de
      002230 CDr00r00              7231 	call	___move_metasprite
      002233 E8 03                 7232 	add	sp, #3
                                   7233 ;src/main.c:869: }
      002235                       7234 00253$:
                                   7235 ;src/main.c:872: if (flags & FLAG_REDRAW_HAND) {
      002235 FAr6Br01              7236 	ld	a, (#_flags)
      002238 CB 4F                 7237 	bit	1, a
      00223A 28 57                 7238 	jr	Z, 00260$
                                   7239 ;src/main.c:873: flags &= ~FLAG_REDRAW_HAND;
      00223C 21r6Br01              7240 	ld	hl, #_flags
      00223F 7E                    7241 	ld	a, (hl)
      002240 E6 FD                 7242 	and	a, #0xfd
      002242 77                    7243 	ld	(hl), a
                                   7244 ;src/main.c:874: if (cursor.held_card) {
      002243 21r87r01              7245 	ld	hl, #_cursor
      002246 2A                    7246 	ld	a, (hl+)
      002247 B6                    7247 	or	a,(hl)
      002248 28 41                 7248 	jr	Z, 00256$
                                   7249 ;src/main.c:875: UINT8 height = piles[cursor.hand_pile_idx].height;
      00224A 21r8Cr01              7250 	ld	hl, #_cursor + 5
      00224D 4E                    7251 	ld	c, (hl)
      00224E 06 00                 7252 	ld	b, #0x00
      002250 69                    7253 	ld	l, c
      002251 60                    7254 	ld	h, b
      002252 29                    7255 	add	hl, hl
      002253 29                    7256 	add	hl, hl
      002254 09                    7257 	add	hl, bc
      002255 11r38r01              7258 	ld	de, #_piles
      002258 19                    7259 	add	hl, de
      002259 23                    7260 	inc	hl
      00225A 23                    7261 	inc	hl
      00225B 23                    7262 	inc	hl
      00225C 23                    7263 	inc	hl
      00225D 46                    7264 	ld	b, (hl)
                                   7265 ;src/main.c:880: (height + !height + 2u) * 8u
      00225E 78                    7266 	ld	a, b
      00225F D6 01                 7267 	sub	a,#0x01
      002261 3E 00                 7268 	ld	a, #0x00
      002263 17                    7269 	rla
      002264 80                    7270 	add	a, b
      002265 C6 02                 7271 	add	a, #0x02
      002267 87                    7272 	add	a, a
      002268 87                    7273 	add	a, a
      002269 87                    7274 	add	a, a
      00226A 57                    7275 	ld	d, a
                                   7276 ;src/main.c:879: cursor.hand_pile_idx * 16u,
      00226B 79                    7277 	ld	a, c
      00226C CB 37                 7278 	swap	a
      00226E E6 F0                 7279 	and	a, #0xf0
      002270 47                    7280 	ld	b, a
                                   7281 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      002271 21r00r00              7282 	ld	hl, #___current_metasprite
      002274 36r00                 7283 	ld	(hl), #<(_metasprite_sequential_2x3)
      002276 23                    7284 	inc	hl
      002277 36s00                 7285 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   7286 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      002279 21r00r00              7287 	ld	hl, #___current_base_tile
      00227C 36 03                 7288 	ld	(hl), #0x03
                                   7289 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      00227E 58                    7290 	ld	e, b
      00227F D5                    7291 	push	de
      002280 3E 06                 7292 	ld	a, #0x06
      002282 F5                    7293 	push	af
      002283 33                    7294 	inc	sp
      002284 CDr00r00              7295 	call	___move_metasprite
      002287 E8 03                 7296 	add	sp, #3
                                   7297 ;src/main.c:881: );
      002289 18 08                 7298 	jr	00260$
      00228B                       7299 00256$:
                                   7300 ;src/main.c:883: metasprite_2x3_hide(SPRITE_HAND);
      00228B 3E 06                 7301 	ld	a, #0x06
      00228D F5                    7302 	push	af
      00228E 33                    7303 	inc	sp
      00228F CDr28r05              7304 	call	_metasprite_2x3_hide
      002292 33                    7305 	inc	sp
                                   7306 ;src/main.c:1281: cursor_process();
      002293                       7307 00260$:
                                   7308 ;src/main.c:733: if (dynamic_metasprite.elapsed_frames >= dynamic_metasprite.target_frames)
      002293 FAr7Br01              7309 	ld	a, (#(_dynamic_metasprite + 0x0009) + 0)
      002296 F8 0E                 7310 	ldhl	sp,	#14
      002298 77                    7311 	ld	(hl), a
      002299 21r7Ar01              7312 	ld	hl, #(_dynamic_metasprite + 0x0008)
      00229C 4E                    7313 	ld	c, (hl)
      00229D 59                    7314 	ld	e, c
      00229E F8 0E                 7315 	ldhl	sp,	#14
      0022A0 56                    7316 	ld	d, (hl)
      0022A1 7E                    7317 	ld	a, (hl)
      0022A2 91                    7318 	sub	a, c
      0022A3 CB 7B                 7319 	bit	7, e
      0022A5 28 07                 7320 	jr	Z, 00712$
      0022A7 CB 7A                 7321 	bit	7, d
      0022A9 20 08                 7322 	jr	NZ, 00713$
      0022AB BF                    7323 	cp	a, a
      0022AC 18 05                 7324 	jr	00713$
      0022AE                       7325 00712$:
      0022AE CB 7A                 7326 	bit	7, d
      0022B0 28 01                 7327 	jr	Z, 00713$
      0022B2 37                    7328 	scf
      0022B3                       7329 00713$:
      0022B3 D2r5Dr23              7330 	jp	NC, 00267$
                                   7331 ;src/main.c:736: dynamic_metasprite.elapsed_frames++;
      0022B6 F8 0E                 7332 	ldhl	sp,	#14
      0022B8 7E                    7333 	ld	a, (hl)
      0022B9 3C                    7334 	inc	a
      0022BA 2B                    7335 	dec	hl
      0022BB 77                    7336 	ld	(hl), a
      0022BC 11r7Br01              7337 	ld	de, #(_dynamic_metasprite + 0x0009)
      0022BF 7E                    7338 	ld	a, (hl)
      0022C0 12                    7339 	ld	(de), a
                                   7340 ;src/main.c:741: dynamic_metasprite.src[1] + (dynamic_metasprite.dist[1] * dynamic_metasprite.elapsed_frames / dynamic_metasprite.target_frames)
      0022C1 FAr74r01              7341 	ld	a, (#(_dynamic_metasprite + 0x0002) + 0)
      0022C4 F8 0E                 7342 	ldhl	sp,	#14
      0022C6 77                    7343 	ld	(hl), a
      0022C7 21r78r01              7344 	ld	hl, #_dynamic_metasprite + 6
      0022CA 2A                    7345 	ld	a, (hl+)
      0022CB 4F                    7346 	ld	c, a
      0022CC 46                    7347 	ld	b, (hl)
      0022CD F8 0D                 7348 	ldhl	sp,	#13
      0022CF 7E                    7349 	ld	a, (hl)
      0022D0 F8 09                 7350 	ldhl	sp,	#9
      0022D2 77                    7351 	ld	(hl), a
      0022D3 17                    7352 	rla
      0022D4 9F                    7353 	sbc	a, a
      0022D5 23                    7354 	inc	hl
      0022D6 32                    7355 	ld	(hl-), a
      0022D7 2A                    7356 	ld	a, (hl+)
      0022D8 66                    7357 	ld	h, (hl)
      0022D9 6F                    7358 	ld	l, a
      0022DA E5                    7359 	push	hl
      0022DB C5                    7360 	push	bc
      0022DC CDr00r00              7361 	call	__mulint
      0022DF E8 04                 7362 	add	sp, #4
      0022E1 4B                    7363 	ld	c, e
      0022E2 42                    7364 	ld	b, d
      0022E3 FAr7Ar01              7365 	ld	a, (#(_dynamic_metasprite + 0x0008) + 0)
      0022E6 F8 0B                 7366 	ldhl	sp,	#11
      0022E8 77                    7367 	ld	(hl), a
      0022E9 17                    7368 	rla
      0022EA 9F                    7369 	sbc	a, a
      0022EB 23                    7370 	inc	hl
      0022EC 32                    7371 	ld	(hl-), a
      0022ED 2A                    7372 	ld	a, (hl+)
      0022EE 66                    7373 	ld	h, (hl)
      0022EF 6F                    7374 	ld	l, a
      0022F0 E5                    7375 	push	hl
      0022F1 C5                    7376 	push	bc
      0022F2 CDr00r00              7377 	call	__divsint
      0022F5 E8 04                 7378 	add	sp, #4
      0022F7 7B                    7379 	ld	a, e
      0022F8 F8 0E                 7380 	ldhl	sp,	#14
      0022FA 86                    7381 	add	a, (hl)
      0022FB 2B                    7382 	dec	hl
      0022FC 77                    7383 	ld	(hl), a
                                   7384 ;src/main.c:740: dynamic_metasprite.src[0] + (dynamic_metasprite.dist[0] * dynamic_metasprite.elapsed_frames / dynamic_metasprite.target_frames),
      0022FD FAr72r01              7385 	ld	a, (#_dynamic_metasprite + 0)
      002300 F8 0E                 7386 	ldhl	sp,	#14
      002302 77                    7387 	ld	(hl), a
      002303 21r76r01              7388 	ld	hl, #(_dynamic_metasprite + 0x0004)
      002306 2A                    7389 	ld	a, (hl+)
      002307 4F                    7390 	ld	c, a
      002308 46                    7391 	ld	b, (hl)
      002309 F8 09                 7392 	ldhl	sp,	#9
      00230B 2A                    7393 	ld	a, (hl+)
      00230C 66                    7394 	ld	h, (hl)
      00230D 6F                    7395 	ld	l, a
      00230E E5                    7396 	push	hl
      00230F C5                    7397 	push	bc
      002310 CDr00r00              7398 	call	__mulint
      002313 E8 04                 7399 	add	sp, #4
      002315 F8 0B                 7400 	ldhl	sp,	#11
      002317 2A                    7401 	ld	a, (hl+)
      002318 66                    7402 	ld	h, (hl)
      002319 6F                    7403 	ld	l, a
      00231A E5                    7404 	push	hl
      00231B D5                    7405 	push	de
      00231C CDr00r00              7406 	call	__divsint
      00231F E8 04                 7407 	add	sp, #4
      002321 7B                    7408 	ld	a, e
      002322 F8 0E                 7409 	ldhl	sp,	#14
      002324 86                    7410 	add	a, (hl)
      002325 47                    7411 	ld	b, a
                                   7412 ;src/main.c:738: dynamic_metasprite.metasprite_offset,
      002326 FAr7Er01              7413 	ld	a, (#(_dynamic_metasprite + 0x000c) + 0)
      002329 EAr00r00              7414 	ld	(#___current_base_tile),a
                                   7415 ;src/main.c:737: move_metasprite(dynamic_metasprite.metasprite,
      00232C 21r7Cr01              7416 	ld	hl, #_dynamic_metasprite + 10
      00232F 2A                    7417 	ld	a, (hl+)
      002330 4E                    7418 	ld	c, (hl)
                                   7419 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      002331 21r00r00              7420 	ld	hl, #___current_metasprite
      002334 22                    7421 	ld	(hl+), a
      002335 71                    7422 	ld	(hl), c
                                   7423 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      002336 F8 0D                 7424 	ldhl	sp,	#13
      002338 7E                    7425 	ld	a, (hl)
      002339 F5                    7426 	push	af
      00233A 33                    7427 	inc	sp
      00233B C5                    7428 	push	bc
      00233C 33                    7429 	inc	sp
      00233D AF                    7430 	xor	a, a
      00233E F5                    7431 	push	af
      00233F 33                    7432 	inc	sp
      002340 CDr00r00              7433 	call	___move_metasprite
      002343 E8 03                 7434 	add	sp, #3
                                   7435 ;src/main.c:743: if (dynamic_metasprite.elapsed_frames == dynamic_metasprite.target_frames
      002345 FAr7Br01              7436 	ld	a, (#(_dynamic_metasprite + 0x0009) + 0)
      002348 21r7Ar01              7437 	ld	hl, #(_dynamic_metasprite + 0x0008)
      00234B 4E                    7438 	ld	c, (hl)
      00234C 91                    7439 	sub	a, c
      00234D 20 0E                 7440 	jr	NZ, 00267$
                                   7441 ;src/main.c:744: && dynamic_metasprite.callback)
      00234F 21r85r01              7442 	ld	hl, #_dynamic_metasprite + 19
      002352 2A                    7443 	ld	a, (hl+)
      002353 4F                    7444 	ld	c, a
      002354 66                    7445 	ld	h, (hl)
      002355 7C                    7446 	ld	a, h
      002356 B1                    7447 	or	a, c
      002357 28 04                 7448 	jr	Z, 00267$
                                   7449 ;src/main.c:745: dynamic_metasprite.callback();
      002359 69                    7450 	ld	l, c
      00235A CDr00r00              7451 	call	___sdcc_call_hl
                                   7452 ;src/main.c:1283: dynamic_metasprite_process();
      00235D                       7453 00267$:
                                   7454 ;src/main.c:1285: wait_vbl_done();
      00235D CDr00r00              7455 	call	_wait_vbl_done
      002360 C3r62r1C              7456 	jp	00102$
                                   7457 ;src/main.c:1287: }
      002363 E8 0F                 7458 	add	sp, #15
      002365 C9                    7459 	ret
                                   7460 	.area _CODE
                                   7461 	.area _CABS (ABS)
