                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mgbz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _rand
                                     12 	.globl _initrand
                                     13 	.globl _font_set
                                     14 	.globl _font_load
                                     15 	.globl _font_init
                                     16 	.globl _set_sprite_data
                                     17 	.globl _set_bkg_tile_xy
                                     18 	.globl _set_bkg_tiles
                                     19 	.globl _set_bkg_data
                                     20 	.globl _wait_vbl_done
                                     21 	.globl _joypad
                                     22 	.globl _cursor
                                     23 	.globl _dynamic_metasprite
                                     24 	.globl _score
                                     25 	.globl _settings
                                     26 	.globl _flags
                                     27 	.globl _top_card_idx
                                     28 	.globl _piles
                                     29 	.globl _deck
                                     30 	.globl _animation_speeds
                                     31 	.globl _clear_bkg_2x1
                                     32 	.globl _draw_card_top
                                     33 	.globl _draw_card_bottom
                                     34 	.globl _draw_card
                                     35 	.globl _draw_sequential_card
                                     36 	.globl _clear_bkg
                                     37 	.globl _draw_pile
                                     38 	.globl _draw_bkg_game
                                     39 	.globl _metasprite_2x3_hide
                                     40 	.globl _set_metasprite_card
                                     41 	.globl _dynamic_metasprite_end_animation
                                     42 	.globl _dynamic_metasprite_splash_screen_callback
                                     43 	.globl _dynamic_metasprite_splash_screen
                                     44 	.globl _dynamic_metasprite_fold_pile
                                     45 	.globl _dynamic_metasprite_unfold_callback
                                     46 	.globl _dynamic_metasprite_move_stack_callback
                                     47 	.globl _dynamic_metasprite_fold_callback
                                     48 	.globl _dynamic_metasprite_fold
                                     49 	.globl _dynamic_metasprite_deal_callback
                                     50 	.globl _dynamic_metasprite_deal
                                     51 	.globl _dynamic_metasprite_process
                                     52 	.globl _cursor_adjust_height
                                     53 	.globl _cursor_grab_stack
                                     54 	.globl _cursor_place_stack
                                     55 	.globl _cursor_process
                                     56 	.globl _init_deck
                                     57 	.globl _is_stack_coherent
                                     58 	.globl _deal
                                     59 	.globl _pile_append_cursor_stack
                                     60 	.globl _start_game
                                     61 	.globl _input_process
                                     62 	.globl _main
                                     63 ;--------------------------------------------------------
                                     64 ; special function registers
                                     65 ;--------------------------------------------------------
                                     66 ;--------------------------------------------------------
                                     67 ; ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area _DATA
      000000                         70 _deck::
      000000                         71 	.ds 312
      000138                         72 _piles::
      000138                         73 	.ds 50
      00016A                         74 _top_card_idx::
      00016A                         75 	.ds 1
      00016B                         76 _flags::
      00016B                         77 	.ds 1
      00016C                         78 _settings::
      00016C                         79 	.ds 1
      00016D                         80 _score::
      00016D                         81 	.ds 2
      00016F                         82 _dynamic_metasprite::
      00016F                         83 	.ds 21
      000184                         84 _cursor::
      000184                         85 	.ds 10
      00018E                         86 _input_process_prev_input_65536_296:
      00018E                         87 	.ds 1
      00018F                         88 _main_prev_input_327681_339:
      00018F                         89 	.ds 1
                                     90 ;--------------------------------------------------------
                                     91 ; absolute external ram data
                                     92 ;--------------------------------------------------------
                                     93 	.area _DABS (ABS)
                                     94 ;--------------------------------------------------------
                                     95 ; global & static initialisations
                                     96 ;--------------------------------------------------------
                                     97 	.area _HOME
                                     98 	.area _GSINIT
                                     99 	.area _GSFINAL
                                    100 	.area _GSINIT
                                    101 ;src/main.c:785: static UINT8 prev_input = 0;
      000000 21r8Er01               102 	ld	hl, #_input_process_prev_input_65536_296
      000003 36 00                  103 	ld	(hl), #0x00
                                    104 ;src/main.c:785: static UINT8 prev_input = 0;
      000005 21r8Fr01               105 	ld	hl, #_main_prev_input_327681_339
      000008 36 00                  106 	ld	(hl), #0x00
                                    107 ;src/main.c:136: UINT8 flags = FLAG_GAME_STATE_START;
      00000A 21r6Br01               108 	ld	hl, #_flags
      00000D 36 00                  109 	ld	(hl), #0x00
                                    110 ;src/main.c:137: UINT8 settings = SETTING_FOUR_SUIT | 0b00000100;
      00000F 21r6Cr01               111 	ld	hl, #_settings
      000012 36 07                  112 	ld	(hl), #0x07
                                    113 ;src/main.c:139: UINT16 score = 500;
      000014 21r6Dr01               114 	ld	hl, #_score
      000017 36 F4                  115 	ld	(hl), #0xf4
      000019 23                     116 	inc	hl
      00001A 36 01                  117 	ld	(hl), #0x01
                                    118 ;src/main.c:141: struct DynamicMetaSprite dynamic_metasprite = {
      00001C 21r77r01               119 	ld	hl, #(_dynamic_metasprite + 0x0008)
      00001F 36 FF                  120 	ld	(hl), #0xff
      000021 21r78r01               121 	ld	hl, #(_dynamic_metasprite + 0x0009)
      000024 36 00                  122 	ld	(hl), #0x00
                                    123 ;src/main.c:146: struct Cursor cursor = {
      000026 21r84r01               124 	ld	hl, #_cursor
      000029 AF                     125 	xor	a, a
      00002A 22                     126 	ld	(hl+), a
      00002B 77                     127 	ld	(hl), a
      00002C 21r86r01               128 	ld	hl, #(_cursor + 0x0002)
      00002F AF                     129 	xor	a, a
      000030 22                     130 	ld	(hl+), a
      000031 77                     131 	ld	(hl), a
      000032 21r89r01               132 	ld	hl, #(_cursor + 0x0005)
      000035 36 00                  133 	ld	(hl), #0x00
      000037 21r8Ar01               134 	ld	hl, #(_cursor + 0x0006)
      00003A 36 0A                  135 	ld	(hl), #0x0a
      00003C 21r8Br01               136 	ld	hl, #(_cursor + 0x0007)
      00003F 36 00                  137 	ld	(hl), #0x00
      000041 21r8Cr01               138 	ld	hl, #(_cursor + 0x0008)
      000044 36 00                  139 	ld	(hl), #0x00
      000046 21r8Dr01               140 	ld	hl, #(_cursor + 0x0009)
      000049 36 00                  141 	ld	(hl), #0x00
                                    142 ;--------------------------------------------------------
                                    143 ; Home
                                    144 ;--------------------------------------------------------
                                    145 	.area _HOME
                                    146 	.area _HOME
                                    147 ;--------------------------------------------------------
                                    148 ; code
                                    149 ;--------------------------------------------------------
                                    150 	.area _CODE
                                    151 ;src/main.c:217: inline void clear_bkg_2x1(const UINT8 x, const UINT8 y)
                                    152 ;	---------------------------------
                                    153 ; Function clear_bkg_2x1
                                    154 ; ---------------------------------
      000000                        155 _clear_bkg_2x1::
                                    156 ;src/main.c:219: set_bkg_tile_xy(x, y, OFFSET_BKG_NONE);
      000000 AF                     157 	xor	a, a
      000001 F5                     158 	push	af
      000002 33                     159 	inc	sp
      000003 F8 04                  160 	ldhl	sp,	#4
      000005 7E                     161 	ld	a, (hl)
      000006 F5                     162 	push	af
      000007 33                     163 	inc	sp
      000008 2B                     164 	dec	hl
      000009 7E                     165 	ld	a, (hl)
      00000A F5                     166 	push	af
      00000B 33                     167 	inc	sp
      00000C CDr00r00               168 	call	_set_bkg_tile_xy
      00000F E8 03                  169 	add	sp, #3
                                    170 ;src/main.c:220: set_bkg_tile_xy(x + 1u, y, OFFSET_BKG_NONE);
      000011 F8 02                  171 	ldhl	sp,	#2
      000013 7E                     172 	ld	a, (hl)
      000014 3C                     173 	inc	a
      000015 26 00                  174 	ld	h, #0x00
      000017 E5                     175 	push	hl
      000018 33                     176 	inc	sp
      000019 F8 04                  177 	ldhl	sp,	#4
      00001B 66                     178 	ld	h, (hl)
      00001C E5                     179 	push	hl
      00001D 33                     180 	inc	sp
      00001E F5                     181 	push	af
      00001F 33                     182 	inc	sp
      000020 CDr00r00               183 	call	_set_bkg_tile_xy
      000023 E8 03                  184 	add	sp, #3
                                    185 ;src/main.c:221: }
      000025 C9                     186 	ret
      000026                        187 _animation_speeds:
      000026 10                     188 	.db #0x10	; 16
      000027 20                     189 	.db #0x20	; 32
      000028 08                     190 	.db #0x08	; 8
      000029 10                     191 	.db #0x10	; 16
      00002A 04                     192 	.db #0x04	; 4
      00002B 08                     193 	.db #0x08	; 8
                                    194 ;src/main.c:223: void draw_card_top(const UINT8 x, const UINT8 y, const UINT8 card_data)
                                    195 ;	---------------------------------
                                    196 ; Function draw_card_top
                                    197 ; ---------------------------------
      00002C                        198 _draw_card_top::
                                    199 ;src/main.c:225: if (VISIBLE(card_data)) {
      00002C F8 04                  200 	ldhl	sp,	#4
                                    201 ;src/main.c:227: set_bkg_tile_xy(x + 1u, y, SUIT(card_data) + OFFSET_BKG_CARD + OFFSET_CARD_SUIT);
      00002E 3A                     202 	ld	a, (hl-)
      00002F 4F                     203 	ld	c, a
      000030 2B                     204 	dec	hl
      000031 46                     205 	ld	b, (hl)
      000032 04                     206 	inc	b
                                    207 ;src/main.c:225: if (VISIBLE(card_data)) {
      000033 CB 71                  208 	bit	6, c
      000035 28 3F                  209 	jr	Z, 00102$
                                    210 ;src/main.c:226: set_bkg_tile_xy(x, y, RANK(card_data) + OFFSET_BKG_CARD + OFFSET_CARD_RANK);
      000037 79                     211 	ld	a, c
      000038 E6 0F                  212 	and	a, #0x0f
      00003A C6 80                  213 	add	a, #0x80
      00003C F5                     214 	push	af
      00003D 33                     215 	inc	sp
      00003E F8 04                  216 	ldhl	sp,	#4
      000040 7E                     217 	ld	a, (hl)
      000041 F5                     218 	push	af
      000042 33                     219 	inc	sp
      000043 2B                     220 	dec	hl
      000044 7E                     221 	ld	a, (hl)
      000045 F5                     222 	push	af
      000046 33                     223 	inc	sp
      000047 CDr00r00               224 	call	_set_bkg_tile_xy
      00004A E8 03                  225 	add	sp, #3
                                    226 ;src/main.c:227: set_bkg_tile_xy(x + 1u, y, SUIT(card_data) + OFFSET_BKG_CARD + OFFSET_CARD_SUIT);
      00004C 79                     227 	ld	a, c
      00004D 0E 00                  228 	ld	c, #0x00
      00004F E6 30                  229 	and	a, #0x30
      000051 5F                     230 	ld	e, a
      000052 16 00                  231 	ld	d, #0x00
      000054 CB 3A                  232 	srl	d
      000056 CB 1B                  233 	rr	e
      000058 CB 3A                  234 	srl	d
      00005A CB 1B                  235 	rr	e
      00005C CB 3A                  236 	srl	d
      00005E CB 1B                  237 	rr	e
      000060 CB 3A                  238 	srl	d
      000062 CB 1B                  239 	rr	e
      000064 7B                     240 	ld	a, e
      000065 C6 8D                  241 	add	a, #0x8d
      000067 F5                     242 	push	af
      000068 33                     243 	inc	sp
      000069 F8 04                  244 	ldhl	sp,	#4
      00006B 7E                     245 	ld	a, (hl)
      00006C F5                     246 	push	af
      00006D 33                     247 	inc	sp
      00006E C5                     248 	push	bc
      00006F 33                     249 	inc	sp
      000070 CDr00r00               250 	call	_set_bkg_tile_xy
      000073 E8 03                  251 	add	sp, #3
      000075 C9                     252 	ret
      000076                        253 00102$:
                                    254 ;src/main.c:229: set_bkg_tile_xy(x, y, OFFSET_BKG_CARD + OFFSET_CARD_BACK);
      000076 3E 97                  255 	ld	a, #0x97
      000078 F5                     256 	push	af
      000079 33                     257 	inc	sp
      00007A F8 04                  258 	ldhl	sp,	#4
      00007C 7E                     259 	ld	a, (hl)
      00007D F5                     260 	push	af
      00007E 33                     261 	inc	sp
      00007F 2B                     262 	dec	hl
      000080 7E                     263 	ld	a, (hl)
      000081 F5                     264 	push	af
      000082 33                     265 	inc	sp
      000083 CDr00r00               266 	call	_set_bkg_tile_xy
      000086 E8 03                  267 	add	sp, #3
                                    268 ;src/main.c:230: set_bkg_tile_xy(x + 1u, y, OFFSET_BKG_CARD + OFFSET_CARD_BACK + 1u);
      000088 3E 98                  269 	ld	a, #0x98
      00008A F5                     270 	push	af
      00008B 33                     271 	inc	sp
      00008C F8 04                  272 	ldhl	sp,	#4
      00008E 7E                     273 	ld	a, (hl)
      00008F F5                     274 	push	af
      000090 33                     275 	inc	sp
      000091 C5                     276 	push	bc
      000092 33                     277 	inc	sp
      000093 CDr00r00               278 	call	_set_bkg_tile_xy
      000096 E8 03                  279 	add	sp, #3
                                    280 ;src/main.c:232: }
      000098 C9                     281 	ret
                                    282 ;src/main.c:234: void draw_card_bottom(const UINT8 x, const UINT8 y, const UINT8 card_data)
                                    283 ;	---------------------------------
                                    284 ; Function draw_card_bottom
                                    285 ; ---------------------------------
      000099                        286 _draw_card_bottom::
                                    287 ;src/main.c:236: set_bkg_tile_xy(x, y, OFFSET_BKG_CARD + OFFSET_CARD_BLANK + 2u);
      000099 3E 93                  288 	ld	a, #0x93
      00009B F5                     289 	push	af
      00009C 33                     290 	inc	sp
      00009D F8 04                  291 	ldhl	sp,	#4
      00009F 7E                     292 	ld	a, (hl)
      0000A0 F5                     293 	push	af
      0000A1 33                     294 	inc	sp
      0000A2 2B                     295 	dec	hl
      0000A3 7E                     296 	ld	a, (hl)
      0000A4 F5                     297 	push	af
      0000A5 33                     298 	inc	sp
      0000A6 CDr00r00               299 	call	_set_bkg_tile_xy
      0000A9 E8 03                  300 	add	sp, #3
                                    301 ;src/main.c:237: set_bkg_tile_xy(x + 1u, y, OFFSET_BKG_CARD + OFFSET_CARD_BLANK + 3u);
      0000AB F8 02                  302 	ldhl	sp,	#2
      0000AD 4E                     303 	ld	c, (hl)
      0000AE 0C                     304 	inc	c
      0000AF 3E 94                  305 	ld	a, #0x94
      0000B1 F5                     306 	push	af
      0000B2 33                     307 	inc	sp
      0000B3 23                     308 	inc	hl
      0000B4 46                     309 	ld	b, (hl)
      0000B5 C5                     310 	push	bc
      0000B6 CDr00r00               311 	call	_set_bkg_tile_xy
      0000B9 E8 03                  312 	add	sp, #3
                                    313 ;src/main.c:238: set_bkg_tile_xy(x, y+ 1u, SUIT(card_data) + OFFSET_BKG_CARD + OFFSET_CARD_SUIT_ROT);
      0000BB F8 04                  314 	ldhl	sp,	#4
      0000BD 7E                     315 	ld	a, (hl)
      0000BE E6 30                  316 	and	a, #0x30
      0000C0 5F                     317 	ld	e, a
      0000C1 16 00                  318 	ld	d, #0x00
      0000C3 CB 3A                  319 	srl	d
      0000C5 CB 1B                  320 	rr	e
      0000C7 CB 3A                  321 	srl	d
      0000C9 CB 1B                  322 	rr	e
      0000CB CB 3A                  323 	srl	d
      0000CD CB 1B                  324 	rr	e
      0000CF CB 3A                  325 	srl	d
      0000D1 CB 1B                  326 	rr	e
      0000D3 7B                     327 	ld	a, e
      0000D4 C6 AA                  328 	add	a, #0xaa
      0000D6 2B                     329 	dec	hl
      0000D7 46                     330 	ld	b, (hl)
      0000D8 04                     331 	inc	b
      0000D9 F5                     332 	push	af
      0000DA 33                     333 	inc	sp
      0000DB C5                     334 	push	bc
      0000DC 33                     335 	inc	sp
      0000DD 2B                     336 	dec	hl
      0000DE 7E                     337 	ld	a, (hl)
      0000DF F5                     338 	push	af
      0000E0 33                     339 	inc	sp
      0000E1 CDr00r00               340 	call	_set_bkg_tile_xy
      0000E4 E8 03                  341 	add	sp, #3
                                    342 ;src/main.c:239: set_bkg_tile_xy(x + 1u, y+ 1u, RANK(card_data) + OFFSET_BKG_CARD + OFFSET_CARD_RANK_ROT);
      0000E6 F8 04                  343 	ldhl	sp,	#4
      0000E8 7E                     344 	ld	a, (hl)
      0000E9 E6 0F                  345 	and	a, #0x0f
      0000EB C6 9D                  346 	add	a, #0x9d
      0000ED F5                     347 	push	af
      0000EE 33                     348 	inc	sp
      0000EF C5                     349 	push	bc
      0000F0 CDr00r00               350 	call	_set_bkg_tile_xy
      0000F3 E8 03                  351 	add	sp, #3
                                    352 ;src/main.c:240: }
      0000F5 C9                     353 	ret
                                    354 ;src/main.c:242: inline void draw_card(const UINT8 x, const UINT8 y, const UINT8 card_data)
                                    355 ;	---------------------------------
                                    356 ; Function draw_card
                                    357 ; ---------------------------------
      0000F6                        358 _draw_card::
                                    359 ;src/main.c:244: draw_card_top(x, y, card_data);
      0000F6 F8 04                  360 	ldhl	sp,	#4
      0000F8 7E                     361 	ld	a, (hl)
      0000F9 F5                     362 	push	af
      0000FA 33                     363 	inc	sp
      0000FB 2B                     364 	dec	hl
      0000FC 7E                     365 	ld	a, (hl)
      0000FD F5                     366 	push	af
      0000FE 33                     367 	inc	sp
      0000FF 2B                     368 	dec	hl
      000100 7E                     369 	ld	a, (hl)
      000101 F5                     370 	push	af
      000102 33                     371 	inc	sp
      000103 CDr2Cr00               372 	call	_draw_card_top
      000106 E8 03                  373 	add	sp, #3
                                    374 ;src/main.c:245: draw_card_bottom(x, y + 1u, card_data);
      000108 F8 03                  375 	ldhl	sp,	#3
      00010A 7E                     376 	ld	a, (hl)
      00010B 3C                     377 	inc	a
      00010C 23                     378 	inc	hl
      00010D 66                     379 	ld	h, (hl)
      00010E E5                     380 	push	hl
      00010F 33                     381 	inc	sp
      000110 F5                     382 	push	af
      000111 33                     383 	inc	sp
      000112 F8 04                  384 	ldhl	sp,	#4
      000114 7E                     385 	ld	a, (hl)
      000115 F5                     386 	push	af
      000116 33                     387 	inc	sp
      000117 CDr99r00               388 	call	_draw_card_bottom
      00011A E8 03                  389 	add	sp, #3
                                    390 ;src/main.c:246: }
      00011C C9                     391 	ret
                                    392 ;src/main.c:248: void draw_sequential_card(const UINT8 x, const UINT8 y, const UINT8 bkg_offset)
                                    393 ;	---------------------------------
                                    394 ; Function draw_sequential_card
                                    395 ; ---------------------------------
      00011D                        396 _draw_sequential_card::
                                    397 ;src/main.c:250: set_bkg_tile_xy(x, y, bkg_offset);
      00011D F8 04                  398 	ldhl	sp,	#4
      00011F 7E                     399 	ld	a, (hl)
      000120 F5                     400 	push	af
      000121 33                     401 	inc	sp
      000122 2B                     402 	dec	hl
      000123 7E                     403 	ld	a, (hl)
      000124 F5                     404 	push	af
      000125 33                     405 	inc	sp
      000126 2B                     406 	dec	hl
      000127 7E                     407 	ld	a, (hl)
      000128 F5                     408 	push	af
      000129 33                     409 	inc	sp
      00012A CDr00r00               410 	call	_set_bkg_tile_xy
      00012D E8 03                  411 	add	sp, #3
                                    412 ;src/main.c:251: set_bkg_tile_xy(x + 1u, y, bkg_offset + 1u);
      00012F F8 04                  413 	ldhl	sp,	#4
      000131 7E                     414 	ld	a, (hl)
      000132 3C                     415 	inc	a
      000133 2B                     416 	dec	hl
      000134 2B                     417 	dec	hl
      000135 4E                     418 	ld	c, (hl)
      000136 0C                     419 	inc	c
      000137 F5                     420 	push	af
      000138 33                     421 	inc	sp
      000139 23                     422 	inc	hl
      00013A 46                     423 	ld	b, (hl)
      00013B C5                     424 	push	bc
      00013C CDr00r00               425 	call	_set_bkg_tile_xy
      00013F E8 03                  426 	add	sp, #3
                                    427 ;src/main.c:252: set_bkg_tile_xy(x, y + 1u, bkg_offset + 2u);
      000141 F8 04                  428 	ldhl	sp,	#4
      000143 7E                     429 	ld	a, (hl)
      000144 3C                     430 	inc	a
      000145 3C                     431 	inc	a
      000146 2B                     432 	dec	hl
      000147 46                     433 	ld	b, (hl)
      000148 04                     434 	inc	b
      000149 F5                     435 	push	af
      00014A 33                     436 	inc	sp
      00014B C5                     437 	push	bc
      00014C 33                     438 	inc	sp
      00014D 2B                     439 	dec	hl
      00014E 7E                     440 	ld	a, (hl)
      00014F F5                     441 	push	af
      000150 33                     442 	inc	sp
      000151 CDr00r00               443 	call	_set_bkg_tile_xy
      000154 E8 03                  444 	add	sp, #3
                                    445 ;src/main.c:253: set_bkg_tile_xy(x + 1u, y + 1u, bkg_offset + 3u);
      000156 F8 04                  446 	ldhl	sp,	#4
      000158 7E                     447 	ld	a, (hl)
      000159 3C                     448 	inc	a
      00015A 3C                     449 	inc	a
      00015B 3C                     450 	inc	a
      00015C F5                     451 	push	af
      00015D 33                     452 	inc	sp
      00015E C5                     453 	push	bc
      00015F 33                     454 	inc	sp
      000160 79                     455 	ld	a, c
      000161 F5                     456 	push	af
      000162 33                     457 	inc	sp
      000163 CDr00r00               458 	call	_set_bkg_tile_xy
      000166 E8 03                  459 	add	sp, #3
                                    460 ;src/main.c:254: set_bkg_tile_xy(x, y + 2u, bkg_offset + 4u);
      000168 F8 04                  461 	ldhl	sp,	#4
      00016A 7E                     462 	ld	a, (hl)
      00016B 3C                     463 	inc	a
      00016C 3C                     464 	inc	a
      00016D 3C                     465 	inc	a
      00016E 3C                     466 	inc	a
      00016F 2B                     467 	dec	hl
      000170 46                     468 	ld	b, (hl)
      000171 04                     469 	inc	b
      000172 04                     470 	inc	b
      000173 F5                     471 	push	af
      000174 33                     472 	inc	sp
      000175 C5                     473 	push	bc
      000176 33                     474 	inc	sp
      000177 2B                     475 	dec	hl
      000178 7E                     476 	ld	a, (hl)
      000179 F5                     477 	push	af
      00017A 33                     478 	inc	sp
      00017B CDr00r00               479 	call	_set_bkg_tile_xy
      00017E E8 03                  480 	add	sp, #3
                                    481 ;src/main.c:255: set_bkg_tile_xy(x + 1u, y + 2u, bkg_offset + 5u);
      000180 F8 04                  482 	ldhl	sp,	#4
      000182 7E                     483 	ld	a, (hl)
      000183 C6 05                  484 	add	a, #0x05
      000185 F5                     485 	push	af
      000186 33                     486 	inc	sp
      000187 C5                     487 	push	bc
      000188 CDr00r00               488 	call	_set_bkg_tile_xy
      00018B E8 03                  489 	add	sp, #3
                                    490 ;src/main.c:256: }
      00018D C9                     491 	ret
                                    492 ;src/main.c:259: void clear_bkg(void)
                                    493 ;	---------------------------------
                                    494 ; Function clear_bkg
                                    495 ; ---------------------------------
      00018E                        496 _clear_bkg::
                                    497 ;src/main.c:262: for (x = 0; x < 32u; x++)
      00018E 0E 00                  498 	ld	c, #0x00
                                    499 ;src/main.c:263: for (y = 0; y < 32u; y++)
      000190                        500 00109$:
      000190 06 00                  501 	ld	b, #0x00
      000192                        502 00103$:
                                    503 ;src/main.c:264: set_bkg_tile_xy(x, y, 0);
      000192 AF                     504 	xor	a, a
      000193 F5                     505 	push	af
      000194 33                     506 	inc	sp
      000195 C5                     507 	push	bc
      000196 33                     508 	inc	sp
      000197 79                     509 	ld	a, c
      000198 F5                     510 	push	af
      000199 33                     511 	inc	sp
      00019A CDr00r00               512 	call	_set_bkg_tile_xy
      00019D E8 03                  513 	add	sp, #3
                                    514 ;src/main.c:263: for (y = 0; y < 32u; y++)
      00019F 04                     515 	inc	b
      0001A0 78                     516 	ld	a, b
      0001A1 D6 20                  517 	sub	a, #0x20
      0001A3 38 ED                  518 	jr	C, 00103$
                                    519 ;src/main.c:262: for (x = 0; x < 32u; x++)
      0001A5 0C                     520 	inc	c
      0001A6 79                     521 	ld	a, c
      0001A7 D6 20                  522 	sub	a, #0x20
      0001A9 38 E5                  523 	jr	C, 00109$
                                    524 ;src/main.c:265: }
      0001AB C9                     525 	ret
                                    526 ;src/main.c:267: void draw_pile(Card *card, UINT8 pile_idx, UINT8 height)
                                    527 ;	---------------------------------
                                    528 ; Function draw_pile
                                    529 ; ---------------------------------
      0001AC                        530 _draw_pile::
      0001AC E8 FD                  531 	add	sp, #-3
                                    532 ;src/main.c:269: pile_idx *= 2u;
      0001AE F8 07                  533 	ldhl	sp,	#7
      0001B0 7E                     534 	ld	a, (hl)
      0001B1 87                     535 	add	a, a
                                    536 ;src/main.c:270: height += 3u;
      0001B2 22                     537 	ld	(hl+), a
      0001B3 34                     538 	inc	(hl)
      0001B4 34                     539 	inc	(hl)
      0001B5 34                     540 	inc	(hl)
                                    541 ;src/main.c:272: if (!card)
      0001B6 2B                     542 	dec	hl
      0001B7 2B                     543 	dec	hl
      0001B8 3A                     544 	ld	a, (hl-)
      0001B9 B6                     545 	or	a, (hl)
                                    546 ;src/main.c:273: return;
                                    547 ;src/main.c:274: while (1) {
      0001BA 28 59                  548 	jr	Z, 00108$
      0001BC F8 08                  549 	ldhl	sp,	#8
      0001BE 7E                     550 	ld	a, (hl)
      0001BF F8 00                  551 	ldhl	sp,	#0
      0001C1 77                     552 	ld	(hl), a
      0001C2                        553 00106$:
                                    554 ;src/main.c:275: draw_card_top(pile_idx, height, card->data);
      0001C2 F8 05                  555 	ldhl	sp,	#5
      0001C4 2A                     556 	ld	a, (hl+)
      0001C5 5E                     557 	ld	e, (hl)
      0001C6 F8 01                  558 	ldhl	sp,	#1
      0001C8 22                     559 	ld	(hl+), a
      0001C9 7B                     560 	ld	a, e
      0001CA 32                     561 	ld	(hl-), a
      0001CB 2A                     562 	ld	a, (hl+)
      0001CC 4F                     563 	ld	c, a
      0001CD 46                     564 	ld	b, (hl)
      0001CE 03                     565 	inc	bc
      0001CF 03                     566 	inc	bc
      0001D0 0A                     567 	ld	a, (bc)
      0001D1 C5                     568 	push	bc
      0001D2 F5                     569 	push	af
      0001D3 33                     570 	inc	sp
      0001D4 2B                     571 	dec	hl
      0001D5 2B                     572 	dec	hl
      0001D6 7E                     573 	ld	a, (hl)
      0001D7 F5                     574 	push	af
      0001D8 33                     575 	inc	sp
      0001D9 F8 0B                  576 	ldhl	sp,	#11
      0001DB 7E                     577 	ld	a, (hl)
      0001DC F5                     578 	push	af
      0001DD 33                     579 	inc	sp
      0001DE CDr2Cr00               580 	call	_draw_card_top
      0001E1 E8 03                  581 	add	sp, #3
      0001E3 C1                     582 	pop	bc
                                    583 ;src/main.c:276: if (!card->next_card) {
      0001E4 F8 01                  584 	ldhl	sp,#1
      0001E6 2A                     585 	ld	a, (hl+)
      0001E7 5F                     586 	ld	e, a
      0001E8 56                     587 	ld	d, (hl)
      0001E9 1A                     588 	ld	a, (de)
      0001EA 2B                     589 	dec	hl
      0001EB 22                     590 	ld	(hl+), a
      0001EC 13                     591 	inc	de
      0001ED 1A                     592 	ld	a, (de)
                                    593 ;src/main.c:277: draw_card_bottom(pile_idx, height + 1u, card->data);
      0001EE 32                     594 	ld	(hl-), a
      0001EF 2B                     595 	dec	hl
      0001F0 56                     596 	ld	d, (hl)
      0001F1 14                     597 	inc	d
                                    598 ;src/main.c:276: if (!card->next_card) {
      0001F2 23                     599 	inc	hl
      0001F3 23                     600 	inc	hl
      0001F4 3A                     601 	ld	a, (hl-)
      0001F5 B6                     602 	or	a, (hl)
      0001F6 20 11                  603 	jr	NZ, 00104$
                                    604 ;src/main.c:277: draw_card_bottom(pile_idx, height + 1u, card->data);
      0001F8 0A                     605 	ld	a, (bc)
      0001F9 F5                     606 	push	af
      0001FA 33                     607 	inc	sp
      0001FB D5                     608 	push	de
      0001FC 33                     609 	inc	sp
      0001FD F8 09                  610 	ldhl	sp,	#9
      0001FF 7E                     611 	ld	a, (hl)
      000200 F5                     612 	push	af
      000201 33                     613 	inc	sp
      000202 CDr99r00               614 	call	_draw_card_bottom
      000205 E8 03                  615 	add	sp, #3
                                    616 ;src/main.c:278: break;
      000207 18 0C                  617 	jr	00108$
      000209                        618 00104$:
                                    619 ;src/main.c:280: height++;
      000209 F8 00                  620 	ldhl	sp,	#0
                                    621 ;src/main.c:281: card = card->next_card;
      00020B 7A                     622 	ld	a, d
      00020C 22                     623 	ld	(hl+), a
      00020D 2A                     624 	ld	a, (hl+)
      00020E 5E                     625 	ld	e, (hl)
      00020F F8 05                  626 	ldhl	sp,	#5
      000211 22                     627 	ld	(hl+), a
      000212 73                     628 	ld	(hl), e
      000213 18 AD                  629 	jr	00106$
      000215                        630 00108$:
                                    631 ;src/main.c:283: }
      000215 E8 03                  632 	add	sp, #3
      000217 C9                     633 	ret
                                    634 ;src/main.c:285: void draw_bkg_game(void)
                                    635 ;	---------------------------------
                                    636 ; Function draw_bkg_game
                                    637 ; ---------------------------------
      000218                        638 _draw_bkg_game::
      000218 E8 FD                  639 	add	sp, #-3
                                    640 ;src/main.c:288: Pile *pile = IDX_PTR(piles, 0);
      00021A 01r38r01               641 	ld	bc, #_piles+0
                                    642 ;src/main.c:289: for (i = 0; i < 10u; i++) {
      00021D AF                     643 	xor	a, a
      00021E F8 02                  644 	ldhl	sp,	#2
      000220 77                     645 	ld	(hl), a
      000221                        646 00102$:
                                    647 ;src/main.c:290: draw_pile(pile->base, i, 0);
      000221 59                     648 	ld	e, c
      000222 50                     649 	ld	d, b
      000223 1A                     650 	ld	a, (de)
      000224 F8 00                  651 	ldhl	sp,	#0
      000226 22                     652 	ld	(hl+), a
      000227 13                     653 	inc	de
      000228 1A                     654 	ld	a, (de)
      000229 77                     655 	ld	(hl), a
      00022A C5                     656 	push	bc
      00022B AF                     657 	xor	a, a
      00022C F5                     658 	push	af
      00022D 33                     659 	inc	sp
      00022E 23                     660 	inc	hl
      00022F 7E                     661 	ld	a, (hl)
      000230 F5                     662 	push	af
      000231 33                     663 	inc	sp
      000232 2B                     664 	dec	hl
      000233 2B                     665 	dec	hl
      000234 2A                     666 	ld	a, (hl+)
      000235 66                     667 	ld	h, (hl)
      000236 6F                     668 	ld	l, a
      000237 E5                     669 	push	hl
      000238 CDrACr01               670 	call	_draw_pile
      00023B E8 04                  671 	add	sp, #4
      00023D C1                     672 	pop	bc
                                    673 ;src/main.c:291: pile++;
      00023E 03                     674 	inc	bc
      00023F 03                     675 	inc	bc
      000240 03                     676 	inc	bc
      000241 03                     677 	inc	bc
      000242 03                     678 	inc	bc
                                    679 ;src/main.c:289: for (i = 0; i < 10u; i++) {
      000243 F8 02                  680 	ldhl	sp,	#2
      000245 34                     681 	inc	(hl)
      000246 7E                     682 	ld	a, (hl)
      000247 D6 0A                  683 	sub	a, #0x0a
      000249 38 D6                  684 	jr	C, 00102$
                                    685 ;src/main.c:293: draw_sequential_card(0, 0, OFFSET_BKG_CARD + OFFSET_CARD_BACK);
      00024B 3E 97                  686 	ld	a, #0x97
      00024D F5                     687 	push	af
      00024E 33                     688 	inc	sp
      00024F AF                     689 	xor	a, a
      000250 F5                     690 	push	af
      000251 33                     691 	inc	sp
      000252 AF                     692 	xor	a, a
      000253 F5                     693 	push	af
      000254 33                     694 	inc	sp
      000255 CDr1Dr01               695 	call	_draw_sequential_card
      000258 E8 03                  696 	add	sp, #3
                                    697 ;src/main.c:294: }
      00025A E8 03                  698 	add	sp, #3
      00025C C9                     699 	ret
                                    700 ;src/main.c:300: void metasprite_2x3_hide(const UINT8 sprite)
                                    701 ;	---------------------------------
                                    702 ; Function metasprite_2x3_hide
                                    703 ; ---------------------------------
      00025D                        704 _metasprite_2x3_hide::
                                    705 ;src/main.c:307: );
      00025D F8 02                  706 	ldhl	sp,	#2
      00025F 46                     707 	ld	b, (hl)
                                    708 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      000260 21r00r00               709 	ld	hl, #___current_metasprite
      000263 36r00                  710 	ld	(hl), #<(_metasprite_same_2x3)
      000265 23                     711 	inc	hl
      000266 36s00                  712 	ld	(hl), #>(_metasprite_same_2x3)
                                    713 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      000268 21r00r00               714 	ld	hl, #___current_base_tile
      00026B 36 00                  715 	ld	(hl), #0x00
                                    716 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      00026D AF                     717 	xor	a, a
      00026E F5                     718 	push	af
      00026F 33                     719 	inc	sp
      000270 AF                     720 	xor	a, a
      000271 F5                     721 	push	af
      000272 33                     722 	inc	sp
      000273 C5                     723 	push	bc
      000274 33                     724 	inc	sp
      000275 CDr00r00               725 	call	___move_metasprite
      000278 E8 03                  726 	add	sp, #3
                                    727 ;src/main.c:307: );
                                    728 ;src/main.c:308: }
      00027A C9                     729 	ret
                                    730 ;src/main.c:310: void set_metasprite_card(const UINT8 card_data)
                                    731 ;	---------------------------------
                                    732 ; Function set_metasprite_card
                                    733 ; ---------------------------------
      00027B                        734 _set_metasprite_card::
                                    735 ;src/main.c:312: metasprite_t *iter = IDX_PTR(metasprite_custom_2x3, 0);
                                    736 ;src/main.c:313: (iter++)->dtile = OFFSET_CARD_RANK + RANK(card_data);
      00027B F8 02                  737 	ldhl	sp,	#2
      00027D 46                     738 	ld	b, (hl)
      00027E 78                     739 	ld	a, b
      00027F E6 0F                  740 	and	a, #0x0f
      000281 4F                     741 	ld	c, a
      000282 21r02r00               742 	ld	hl, #(_metasprite_custom_2x3 + 0x0002)
      000285 71                     743 	ld	(hl), c
                                    744 ;src/main.c:314: (iter++)->dtile = OFFSET_CARD_SUIT + SUIT(card_data);
      000286 11r06r00               745 	ld	de, #(_metasprite_custom_2x3 + 0x0004) + 2
      000289 78                     746 	ld	a, b
      00028A E6 30                  747 	and	a, #0x30
      00028C 6F                     748 	ld	l, a
      00028D 26 00                  749 	ld	h, #0x00
      00028F CB 3C                  750 	srl	h
      000291 CB 1D                  751 	rr	l
      000293 CB 3C                  752 	srl	h
      000295 CB 1D                  753 	rr	l
      000297 CB 3C                  754 	srl	h
      000299 CB 1D                  755 	rr	l
      00029B CB 3C                  756 	srl	h
      00029D CB 1D                  757 	rr	l
      00029F 45                     758 	ld	b, l
      0002A0 78                     759 	ld	a, b
      0002A1 C6 0D                  760 	add	a, #0x0d
      0002A3 12                     761 	ld	(de), a
                                    762 ;src/main.c:315: (iter++)->dtile = OFFSET_CARD_BLANK + 2u;
      0002A4 21r0Ar00               763 	ld	hl, #(_metasprite_custom_2x3 + 0x000a)
      0002A7 36 13                  764 	ld	(hl), #0x13
                                    765 ;src/main.c:316: (iter++)->dtile = OFFSET_CARD_BLANK + 3u;
      0002A9 21r0Er00               766 	ld	hl, #(_metasprite_custom_2x3 + 0x000e)
      0002AC 36 14                  767 	ld	(hl), #0x14
                                    768 ;src/main.c:317: (iter++)->dtile = OFFSET_CARD_SUIT_ROT + SUIT(card_data);
      0002AE 11r12r00               769 	ld	de, #(_metasprite_custom_2x3 + 0x0010) + 2
      0002B1 78                     770 	ld	a, b
      0002B2 C6 2A                  771 	add	a, #0x2a
      0002B4 12                     772 	ld	(de), a
                                    773 ;src/main.c:318: (iter++)->dtile = OFFSET_CARD_RANK_ROT + RANK(card_data);
      0002B5 11r16r00               774 	ld	de, #(_metasprite_custom_2x3 + 0x0014) + 2
      0002B8 79                     775 	ld	a, c
      0002B9 C6 1D                  776 	add	a, #0x1d
      0002BB 12                     777 	ld	(de), a
                                    778 ;src/main.c:319: }
      0002BC C9                     779 	ret
                                    780 ;src/main.c:334: void dynamic_metasprite_end_animation(void)
                                    781 ;	---------------------------------
                                    782 ; Function dynamic_metasprite_end_animation
                                    783 ; ---------------------------------
      0002BD                        784 _dynamic_metasprite_end_animation::
                                    785 ;src/main.c:336: metasprite_2x3_hide(SPRITE_DYNAMIC);
      0002BD AF                     786 	xor	a, a
      0002BE F5                     787 	push	af
      0002BF 33                     788 	inc	sp
      0002C0 CDr5Dr02               789 	call	_metasprite_2x3_hide
      0002C3 33                     790 	inc	sp
                                    791 ;src/main.c:337: flags &= ~FLAG_PLAYING_ANIMATION;
      0002C4 21r6Br01               792 	ld	hl, #_flags
      0002C7 7E                     793 	ld	a, (hl)
      0002C8 E6 FB                  794 	and	a, #0xfb
      0002CA 77                     795 	ld	(hl), a
                                    796 ;src/main.c:338: dynamic_metasprite.target_frames = -1;
      0002CB 21r77r01               797 	ld	hl, #(_dynamic_metasprite + 0x0008)
      0002CE 36 FF                  798 	ld	(hl), #0xff
                                    799 ;src/main.c:339: }
      0002D0 C9                     800 	ret
                                    801 ;src/main.c:341: void dynamic_metasprite_splash_screen_callback(void)
                                    802 ;	---------------------------------
                                    803 ; Function dynamic_metasprite_splash_screen_callback
                                    804 ; ---------------------------------
      0002D1                        805 _dynamic_metasprite_splash_screen_callback::
      0002D1 E8 F2                  806 	add	sp, #-14
                                    807 ;src/main.c:343: const UINT8 offsets[] = {
      0002D3 F8 00                  808 	ldhl	sp,	#0
      0002D5 4D                     809 	ld	c, l
      0002D6 44                     810 	ld	b, h
      0002D7 AF                     811 	xor	a, a
      0002D8 02                     812 	ld	(bc), a
      0002D9 69                     813 	ld	l, c
      0002DA 60                     814 	ld	h, b
      0002DB 23                     815 	inc	hl
      0002DC 36 06                  816 	ld	(hl), #0x06
      0002DE 69                     817 	ld	l, c
      0002DF 60                     818 	ld	h, b
      0002E0 23                     819 	inc	hl
      0002E1 23                     820 	inc	hl
      0002E2 36 0C                  821 	ld	(hl), #0x0c
      0002E4 69                     822 	ld	l, c
      0002E5 60                     823 	ld	h, b
      0002E6 23                     824 	inc	hl
      0002E7 23                     825 	inc	hl
      0002E8 23                     826 	inc	hl
      0002E9 36 12                  827 	ld	(hl), #0x12
      0002EB 21 04 00               828 	ld	hl, #0x0004
      0002EE 09                     829 	add	hl, bc
      0002EF 36 18                  830 	ld	(hl), #0x18
      0002F1 21 05 00               831 	ld	hl, #0x0005
      0002F4 09                     832 	add	hl, bc
      0002F5 36 1E                  833 	ld	(hl), #0x1e
      0002F7 21 06 00               834 	ld	hl, #0x0006
      0002FA 09                     835 	add	hl, bc
      0002FB 36 12                  836 	ld	(hl), #0x12
      0002FD 21 07 00               837 	ld	hl, #0x0007
      000300 09                     838 	add	hl, bc
      000301 36 24                  839 	ld	(hl), #0x24
      000303 21 08 00               840 	ld	hl, #0x0008
      000306 09                     841 	add	hl, bc
      000307 36 2A                  842 	ld	(hl), #0x2a
                                    843 ;src/main.c:354: draw_sequential_card(1u + dynamic_metasprite.data[0] * 2u, 2u, OFFSET_BKG_TITLE + offsets[dynamic_metasprite.data[0]]);
      000309 21r7Cr01               844 	ld	hl, #(_dynamic_metasprite + 0x000d)
      00030C 6E                     845 	ld	l, (hl)
      00030D 79                     846 	ld	a, c
      00030E 85                     847 	add	a, l
      00030F 5F                     848 	ld	e, a
      000310 78                     849 	ld	a, b
      000311 CE 00                  850 	adc	a, #0x00
      000313 57                     851 	ld	d, a
      000314 1A                     852 	ld	a, (de)
      000315 C6 B4                  853 	add	a, #0xb4
      000317 29                     854 	add	hl, hl
      000318 2C                     855 	inc	l
      000319 C5                     856 	push	bc
      00031A 57                     857 	ld	d,a
      00031B 1E 02                  858 	ld	e,#0x02
      00031D D5                     859 	push	de
      00031E 7D                     860 	ld	a, l
      00031F F5                     861 	push	af
      000320 33                     862 	inc	sp
      000321 CDr1Dr01               863 	call	_draw_sequential_card
      000324 E8 03                  864 	add	sp, #3
      000326 C1                     865 	pop	bc
                                    866 ;src/main.c:355: if (dynamic_metasprite.data[0] == 8u) {
      000327 FAr7Cr01               867 	ld	a, (#(_dynamic_metasprite + 0x000d) + 0)
      00032A FE 08                  868 	cp	a, #0x08
      00032C 20 05                  869 	jr	NZ, 00102$
                                    870 ;src/main.c:356: dynamic_metasprite_end_animation();
      00032E CDrBDr02               871 	call	_dynamic_metasprite_end_animation
                                    872 ;src/main.c:357: return;
      000331 18 41                  873 	jr	00103$
      000333                        874 00102$:
                                    875 ;src/main.c:359: dynamic_metasprite.data[0]++;
      000333 3C                     876 	inc	a
      000334 F8 09                  877 	ldhl	sp,	#9
      000336 77                     878 	ld	(hl), a
      000337 11r7Cr01               879 	ld	de, #(_dynamic_metasprite + 0x000d)
      00033A 7E                     880 	ld	a, (hl)
      00033B 12                     881 	ld	(de), a
                                    882 ;src/main.c:360: dynamic_metasprite.elapsed_frames = 0;
      00033C 21r78r01               883 	ld	hl, #(_dynamic_metasprite + 0x0009)
      00033F 36 00                  884 	ld	(hl), #0x00
                                    885 ;src/main.c:361: dynamic_metasprite.dist[0] += 16;
      000341 11r73r01               886 	ld	de, #(_dynamic_metasprite + 0x0004)
      000344 1A                     887 	ld	a, (de)
      000345 F8 0A                  888 	ldhl	sp,	#10
      000347 22                     889 	ld	(hl+), a
      000348 13                     890 	inc	de
      000349 1A                     891 	ld	a, (de)
                                    892 ;c
      00034A 32                     893 	ld	(hl-), a
      00034B 2A                     894 	ld	a, (hl+)
      00034C 5F                     895 	ld	e, a
      00034D 56                     896 	ld	d, (hl)
      00034E 21 10 00               897 	ld	hl, #0x0010
      000351 19                     898 	add	hl, de
      000352 E5                     899 	push	hl
      000353 7D                     900 	ld	a, l
      000354 F8 0E                  901 	ldhl	sp,	#14
      000356 77                     902 	ld	(hl), a
      000357 E1                     903 	pop	hl
      000358 7C                     904 	ld	a, h
      000359 F8 0D                  905 	ldhl	sp,	#13
      00035B 77                     906 	ld	(hl), a
      00035C 11r73r01               907 	ld	de, #(_dynamic_metasprite + 0x0004)
      00035F 2B                     908 	dec	hl
      000360 7E                     909 	ld	a, (hl)
      000361 12                     910 	ld	(de), a
      000362 13                     911 	inc	de
      000363 23                     912 	inc	hl
      000364 7E                     913 	ld	a, (hl)
      000365 12                     914 	ld	(de), a
                                    915 ;src/main.c:362: dynamic_metasprite.metasprite_offset = OFFSET_SPRITE_TITLE + offsets[dynamic_metasprite.data[0]];
      000366 F8 09                  916 	ldhl	sp,	#9
      000368 6E                     917 	ld	l, (hl)
      000369 26 00                  918 	ld	h, #0x00
      00036B 09                     919 	add	hl, bc
      00036C 4D                     920 	ld	c, l
      00036D 44                     921 	ld	b, h
      00036E 0A                     922 	ld	a, (bc)
      00036F C6 B4                  923 	add	a, #0xb4
      000371 EAr7Br01               924 	ld	(#(_dynamic_metasprite + 0x000c)),a
      000374                        925 00103$:
                                    926 ;src/main.c:363: }
      000374 E8 0E                  927 	add	sp, #14
      000376 C9                     928 	ret
                                    929 ;src/main.c:365: inline void dynamic_metasprite_splash_screen(void)
                                    930 ;	---------------------------------
                                    931 ; Function dynamic_metasprite_splash_screen
                                    932 ; ---------------------------------
      000377                        933 _dynamic_metasprite_splash_screen::
                                    934 ;src/main.c:367: dynamic_metasprite.src[0] = 72;
      000377 21r6Fr01               935 	ld	hl, #_dynamic_metasprite
      00037A 36 48                  936 	ld	(hl), #0x48
      00037C 23                     937 	inc	hl
      00037D 36 00                  938 	ld	(hl), #0x00
                                    939 ;src/main.c:368: dynamic_metasprite.src[1] = -24;
      00037F 21r71r01               940 	ld	hl, #(_dynamic_metasprite + 0x0002)
      000382 36 E8                  941 	ld	(hl), #0xe8
      000384 23                     942 	inc	hl
      000385 36 FF                  943 	ld	(hl), #0xff
                                    944 ;src/main.c:369: dynamic_metasprite.dist[0] = -64;
      000387 21r73r01               945 	ld	hl, #(_dynamic_metasprite + 0x0004)
      00038A 36 C0                  946 	ld	(hl), #0xc0
      00038C 23                     947 	inc	hl
      00038D 36 FF                  948 	ld	(hl), #0xff
                                    949 ;src/main.c:370: dynamic_metasprite.dist[1] = 40;
      00038F 21r75r01               950 	ld	hl, #(_dynamic_metasprite + 0x0006)
      000392 36 28                  951 	ld	(hl), #0x28
      000394 23                     952 	inc	hl
      000395 36 00                  953 	ld	(hl), #0x00
                                    954 ;src/main.c:371: dynamic_metasprite.target_frames = TARGET_FRAMES_SPLASH_SCREEN;
      000397 21r77r01               955 	ld	hl, #(_dynamic_metasprite + 0x0008)
      00039A 36 20                  956 	ld	(hl), #0x20
                                    957 ;src/main.c:372: dynamic_metasprite.elapsed_frames = 0;
      00039C 21r78r01               958 	ld	hl, #(_dynamic_metasprite + 0x0009)
      00039F 36 00                  959 	ld	(hl), #0x00
                                    960 ;src/main.c:373: dynamic_metasprite.metasprite = metasprite_sequential_2x3;
      0003A1 21r79r01               961 	ld	hl, #(_dynamic_metasprite + 0x000a)
      0003A4 36r00                  962 	ld	(hl), #<(_metasprite_sequential_2x3)
      0003A6 23                     963 	inc	hl
      0003A7 36s00                  964 	ld	(hl), #>(_metasprite_sequential_2x3)
                                    965 ;src/main.c:374: dynamic_metasprite.metasprite_offset = OFFSET_SPRITE_TITLE + OFFSET_TITLE_S;
      0003A9 21r7Br01               966 	ld	hl, #(_dynamic_metasprite + 0x000c)
      0003AC 36 B4                  967 	ld	(hl), #0xb4
                                    968 ;src/main.c:375: dynamic_metasprite.data[0] = 0;
      0003AE 21r7Cr01               969 	ld	hl, #(_dynamic_metasprite + 0x000d)
      0003B1 36 00                  970 	ld	(hl), #0x00
                                    971 ;src/main.c:376: dynamic_metasprite.callback = &dynamic_metasprite_splash_screen_callback;
      0003B3 21r82r01               972 	ld	hl, #(_dynamic_metasprite + 0x0013)
      0003B6 36rD1                  973 	ld	(hl), #<(_dynamic_metasprite_splash_screen_callback)
      0003B8 23                     974 	inc	hl
      0003B9 36s02                  975 	ld	(hl), #>(_dynamic_metasprite_splash_screen_callback)
                                    976 ;src/main.c:377: flags |= FLAG_PLAYING_ANIMATION;
      0003BB 21r6Br01               977 	ld	hl, #_flags
      0003BE 7E                     978 	ld	a, (hl)
      0003BF F6 04                  979 	or	a, #0x04
      0003C1 77                     980 	ld	(hl), a
                                    981 ;src/main.c:378: }
      0003C2 C9                     982 	ret
                                    983 ;src/main.c:380: void dynamic_metasprite_fold_pile(void)
                                    984 ;	---------------------------------
                                    985 ; Function dynamic_metasprite_fold_pile
                                    986 ; ---------------------------------
      0003C3                        987 _dynamic_metasprite_fold_pile::
      0003C3 E8 F4                  988 	add	sp, #-12
                                    989 ;src/main.c:382: UINT8 pile_idx = dynamic_metasprite.data[3] & 0xF;
      0003C5 FAr7Fr01               990 	ld	a, (#(_dynamic_metasprite + 0x0010) + 0)
      0003C8 F8 0B                  991 	ldhl	sp,	#11
      0003CA 77                     992 	ld	(hl), a
      0003CB F8 0B                  993 	ldhl	sp,	#11
      0003CD 7E                     994 	ld	a, (hl)
      0003CE E6 0F                  995 	and	a, #0x0f
      0003D0 2B                     996 	dec	hl
                                    997 ;src/main.c:383: if (!pile_idx) {
      0003D1 77                     998 	ld	(hl), a
      0003D2 B7                     999 	or	a, a
      0003D3 20 06                 1000 	jr	NZ, 00102$
                                   1001 ;src/main.c:384: dynamic_metasprite_end_animation();
      0003D5 CDrBDr02              1002 	call	_dynamic_metasprite_end_animation
                                   1003 ;src/main.c:385: return;
      0003D8 C3rAAr04              1004 	jp	00103$
      0003DB                       1005 00102$:
                                   1006 ;src/main.c:388: Pile *pile = IDX_PTR(piles, pile_idx);
      0003DB F8 0A                 1007 	ldhl	sp,	#10
      0003DD 4E                    1008 	ld	c, (hl)
      0003DE 06 00                 1009 	ld	b, #0x00
      0003E0 69                    1010 	ld	l, c
      0003E1 60                    1011 	ld	h, b
      0003E2 29                    1012 	add	hl, hl
      0003E3 29                    1013 	add	hl, hl
      0003E4 09                    1014 	add	hl, bc
      0003E5 E5                    1015 	push	hl
      0003E6 7D                    1016 	ld	a, l
      0003E7 F8 08                 1017 	ldhl	sp,	#8
      0003E9 77                    1018 	ld	(hl), a
      0003EA E1                    1019 	pop	hl
      0003EB 7C                    1020 	ld	a, h
      0003EC F8 07                 1021 	ldhl	sp,	#7
      0003EE 77                    1022 	ld	(hl), a
                                   1023 ;c
      0003EF 11r38r01              1024 	ld	de, #_piles
      0003F2 2B                    1025 	dec	hl
      0003F3 2A                    1026 	ld	a, (hl+)
      0003F4 66                    1027 	ld	h, (hl)
      0003F5 6F                    1028 	ld	l, a
      0003F6 19                    1029 	add	hl, de
      0003F7 E5                    1030 	push	hl
      0003F8 7D                    1031 	ld	a, l
      0003F9 F8 0A                 1032 	ldhl	sp,	#10
      0003FB 77                    1033 	ld	(hl), a
      0003FC E1                    1034 	pop	hl
      0003FD 7C                    1035 	ld	a, h
      0003FE F8 09                 1036 	ldhl	sp,	#9
      000400 32                    1037 	ld	(hl-), a
      000401 2A                    1038 	ld	a, (hl+)
      000402 5E                    1039 	ld	e, (hl)
      000403 F8 02                 1040 	ldhl	sp,	#2
      000405 22                    1041 	ld	(hl+), a
      000406 73                    1042 	ld	(hl), e
                                   1043 ;src/main.c:389: UINT8 x = pile_idx * 16u;
      000407 F8 0A                 1044 	ldhl	sp,	#10
      000409 7E                    1045 	ld	a, (hl)
      00040A CB 37                 1046 	swap	a
      00040C E6 F0                 1047 	and	a, #0xf0
      00040E F8 04                 1048 	ldhl	sp,	#4
      000410 77                    1049 	ld	(hl), a
                                   1050 ;src/main.c:398: dynamic_metasprite.data[3] >> 4u
      000411 F8 0B                 1051 	ldhl	sp,	#11
      000413 7E                    1052 	ld	a, (hl)
      000414 CB 37                 1053 	swap	a
      000416 E6 0F                 1054 	and	a, #0x0f
      000418 F8 05                 1055 	ldhl	sp,	#5
                                   1056 ;src/main.c:396: pile->base,
      00041A 32                    1057 	ld	(hl-), a
      00041B 2B                    1058 	dec	hl
      00041C 2B                    1059 	dec	hl
      00041D 2A                    1060 	ld	a, (hl+)
      00041E 5F                    1061 	ld	e, a
      00041F 56                    1062 	ld	d, (hl)
      000420 1A                    1063 	ld	a, (de)
      000421 F8 06                 1064 	ldhl	sp,	#6
      000423 22                    1065 	ld	(hl+), a
      000424 13                    1066 	inc	de
      000425 1A                    1067 	ld	a, (de)
      000426 77                    1068 	ld	(hl), a
                                   1069 ;src/main.c:390: dynamic_metasprite_fold(pile->top->data,
                                   1070 ;c
      000427 F8 02                 1071 	ldhl	sp,#2
      000429 2A                    1072 	ld	a, (hl+)
      00042A 5F                    1073 	ld	e, a
      00042B 56                    1074 	ld	d, (hl)
      00042C 21 02 00              1075 	ld	hl, #0x0002
      00042F 19                    1076 	add	hl, de
      000430 E5                    1077 	push	hl
      000431 7D                    1078 	ld	a, l
      000432 F8 0A                 1079 	ldhl	sp,	#10
      000434 77                    1080 	ld	(hl), a
      000435 E1                    1081 	pop	hl
      000436 7C                    1082 	ld	a, h
      000437 F8 09                 1083 	ldhl	sp,	#9
      000439 32                    1084 	ld	(hl-), a
      00043A 2A                    1085 	ld	a, (hl+)
      00043B 5F                    1086 	ld	e, a
      00043C 56                    1087 	ld	d, (hl)
      00043D 1A                    1088 	ld	a, (de)
      00043E F8 00                 1089 	ldhl	sp,	#0
      000440 22                    1090 	ld	(hl+), a
      000441 13                    1091 	inc	de
      000442 1A                    1092 	ld	a, (de)
      000443 77                    1093 	ld	(hl), a
                                   1094 ;c
      000444 D1                    1095 	pop	de
      000445 D5                    1096 	push	de
      000446 21 02 00              1097 	ld	hl, #0x0002
      000449 19                    1098 	add	hl, de
      00044A E5                    1099 	push	hl
      00044B 7D                    1100 	ld	a, l
      00044C F8 0C                 1101 	ldhl	sp,	#12
      00044E 77                    1102 	ld	(hl), a
      00044F E1                    1103 	pop	hl
      000450 7C                    1104 	ld	a, h
      000451 F8 0B                 1105 	ldhl	sp,	#11
      000453 32                    1106 	ld	(hl-), a
      000454 2A                    1107 	ld	a, (hl+)
      000455 5F                    1108 	ld	e, a
      000456 56                    1109 	ld	d, (hl)
      000457 1A                    1110 	ld	a, (de)
      000458 77                    1111 	ld	(hl), a
      000459 F8 05                 1112 	ldhl	sp,	#5
      00045B 7E                    1113 	ld	a, (hl)
      00045C F5                    1114 	push	af
      00045D 33                    1115 	inc	sp
      00045E AF                    1116 	xor	a, a
      00045F F5                    1117 	push	af
      000460 33                    1118 	inc	sp
      000461 23                    1119 	inc	hl
      000462 2A                    1120 	ld	a, (hl+)
      000463 66                    1121 	ld	h, (hl)
      000464 6F                    1122 	ld	l, a
      000465 E5                    1123 	push	hl
      000466 3E 0D                 1124 	ld	a, #0x0d
      000468 F5                    1125 	push	af
      000469 33                    1126 	inc	sp
      00046A AF                    1127 	xor	a, a
      00046B F5                    1128 	push	af
      00046C 33                    1129 	inc	sp
      00046D F8 0A                 1130 	ldhl	sp,	#10
      00046F 56                    1131 	ld	d, (hl)
      000470 1E 78                 1132 	ld	e,#0x78
      000472 D5                    1133 	push	de
      000473 7E                    1134 	ld	a, (hl)
      000474 F5                    1135 	push	af
      000475 33                    1136 	inc	sp
      000476 F8 14                 1137 	ldhl	sp,	#20
      000478 7E                    1138 	ld	a, (hl)
      000479 F5                    1139 	push	af
      00047A 33                    1140 	inc	sp
      00047B CDr1Cr07              1141 	call	_dynamic_metasprite_fold
      00047E E8 0A                 1142 	add	sp, #10
                                   1143 ;src/main.c:400: pile->base = NULL;
      000480 C1                    1144 	pop	bc
      000481 E1                    1145 	pop	hl
      000482 E5                    1146 	push	hl
      000483 C5                    1147 	push	bc
      000484 AF                    1148 	xor	a, a
      000485 22                    1149 	ld	(hl+), a
      000486 77                    1150 	ld	(hl), a
                                   1151 ;src/main.c:401: pile->top = NULL;
      000487 F8 08                 1152 	ldhl	sp,	#8
      000489 2A                    1153 	ld	a, (hl+)
      00048A 66                    1154 	ld	h, (hl)
      00048B 6F                    1155 	ld	l, a
      00048C AF                    1156 	xor	a, a
      00048D 22                    1157 	ld	(hl+), a
      00048E 77                    1158 	ld	(hl), a
                                   1159 ;src/main.c:402: pile->height = 0;
                                   1160 ;c
      00048F F8 02                 1161 	ldhl	sp,#2
      000491 2A                    1162 	ld	a, (hl+)
      000492 5F                    1163 	ld	e, a
      000493 56                    1164 	ld	d, (hl)
      000494 21 04 00              1165 	ld	hl, #0x0004
      000497 19                    1166 	add	hl, de
      000498 E5                    1167 	push	hl
      000499 7D                    1168 	ld	a, l
      00049A F8 0C                 1169 	ldhl	sp,	#12
      00049C 77                    1170 	ld	(hl), a
      00049D E1                    1171 	pop	hl
      00049E 7C                    1172 	ld	a, h
      00049F F8 0B                 1173 	ldhl	sp,	#11
      0004A1 32                    1174 	ld	(hl-), a
      0004A2 2A                    1175 	ld	a, (hl+)
      0004A3 66                    1176 	ld	h, (hl)
      0004A4 6F                    1177 	ld	l, a
      0004A5 36 00                 1178 	ld	(hl), #0x00
                                   1179 ;src/main.c:403: cursor_adjust_height();
      0004A7 CDrA5r09              1180 	call	_cursor_adjust_height
      0004AA                       1181 00103$:
                                   1182 ;src/main.c:404: }
      0004AA E8 0C                 1183 	add	sp, #12
      0004AC C9                    1184 	ret
                                   1185 ;src/main.c:406: void dynamic_metasprite_unfold_callback(void)
                                   1186 ;	---------------------------------
                                   1187 ; Function dynamic_metasprite_unfold_callback
                                   1188 ; ---------------------------------
      0004AD                       1189 _dynamic_metasprite_unfold_callback::
      0004AD E8 FC                 1190 	add	sp, #-4
                                   1191 ;src/main.c:408: Card const *card = dynamic_metasprite.data_ptr;
      0004AF 21r80r01              1192 	ld	hl, #(_dynamic_metasprite + 0x0011)
      0004B2 2A                    1193 	ld	a, (hl+)
      0004B3 4F                    1194 	ld	c, a
      0004B4 46                    1195 	ld	b, (hl)
                                   1196 ;src/main.c:409: if (!card->next_card) {
      0004B5 59                    1197 	ld	e, c
      0004B6 50                    1198 	ld	d, b
      0004B7 1A                    1199 	ld	a, (de)
      0004B8 F8 00                 1200 	ldhl	sp,	#0
      0004BA 22                    1201 	ld	(hl+), a
      0004BB 13                    1202 	inc	de
      0004BC 1A                    1203 	ld	a, (de)
      0004BD 77                    1204 	ld	(hl), a
                                   1205 ;src/main.c:410: draw_card(dynamic_metasprite.data[1] / 8u, (UINT8)dynamic_metasprite.src[1] / 8u + 1u, card->data);
      0004BE 03                    1206 	inc	bc
      0004BF 03                    1207 	inc	bc
      0004C0 23                    1208 	inc	hl
      0004C1 79                    1209 	ld	a, c
      0004C2 22                    1210 	ld	(hl+), a
                                   1211 ;src/main.c:409: if (!card->next_card) {
      0004C3 78                    1212 	ld	a, b
      0004C4 32                    1213 	ld	(hl-), a
      0004C5 2B                    1214 	dec	hl
      0004C6 3A                    1215 	ld	a, (hl-)
      0004C7 B6                    1216 	or	a, (hl)
      0004C8 20 74                 1217 	jr	NZ, 00102$
                                   1218 ;src/main.c:410: draw_card(dynamic_metasprite.data[1] / 8u, (UINT8)dynamic_metasprite.src[1] / 8u + 1u, card->data);
      0004CA F8 02                 1219 	ldhl	sp,#2
      0004CC 2A                    1220 	ld	a, (hl+)
      0004CD 5F                    1221 	ld	e, a
      0004CE 56                    1222 	ld	d, (hl)
      0004CF 1A                    1223 	ld	a, (de)
      0004D0 F8 00                 1224 	ldhl	sp,	#0
      0004D2 77                    1225 	ld	(hl), a
      0004D3 FAr71r01              1226 	ld	a, (#(_dynamic_metasprite + 0x0002) + 0)
      0004D6 F8 03                 1227 	ldhl	sp,	#3
      0004D8 77                    1228 	ld	(hl), a
      0004D9 F8 03                 1229 	ldhl	sp,	#3
      0004DB 3A                    1230 	ld	a, (hl-)
      0004DC 77                    1231 	ld	(hl), a
      0004DD AF                    1232 	xor	a, a
      0004DE 23                    1233 	inc	hl
      0004DF 77                    1234 	ld	(hl), a
      0004E0 CB 3E                 1235 	srl	(hl)
      0004E2 2B                    1236 	dec	hl
      0004E3 CB 1E                 1237 	rr	(hl)
      0004E5 23                    1238 	inc	hl
      0004E6 CB 3E                 1239 	srl	(hl)
      0004E8 2B                    1240 	dec	hl
      0004E9 CB 1E                 1241 	rr	(hl)
      0004EB 23                    1242 	inc	hl
      0004EC CB 3E                 1243 	srl	(hl)
      0004EE 2B                    1244 	dec	hl
      0004EF CB 1E                 1245 	rr	(hl)
      0004F1 2A                    1246 	ld	a, (hl+)
      0004F2 77                    1247 	ld	(hl), a
      0004F3 3C                    1248 	inc	a
      0004F4 2B                    1249 	dec	hl
      0004F5 2B                    1250 	dec	hl
      0004F6 77                    1251 	ld	(hl), a
      0004F7 FAr7Dr01              1252 	ld	a, (#(_dynamic_metasprite + 0x000e) + 0)
      0004FA F8 03                 1253 	ldhl	sp,	#3
      0004FC 77                    1254 	ld	(hl), a
      0004FD F8 03                 1255 	ldhl	sp,	#3
      0004FF 3A                    1256 	ld	a, (hl-)
      000500 77                    1257 	ld	(hl), a
      000501 AF                    1258 	xor	a, a
      000502 23                    1259 	inc	hl
      000503 77                    1260 	ld	(hl), a
      000504 CB 3E                 1261 	srl	(hl)
      000506 2B                    1262 	dec	hl
      000507 CB 1E                 1263 	rr	(hl)
      000509 23                    1264 	inc	hl
      00050A CB 3E                 1265 	srl	(hl)
      00050C 2B                    1266 	dec	hl
      00050D CB 1E                 1267 	rr	(hl)
      00050F 23                    1268 	inc	hl
      000510 CB 3E                 1269 	srl	(hl)
      000512 2B                    1270 	dec	hl
      000513 CB 1E                 1271 	rr	(hl)
      000515 46                    1272 	ld	b, (hl)
                                   1273 ;src/main.c:244: draw_card_top(x, y, card_data);
      000516 C5                    1274 	push	bc
      000517 2B                    1275 	dec	hl
      000518 2B                    1276 	dec	hl
      000519 7E                    1277 	ld	a, (hl)
      00051A F5                    1278 	push	af
      00051B 33                    1279 	inc	sp
      00051C 23                    1280 	inc	hl
      00051D 7E                    1281 	ld	a, (hl)
      00051E F5                    1282 	push	af
      00051F 33                    1283 	inc	sp
      000520 C5                    1284 	push	bc
      000521 33                    1285 	inc	sp
      000522 CDr2Cr00              1286 	call	_draw_card_top
      000525 E8 03                 1287 	add	sp, #3
      000527 C1                    1288 	pop	bc
                                   1289 ;src/main.c:245: draw_card_bottom(x, y + 1u, card_data);
      000528 F8 01                 1290 	ldhl	sp,	#1
      00052A 7E                    1291 	ld	a, (hl)
      00052B 3C                    1292 	inc	a
      00052C 2B                    1293 	dec	hl
      00052D 66                    1294 	ld	h, (hl)
      00052E E5                    1295 	push	hl
      00052F 33                    1296 	inc	sp
      000530 F5                    1297 	push	af
      000531 33                    1298 	inc	sp
      000532 C5                    1299 	push	bc
      000533 33                    1300 	inc	sp
      000534 CDr99r00              1301 	call	_draw_card_bottom
      000537 E8 03                 1302 	add	sp, #3
                                   1303 ;src/main.c:411: dynamic_metasprite_fold_pile();
      000539 CDrC3r03              1304 	call	_dynamic_metasprite_fold_pile
                                   1305 ;src/main.c:412: return;
      00053C 18 4E                 1306 	jr	00104$
      00053E                       1307 00102$:
                                   1308 ;src/main.c:414: dynamic_metasprite.data_ptr = card->next_card;
      00053E C1                    1309 	pop	bc
      00053F C5                    1310 	push	bc
      000540 21r80r01              1311 	ld	hl, #(_dynamic_metasprite + 0x0011)
      000543 79                    1312 	ld	a, c
      000544 22                    1313 	ld	(hl+), a
      000545 70                    1314 	ld	(hl), b
                                   1315 ;src/main.c:415: dynamic_metasprite.src[1] += 8;
      000546 21r71r01              1316 	ld	hl, #(_dynamic_metasprite + 0x0002)
      000549 2A                    1317 	ld	a, (hl+)
      00054A 4F                    1318 	ld	c, a
      00054B 46                    1319 	ld	b, (hl)
      00054C 21 08 00              1320 	ld	hl, #0x0008
      00054F 09                    1321 	add	hl, bc
      000550 4D                    1322 	ld	c, l
      000551 44                    1323 	ld	b, h
      000552 21r71r01              1324 	ld	hl, #(_dynamic_metasprite + 0x0002)
      000555 79                    1325 	ld	a, c
      000556 22                    1326 	ld	(hl+), a
      000557 70                    1327 	ld	(hl), b
                                   1328 ;src/main.c:416: draw_card_top(dynamic_metasprite.data[1] / 8u, dynamic_metasprite.src[1] / 8u, card->data);
      000558 F8 02                 1329 	ldhl	sp,#2
      00055A 2A                    1330 	ld	a, (hl+)
      00055B 5F                    1331 	ld	e, a
      00055C 56                    1332 	ld	d, (hl)
      00055D 1A                    1333 	ld	a, (de)
      00055E 77                    1334 	ld	(hl), a
      00055F CB 38                 1335 	srl	b
      000561 CB 19                 1336 	rr	c
      000563 CB 38                 1337 	srl	b
      000565 CB 19                 1338 	rr	c
      000567 CB 38                 1339 	srl	b
      000569 CB 19                 1340 	rr	c
      00056B FAr7Dr01              1341 	ld	a, (#(_dynamic_metasprite + 0x000e) + 0)
      00056E 5F                    1342 	ld	e, a
      00056F 16 00                 1343 	ld	d, #0x00
      000571 CB 3A                 1344 	srl	d
      000573 CB 1B                 1345 	rr	e
      000575 CB 3A                 1346 	srl	d
      000577 CB 1B                 1347 	rr	e
      000579 CB 3A                 1348 	srl	d
      00057B CB 1B                 1349 	rr	e
      00057D 7E                    1350 	ld	a, (hl)
      00057E F5                    1351 	push	af
      00057F 33                    1352 	inc	sp
      000580 51                    1353 	ld	d, c
      000581 D5                    1354 	push	de
      000582 CDr2Cr00              1355 	call	_draw_card_top
      000585 E8 03                 1356 	add	sp, #3
                                   1357 ;src/main.c:417: dynamic_metasprite.elapsed_frames = 0;
      000587 21r78r01              1358 	ld	hl, #(_dynamic_metasprite + 0x0009)
      00058A 36 00                 1359 	ld	(hl), #0x00
      00058C                       1360 00104$:
                                   1361 ;src/main.c:418: }
      00058C E8 04                 1362 	add	sp, #4
      00058E C9                    1363 	ret
                                   1364 ;src/main.c:420: void dynamic_metasprite_move_stack_callback(void)
                                   1365 ;	---------------------------------
                                   1366 ; Function dynamic_metasprite_move_stack_callback
                                   1367 ; ---------------------------------
      00058F                       1368 _dynamic_metasprite_move_stack_callback::
                                   1369 ;src/main.c:422: if (dynamic_metasprite.data[0] & BITMASK_DYNAMIC_METASPRITE_UNFOLD) {
      00058F FAr7Cr01              1370 	ld	a, (#(_dynamic_metasprite + 0x000d) + 0)
      000592 07                    1371 	rlca
      000593 D2rC3r03              1372 	jp	NC,_dynamic_metasprite_fold_pile
                                   1373 ;src/main.c:423: dynamic_metasprite.src[0] = dynamic_metasprite.data[1];
      000596 FAr7Dr01              1374 	ld	a, (#(_dynamic_metasprite + 0x000e) + 0)
      000599 4F                    1375 	ld	c, a
      00059A 06 00                 1376 	ld	b, #0x00
      00059C 21r6Fr01              1377 	ld	hl, #_dynamic_metasprite
      00059F 79                    1378 	ld	a, c
      0005A0 22                    1379 	ld	(hl+), a
                                   1380 ;src/main.c:424: dynamic_metasprite.src[1] = dynamic_metasprite.data[2] - 8u;
      0005A1 78                    1381 	ld	a, b
      0005A2 22                    1382 	ld	(hl+), a
      0005A3 01r7Er01              1383 	ld	bc, #_dynamic_metasprite + 15
      0005A6 0A                    1384 	ld	a, (bc)
      0005A7 4F                    1385 	ld	c, a
      0005A8 06 00                 1386 	ld	b, #0x00
      0005AA 79                    1387 	ld	a, c
      0005AB C6 F8                 1388 	add	a, #0xf8
      0005AD 4F                    1389 	ld	c, a
      0005AE 78                    1390 	ld	a, b
      0005AF CE FF                 1391 	adc	a, #0xff
      0005B1 71                    1392 	ld	(hl), c
      0005B2 23                    1393 	inc	hl
      0005B3 77                    1394 	ld	(hl), a
                                   1395 ;src/main.c:425: dynamic_metasprite.dist[0] = 0;
      0005B4 21r73r01              1396 	ld	hl, #(_dynamic_metasprite + 0x0004)
      0005B7 AF                    1397 	xor	a, a
      0005B8 22                    1398 	ld	(hl+), a
      0005B9 77                    1399 	ld	(hl), a
                                   1400 ;src/main.c:426: dynamic_metasprite.dist[1] = 8;
      0005BA 21r75r01              1401 	ld	hl, #(_dynamic_metasprite + 0x0006)
      0005BD 3E 08                 1402 	ld	a, #0x08
      0005BF 22                    1403 	ld	(hl+), a
      0005C0 36 00                 1404 	ld	(hl), #0x00
                                   1405 ;src/main.c:427: dynamic_metasprite.target_frames = animation_speeds[ANIMATION_SPEED(settings)].fold_target_frames;
      0005C2 01r77r01              1406 	ld	bc, #_dynamic_metasprite + 8
      0005C5 FAr6Cr01              1407 	ld	a, (#_settings)
      0005C8 E6 0C                 1408 	and	a, #0x0c
      0005CA 6F                    1409 	ld	l, a
      0005CB 26 00                 1410 	ld	h, #0x00
      0005CD CB 3C                 1411 	srl	h
      0005CF CB 1D                 1412 	rr	l
      0005D1 CB 3C                 1413 	srl	h
      0005D3 CB 1D                 1414 	rr	l
      0005D5 29                    1415 	add	hl, hl
      0005D6 11r26r00              1416 	ld	de, #_animation_speeds
      0005D9 19                    1417 	add	hl, de
      0005DA 7E                    1418 	ld	a, (hl)
      0005DB 02                    1419 	ld	(bc), a
                                   1420 ;src/main.c:428: dynamic_metasprite.callback = &dynamic_metasprite_unfold_callback;
      0005DC 21r82r01              1421 	ld	hl, #(_dynamic_metasprite + 0x0013)
      0005DF 36rAD                 1422 	ld	(hl), #<(_dynamic_metasprite_unfold_callback)
      0005E1 23                    1423 	inc	hl
      0005E2 36s04                 1424 	ld	(hl), #>(_dynamic_metasprite_unfold_callback)
                                   1425 ;src/main.c:429: dynamic_metasprite_unfold_callback();
                                   1426 ;src/main.c:431: dynamic_metasprite_fold_pile();
                                   1427 ;src/main.c:433: }
      0005E4 C3rADr04              1428 	jp	_dynamic_metasprite_unfold_callback
                                   1429 ;src/main.c:435: void dynamic_metasprite_fold_callback(void)
                                   1430 ;	---------------------------------
                                   1431 ; Function dynamic_metasprite_fold_callback
                                   1432 ; ---------------------------------
      0005E7                       1433 _dynamic_metasprite_fold_callback::
      0005E7 E8 FC                 1434 	add	sp, #-4
                                   1435 ;src/main.c:437: dynamic_metasprite.src[1] -= 8;
      0005E9 21r71r01              1436 	ld	hl, #(_dynamic_metasprite + 0x0002)
      0005EC 2A                    1437 	ld	a, (hl+)
      0005ED 4F                    1438 	ld	c, a
      0005EE 46                    1439 	ld	b, (hl)
      0005EF 79                    1440 	ld	a, c
      0005F0 C6 F8                 1441 	add	a, #0xf8
      0005F2 4F                    1442 	ld	c, a
      0005F3 78                    1443 	ld	a, b
      0005F4 CE FF                 1444 	adc	a, #0xff
      0005F6 47                    1445 	ld	b, a
      0005F7 21r71r01              1446 	ld	hl, #(_dynamic_metasprite + 0x0002)
      0005FA 79                    1447 	ld	a, c
      0005FB 22                    1448 	ld	(hl+), a
      0005FC 70                    1449 	ld	(hl), b
                                   1450 ;src/main.c:438: dynamic_metasprite.elapsed_frames = 0;
      0005FD 21r78r01              1451 	ld	hl, #(_dynamic_metasprite + 0x0009)
      000600 36 00                 1452 	ld	(hl), #0x00
                                   1453 ;src/main.c:439: clear_bkg_2x1((UINT8)dynamic_metasprite.src[0] / 8u, (UINT8)dynamic_metasprite.src[1] / 8u + 2u);
      000602 FAr71r01              1454 	ld	a, (#(_dynamic_metasprite + 0x0002) + 0)
      000605 4F                    1455 	ld	c, a
      000606 06 00                 1456 	ld	b, #0x00
      000608 CB 38                 1457 	srl	b
      00060A CB 19                 1458 	rr	c
      00060C CB 38                 1459 	srl	b
      00060E CB 19                 1460 	rr	c
      000610 CB 38                 1461 	srl	b
      000612 CB 19                 1462 	rr	c
      000614 0C                    1463 	inc	c
      000615 0C                    1464 	inc	c
      000616 FAr6Fr01              1465 	ld	a, (#_dynamic_metasprite + 0)
      000619 5F                    1466 	ld	e, a
      00061A 16 00                 1467 	ld	d, #0x00
      00061C CB 3A                 1468 	srl	d
      00061E CB 1B                 1469 	rr	e
      000620 CB 3A                 1470 	srl	d
      000622 CB 1B                 1471 	rr	e
      000624 CB 3A                 1472 	srl	d
      000626 CB 1B                 1473 	rr	e
      000628 43                    1474 	ld	b, e
                                   1475 ;src/main.c:219: set_bkg_tile_xy(x, y, OFFSET_BKG_NONE);
      000629 AF                    1476 	xor	a, a
      00062A F5                    1477 	push	af
      00062B 33                    1478 	inc	sp
      00062C 79                    1479 	ld	a, c
      00062D F5                    1480 	push	af
      00062E 33                    1481 	inc	sp
      00062F C5                    1482 	push	bc
      000630 33                    1483 	inc	sp
      000631 CDr00r00              1484 	call	_set_bkg_tile_xy
      000634 E8 03                 1485 	add	sp, #3
                                   1486 ;src/main.c:220: set_bkg_tile_xy(x + 1u, y, OFFSET_BKG_NONE);
      000636 04                    1487 	inc	b
      000637 AF                    1488 	xor	a, a
      000638 F5                    1489 	push	af
      000639 33                    1490 	inc	sp
      00063A 79                    1491 	ld	a, c
      00063B F5                    1492 	push	af
      00063C 33                    1493 	inc	sp
      00063D C5                    1494 	push	bc
      00063E 33                    1495 	inc	sp
      00063F CDr00r00              1496 	call	_set_bkg_tile_xy
      000642 E8 03                 1497 	add	sp, #3
                                   1498 ;src/main.c:440: if (dynamic_metasprite.data[0] & ~BITMASK_DYNAMIC_METASPRITE_UNFOLD) {
      000644 01r7Cr01              1499 	ld	bc, #_dynamic_metasprite + 13
      000647 0A                    1500 	ld	a, (bc)
      000648 5F                    1501 	ld	e, a
      000649 E6 7F                 1502 	and	a, #0x7f
      00064B 28 06                 1503 	jr	Z, 00105$
                                   1504 ;src/main.c:441: dynamic_metasprite.data[0]--;
      00064D 7B                    1505 	ld	a, e
      00064E 3D                    1506 	dec	a
      00064F 02                    1507 	ld	(bc), a
      000650 C3r19r07              1508 	jp	00109$
      000653                       1509 00105$:
                                   1510 ;src/main.c:443: if (cursor.card_to_show) {
      000653 21r86r01              1511 	ld	hl, #(_cursor + 0x0002)
      000656 2A                    1512 	ld	a, (hl+)
      000657 4F                    1513 	ld	c, a
      000658 46                    1514 	ld	b, (hl)
                                   1515 ;src/main.c:439: clear_bkg_2x1((UINT8)dynamic_metasprite.src[0] / 8u, (UINT8)dynamic_metasprite.src[1] / 8u + 2u);
      000659 11r71r01              1516 	ld	de, #(_dynamic_metasprite + 0x0002)
      00065C 1A                    1517 	ld	a, (de)
      00065D F8 02                 1518 	ldhl	sp,	#2
      00065F 22                    1519 	ld	(hl+), a
      000660 13                    1520 	inc	de
      000661 1A                    1521 	ld	a, (de)
      000662 77                    1522 	ld	(hl), a
      000663 11r6Fr01              1523 	ld	de, #_dynamic_metasprite
      000666 1A                    1524 	ld	a, (de)
      000667 F8 00                 1525 	ldhl	sp,	#0
      000669 22                    1526 	ld	(hl+), a
      00066A 13                    1527 	inc	de
      00066B 1A                    1528 	ld	a, (de)
      00066C 77                    1529 	ld	(hl), a
                                   1530 ;src/main.c:444: draw_card(dynamic_metasprite.src[0] / 8u, dynamic_metasprite.src[1] / 8u - 1u, cursor.card_to_show->data);
      00066D D1                    1531 	pop	de
      00066E D5                    1532 	push	de
      00066F 23                    1533 	inc	hl
      000670 23                    1534 	inc	hl
      000671 CB 3E                 1535 	srl	(hl)
      000673 2B                    1536 	dec	hl
      000674 CB 1E                 1537 	rr	(hl)
      000676 23                    1538 	inc	hl
      000677 CB 3E                 1539 	srl	(hl)
      000679 2B                    1540 	dec	hl
      00067A CB 1E                 1541 	rr	(hl)
      00067C 23                    1542 	inc	hl
      00067D CB 3E                 1543 	srl	(hl)
      00067F 2B                    1544 	dec	hl
      000680 CB 1E                 1545 	rr	(hl)
      000682 CB 3A                 1546 	srl	d
      000684 CB 1B                 1547 	rr	e
      000686 CB 3A                 1548 	srl	d
      000688 CB 1B                 1549 	rr	e
      00068A CB 3A                 1550 	srl	d
      00068C CB 1B                 1551 	rr	e
      00068E 6E                    1552 	ld	l, (hl)
                                   1553 ;src/main.c:443: if (cursor.card_to_show) {
      00068F 78                    1554 	ld	a, b
      000690 B1                    1555 	or	a, c
      000691 28 27                 1556 	jr	Z, 00102$
                                   1557 ;src/main.c:444: draw_card(dynamic_metasprite.src[0] / 8u, dynamic_metasprite.src[1] / 8u - 1u, cursor.card_to_show->data);
      000693 03                    1558 	inc	bc
      000694 03                    1559 	inc	bc
      000695 0A                    1560 	ld	a, (bc)
      000696 47                    1561 	ld	b, a
      000697 55                    1562 	ld	d, l
      000698 15                    1563 	dec	d
                                   1564 ;src/main.c:244: draw_card_top(x, y, card_data);
      000699 C5                    1565 	push	bc
      00069A D5                    1566 	push	de
      00069B 4A                    1567 	ld	c, d
      00069C C5                    1568 	push	bc
      00069D 7B                    1569 	ld	a, e
      00069E F5                    1570 	push	af
      00069F 33                    1571 	inc	sp
      0006A0 CDr2Cr00              1572 	call	_draw_card_top
      0006A3 E8 03                 1573 	add	sp, #3
      0006A5 D1                    1574 	pop	de
      0006A6 C1                    1575 	pop	bc
                                   1576 ;src/main.c:245: draw_card_bottom(x, y + 1u, card_data);
      0006A7 7A                    1577 	ld	a, d
      0006A8 3C                    1578 	inc	a
      0006A9 C5                    1579 	push	bc
      0006AA 33                    1580 	inc	sp
      0006AB 57                    1581 	ld	d,a
      0006AC D5                    1582 	push	de
      0006AD CDr99r00              1583 	call	_draw_card_bottom
      0006B0 E8 03                 1584 	add	sp, #3
                                   1585 ;src/main.c:445: cursor.card_to_show = NULL;
      0006B2 21r86r01              1586 	ld	hl, #(_cursor + 0x0002)
      0006B5 AF                    1587 	xor	a, a
      0006B6 22                    1588 	ld	(hl+), a
      0006B7 77                    1589 	ld	(hl), a
      0006B8 18 0C                 1590 	jr	00103$
      0006BA                       1591 00102$:
                                   1592 ;src/main.c:447: draw_sequential_card(dynamic_metasprite.src[0] / 8u, dynamic_metasprite.src[1] / 8u, OFFSET_BKG_CARD + OFFSET_CARD_OUTLINE);
      0006BA 3E AE                 1593 	ld	a, #0xae
      0006BC F5                    1594 	push	af
      0006BD 7D                    1595 	ld	a, l
      0006BE 33                    1596 	inc	sp
      0006BF 57                    1597 	ld	d,a
      0006C0 D5                    1598 	push	de
      0006C1 CDr1Dr01              1599 	call	_draw_sequential_card
      0006C4 E8 03                 1600 	add	sp, #3
      0006C6                       1601 00103$:
                                   1602 ;src/main.c:449: dynamic_metasprite.dist[0] = (INT16)dynamic_metasprite.data[1] - dynamic_metasprite.src[0];
      0006C6 FAr7Dr01              1603 	ld	a, (#(_dynamic_metasprite + 0x000e) + 0)
      0006C9 4F                    1604 	ld	c, a
      0006CA 06 00                 1605 	ld	b, #0x00
      0006CC 21r6Fr01              1606 	ld	hl, #_dynamic_metasprite
      0006CF 2A                    1607 	ld	a, (hl+)
      0006D0 66                    1608 	ld	h, (hl)
      0006D1 6F                    1609 	ld	l, a
      0006D2 79                    1610 	ld	a, c
      0006D3 95                    1611 	sub	a, l
      0006D4 4F                    1612 	ld	c, a
      0006D5 78                    1613 	ld	a, b
      0006D6 9C                    1614 	sbc	a, h
      0006D7 47                    1615 	ld	b, a
      0006D8 21r73r01              1616 	ld	hl, #(_dynamic_metasprite + 0x0004)
      0006DB 79                    1617 	ld	a, c
      0006DC 22                    1618 	ld	(hl+), a
      0006DD 70                    1619 	ld	(hl), b
                                   1620 ;src/main.c:450: dynamic_metasprite.dist[1] = (INT16)dynamic_metasprite.data[2] - dynamic_metasprite.src[1];
      0006DE FAr7Er01              1621 	ld	a, (#(_dynamic_metasprite + 0x000f) + 0)
      0006E1 4F                    1622 	ld	c, a
      0006E2 06 00                 1623 	ld	b, #0x00
      0006E4 21r71r01              1624 	ld	hl, #(_dynamic_metasprite + 0x0002)
      0006E7 2A                    1625 	ld	a, (hl+)
      0006E8 66                    1626 	ld	h, (hl)
      0006E9 6F                    1627 	ld	l, a
      0006EA 79                    1628 	ld	a, c
      0006EB 95                    1629 	sub	a, l
      0006EC 4F                    1630 	ld	c, a
      0006ED 78                    1631 	ld	a, b
      0006EE 9C                    1632 	sbc	a, h
      0006EF 47                    1633 	ld	b, a
      0006F0 21r75r01              1634 	ld	hl, #(_dynamic_metasprite + 0x0006)
      0006F3 79                    1635 	ld	a, c
      0006F4 22                    1636 	ld	(hl+), a
      0006F5 70                    1637 	ld	(hl), b
                                   1638 ;src/main.c:451: dynamic_metasprite.target_frames = animation_speeds[ANIMATION_SPEED(settings)].move_target_frames;
      0006F6 01r77r01              1639 	ld	bc, #_dynamic_metasprite + 8
      0006F9 FAr6Cr01              1640 	ld	a, (#_settings)
      0006FC E6 0C                 1641 	and	a, #0x0c
      0006FE 6F                    1642 	ld	l, a
      0006FF 26 00                 1643 	ld	h, #0x00
      000701 CB 3C                 1644 	srl	h
      000703 CB 1D                 1645 	rr	l
      000705 CB 3C                 1646 	srl	h
      000707 CB 1D                 1647 	rr	l
      000709 29                    1648 	add	hl, hl
      00070A 11r26r00              1649 	ld	de, #_animation_speeds
      00070D 19                    1650 	add	hl, de
      00070E 23                    1651 	inc	hl
      00070F 7E                    1652 	ld	a, (hl)
      000710 02                    1653 	ld	(bc), a
                                   1654 ;src/main.c:452: dynamic_metasprite.callback = &dynamic_metasprite_move_stack_callback;
      000711 21r82r01              1655 	ld	hl, #(_dynamic_metasprite + 0x0013)
      000714 36r8F                 1656 	ld	(hl), #<(_dynamic_metasprite_move_stack_callback)
      000716 23                    1657 	inc	hl
      000717 36s05                 1658 	ld	(hl), #>(_dynamic_metasprite_move_stack_callback)
      000719                       1659 00109$:
                                   1660 ;src/main.c:455: }
      000719 E8 04                 1661 	add	sp, #4
      00071B C9                    1662 	ret
                                   1663 ;src/main.c:457: void dynamic_metasprite_fold(const UINT8 top_card_data, const UINT8 src_x, const UINT8 src_y, const UINT8 dest_x, const UINT8 dest_y, const UINT8 stack_height, const Card *base_card, const UINT8 unfold, const UINT8 piles_to_clear)
                                   1664 ;	---------------------------------
                                   1665 ; Function dynamic_metasprite_fold
                                   1666 ; ---------------------------------
      00071C                       1667 _dynamic_metasprite_fold::
                                   1668 ;src/main.c:459: set_metasprite_card(top_card_data);
      00071C F8 02                 1669 	ldhl	sp,	#2
      00071E 7E                    1670 	ld	a, (hl)
      00071F F5                    1671 	push	af
      000720 33                    1672 	inc	sp
      000721 CDr7Br02              1673 	call	_set_metasprite_card
      000724 33                    1674 	inc	sp
                                   1675 ;src/main.c:461: dynamic_metasprite.metasprite = metasprite_custom_2x3;
      000725 21r79r01              1676 	ld	hl, #(_dynamic_metasprite + 0x000a)
      000728 36r00                 1677 	ld	(hl), #<(_metasprite_custom_2x3)
      00072A 23                    1678 	inc	hl
      00072B 36s00                 1679 	ld	(hl), #>(_metasprite_custom_2x3)
                                   1680 ;src/main.c:462: dynamic_metasprite.metasprite_offset = OFFSET_SPRITE_CARD;
      00072D 21r7Br01              1681 	ld	hl, #(_dynamic_metasprite + 0x000c)
      000730 36 80                 1682 	ld	(hl), #0x80
                                   1683 ;src/main.c:464: dynamic_metasprite.data[0] = (stack_height - 1u) | unfold;
      000732 01r7Cr01              1684 	ld	bc, #_dynamic_metasprite + 13
      000735 F8 07                 1685 	ldhl	sp,	#7
      000737 7E                    1686 	ld	a, (hl)
      000738 3D                    1687 	dec	a
      000739 F8 0A                 1688 	ldhl	sp,	#10
      00073B B6                    1689 	or	a, (hl)
      00073C 02                    1690 	ld	(bc), a
                                   1691 ;src/main.c:465: dynamic_metasprite.data[1] = dest_x;
      00073D 11r7Dr01              1692 	ld	de, #(_dynamic_metasprite + 0x000e)
      000740 F8 05                 1693 	ldhl	sp,	#5
      000742 7E                    1694 	ld	a, (hl)
      000743 12                    1695 	ld	(de), a
                                   1696 ;src/main.c:466: dynamic_metasprite.data[2] = dest_y;
      000744 11r7Er01              1697 	ld	de, #(_dynamic_metasprite + 0x000f)
      000747 23                    1698 	inc	hl
      000748 7E                    1699 	ld	a, (hl)
      000749 12                    1700 	ld	(de), a
                                   1701 ;src/main.c:467: dynamic_metasprite.data[3] = piles_to_clear;
      00074A 11r7Fr01              1702 	ld	de, #(_dynamic_metasprite + 0x0010)
      00074D F8 0B                 1703 	ldhl	sp,	#11
      00074F 7E                    1704 	ld	a, (hl)
      000750 12                    1705 	ld	(de), a
                                   1706 ;src/main.c:468: dynamic_metasprite.data_ptr = base_card;
      000751 2B                    1707 	dec	hl
      000752 2B                    1708 	dec	hl
      000753 2B                    1709 	dec	hl
      000754 2A                    1710 	ld	a, (hl+)
      000755 4F                    1711 	ld	c, a
      000756 46                    1712 	ld	b, (hl)
      000757 21r80r01              1713 	ld	hl, #(_dynamic_metasprite + 0x0011)
      00075A 79                    1714 	ld	a, c
      00075B 22                    1715 	ld	(hl+), a
      00075C 70                    1716 	ld	(hl), b
                                   1717 ;src/main.c:470: dynamic_metasprite.src[0] = src_x;
      00075D F8 03                 1718 	ldhl	sp,	#3
      00075F 4E                    1719 	ld	c, (hl)
      000760 06 00                 1720 	ld	b, #0x00
      000762 21r6Fr01              1721 	ld	hl, #_dynamic_metasprite
      000765 79                    1722 	ld	a, c
      000766 22                    1723 	ld	(hl+), a
      000767 70                    1724 	ld	(hl), b
                                   1725 ;src/main.c:471: dynamic_metasprite.src[1] = src_y + 8u;
      000768 F8 04                 1726 	ldhl	sp,	#4
      00076A 4E                    1727 	ld	c, (hl)
      00076B 06 00                 1728 	ld	b, #0x00
      00076D 79                    1729 	ld	a, c
      00076E C6 08                 1730 	add	a, #0x08
      000770 4F                    1731 	ld	c, a
      000771 30 01                 1732 	jr	NC, 00110$
      000773 04                    1733 	inc	b
      000774                       1734 00110$:
      000774 21r71r01              1735 	ld	hl, #(_dynamic_metasprite + 0x0002)
      000777 79                    1736 	ld	a, c
      000778 22                    1737 	ld	(hl+), a
      000779 70                    1738 	ld	(hl), b
                                   1739 ;src/main.c:473: flags |= FLAG_PLAYING_ANIMATION;
      00077A 21r6Br01              1740 	ld	hl, #_flags
      00077D 7E                    1741 	ld	a, (hl)
      00077E F6 04                 1742 	or	a, #0x04
      000780 77                    1743 	ld	(hl), a
                                   1744 ;src/main.c:475: if (stack_height > 1) {
      000781 3E 01                 1745 	ld	a, #0x01
      000783 F8 07                 1746 	ldhl	sp,	#7
      000785 96                    1747 	sub	a, (hl)
      000786 D2rE7r05              1748 	jp	NC,_dynamic_metasprite_fold_callback
                                   1749 ;src/main.c:476: dynamic_metasprite.dist[0] = 0;
      000789 21r73r01              1750 	ld	hl, #(_dynamic_metasprite + 0x0004)
      00078C AF                    1751 	xor	a, a
      00078D 22                    1752 	ld	(hl+), a
      00078E 77                    1753 	ld	(hl), a
                                   1754 ;src/main.c:477: dynamic_metasprite.dist[1] = -8;
      00078F 21r75r01              1755 	ld	hl, #(_dynamic_metasprite + 0x0006)
      000792 3E F8                 1756 	ld	a, #0xf8
      000794 22                    1757 	ld	(hl+), a
      000795 36 FF                 1758 	ld	(hl), #0xff
                                   1759 ;src/main.c:478: dynamic_metasprite.target_frames = animation_speeds[ANIMATION_SPEED(settings)].fold_target_frames;
      000797 01r77r01              1760 	ld	bc, #_dynamic_metasprite + 8
      00079A FAr6Cr01              1761 	ld	a, (#_settings)
      00079D E6 0C                 1762 	and	a, #0x0c
      00079F 6F                    1763 	ld	l, a
      0007A0 26 00                 1764 	ld	h, #0x00
      0007A2 CB 3C                 1765 	srl	h
      0007A4 CB 1D                 1766 	rr	l
      0007A6 CB 3C                 1767 	srl	h
      0007A8 CB 1D                 1768 	rr	l
      0007AA 29                    1769 	add	hl, hl
      0007AB 11r26r00              1770 	ld	de, #_animation_speeds
      0007AE 19                    1771 	add	hl, de
      0007AF 7E                    1772 	ld	a, (hl)
      0007B0 02                    1773 	ld	(bc), a
                                   1774 ;src/main.c:479: dynamic_metasprite.callback = &dynamic_metasprite_fold_callback;
      0007B1 21r82r01              1775 	ld	hl, #(_dynamic_metasprite + 0x0013)
      0007B4 36rE7                 1776 	ld	(hl), #<(_dynamic_metasprite_fold_callback)
      0007B6 23                    1777 	inc	hl
      0007B7 36s05                 1778 	ld	(hl), #>(_dynamic_metasprite_fold_callback)
                                   1779 ;src/main.c:481: dynamic_metasprite_fold_callback();
                                   1780 ;src/main.c:482: }
      0007B9 C3rE7r05              1781 	jp  _dynamic_metasprite_fold_callback
                                   1782 ;src/main.c:484: void dynamic_metasprite_deal_callback(void)
                                   1783 ;	---------------------------------
                                   1784 ; Function dynamic_metasprite_deal_callback
                                   1785 ; ---------------------------------
      0007BC                       1786 _dynamic_metasprite_deal_callback::
      0007BC E8 FC                 1787 	add	sp, #-4
                                   1788 ;src/main.c:486: Pile *pile = IDX_PTR(piles, dynamic_metasprite.data[0]);
      0007BE 21r7Cr01              1789 	ld	hl, #(_dynamic_metasprite + 0x000d)
      0007C1 4E                    1790 	ld	c, (hl)
      0007C2 06 00                 1791 	ld	b, #0x00
      0007C4 69                    1792 	ld	l, c
      0007C5 60                    1793 	ld	h, b
      0007C6 29                    1794 	add	hl, hl
      0007C7 29                    1795 	add	hl, hl
      0007C8 09                    1796 	add	hl, bc
      0007C9 3Er38                 1797 	ld	a, #<(_piles)
      0007CB 85                    1798 	add	a, l
      0007CC 47                    1799 	ld	b, a
      0007CD 3Es01                 1800 	ld	a, #>(_piles)
      0007CF 8C                    1801 	adc	a, h
      0007D0 F8 00                 1802 	ldhl	sp,	#0
      0007D2 70                    1803 	ld	(hl), b
      0007D3 23                    1804 	inc	hl
      0007D4 77                    1805 	ld	(hl), a
                                   1806 ;src/main.c:487: draw_card(dynamic_metasprite.data[0] * 2u, 2u + pile->height, pile->top->data);
      0007D5 E1                    1807 	pop	hl
      0007D6 E5                    1808 	push	hl
      0007D7 23                    1809 	inc	hl
      0007D8 23                    1810 	inc	hl
      0007D9 2A                    1811 	ld	a, (hl+)
      0007DA 66                    1812 	ld	h, (hl)
      0007DB 6F                    1813 	ld	l, a
      0007DC 23                    1814 	inc	hl
      0007DD 23                    1815 	inc	hl
      0007DE 46                    1816 	ld	b, (hl)
                                   1817 ;c
      0007DF D1                    1818 	pop	de
      0007E0 D5                    1819 	push	de
      0007E1 21 04 00              1820 	ld	hl, #0x0004
      0007E4 19                    1821 	add	hl, de
      0007E5 5D                    1822 	ld	e, l
      0007E6 54                    1823 	ld	d, h
      0007E7 1A                    1824 	ld	a, (de)
      0007E8 C6 02                 1825 	add	a, #0x02
      0007EA 57                    1826 	ld	d, a
      0007EB CB 21                 1827 	sla	c
                                   1828 ;src/main.c:244: draw_card_top(x, y, card_data);
      0007ED C5                    1829 	push	bc
      0007EE D5                    1830 	push	de
      0007EF C5                    1831 	push	bc
      0007F0 33                    1832 	inc	sp
      0007F1 59                    1833 	ld	e, c
      0007F2 D5                    1834 	push	de
      0007F3 CDr2Cr00              1835 	call	_draw_card_top
      0007F6 E8 03                 1836 	add	sp, #3
      0007F8 D1                    1837 	pop	de
      0007F9 C1                    1838 	pop	bc
                                   1839 ;src/main.c:245: draw_card_bottom(x, y + 1u, card_data);
      0007FA 14                    1840 	inc	d
      0007FB C5                    1841 	push	bc
      0007FC 33                    1842 	inc	sp
      0007FD 59                    1843 	ld	e, c
      0007FE D5                    1844 	push	de
      0007FF CDr99r00              1845 	call	_draw_card_bottom
      000802 E8 03                 1846 	add	sp, #3
                                   1847 ;src/main.c:488: if (dynamic_metasprite.data[0] == 9u) {
      000804 21r7Cr01              1848 	ld	hl, #(_dynamic_metasprite + 0x000d)
      000807 4E                    1849 	ld	c, (hl)
      000808 79                    1850 	ld	a, c
      000809 D6 09                 1851 	sub	a, #0x09
      00080B 20 1B                 1852 	jr	NZ, 00104$
                                   1853 ;src/main.c:489: if (top_card_idx == 104u)
      00080D FAr6Ar01              1854 	ld	a, (#_top_card_idx)
      000810 D6 68                 1855 	sub	a, #0x68
      000812 20 0F                 1856 	jr	NZ, 00102$
                                   1857 ;src/main.c:490: draw_sequential_card(0, 0, OFFSET_BKG_CARD + OFFSET_CARD_OUTLINE);
      000814 3E AE                 1858 	ld	a, #0xae
      000816 F5                    1859 	push	af
      000817 33                    1860 	inc	sp
      000818 AF                    1861 	xor	a, a
      000819 F5                    1862 	push	af
      00081A 33                    1863 	inc	sp
      00081B AF                    1864 	xor	a, a
      00081C F5                    1865 	push	af
      00081D 33                    1866 	inc	sp
      00081E CDr1Dr01              1867 	call	_draw_sequential_card
      000821 E8 03                 1868 	add	sp, #3
      000823                       1869 00102$:
                                   1870 ;src/main.c:491: dynamic_metasprite_end_animation();
      000823 CDrBDr02              1871 	call	_dynamic_metasprite_end_animation
                                   1872 ;src/main.c:492: return;
      000826 18 48                 1873 	jr	00106$
      000828                       1874 00104$:
                                   1875 ;src/main.c:494: pile++;
                                   1876 ;c
      000828 D1                    1877 	pop	de
      000829 D5                    1878 	push	de
      00082A 21 05 00              1879 	ld	hl, #0x0005
      00082D 19                    1880 	add	hl, de
      00082E E5                    1881 	push	hl
      00082F 7D                    1882 	ld	a, l
      000830 F8 04                 1883 	ldhl	sp,	#4
      000832 77                    1884 	ld	(hl), a
      000833 E1                    1885 	pop	hl
      000834 7C                    1886 	ld	a, h
      000835 F8 03                 1887 	ldhl	sp,	#3
      000837 77                    1888 	ld	(hl), a
                                   1889 ;src/main.c:495: dynamic_metasprite.data[0]++;
      000838 0C                    1890 	inc	c
      000839 21r7Cr01              1891 	ld	hl, #(_dynamic_metasprite + 0x000d)
      00083C 71                    1892 	ld	(hl), c
                                   1893 ;src/main.c:496: dynamic_metasprite.dist[0] += 16;
      00083D 21r73r01              1894 	ld	hl, #(_dynamic_metasprite + 0x0004)
      000840 2A                    1895 	ld	a, (hl+)
      000841 4F                    1896 	ld	c, a
      000842 46                    1897 	ld	b, (hl)
      000843 21 10 00              1898 	ld	hl, #0x0010
      000846 09                    1899 	add	hl, bc
      000847 4D                    1900 	ld	c, l
      000848 44                    1901 	ld	b, h
      000849 21r73r01              1902 	ld	hl, #(_dynamic_metasprite + 0x0004)
      00084C 79                    1903 	ld	a, c
      00084D 22                    1904 	ld	(hl+), a
      00084E 70                    1905 	ld	(hl), b
                                   1906 ;src/main.c:497: dynamic_metasprite.dist[1] = (INT16)(2u + pile->height) * 8;
                                   1907 ;c
      00084F F8 02                 1908 	ldhl	sp,#2
      000851 2A                    1909 	ld	a, (hl+)
      000852 5F                    1910 	ld	e, a
      000853 56                    1911 	ld	d, (hl)
      000854 21 04 00              1912 	ld	hl, #0x0004
      000857 19                    1913 	add	hl, de
      000858 4D                    1914 	ld	c, l
      000859 44                    1915 	ld	b, h
      00085A 0A                    1916 	ld	a, (bc)
      00085B 6F                    1917 	ld	l, a
      00085C 26 00                 1918 	ld	h, #0x00
      00085E 23                    1919 	inc	hl
      00085F 23                    1920 	inc	hl
      000860 29                    1921 	add	hl, hl
      000861 29                    1922 	add	hl, hl
      000862 29                    1923 	add	hl, hl
      000863 4D                    1924 	ld	c, l
      000864 44                    1925 	ld	b, h
      000865 21r75r01              1926 	ld	hl, #(_dynamic_metasprite + 0x0006)
      000868 79                    1927 	ld	a, c
      000869 22                    1928 	ld	(hl+), a
      00086A 70                    1929 	ld	(hl), b
                                   1930 ;src/main.c:498: dynamic_metasprite.elapsed_frames = 0;
      00086B 21r78r01              1931 	ld	hl, #(_dynamic_metasprite + 0x0009)
      00086E 36 00                 1932 	ld	(hl), #0x00
      000870                       1933 00106$:
                                   1934 ;src/main.c:499: }
      000870 E8 04                 1935 	add	sp, #4
      000872 C9                    1936 	ret
                                   1937 ;src/main.c:501: void dynamic_metasprite_deal(void)
                                   1938 ;	---------------------------------
                                   1939 ; Function dynamic_metasprite_deal
                                   1940 ; ---------------------------------
      000873                       1941 _dynamic_metasprite_deal::
                                   1942 ;src/main.c:503: Pile *pile = IDX_PTR(piles, 0);
                                   1943 ;src/main.c:504: dynamic_metasprite.src[0] = 0;
      000873 21r6Fr01              1944 	ld	hl, #_dynamic_metasprite
      000876 AF                    1945 	xor	a, a
      000877 22                    1946 	ld	(hl+), a
      000878 77                    1947 	ld	(hl), a
                                   1948 ;src/main.c:505: dynamic_metasprite.src[1] = 0;
      000879 21r71r01              1949 	ld	hl, #(_dynamic_metasprite + 0x0002)
      00087C AF                    1950 	xor	a, a
      00087D 22                    1951 	ld	(hl+), a
      00087E 77                    1952 	ld	(hl), a
                                   1953 ;src/main.c:506: dynamic_metasprite.dist[0] = 0;
      00087F 21r73r01              1954 	ld	hl, #(_dynamic_metasprite + 0x0004)
      000882 AF                    1955 	xor	a, a
      000883 22                    1956 	ld	(hl+), a
      000884 77                    1957 	ld	(hl), a
                                   1958 ;src/main.c:507: dynamic_metasprite.dist[1] = (INT16)(2u + pile->height) * 8;
      000885 FAr3Cr01              1959 	ld	a, (#(_piles + 0x0004) + 0)
      000888 26 00                 1960 	ld	h, #0x00
      00088A 6F                    1961 	ld	l, a
      00088B 23                    1962 	inc	hl
      00088C 23                    1963 	inc	hl
      00088D 29                    1964 	add	hl, hl
      00088E 29                    1965 	add	hl, hl
      00088F 29                    1966 	add	hl, hl
      000890 4D                    1967 	ld	c, l
      000891 44                    1968 	ld	b, h
      000892 21r75r01              1969 	ld	hl, #(_dynamic_metasprite + 0x0006)
      000895 79                    1970 	ld	a, c
      000896 22                    1971 	ld	(hl+), a
      000897 70                    1972 	ld	(hl), b
                                   1973 ;src/main.c:508: dynamic_metasprite.elapsed_frames = 0;
      000898 21r78r01              1974 	ld	hl, #(_dynamic_metasprite + 0x0009)
      00089B 36 00                 1975 	ld	(hl), #0x00
                                   1976 ;src/main.c:509: dynamic_metasprite.target_frames = animation_speeds[ANIMATION_SPEED(settings)].move_target_frames;
      00089D FAr6Cr01              1977 	ld	a, (#_settings)
      0008A0 0E 00                 1978 	ld	c, #0x00
      0008A2 E6 0C                 1979 	and	a, #0x0c
      0008A4 6F                    1980 	ld	l, a
      0008A5 26 00                 1981 	ld	h, #0x00
      0008A7 CB 3C                 1982 	srl	h
      0008A9 CB 1D                 1983 	rr	l
      0008AB CB 3C                 1984 	srl	h
      0008AD CB 1D                 1985 	rr	l
      0008AF 29                    1986 	add	hl, hl
      0008B0 11r26r00              1987 	ld	de, #_animation_speeds
      0008B3 19                    1988 	add	hl, de
      0008B4 23                    1989 	inc	hl
      0008B5 7E                    1990 	ld	a, (hl)
      0008B6 EAr77r01              1991 	ld	(#(_dynamic_metasprite + 0x0008)),a
                                   1992 ;src/main.c:510: dynamic_metasprite.metasprite = metasprite_sequential_2x3;
      0008B9 21r79r01              1993 	ld	hl, #(_dynamic_metasprite + 0x000a)
      0008BC 36r00                 1994 	ld	(hl), #<(_metasprite_sequential_2x3)
      0008BE 23                    1995 	inc	hl
      0008BF 36s00                 1996 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   1997 ;src/main.c:511: dynamic_metasprite.metasprite_offset = OFFSET_SPRITE_CARD + OFFSET_CARD_BACK;
      0008C1 21r7Br01              1998 	ld	hl, #(_dynamic_metasprite + 0x000c)
      0008C4 36 97                 1999 	ld	(hl), #0x97
                                   2000 ;src/main.c:512: dynamic_metasprite.data[0] = 0;
      0008C6 21r7Cr01              2001 	ld	hl, #(_dynamic_metasprite + 0x000d)
      0008C9 36 00                 2002 	ld	(hl), #0x00
                                   2003 ;src/main.c:513: dynamic_metasprite.callback = &dynamic_metasprite_deal_callback;
      0008CB 21r82r01              2004 	ld	hl, #(_dynamic_metasprite + 0x0013)
      0008CE 36rBC                 2005 	ld	(hl), #<(_dynamic_metasprite_deal_callback)
      0008D0 23                    2006 	inc	hl
      0008D1 36s07                 2007 	ld	(hl), #>(_dynamic_metasprite_deal_callback)
                                   2008 ;src/main.c:514: flags |= FLAG_PLAYING_ANIMATION;
      0008D3 21r6Br01              2009 	ld	hl, #_flags
      0008D6 7E                    2010 	ld	a, (hl)
      0008D7 F6 04                 2011 	or	a, #0x04
      0008D9 77                    2012 	ld	(hl), a
                                   2013 ;src/main.c:515: }
      0008DA C9                    2014 	ret
                                   2015 ;src/main.c:517: inline void dynamic_metasprite_process(void)
                                   2016 ;	---------------------------------
                                   2017 ; Function dynamic_metasprite_process
                                   2018 ; ---------------------------------
      0008DB                       2019 _dynamic_metasprite_process::
      0008DB E8 FB                 2020 	add	sp, #-5
                                   2021 ;src/main.c:519: if (dynamic_metasprite.elapsed_frames >= dynamic_metasprite.target_frames)
      0008DD 21r78r01              2022 	ld	hl, #(_dynamic_metasprite + 0x0009)
      0008E0 4E                    2023 	ld	c, (hl)
      0008E1 21r77r01              2024 	ld	hl, #(_dynamic_metasprite + 0x0008)
      0008E4 46                    2025 	ld	b, (hl)
      0008E5 58                    2026 	ld	e, b
      0008E6 79                    2027 	ld	a,c
      0008E7 57                    2028 	ld	d,a
      0008E8 90                    2029 	sub	a, b
      0008E9 CB 7B                 2030 	bit	7, e
      0008EB 28 07                 2031 	jr	Z, 00124$
      0008ED CB 7A                 2032 	bit	7, d
      0008EF 20 08                 2033 	jr	NZ, 00125$
      0008F1 BF                    2034 	cp	a, a
      0008F2 18 05                 2035 	jr	00125$
      0008F4                       2036 00124$:
      0008F4 CB 7A                 2037 	bit	7, d
      0008F6 28 01                 2038 	jr	Z, 00125$
      0008F8 37                    2039 	scf
      0008F9                       2040 00125$:
                                   2041 ;src/main.c:520: return;
      0008F9 D2rA2r09              2042 	jp	NC,00107$
                                   2043 ;src/main.c:522: dynamic_metasprite.elapsed_frames++;
      0008FC 0C                    2044 	inc	c
      0008FD 21r78r01              2045 	ld	hl, #(_dynamic_metasprite + 0x0009)
      000900 71                    2046 	ld	(hl), c
                                   2047 ;src/main.c:527: dynamic_metasprite.src[1] + (dynamic_metasprite.dist[1] * dynamic_metasprite.elapsed_frames / dynamic_metasprite.target_frames)
      000901 FAr71r01              2048 	ld	a, (#(_dynamic_metasprite + 0x0002) + 0)
      000904 F8 00                 2049 	ldhl	sp,	#0
      000906 77                    2050 	ld	(hl), a
      000907 21r75r01              2051 	ld	hl, #(_dynamic_metasprite + 0x0006)
      00090A 2A                    2052 	ld	a, (hl+)
      00090B 66                    2053 	ld	h, (hl)
      00090C 6F                    2054 	ld	l, a
      00090D 79                    2055 	ld	a, c
      00090E 17                    2056 	rla
      00090F 9F                    2057 	sbc	a, a
      000910 47                    2058 	ld	b, a
      000911 C5                    2059 	push	bc
      000912 C5                    2060 	push	bc
      000913 E5                    2061 	push	hl
      000914 CDr00r00              2062 	call	__mulint
      000917 E8 04                 2063 	add	sp, #4
      000919 E5                    2064 	push	hl
      00091A F8 07                 2065 	ldhl	sp,	#7
      00091C 73                    2066 	ld	(hl), e
      00091D F8 08                 2067 	ldhl	sp,	#8
      00091F 72                    2068 	ld	(hl), d
      000920 E1                    2069 	pop	hl
      000921 C1                    2070 	pop	bc
      000922 FAr77r01              2071 	ld	a, (#(_dynamic_metasprite + 0x0008) + 0)
      000925 F8 01                 2072 	ldhl	sp,	#1
      000927 77                    2073 	ld	(hl), a
      000928 17                    2074 	rla
      000929 9F                    2075 	sbc	a, a
      00092A 23                    2076 	inc	hl
      00092B 77                    2077 	ld	(hl), a
      00092C C5                    2078 	push	bc
      00092D 2B                    2079 	dec	hl
      00092E 2A                    2080 	ld	a, (hl+)
      00092F 66                    2081 	ld	h, (hl)
      000930 6F                    2082 	ld	l, a
      000931 E5                    2083 	push	hl
      000932 F8 07                 2084 	ldhl	sp,	#7
      000934 2A                    2085 	ld	a, (hl+)
      000935 66                    2086 	ld	h, (hl)
      000936 6F                    2087 	ld	l, a
      000937 E5                    2088 	push	hl
      000938 CDr00r00              2089 	call	__divsint
      00093B E8 04                 2090 	add	sp, #4
      00093D C1                    2091 	pop	bc
      00093E 7B                    2092 	ld	a, e
      00093F F8 00                 2093 	ldhl	sp,	#0
      000941 86                    2094 	add	a, (hl)
      000942 F8 03                 2095 	ldhl	sp,	#3
      000944 77                    2096 	ld	(hl), a
                                   2097 ;src/main.c:526: dynamic_metasprite.src[0] + (dynamic_metasprite.dist[0] * dynamic_metasprite.elapsed_frames / dynamic_metasprite.target_frames),
      000945 FAr6Fr01              2098 	ld	a, (#_dynamic_metasprite + 0)
      000948 F8 04                 2099 	ldhl	sp,	#4
      00094A 77                    2100 	ld	(hl), a
      00094B 21r73r01              2101 	ld	hl, #(_dynamic_metasprite + 0x0004)
      00094E 2A                    2102 	ld	a, (hl+)
      00094F 66                    2103 	ld	h, (hl)
      000950 6F                    2104 	ld	l, a
      000951 C5                    2105 	push	bc
      000952 E5                    2106 	push	hl
      000953 CDr00r00              2107 	call	__mulint
      000956 E8 04                 2108 	add	sp, #4
      000958 F8 01                 2109 	ldhl	sp,	#1
      00095A 2A                    2110 	ld	a, (hl+)
      00095B 66                    2111 	ld	h, (hl)
      00095C 6F                    2112 	ld	l, a
      00095D E5                    2113 	push	hl
      00095E D5                    2114 	push	de
      00095F CDr00r00              2115 	call	__divsint
      000962 E8 04                 2116 	add	sp, #4
      000964 7B                    2117 	ld	a, e
      000965 F8 04                 2118 	ldhl	sp,	#4
      000967 86                    2119 	add	a, (hl)
      000968 47                    2120 	ld	b, a
                                   2121 ;src/main.c:524: dynamic_metasprite.metasprite_offset,
      000969 FAr7Br01              2122 	ld	a, (#(_dynamic_metasprite + 0x000c) + 0)
      00096C EAr00r00              2123 	ld	(#___current_base_tile),a
                                   2124 ;src/main.c:523: move_metasprite(dynamic_metasprite.metasprite,
      00096F 21r79r01              2125 	ld	hl, #(_dynamic_metasprite + 0x000a)
      000972 2A                    2126 	ld	a, (hl+)
      000973 66                    2127 	ld	h, (hl)
                                   2128 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      000974 EAr00r00              2129 	ld	(___current_metasprite), a
      000977 7C                    2130 	ld	a, h
      000978 EAr01r00              2131 	ld	(___current_metasprite + 1), a
                                   2132 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      00097B F8 03                 2133 	ldhl	sp,	#3
      00097D 7E                    2134 	ld	a, (hl)
      00097E F5                    2135 	push	af
      00097F 33                    2136 	inc	sp
      000980 C5                    2137 	push	bc
      000981 33                    2138 	inc	sp
      000982 AF                    2139 	xor	a, a
      000983 F5                    2140 	push	af
      000984 33                    2141 	inc	sp
      000985 CDr00r00              2142 	call	___move_metasprite
      000988 E8 03                 2143 	add	sp, #3
                                   2144 ;src/main.c:529: if (dynamic_metasprite.elapsed_frames == dynamic_metasprite.target_frames
      00098A FAr78r01              2145 	ld	a, (#(_dynamic_metasprite + 0x0009) + 0)
      00098D 21r77r01              2146 	ld	hl, #(_dynamic_metasprite + 0x0008)
      000990 4E                    2147 	ld	c, (hl)
      000991 91                    2148 	sub	a, c
      000992 20 0E                 2149 	jr	NZ, 00107$
                                   2150 ;src/main.c:530: && dynamic_metasprite.callback)
      000994 21r82r01              2151 	ld	hl, #(_dynamic_metasprite + 0x0013)
      000997 2A                    2152 	ld	a, (hl+)
      000998 4F                    2153 	ld	c, a
      000999 66                    2154 	ld	h, (hl)
      00099A 7C                    2155 	ld	a, h
      00099B B1                    2156 	or	a, c
      00099C 28 04                 2157 	jr	Z, 00107$
                                   2158 ;src/main.c:531: dynamic_metasprite.callback();
      00099E 69                    2159 	ld	l, c
      00099F CDr00r00              2160 	call	___sdcc_call_hl
      0009A2                       2161 00107$:
                                   2162 ;src/main.c:532: }
      0009A2 E8 05                 2163 	add	sp, #5
      0009A4 C9                    2164 	ret
                                   2165 ;src/main.c:539: void cursor_adjust_height(void)
                                   2166 ;	---------------------------------
                                   2167 ; Function cursor_adjust_height
                                   2168 ; ---------------------------------
      0009A5                       2169 _cursor_adjust_height::
                                   2170 ;src/main.c:541: Pile *pile = IDX_PTR(piles, cursor.pile_idx);
      0009A5 01r38r01              2171 	ld	bc, #_piles+0
      0009A8 FAr8Ar01              2172 	ld	a, (#(_cursor + 0x0006) + 0)
      0009AB 5F                    2173 	ld	e, a
      0009AC 16 00                 2174 	ld	d, #0x00
      0009AE 6B                    2175 	ld	l, e
      0009AF 62                    2176 	ld	h, d
      0009B0 29                    2177 	add	hl, hl
      0009B1 29                    2178 	add	hl, hl
      0009B2 19                    2179 	add	hl, de
      0009B3 09                    2180 	add	hl, bc
                                   2181 ;src/main.c:542: if (cursor.height >= pile->height)
      0009B4 01r8Br01              2182 	ld	bc, #_cursor + 7
      0009B7 0A                    2183 	ld	a, (bc)
      0009B8 57                    2184 	ld	d, a
      0009B9 23                    2185 	inc	hl
      0009BA 23                    2186 	inc	hl
      0009BB 23                    2187 	inc	hl
      0009BC 23                    2188 	inc	hl
      0009BD 5E                    2189 	ld	e, (hl)
      0009BE 7A                    2190 	ld	a, d
      0009BF 93                    2191 	sub	a, e
      0009C0 D8                    2192 	ret	C
                                   2193 ;src/main.c:543: cursor.height = pile->height - !!pile->height;
      0009C1 7B                    2194 	ld	a, e
      0009C2 D6 01                 2195 	sub	a,#0x01
      0009C4 3E 00                 2196 	ld	a, #0x00
      0009C6 17                    2197 	rla
      0009C7 EE 01                 2198 	xor	a, #0x01
      0009C9 57                    2199 	ld	d, a
      0009CA 7B                    2200 	ld	a, e
      0009CB 92                    2201 	sub	a, d
      0009CC 02                    2202 	ld	(bc), a
                                   2203 ;src/main.c:544: }
      0009CD C9                    2204 	ret
                                   2205 ;src/main.c:546: inline void cursor_grab_stack(void)
                                   2206 ;	---------------------------------
                                   2207 ; Function cursor_grab_stack
                                   2208 ; ---------------------------------
      0009CE                       2209 _cursor_grab_stack::
      0009CE E8 F9                 2210 	add	sp, #-7
                                   2211 ;src/main.c:549: Pile *pile = IDX_PTR(piles, cursor.pile_idx);
      0009D0 01r38r01              2212 	ld	bc, #_piles+0
      0009D3 FAr8Ar01              2213 	ld	a, (#(_cursor + 0x0006) + 0)
      0009D6 5F                    2214 	ld	e, a
      0009D7 16 00                 2215 	ld	d, #0x00
      0009D9 6B                    2216 	ld	l, e
      0009DA 62                    2217 	ld	h, d
      0009DB 29                    2218 	add	hl, hl
      0009DC 29                    2219 	add	hl, hl
      0009DD 19                    2220 	add	hl, de
      0009DE 09                    2221 	add	hl, bc
      0009DF 4D                    2222 	ld	c, l
      0009E0 7C                    2223 	ld	a, h
      0009E1 F8 02                 2224 	ldhl	sp,	#2
      0009E3 71                    2225 	ld	(hl), c
      0009E4 23                    2226 	inc	hl
                                   2227 ;src/main.c:550: Card *top = pile->base;
      0009E5 32                    2228 	ld	(hl-), a
      0009E6 2A                    2229 	ld	a, (hl+)
      0009E7 5F                    2230 	ld	e, a
      0009E8 56                    2231 	ld	d, (hl)
      0009E9 1A                    2232 	ld	a, (de)
      0009EA 23                    2233 	inc	hl
      0009EB 23                    2234 	inc	hl
      0009EC 22                    2235 	ld	(hl+), a
      0009ED 13                    2236 	inc	de
      0009EE 1A                    2237 	ld	a, (de)
      0009EF 77                    2238 	ld	(hl), a
                                   2239 ;src/main.c:551: for (i = 1; i < cursor.height; i++)
      0009F0 06 01                 2240 	ld	b, #0x01
      0009F2                       2241 00109$:
      0009F2 21r8Br01              2242 	ld	hl, #(_cursor + 0x0007)
      0009F5 4E                    2243 	ld	c, (hl)
      0009F6 78                    2244 	ld	a, b
      0009F7 91                    2245 	sub	a, c
      0009F8 30 0E                 2246 	jr	NC, 00101$
                                   2247 ;src/main.c:552: top = top->next_card;
      0009FA F8 05                 2248 	ldhl	sp,#5
      0009FC 2A                    2249 	ld	a, (hl+)
      0009FD 5F                    2250 	ld	e, a
      0009FE 56                    2251 	ld	d, (hl)
      0009FF 1A                    2252 	ld	a, (de)
      000A00 2B                    2253 	dec	hl
      000A01 22                    2254 	ld	(hl+), a
      000A02 13                    2255 	inc	de
      000A03 1A                    2256 	ld	a, (de)
      000A04 77                    2257 	ld	(hl), a
                                   2258 ;src/main.c:551: for (i = 1; i < cursor.height; i++)
      000A05 04                    2259 	inc	b
      000A06 18 EA                 2260 	jr	00109$
      000A08                       2261 00101$:
                                   2262 ;src/main.c:553: Card *stack = cursor.height ? top->next_card : top;
      000A08 79                    2263 	ld	a, c
      000A09 B7                    2264 	or	a, a
      000A0A 28 0E                 2265 	jr	Z, 00113$
      000A0C F8 05                 2266 	ldhl	sp,#5
      000A0E 2A                    2267 	ld	a, (hl+)
      000A0F 5F                    2268 	ld	e, a
      000A10 56                    2269 	ld	d, (hl)
      000A11 1A                    2270 	ld	a, (de)
      000A12 F8 00                 2271 	ldhl	sp,	#0
      000A14 22                    2272 	ld	(hl+), a
      000A15 13                    2273 	inc	de
      000A16 1A                    2274 	ld	a, (de)
      000A17 77                    2275 	ld	(hl), a
      000A18 18 08                 2276 	jr	00114$
      000A1A                       2277 00113$:
      000A1A F8 05                 2278 	ldhl	sp,	#5
      000A1C 2A                    2279 	ld	a, (hl+)
      000A1D 5E                    2280 	ld	e, (hl)
      000A1E F8 00                 2281 	ldhl	sp,	#0
      000A20 22                    2282 	ld	(hl+), a
      000A21 73                    2283 	ld	(hl), e
      000A22                       2284 00114$:
      000A22 C1                    2285 	pop	bc
      000A23 C5                    2286 	push	bc
                                   2287 ;src/main.c:554: if (!(VISIBLE(stack->data) && is_stack_coherent(stack)))
      000A24 59                    2288 	ld	e, c
      000A25 50                    2289 	ld	d, b
      000A26 13                    2290 	inc	de
      000A27 13                    2291 	inc	de
      000A28 1A                    2292 	ld	a, (de)
      000A29 CB 77                 2293 	bit	6, a
      000A2B 28 6F                 2294 	jr	Z, 00111$
      000A2D C5                    2295 	push	bc
      000A2E C5                    2296 	push	bc
      000A2F CDrF1r0D              2297 	call	_is_stack_coherent
      000A32 E8 02                 2298 	add	sp, #2
      000A34 7B                    2299 	ld	a, e
      000A35 C1                    2300 	pop	bc
      000A36 B7                    2301 	or	a, a
                                   2302 ;src/main.c:555: return;
      000A37 28 63                 2303 	jr	Z, 00111$
                                   2304 ;src/main.c:557: cursor.held_card = stack;
      000A39 21r84r01              2305 	ld	hl, #_cursor
      000A3C 79                    2306 	ld	a, c
      000A3D 22                    2307 	ld	(hl+), a
      000A3E 70                    2308 	ld	(hl), b
                                   2309 ;src/main.c:558: cursor.hand_pile_idx = cursor.pile_idx;
      000A3F 01r89r01              2310 	ld	bc, #_cursor + 5
      000A42 FAr8Ar01              2311 	ld	a, (#(_cursor + 0x0006) + 0)
      000A45 02                    2312 	ld	(bc), a
                                   2313 ;src/main.c:559: cursor.held_stack_size = pile->height - cursor.height;
                                   2314 ;c
      000A46 F8 02                 2315 	ldhl	sp,#2
      000A48 2A                    2316 	ld	a, (hl+)
      000A49 5F                    2317 	ld	e, a
      000A4A 56                    2318 	ld	d, (hl)
      000A4B 21 04 00              2319 	ld	hl, #0x0004
      000A4E 19                    2320 	add	hl, de
      000A4F 4D                    2321 	ld	c, l
      000A50 44                    2322 	ld	b, h
      000A51 0A                    2323 	ld	a, (bc)
      000A52 21r8Br01              2324 	ld	hl, #(_cursor + 0x0007)
      000A55 6E                    2325 	ld	l, (hl)
      000A56 95                    2326 	sub	a, l
      000A57 EAr88r01              2327 	ld	(#(_cursor + 0x0004)),a
                                   2328 ;src/main.c:560: pile->height = cursor.height;
      000A5A FAr8Br01              2329 	ld	a, (#(_cursor + 0x0007) + 0)
      000A5D 02                    2330 	ld	(bc), a
                                   2331 ;src/main.c:561: if (cursor.height) {
      000A5E FAr8Br01              2332 	ld	a, (#(_cursor + 0x0007) + 0)
      000A61 F8 04                 2333 	ldhl	sp,	#4
      000A63 77                    2334 	ld	(hl), a
                                   2335 ;src/main.c:562: pile->top = top;
      000A64 F8 02                 2336 	ldhl	sp,#2
      000A66 2A                    2337 	ld	a, (hl+)
      000A67 4F                    2338 	ld	c, a
      000A68 46                    2339 	ld	b, (hl)
      000A69 03                    2340 	inc	bc
      000A6A 03                    2341 	inc	bc
                                   2342 ;src/main.c:564: cursor.card_to_show = top;
                                   2343 ;src/main.c:561: if (cursor.height) {
      000A6B 23                    2344 	inc	hl
      000A6C 7E                    2345 	ld	a, (hl)
      000A6D B7                    2346 	or	a, a
      000A6E 28 1A                 2347 	jr	Z, 00106$
                                   2348 ;src/main.c:562: pile->top = top;
      000A70 23                    2349 	inc	hl
      000A71 2A                    2350 	ld	a, (hl+)
      000A72 02                    2351 	ld	(bc), a
      000A73 03                    2352 	inc	bc
      000A74 7E                    2353 	ld	a, (hl)
      000A75 02                    2354 	ld	(bc), a
                                   2355 ;src/main.c:563: top->next_card = NULL;
      000A76 2B                    2356 	dec	hl
      000A77 2A                    2357 	ld	a, (hl+)
      000A78 66                    2358 	ld	h, (hl)
      000A79 6F                    2359 	ld	l, a
      000A7A AF                    2360 	xor	a, a
      000A7B 22                    2361 	ld	(hl+), a
      000A7C 77                    2362 	ld	(hl), a
                                   2363 ;src/main.c:564: cursor.card_to_show = top;
      000A7D 11r86r01              2364 	ld	de, #(_cursor + 0x0002)
      000A80 F8 05                 2365 	ldhl	sp,	#5
      000A82 7E                    2366 	ld	a, (hl)
      000A83 12                    2367 	ld	(de), a
      000A84 13                    2368 	inc	de
      000A85 23                    2369 	inc	hl
      000A86 7E                    2370 	ld	a, (hl)
      000A87 12                    2371 	ld	(de), a
      000A88 18 12                 2372 	jr	00111$
      000A8A                       2373 00106$:
                                   2374 ;src/main.c:566: pile->base = NULL;
      000A8A F8 02                 2375 	ldhl	sp,	#2
      000A8C 2A                    2376 	ld	a, (hl+)
      000A8D 66                    2377 	ld	h, (hl)
      000A8E 6F                    2378 	ld	l, a
      000A8F AF                    2379 	xor	a, a
      000A90 22                    2380 	ld	(hl+), a
      000A91 77                    2381 	ld	(hl), a
                                   2382 ;src/main.c:567: pile->top = NULL;
      000A92 AF                    2383 	xor	a, a
      000A93 02                    2384 	ld	(bc), a
      000A94 03                    2385 	inc	bc
      000A95 02                    2386 	ld	(bc), a
                                   2387 ;src/main.c:568: cursor.card_to_show = NULL;
      000A96 21r86r01              2388 	ld	hl, #(_cursor + 0x0002)
      000A99 AF                    2389 	xor	a, a
      000A9A 22                    2390 	ld	(hl+), a
      000A9B 77                    2391 	ld	(hl), a
      000A9C                       2392 00111$:
                                   2393 ;src/main.c:570: }
      000A9C E8 07                 2394 	add	sp, #7
      000A9E C9                    2395 	ret
                                   2396 ;src/main.c:572: inline void cursor_place_stack(void)
                                   2397 ;	---------------------------------
                                   2398 ; Function cursor_place_stack
                                   2399 ; ---------------------------------
      000A9F                       2400 _cursor_place_stack::
      000A9F E8 FE                 2401 	add	sp, #-2
                                   2402 ;src/main.c:574: Pile *pile = IDX_PTR(piles, cursor.hand_pile_idx);
      000AA1 01r38r01              2403 	ld	bc, #_piles+0
      000AA4 FAr89r01              2404 	ld	a, (#(_cursor + 0x0005) + 0)
      000AA7 F8 01                 2405 	ldhl	sp,	#1
      000AA9 77                    2406 	ld	(hl), a
      000AAA F8 01                 2407 	ldhl	sp,	#1
      000AAC 5E                    2408 	ld	e, (hl)
      000AAD 16 00                 2409 	ld	d, #0x00
      000AAF 6B                    2410 	ld	l, e
      000AB0 62                    2411 	ld	h, d
      000AB1 29                    2412 	add	hl, hl
      000AB2 29                    2413 	add	hl, hl
      000AB3 19                    2414 	add	hl, de
      000AB4 09                    2415 	add	hl, bc
      000AB5 4D                    2416 	ld	c, l
      000AB6 44                    2417 	ld	b, h
                                   2418 ;src/main.c:575: if (cursor.hand_pile_idx == cursor.pile_idx) {
      000AB7 21r8Ar01              2419 	ld	hl, #_cursor + 6
      000ABA 5E                    2420 	ld	e, (hl)
      000ABB F8 01                 2421 	ldhl	sp,	#1
      000ABD 7E                    2422 	ld	a, (hl)
      000ABE 93                    2423 	sub	a, e
      000ABF 20 08                 2424 	jr	NZ, 00105$
                                   2425 ;src/main.c:576: pile_append_cursor_stack(pile);
      000AC1 C5                    2426 	push	bc
      000AC2 CDrB5r0E              2427 	call	_pile_append_cursor_stack
      000AC5 E8 02                 2428 	add	sp, #2
      000AC7 18 46                 2429 	jr	00107$
      000AC9                       2430 00105$:
                                   2431 ;src/main.c:577: } else if (!pile->height
      000AC9 21 04 00              2432 	ld	hl, #0x0004
      000ACC 09                    2433 	add	hl, bc
      000ACD 7E                    2434 	ld	a, (hl)
      000ACE B7                    2435 	or	a, a
      000ACF 28 2C                 2436 	jr	Z, 00101$
                                   2437 ;src/main.c:578: || RANK(pile->top->data) == RANK(cursor.held_card->data) + 1u) {
      000AD1 69                    2438 	ld	l, c
      000AD2 60                    2439 	ld	h, b
      000AD3 23                    2440 	inc	hl
      000AD4 23                    2441 	inc	hl
      000AD5 2A                    2442 	ld	a, (hl+)
      000AD6 66                    2443 	ld	h, (hl)
      000AD7 6F                    2444 	ld	l, a
      000AD8 23                    2445 	inc	hl
      000AD9 23                    2446 	inc	hl
      000ADA 7E                    2447 	ld	a, (hl)
      000ADB E6 0F                 2448 	and	a, #0x0f
      000ADD F8 00                 2449 	ldhl	sp,	#0
      000ADF 77                    2450 	ld	(hl), a
      000AE0 AF                    2451 	xor	a, a
      000AE1 23                    2452 	inc	hl
      000AE2 77                    2453 	ld	(hl), a
      000AE3 21r84r01              2454 	ld	hl, #_cursor
      000AE6 2A                    2455 	ld	a, (hl+)
      000AE7 66                    2456 	ld	h, (hl)
      000AE8 6F                    2457 	ld	l, a
      000AE9 23                    2458 	inc	hl
      000AEA 23                    2459 	inc	hl
      000AEB 7E                    2460 	ld	a, (hl)
      000AEC E6 0F                 2461 	and	a, #0x0f
      000AEE 16 00                 2462 	ld	d, #0x00
      000AF0 5F                    2463 	ld	e, a
      000AF1 13                    2464 	inc	de
      000AF2 F8 00                 2465 	ldhl	sp,	#0
      000AF4 7E                    2466 	ld	a, (hl)
      000AF5 93                    2467 	sub	a, e
      000AF6 20 17                 2468 	jr	NZ, 00107$
      000AF8 23                    2469 	inc	hl
      000AF9 7E                    2470 	ld	a, (hl)
      000AFA 92                    2471 	sub	a, d
      000AFB 20 12                 2472 	jr	NZ, 00107$
      000AFD                       2473 00101$:
                                   2474 ;src/main.c:579: pile_append_cursor_stack(pile);
      000AFD C5                    2475 	push	bc
      000AFE CDrB5r0E              2476 	call	_pile_append_cursor_stack
      000B01 E8 02                 2477 	add	sp, #2
                                   2478 ;src/main.c:580: score--;
      000B03 21r6Er01              2479 	ld	hl, #_score + 1
      000B06 2B                    2480 	dec	hl
      000B07 2A                    2481 	ld	a, (hl+)
      000B08 5F                    2482 	ld	e, a
      000B09 56                    2483 	ld	d, (hl)
      000B0A 1B                    2484 	dec	de
      000B0B 2B                    2485 	dec	hl
      000B0C 7B                    2486 	ld	a, e
      000B0D 22                    2487 	ld	(hl+), a
      000B0E 72                    2488 	ld	(hl), d
      000B0F                       2489 00107$:
                                   2490 ;src/main.c:582: }
      000B0F E8 02                 2491 	add	sp, #2
      000B11 C9                    2492 	ret
                                   2493 ;src/main.c:584: inline void cursor_process(void)
                                   2494 ;	---------------------------------
                                   2495 ; Function cursor_process
                                   2496 ; ---------------------------------
      000B12                       2497 _cursor_process::
                                   2498 ;src/main.c:586: cursor.anim_ctr++;
      000B12 21r8Cr01              2499 	ld	hl, #_cursor + 8
      000B15 46                    2500 	ld	b, (hl)
      000B16 04                    2501 	inc	b
      000B17 70                    2502 	ld	(hl), b
                                   2503 ;src/main.c:587: cursor.anim_ctr &= (1u << (CURSOR_PERIOD_LOGSCALE + 1u)) - 1u;
      000B18 CB B8                 2504 	res	7, b
      000B1A 70                    2505 	ld	(hl), b
                                   2506 ;src/main.c:588: UINT8 prev_anim_frame = cursor.anim_frame;
      000B1B 11r8Dr01              2507 	ld	de, #_cursor + 9
      000B1E 1A                    2508 	ld	a, (de)
      000B1F 4F                    2509 	ld	c, a
                                   2510 ;src/main.c:589: cursor.anim_frame = cursor.anim_ctr >> CURSOR_PERIOD_LOGSCALE;
      000B20 78                    2511 	ld	a, b
      000B21 07                    2512 	rlca
      000B22 07                    2513 	rlca
      000B23 E6 03                 2514 	and	a, #0x03
      000B25 12                    2515 	ld	(de), a
                                   2516 ;src/main.c:590: if (cursor.anim_frame != prev_anim_frame)
      000B26 91                    2517 	sub	a, c
      000B27 28 07                 2518 	jr	Z, 00102$
                                   2519 ;src/main.c:591: flags |= FLAG_REDRAW_CURSOR;
      000B29 21r6Br01              2520 	ld	hl, #_flags
      000B2C 7E                    2521 	ld	a, (hl)
      000B2D F6 01                 2522 	or	a, #0x01
      000B2F 77                    2523 	ld	(hl), a
      000B30                       2524 00102$:
                                   2525 ;src/main.c:593: if (flags & FLAG_REDRAW_CURSOR) {
      000B30 FAr6Br01              2526 	ld	a, (#_flags)
      000B33 0F                    2527 	rrca
      000B34 30 60                 2528 	jr	NC, 00107$
                                   2529 ;src/main.c:594: flags &= ~FLAG_REDRAW_CURSOR;
      000B36 21r6Br01              2530 	ld	hl, #_flags
      000B39 7E                    2531 	ld	a, (hl)
      000B3A E6 FE                 2532 	and	a, #0xfe
      000B3C 77                    2533 	ld	(hl), a
                                   2534 ;src/main.c:595: if (cursor.pile_idx == PILE_IDX_DECK)
      000B3D 21r8Ar01              2535 	ld	hl, #_cursor + 6
      000B40 4E                    2536 	ld	c, (hl)
                                   2537 ;src/main.c:588: UINT8 prev_anim_frame = cursor.anim_frame;
      000B41 1A                    2538 	ld	a, (de)
                                   2539 ;src/main.c:596: move_metasprite(cursor_metasprites[cursor.anim_frame],
      000B42 6F                    2540 	ld	l, a
      000B43 26 00                 2541 	ld	h, #0x00
      000B45 29                    2542 	add	hl, hl
      000B46 5D                    2543 	ld	e, l
      000B47 54                    2544 	ld	d, h
                                   2545 ;src/main.c:595: if (cursor.pile_idx == PILE_IDX_DECK)
      000B48 79                    2546 	ld	a, c
      000B49 D6 0A                 2547 	sub	a, #0x0a
      000B4B 20 1F                 2548 	jr	NZ, 00104$
                                   2549 ;src/main.c:596: move_metasprite(cursor_metasprites[cursor.anim_frame],
      000B4D 21r00r00              2550 	ld	hl, #_cursor_metasprites
      000B50 19                    2551 	add	hl, de
      000B51 2A                    2552 	ld	a, (hl+)
      000B52 4E                    2553 	ld	c, (hl)
                                   2554 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      000B53 21r00r00              2555 	ld	hl, #___current_metasprite
      000B56 22                    2556 	ld	(hl+), a
      000B57 71                    2557 	ld	(hl), c
                                   2558 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      000B58 21r00r00              2559 	ld	hl, #___current_base_tile
      000B5B 36 01                 2560 	ld	(hl), #0x01
                                   2561 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      000B5D AF                    2562 	xor	a, a
      000B5E F5                    2563 	push	af
      000B5F 33                    2564 	inc	sp
      000B60 AF                    2565 	xor	a, a
      000B61 57                    2566 	ld	d,a
      000B62 1E 22                 2567 	ld	e,#0x22
      000B64 D5                    2568 	push	de
      000B65 CDr00r00              2569 	call	___move_metasprite
      000B68 E8 03                 2570 	add	sp, #3
                                   2571 ;src/main.c:601: );
      000B6A 18 2A                 2572 	jr	00107$
      000B6C                       2573 00104$:
                                   2574 ;src/main.c:607: (cursor.height + 3u) * 8u
      000B6C FAr8Br01              2575 	ld	a, (#_cursor + 7)
      000B6F C6 03                 2576 	add	a, #0x03
      000B71 87                    2577 	add	a, a
      000B72 87                    2578 	add	a, a
      000B73 87                    2579 	add	a, a
      000B74 47                    2580 	ld	b, a
                                   2581 ;src/main.c:606: cursor.pile_idx * 16u,
      000B75 79                    2582 	ld	a, c
      000B76 CB 37                 2583 	swap	a
      000B78 E6 F0                 2584 	and	a, #0xf0
      000B7A 4F                    2585 	ld	c, a
                                   2586 ;src/main.c:603: move_metasprite(cursor_metasprites[cursor.anim_frame],
      000B7B 21r00r00              2587 	ld	hl, #_cursor_metasprites
      000B7E 19                    2588 	add	hl, de
      000B7F 2A                    2589 	ld	a, (hl+)
                                   2590 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      000B80 5E                    2591 	ld	e, (hl)
      000B81 21r00r00              2592 	ld	hl, #___current_metasprite
      000B84 22                    2593 	ld	(hl+), a
      000B85 73                    2594 	ld	(hl), e
                                   2595 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      000B86 21r00r00              2596 	ld	hl, #___current_base_tile
      000B89 36 01                 2597 	ld	(hl), #0x01
                                   2598 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      000B8B C5                    2599 	push	bc
      000B8C 33                    2600 	inc	sp
      000B8D 51                    2601 	ld	d, c
      000B8E 1E 22                 2602 	ld	e,#0x22
      000B90 D5                    2603 	push	de
      000B91 CDr00r00              2604 	call	___move_metasprite
      000B94 E8 03                 2605 	add	sp, #3
                                   2606 ;src/main.c:608: );
      000B96                       2607 00107$:
                                   2608 ;src/main.c:610: if (flags & FLAG_REDRAW_HAND) {
      000B96 FAr6Br01              2609 	ld	a, (#_flags)
      000B99 CB 4F                 2610 	bit	1, a
      000B9B C8                    2611 	ret	Z
                                   2612 ;src/main.c:611: flags &= ~FLAG_REDRAW_HAND;
      000B9C 21r6Br01              2613 	ld	hl, #_flags
      000B9F 7E                    2614 	ld	a, (hl)
      000BA0 E6 FD                 2615 	and	a, #0xfd
      000BA2 77                    2616 	ld	(hl), a
                                   2617 ;src/main.c:612: if (cursor.held_card) {
      000BA3 21r84r01              2618 	ld	hl, #_cursor
      000BA6 2A                    2619 	ld	a, (hl+)
      000BA7 B6                    2620 	or	a,(hl)
      000BA8 28 40                 2621 	jr	Z, 00109$
                                   2622 ;src/main.c:613: UINT8 height = piles[cursor.hand_pile_idx].height;
      000BAA 21r89r01              2623 	ld	hl, #_cursor + 5
      000BAD 4E                    2624 	ld	c, (hl)
      000BAE 06 00                 2625 	ld	b, #0x00
      000BB0 69                    2626 	ld	l, c
      000BB1 60                    2627 	ld	h, b
      000BB2 29                    2628 	add	hl, hl
      000BB3 29                    2629 	add	hl, hl
      000BB4 09                    2630 	add	hl, bc
      000BB5 11r38r01              2631 	ld	de, #_piles
      000BB8 19                    2632 	add	hl, de
      000BB9 23                    2633 	inc	hl
      000BBA 23                    2634 	inc	hl
      000BBB 23                    2635 	inc	hl
      000BBC 23                    2636 	inc	hl
      000BBD 46                    2637 	ld	b, (hl)
                                   2638 ;src/main.c:618: (height + !height + 2u) * 8u
      000BBE 78                    2639 	ld	a, b
      000BBF D6 01                 2640 	sub	a,#0x01
      000BC1 3E 00                 2641 	ld	a, #0x00
      000BC3 17                    2642 	rla
      000BC4 80                    2643 	add	a, b
      000BC5 C6 02                 2644 	add	a, #0x02
      000BC7 87                    2645 	add	a, a
      000BC8 87                    2646 	add	a, a
      000BC9 87                    2647 	add	a, a
      000BCA 57                    2648 	ld	d, a
                                   2649 ;src/main.c:617: cursor.hand_pile_idx * 16u,
      000BCB 79                    2650 	ld	a, c
      000BCC CB 37                 2651 	swap	a
      000BCE E6 F0                 2652 	and	a, #0xf0
      000BD0 47                    2653 	ld	b, a
                                   2654 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      000BD1 21r00r00              2655 	ld	hl, #___current_metasprite
      000BD4 36r00                 2656 	ld	(hl), #<(_metasprite_sequential_2x3)
      000BD6 23                    2657 	inc	hl
      000BD7 36s00                 2658 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   2659 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      000BD9 21r00r00              2660 	ld	hl, #___current_base_tile
      000BDC 36 03                 2661 	ld	(hl), #0x03
                                   2662 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      000BDE 58                    2663 	ld	e, b
      000BDF D5                    2664 	push	de
      000BE0 3E 1C                 2665 	ld	a, #0x1c
      000BE2 F5                    2666 	push	af
      000BE3 33                    2667 	inc	sp
      000BE4 CDr00r00              2668 	call	___move_metasprite
      000BE7 E8 03                 2669 	add	sp, #3
                                   2670 ;src/main.c:619: );
      000BE9 C9                    2671 	ret
      000BEA                       2672 00109$:
                                   2673 ;src/main.c:621: metasprite_2x3_hide(SPRITE_HAND);
      000BEA 3E 1C                 2674 	ld	a, #0x1c
      000BEC F5                    2675 	push	af
      000BED 33                    2676 	inc	sp
      000BEE CDr5Dr02              2677 	call	_metasprite_2x3_hide
      000BF1 33                    2678 	inc	sp
                                   2679 ;src/main.c:624: }
      000BF2 C9                    2680 	ret
                                   2681 ;src/main.c:630: void init_deck(void)
                                   2682 ;	---------------------------------
                                   2683 ; Function init_deck
                                   2684 ; ---------------------------------
      000BF3                       2685 _init_deck::
      000BF3 E8 F0                 2686 	add	sp, #-16
                                   2687 ;src/main.c:632: Card *card = IDX_PTR(deck, 0);
      000BF5 01r00r00              2688 	ld	bc, #_deck
                                   2689 ;src/main.c:639: for (suit = 0; suit < 4u; suit++) {
      000BF8 AF                    2690 	xor	a, a
      000BF9 F8 0B                 2691 	ldhl	sp,	#11
      000BFB 77                    2692 	ld	(hl), a
                                   2693 ;src/main.c:640: for (rank = 0; rank < 13u; rank++) {
      000BFC                       2694 00131$:
      000BFC F8 0B                 2695 	ldhl	sp,	#11
      000BFE 7E                    2696 	ld	a, (hl)
      000BFF CB 37                 2697 	swap	a
      000C01 E6 F0                 2698 	and	a, #0xf0
      000C03 F8 07                 2699 	ldhl	sp,	#7
      000C05 77                    2700 	ld	(hl), a
      000C06 AF                    2701 	xor	a, a
      000C07 F8 0C                 2702 	ldhl	sp,	#12
      000C09 77                    2703 	ld	(hl), a
                                   2704 ;src/main.c:641: for (i = 0; i < 2u; i++) {
      000C0A                       2705 00129$:
      000C0A F8 0C                 2706 	ldhl	sp,	#12
      000C0C 7E                    2707 	ld	a, (hl)
      000C0D F8 07                 2708 	ldhl	sp,	#7
      000C0F B6                    2709 	or	a, (hl)
      000C10 23                    2710 	inc	hl
      000C11 77                    2711 	ld	(hl), a
      000C12 F8 0D                 2712 	ldhl	sp,	#13
      000C14 79                    2713 	ld	a, c
      000C15 22                    2714 	ld	(hl+), a
      000C16 78                    2715 	ld	a, b
      000C17 22                    2716 	ld	(hl+), a
      000C18 36 02                 2717 	ld	(hl), #0x02
      000C1A                       2718 00113$:
                                   2719 ;src/main.c:642: card->data = rank | (suit << BIT_OFFSET_CARD_SUIT);
                                   2720 ;c
      000C1A F8 0D                 2721 	ldhl	sp,#13
      000C1C 2A                    2722 	ld	a, (hl+)
      000C1D 5F                    2723 	ld	e, a
      000C1E 56                    2724 	ld	d, (hl)
      000C1F 21 02 00              2725 	ld	hl, #0x0002
      000C22 19                    2726 	add	hl, de
      000C23 E5                    2727 	push	hl
      000C24 7D                    2728 	ld	a, l
      000C25 F8 0B                 2729 	ldhl	sp,	#11
      000C27 77                    2730 	ld	(hl), a
      000C28 E1                    2731 	pop	hl
      000C29 7C                    2732 	ld	a, h
      000C2A F8 0A                 2733 	ldhl	sp,	#10
      000C2C 32                    2734 	ld	(hl-), a
      000C2D 2A                    2735 	ld	a, (hl+)
      000C2E 5F                    2736 	ld	e, a
      000C2F 3A                    2737 	ld	a, (hl-)
      000C30 57                    2738 	ld	d, a
      000C31 2B                    2739 	dec	hl
      000C32 7E                    2740 	ld	a, (hl)
      000C33 12                    2741 	ld	(de), a
                                   2742 ;src/main.c:643: card++;
                                   2743 ;c
      000C34 F8 0D                 2744 	ldhl	sp,#13
      000C36 2A                    2745 	ld	a, (hl+)
      000C37 5F                    2746 	ld	e, a
      000C38 56                    2747 	ld	d, (hl)
      000C39 21 03 00              2748 	ld	hl, #0x0003
      000C3C 19                    2749 	add	hl, de
      000C3D E5                    2750 	push	hl
      000C3E 7D                    2751 	ld	a, l
      000C3F F8 0F                 2752 	ldhl	sp,	#15
      000C41 77                    2753 	ld	(hl), a
      000C42 E1                    2754 	pop	hl
      000C43 7C                    2755 	ld	a, h
      000C44 F8 0E                 2756 	ldhl	sp,	#14
      000C46 22                    2757 	ld	(hl+), a
                                   2758 ;src/main.c:641: for (i = 0; i < 2u; i++) {
      000C47 35                    2759 	dec	(hl)
      000C48 20 D0                 2760 	jr	NZ, 00113$
                                   2761 ;src/main.c:640: for (rank = 0; rank < 13u; rank++) {
      000C4A 2B                    2762 	dec	hl
      000C4B 2B                    2763 	dec	hl
      000C4C 2A                    2764 	ld	a, (hl+)
      000C4D 4F                    2765 	ld	c, a
      000C4E 3A                    2766 	ld	a, (hl-)
      000C4F 47                    2767 	ld	b, a
      000C50 2B                    2768 	dec	hl
      000C51 34                    2769 	inc	(hl)
      000C52 7E                    2770 	ld	a, (hl)
      000C53 D6 0D                 2771 	sub	a, #0x0d
      000C55 38 B3                 2772 	jr	C, 00129$
                                   2773 ;src/main.c:639: for (suit = 0; suit < 4u; suit++) {
      000C57 2B                    2774 	dec	hl
      000C58 34                    2775 	inc	(hl)
      000C59 7E                    2776 	ld	a, (hl)
      000C5A D6 04                 2777 	sub	a, #0x04
      000C5C 38 9E                 2778 	jr	C, 00131$
                                   2779 ;src/main.c:649: card = IDX_PTR(deck, 103u);
      000C5E 23                    2780 	inc	hl
      000C5F 23                    2781 	inc	hl
      000C60 3Er35                 2782 	ld	a, #<((_deck + 0x0135))
      000C62 22                    2783 	ld	(hl+), a
      000C63 36s01                 2784 	ld	(hl), #>((_deck + 0x0135))
                                   2785 ;src/main.c:650: for (i = 103u; i; i--) {
      000C65 F8 02                 2786 	ldhl	sp,	#2
      000C67 7D                    2787 	ld	a, l
      000C68 54                    2788 	ld	d, h
      000C69 F8 07                 2789 	ldhl	sp,	#7
      000C6B 22                    2790 	ld	(hl+), a
      000C6C 7A                    2791 	ld	a, d
      000C6D 32                    2792 	ld	(hl-), a
      000C6E 2A                    2793 	ld	a, (hl+)
      000C6F 5E                    2794 	ld	e, (hl)
      000C70 23                    2795 	inc	hl
      000C71 22                    2796 	ld	(hl+), a
      000C72 73                    2797 	ld	(hl), e
      000C73 F8 0F                 2798 	ldhl	sp,	#15
      000C75 36 67                 2799 	ld	(hl), #0x67
      000C77                       2800 00118$:
                                   2801 ;src/main.c:651: Card *swap = IDX_PTR(deck, (UINT8)rand() % i);
      000C77 CDr00r00              2802 	call	_rand
      000C7A 7B                    2803 	ld	a, e
      000C7B F8 0F                 2804 	ldhl	sp,	#15
      000C7D 66                    2805 	ld	h, (hl)
      000C7E E5                    2806 	push	hl
      000C7F 33                    2807 	inc	sp
      000C80 F5                    2808 	push	af
      000C81 33                    2809 	inc	sp
      000C82 CDr00r00              2810 	call	__moduchar
      000C85 E8 02                 2811 	add	sp, #2
      000C87 4B                    2812 	ld	c, e
      000C88 06 00                 2813 	ld	b, #0x00
      000C8A 69                    2814 	ld	l, c
      000C8B 60                    2815 	ld	h, b
      000C8C 29                    2816 	add	hl, hl
      000C8D 09                    2817 	add	hl, bc
      000C8E 7D                    2818 	ld	a, l
      000C8F C6r00                 2819 	add	a, #<(_deck)
      000C91 4F                    2820 	ld	c, a
      000C92 7C                    2821 	ld	a, h
      000C93 CEs00                 2822 	adc	a, #>(_deck)
      000C95 47                    2823 	ld	b, a
      000C96 F8 0B                 2824 	ldhl	sp,	#11
      000C98 79                    2825 	ld	a, c
      000C99 22                    2826 	ld	(hl+), a
                                   2827 ;src/main.c:653: temp = *card;
      000C9A 78                    2828 	ld	a, b
      000C9B 22                    2829 	ld	(hl+), a
      000C9C 2A                    2830 	ld	a, (hl+)
      000C9D 5F                    2831 	ld	e, a
      000C9E 56                    2832 	ld	d, (hl)
      000C9F F8 07                 2833 	ldhl	sp,#7
      000CA1 2A                    2834 	ld	a, (hl+)
      000CA2 4F                    2835 	ld	c, a
      000CA3 46                    2836 	ld	b, (hl)
      000CA4 21 03 00              2837 	ld	hl, #0x0003
      000CA7 E5                    2838 	push	hl
      000CA8 D5                    2839 	push	de
      000CA9 C5                    2840 	push	bc
      000CAA CDr00r00              2841 	call	___memcpy
      000CAD E8 06                 2842 	add	sp, #6
                                   2843 ;src/main.c:654: *card = *swap;
      000CAF F8 0B                 2844 	ldhl	sp,#11
      000CB1 2A                    2845 	ld	a, (hl+)
      000CB2 5F                    2846 	ld	e, a
      000CB3 2A                    2847 	ld	a, (hl+)
      000CB4 57                    2848 	ld	d, a
      000CB5 2A                    2849 	ld	a, (hl+)
      000CB6 4F                    2850 	ld	c, a
      000CB7 46                    2851 	ld	b, (hl)
      000CB8 21 03 00              2852 	ld	hl, #0x0003
      000CBB E5                    2853 	push	hl
      000CBC D5                    2854 	push	de
      000CBD C5                    2855 	push	bc
      000CBE CDr00r00              2856 	call	___memcpy
      000CC1 E8 06                 2857 	add	sp, #6
                                   2858 ;src/main.c:655: *swap = temp;
      000CC3 F8 09                 2859 	ldhl	sp,#9
      000CC5 2A                    2860 	ld	a, (hl+)
      000CC6 5F                    2861 	ld	e, a
      000CC7 2A                    2862 	ld	a, (hl+)
      000CC8 57                    2863 	ld	d, a
      000CC9 2A                    2864 	ld	a, (hl+)
      000CCA 4F                    2865 	ld	c, a
      000CCB 46                    2866 	ld	b, (hl)
      000CCC 21 03 00              2867 	ld	hl, #0x0003
      000CCF E5                    2868 	push	hl
      000CD0 D5                    2869 	push	de
      000CD1 C5                    2870 	push	bc
      000CD2 CDr00r00              2871 	call	___memcpy
      000CD5 E8 06                 2872 	add	sp, #6
                                   2873 ;src/main.c:656: card--;
      000CD7 F8 0D                 2874 	ldhl	sp,#13
      000CD9 2A                    2875 	ld	a, (hl+)
      000CDA 5F                    2876 	ld	e, a
      000CDB 56                    2877 	ld	d, (hl)
      000CDC 21 03 00              2878 	ld	hl, #0x0003
      000CDF 7B                    2879 	ld	a, e
      000CE0 95                    2880 	sub	a, l
      000CE1 5F                    2881 	ld	e, a
      000CE2 7A                    2882 	ld	a, d
      000CE3 9C                    2883 	sbc	a, h
      000CE4 F8 0E                 2884 	ldhl	sp,	#14
      000CE6 32                    2885 	ld	(hl-), a
                                   2886 ;src/main.c:650: for (i = 103u; i; i--) {
      000CE7 7B                    2887 	ld	a, e
      000CE8 22                    2888 	ld	(hl+), a
      000CE9 23                    2889 	inc	hl
      000CEA 35                    2890 	dec	(hl)
      000CEB 20 8A                 2891 	jr	NZ, 00118$
                                   2892 ;src/main.c:660: card = IDX_PTR(deck, 0);
      000CED 01r00r00              2893 	ld	bc, #_deck
                                   2894 ;src/main.c:661: for (i = 0; i < 44u; i++) {
      000CF0 AF                    2895 	xor	a, a
      000CF1 77                    2896 	ld	(hl), a
      000CF2                       2897 00120$:
                                   2898 ;src/main.c:662: card->next_card = IDX_PTR(deck, i + 10u);
      000CF2 F8 0F                 2899 	ldhl	sp,	#15
      000CF4 5E                    2900 	ld	e, (hl)
      000CF5 16 00                 2901 	ld	d, #0x00
      000CF7 6B                    2902 	ld	l, e
      000CF8 62                    2903 	ld	h, d
      000CF9 29                    2904 	add	hl, hl
      000CFA 19                    2905 	add	hl, de
      000CFB 11r00r00              2906 	ld	de, #_deck
      000CFE 19                    2907 	add	hl, de
      000CFF 11 1E 00              2908 	ld	de, #0x001e
      000D02 19                    2909 	add	hl, de
      000D03 5D                    2910 	ld	e, l
      000D04 54                    2911 	ld	d, h
      000D05 69                    2912 	ld	l, c
      000D06 60                    2913 	ld	h, b
      000D07 7B                    2914 	ld	a, e
      000D08 22                    2915 	ld	(hl+), a
      000D09 72                    2916 	ld	(hl), d
                                   2917 ;src/main.c:663: card++;
      000D0A 03                    2918 	inc	bc
      000D0B 03                    2919 	inc	bc
      000D0C 03                    2920 	inc	bc
                                   2921 ;src/main.c:661: for (i = 0; i < 44u; i++) {
      000D0D F8 0F                 2922 	ldhl	sp,	#15
      000D0F 34                    2923 	inc	(hl)
      000D10 7E                    2924 	ld	a, (hl)
      000D11 D6 2C                 2925 	sub	a, #0x2c
      000D13 38 DD                 2926 	jr	C, 00120$
      000D15 5E                    2927 	ld	e, (hl)
      000D16                       2928 00123$:
                                   2929 ;src/main.c:665: for (; i < 104u; i++) {
      000D16 7B                    2930 	ld	a, e
      000D17 D6 68                 2931 	sub	a, #0x68
      000D19 30 11                 2932 	jr	NC, 00106$
                                   2933 ;src/main.c:666: card->data |= BITMASK_CARD_VISIBLE;
      000D1B 69                    2934 	ld	l, c
      000D1C 60                    2935 	ld	h, b
      000D1D 23                    2936 	inc	hl
      000D1E 23                    2937 	inc	hl
      000D1F CB F6                 2938 	set	6, (hl)
                                   2939 ;src/main.c:667: card->next_card = NULL;
      000D21 69                    2940 	ld	l, c
      000D22 60                    2941 	ld	h, b
      000D23 AF                    2942 	xor	a, a
      000D24 22                    2943 	ld	(hl+), a
      000D25 77                    2944 	ld	(hl), a
                                   2945 ;src/main.c:668: card++;
      000D26 03                    2946 	inc	bc
      000D27 03                    2947 	inc	bc
      000D28 03                    2948 	inc	bc
                                   2949 ;src/main.c:665: for (; i < 104u; i++) {
      000D29 1C                    2950 	inc	e
      000D2A 18 EA                 2951 	jr	00123$
      000D2C                       2952 00106$:
                                   2953 ;src/main.c:671: card = IDX_PTR(deck, 0);
      000D2C F8 0B                 2954 	ldhl	sp,	#11
      000D2E 3Er00                 2955 	ld	a, #<(_deck)
      000D30 22                    2956 	ld	(hl+), a
                                   2957 ;src/main.c:672: Pile *pile = IDX_PTR(piles, 0);
      000D31 3Es00                 2958 	ld	a, #>(_deck)
      000D33 22                    2959 	ld	(hl+), a
      000D34 3Er38                 2960 	ld	a, #<(_piles)
      000D36 22                    2961 	ld	(hl+), a
      000D37 36s01                 2962 	ld	(hl), #>(_piles)
                                   2963 ;src/main.c:673: for (i = 0; i < 10; i++) {
      000D39 AF                    2964 	xor	a, a
      000D3A 23                    2965 	inc	hl
      000D3B 77                    2966 	ld	(hl), a
      000D3C                       2967 00125$:
                                   2968 ;src/main.c:674: pile->base = card;
      000D3C F8 0D                 2969 	ldhl	sp,#13
      000D3E 2A                    2970 	ld	a, (hl+)
      000D3F 5F                    2971 	ld	e, a
      000D40 56                    2972 	ld	d, (hl)
      000D41 F8 0B                 2973 	ldhl	sp,	#11
      000D43 7E                    2974 	ld	a, (hl)
      000D44 12                    2975 	ld	(de), a
      000D45 13                    2976 	inc	de
      000D46 23                    2977 	inc	hl
      000D47 7E                    2978 	ld	a, (hl)
      000D48 12                    2979 	ld	(de), a
                                   2980 ;src/main.c:676: pile->top = IDX_PTR(deck, 50u + i);
                                   2981 ;c
      000D49 23                    2982 	inc	hl
      000D4A 2A                    2983 	ld	a, (hl+)
      000D4B 5F                    2984 	ld	e, a
      000D4C 56                    2985 	ld	d, (hl)
      000D4D 21 02 00              2986 	ld	hl, #0x0002
      000D50 19                    2987 	add	hl, de
      000D51 E5                    2988 	push	hl
      000D52 7D                    2989 	ld	a, l
      000D53 F8 07                 2990 	ldhl	sp,	#7
      000D55 77                    2991 	ld	(hl), a
      000D56 E1                    2992 	pop	hl
      000D57 7C                    2993 	ld	a, h
      000D58 F8 06                 2994 	ldhl	sp,	#6
      000D5A 77                    2995 	ld	(hl), a
      000D5B F8 0F                 2996 	ldhl	sp,	#15
      000D5D 4E                    2997 	ld	c, (hl)
      000D5E 06 00                 2998 	ld	b, #0x00
      000D60 69                    2999 	ld	l, c
      000D61 60                    3000 	ld	h, b
      000D62 29                    3001 	add	hl, hl
      000D63 09                    3002 	add	hl, bc
      000D64 33                    3003 	inc	sp
      000D65 33                    3004 	inc	sp
      000D66 E5                    3005 	push	hl
                                   3006 ;src/main.c:677: pile->height = 6u;
                                   3007 ;c
      000D67 F8 0D                 3008 	ldhl	sp,#13
      000D69 2A                    3009 	ld	a, (hl+)
      000D6A 5F                    3010 	ld	e, a
      000D6B 56                    3011 	ld	d, (hl)
      000D6C 21 04 00              3012 	ld	hl, #0x0004
      000D6F 19                    3013 	add	hl, de
      000D70 E5                    3014 	push	hl
      000D71 7D                    3015 	ld	a, l
      000D72 F8 09                 3016 	ldhl	sp,	#9
      000D74 77                    3017 	ld	(hl), a
      000D75 E1                    3018 	pop	hl
      000D76 7C                    3019 	ld	a, h
      000D77 F8 08                 3020 	ldhl	sp,	#8
      000D79 77                    3021 	ld	(hl), a
                                   3022 ;src/main.c:675: if (i < 4u) {
      000D7A F8 0F                 3023 	ldhl	sp,	#15
      000D7C 7E                    3024 	ld	a, (hl)
      000D7D D6 04                 3025 	sub	a, #0x04
      000D7F 30 26                 3026 	jr	NC, 00108$
                                   3027 ;src/main.c:676: pile->top = IDX_PTR(deck, 50u + i);
                                   3028 ;c
      000D81 D1                    3029 	pop	de
      000D82 D5                    3030 	push	de
      000D83 21r96r00              3031 	ld	hl, #(_deck + 0x0096)
      000D86 19                    3032 	add	hl, de
      000D87 E5                    3033 	push	hl
      000D88 7D                    3034 	ld	a, l
      000D89 F8 0B                 3035 	ldhl	sp,	#11
      000D8B 77                    3036 	ld	(hl), a
      000D8C E1                    3037 	pop	hl
      000D8D 7C                    3038 	ld	a, h
      000D8E F8 0A                 3039 	ldhl	sp,	#10
      000D90 77                    3040 	ld	(hl), a
      000D91 F8 05                 3041 	ldhl	sp,#5
      000D93 2A                    3042 	ld	a, (hl+)
      000D94 5F                    3043 	ld	e, a
      000D95 56                    3044 	ld	d, (hl)
      000D96 F8 09                 3045 	ldhl	sp,	#9
      000D98 7E                    3046 	ld	a, (hl)
      000D99 12                    3047 	ld	(de), a
      000D9A 13                    3048 	inc	de
      000D9B 23                    3049 	inc	hl
      000D9C 7E                    3050 	ld	a, (hl)
      000D9D 12                    3051 	ld	(de), a
                                   3052 ;src/main.c:677: pile->height = 6u;
      000D9E F8 07                 3053 	ldhl	sp,	#7
      000DA0 2A                    3054 	ld	a, (hl+)
      000DA1 66                    3055 	ld	h, (hl)
      000DA2 6F                    3056 	ld	l, a
      000DA3 36 06                 3057 	ld	(hl), #0x06
      000DA5 18 17                 3058 	jr	00109$
      000DA7                       3059 00108$:
                                   3060 ;src/main.c:679: pile->top = IDX_PTR(deck, 40u + i);
                                   3061 ;c
      000DA7 11r78r00              3062 	ld	de, #(_deck + 0x0078)
      000DAA E1                    3063 	pop	hl
      000DAB E5                    3064 	push	hl
      000DAC 19                    3065 	add	hl, de
      000DAD 4D                    3066 	ld	c, l
      000DAE 44                    3067 	ld	b, h
      000DAF F8 05                 3068 	ldhl	sp,	#5
      000DB1 2A                    3069 	ld	a, (hl+)
      000DB2 66                    3070 	ld	h, (hl)
      000DB3 6F                    3071 	ld	l, a
      000DB4 79                    3072 	ld	a, c
      000DB5 22                    3073 	ld	(hl+), a
      000DB6 70                    3074 	ld	(hl), b
                                   3075 ;src/main.c:680: pile->height = 5u;
      000DB7 F8 07                 3076 	ldhl	sp,	#7
      000DB9 2A                    3077 	ld	a, (hl+)
      000DBA 66                    3078 	ld	h, (hl)
      000DBB 6F                    3079 	ld	l, a
      000DBC 36 05                 3080 	ld	(hl), #0x05
      000DBE                       3081 00109$:
                                   3082 ;src/main.c:683: card++;
                                   3083 ;c
      000DBE F8 0B                 3084 	ldhl	sp,#11
      000DC0 2A                    3085 	ld	a, (hl+)
      000DC1 5F                    3086 	ld	e, a
      000DC2 56                    3087 	ld	d, (hl)
      000DC3 21 03 00              3088 	ld	hl, #0x0003
      000DC6 19                    3089 	add	hl, de
      000DC7 E5                    3090 	push	hl
      000DC8 7D                    3091 	ld	a, l
      000DC9 F8 0D                 3092 	ldhl	sp,	#13
      000DCB 77                    3093 	ld	(hl), a
      000DCC E1                    3094 	pop	hl
      000DCD 7C                    3095 	ld	a, h
      000DCE F8 0C                 3096 	ldhl	sp,	#12
                                   3097 ;src/main.c:684: pile++;
                                   3098 ;c
      000DD0 22                    3099 	ld	(hl+), a
      000DD1 2A                    3100 	ld	a, (hl+)
      000DD2 5F                    3101 	ld	e, a
      000DD3 56                    3102 	ld	d, (hl)
      000DD4 21 05 00              3103 	ld	hl, #0x0005
      000DD7 19                    3104 	add	hl, de
      000DD8 E5                    3105 	push	hl
      000DD9 7D                    3106 	ld	a, l
      000DDA F8 0F                 3107 	ldhl	sp,	#15
      000DDC 77                    3108 	ld	(hl), a
      000DDD E1                    3109 	pop	hl
      000DDE 7C                    3110 	ld	a, h
      000DDF F8 0E                 3111 	ldhl	sp,	#14
                                   3112 ;src/main.c:673: for (i = 0; i < 10; i++) {
      000DE1 22                    3113 	ld	(hl+), a
      000DE2 34                    3114 	inc	(hl)
      000DE3 7E                    3115 	ld	a, (hl)
      000DE4 D6 0A                 3116 	sub	a, #0x0a
      000DE6 DAr3Cr0D              3117 	jp	C, 00125$
                                   3118 ;src/main.c:687: top_card_idx = 54u;
      000DE9 21r6Ar01              3119 	ld	hl, #_top_card_idx
      000DEC 36 36                 3120 	ld	(hl), #0x36
                                   3121 ;src/main.c:688: }
      000DEE E8 10                 3122 	add	sp, #16
      000DF0 C9                    3123 	ret
                                   3124 ;src/main.c:690: UINT8 is_stack_coherent(Card *card)
                                   3125 ;	---------------------------------
                                   3126 ; Function is_stack_coherent
                                   3127 ; ---------------------------------
      000DF1                       3128 _is_stack_coherent::
      000DF1 E8 FE                 3129 	add	sp, #-2
                                   3130 ;src/main.c:692: while (card->next_card) {
      000DF3                       3131 00103$:
      000DF3 F8 04                 3132 	ldhl	sp,#4
      000DF5 2A                    3133 	ld	a, (hl+)
      000DF6 4F                    3134 	ld	c, a
      000DF7 46                    3135 	ld	b, (hl)
      000DF8 59                    3136 	ld	e, c
      000DF9 50                    3137 	ld	d, b
      000DFA 1A                    3138 	ld	a, (de)
      000DFB F8 00                 3139 	ldhl	sp,	#0
      000DFD 22                    3140 	ld	(hl+), a
      000DFE 13                    3141 	inc	de
      000DFF 1A                    3142 	ld	a, (de)
      000E00 77                    3143 	ld	(hl), a
      000E01 3A                    3144 	ld	a, (hl-)
      000E02 B6                    3145 	or	a, (hl)
      000E03 28 27                 3146 	jr	Z, 00105$
                                   3147 ;src/main.c:693: UINT8 prev_data = card->data;
      000E05 03                    3148 	inc	bc
      000E06 03                    3149 	inc	bc
      000E07 78                    3150 	ld	a, b
      000E08 69                    3151 	ld	l, c
      000E09 67                    3152 	ld	h, a
      000E0A 4E                    3153 	ld	c, (hl)
                                   3154 ;src/main.c:694: card = card->next_card;
      000E0B F8 00                 3155 	ldhl	sp,	#0
      000E0D 2A                    3156 	ld	a, (hl+)
      000E0E 5E                    3157 	ld	e, (hl)
      000E0F F8 04                 3158 	ldhl	sp,	#4
      000E11 22                    3159 	ld	(hl+), a
                                   3160 ;src/main.c:695: if (prev_data != card->data + 1u)
      000E12 7B                    3161 	ld	a, e
      000E13 32                    3162 	ld	(hl-), a
      000E14 2A                    3163 	ld	a, (hl+)
      000E15 5F                    3164 	ld	e, a
      000E16 56                    3165 	ld	d, (hl)
      000E17 13                    3166 	inc	de
      000E18 13                    3167 	inc	de
      000E19 1A                    3168 	ld	a, (de)
      000E1A 5F                    3169 	ld	e, a
      000E1B 16 00                 3170 	ld	d, #0x00
      000E1D 13                    3171 	inc	de
      000E1E 06 00                 3172 	ld	b, #0x00
      000E20 79                    3173 	ld	a, c
      000E21 93                    3174 	sub	a, e
      000E22 20 04                 3175 	jr	NZ, 00123$
      000E24 78                    3176 	ld	a, b
      000E25 92                    3177 	sub	a, d
      000E26 28 CB                 3178 	jr	Z, 00103$
      000E28                       3179 00123$:
                                   3180 ;src/main.c:696: return 0u;
      000E28 1E 00                 3181 	ld	e, #0x00
      000E2A 18 02                 3182 	jr	00106$
      000E2C                       3183 00105$:
                                   3184 ;src/main.c:698: return 1u;
      000E2C 1E 01                 3185 	ld	e, #0x01
      000E2E                       3186 00106$:
                                   3187 ;src/main.c:699: }
      000E2E E8 02                 3188 	add	sp, #2
      000E30 C9                    3189 	ret
                                   3190 ;src/main.c:701: inline void deal(void)
                                   3191 ;	---------------------------------
                                   3192 ; Function deal
                                   3193 ; ---------------------------------
      000E31                       3194 _deal::
      000E31 E8 FB                 3195 	add	sp, #-5
                                   3196 ;src/main.c:704: Pile *pile = IDX_PTR(piles, 0);
      000E33 01r38r01              3197 	ld	bc, #_piles
                                   3198 ;src/main.c:707: for (i = 0; i < 10u; i++) {
      000E36 1E 00                 3199 	ld	e, #0x00
      000E38                       3200 00105$:
                                   3201 ;src/main.c:708: if (!pile->height)
      000E38 21 04 00              3202 	ld	hl, #0x0004
      000E3B 09                    3203 	add	hl, bc
      000E3C 7E                    3204 	ld	a, (hl)
      000E3D B7                    3205 	or	a, a
                                   3206 ;src/main.c:709: return;
      000E3E 28 72                 3207 	jr	Z, 00110$
                                   3208 ;src/main.c:710: pile++;
      000E40 03                    3209 	inc	bc
      000E41 03                    3210 	inc	bc
      000E42 03                    3211 	inc	bc
      000E43 03                    3212 	inc	bc
      000E44 03                    3213 	inc	bc
                                   3214 ;src/main.c:707: for (i = 0; i < 10u; i++) {
      000E45 1C                    3215 	inc	e
      000E46 7B                    3216 	ld	a, e
      000E47 D6 0A                 3217 	sub	a, #0x0a
      000E49 38 ED                 3218 	jr	C, 00105$
                                   3219 ;src/main.c:713: pile = IDX_PTR(piles, 0);
      000E4B F8 02                 3220 	ldhl	sp,	#2
      000E4D 3Er38                 3221 	ld	a, #<(_piles)
      000E4F 22                    3222 	ld	(hl+), a
      000E50 36s01                 3223 	ld	(hl), #>(_piles)
                                   3224 ;src/main.c:714: Card *deck_top = IDX_PTR(deck, top_card_idx);
      000E52 21r6Ar01              3225 	ld	hl, #_top_card_idx
      000E55 4E                    3226 	ld	c, (hl)
      000E56 06 00                 3227 	ld	b, #0x00
      000E58 69                    3228 	ld	l, c
      000E59 60                    3229 	ld	h, b
      000E5A 29                    3230 	add	hl, hl
      000E5B 09                    3231 	add	hl, bc
      000E5C 01r00r00              3232 	ld	bc,#_deck
      000E5F 09                    3233 	add	hl,bc
      000E60 4D                    3234 	ld	c, l
      000E61 44                    3235 	ld	b, h
                                   3236 ;src/main.c:715: top_card_idx += 10u;
      000E62 21r6Ar01              3237 	ld	hl, #_top_card_idx
      000E65 7E                    3238 	ld	a, (hl)
      000E66 C6 0A                 3239 	add	a, #0x0a
      000E68 77                    3240 	ld	(hl), a
                                   3241 ;src/main.c:718: for (i = 0; i < 10u; i++) {
      000E69 F8 04                 3242 	ldhl	sp,	#4
      000E6B 36 0A                 3243 	ld	(hl), #0x0a
      000E6D                       3244 00109$:
                                   3245 ;src/main.c:719: pile->top->next_card = deck_top;
                                   3246 ;c
      000E6D F8 02                 3247 	ldhl	sp,#2
      000E6F 2A                    3248 	ld	a, (hl+)
      000E70 5F                    3249 	ld	e, a
      000E71 56                    3250 	ld	d, (hl)
      000E72 21 02 00              3251 	ld	hl, #0x0002
      000E75 19                    3252 	add	hl, de
      000E76 33                    3253 	inc	sp
      000E77 33                    3254 	inc	sp
      000E78 5D                    3255 	ld	e, l
      000E79 54                    3256 	ld	d, h
      000E7A D5                    3257 	push	de
      000E7B 1A                    3258 	ld	a, (de)
      000E7C 6F                    3259 	ld	l, a
      000E7D 13                    3260 	inc	de
      000E7E 1A                    3261 	ld	a, (de)
      000E7F 67                    3262 	ld	h, a
      000E80 79                    3263 	ld	a, c
      000E81 22                    3264 	ld	(hl+), a
      000E82 70                    3265 	ld	(hl), b
                                   3266 ;src/main.c:720: pile->top = deck_top;
      000E83 E1                    3267 	pop	hl
      000E84 E5                    3268 	push	hl
      000E85 79                    3269 	ld	a, c
      000E86 22                    3270 	ld	(hl+), a
      000E87 70                    3271 	ld	(hl), b
                                   3272 ;src/main.c:721: pile->height++;
                                   3273 ;c
      000E88 F8 02                 3274 	ldhl	sp,#2
      000E8A 2A                    3275 	ld	a, (hl+)
      000E8B 5F                    3276 	ld	e, a
      000E8C 56                    3277 	ld	d, (hl)
      000E8D 21 04 00              3278 	ld	hl, #0x0004
      000E90 19                    3279 	add	hl, de
      000E91 5D                    3280 	ld	e, l
      000E92 54                    3281 	ld	d, h
      000E93 1A                    3282 	ld	a, (de)
      000E94 3C                    3283 	inc	a
      000E95 12                    3284 	ld	(de), a
                                   3285 ;src/main.c:722: deck_top++;
      000E96 03                    3286 	inc	bc
      000E97 03                    3287 	inc	bc
      000E98 03                    3288 	inc	bc
                                   3289 ;src/main.c:723: pile++;
                                   3290 ;c
      000E99 F8 02                 3291 	ldhl	sp,#2
      000E9B 2A                    3292 	ld	a, (hl+)
      000E9C 5F                    3293 	ld	e, a
      000E9D 56                    3294 	ld	d, (hl)
      000E9E 21 05 00              3295 	ld	hl, #0x0005
      000EA1 19                    3296 	add	hl, de
      000EA2 E5                    3297 	push	hl
      000EA3 7D                    3298 	ld	a, l
      000EA4 F8 04                 3299 	ldhl	sp,	#4
      000EA6 77                    3300 	ld	(hl), a
      000EA7 E1                    3301 	pop	hl
      000EA8 7C                    3302 	ld	a, h
      000EA9 F8 03                 3303 	ldhl	sp,	#3
      000EAB 22                    3304 	ld	(hl+), a
                                   3305 ;src/main.c:718: for (i = 0; i < 10u; i++) {
      000EAC 35                    3306 	dec	(hl)
      000EAD 20 BE                 3307 	jr	NZ, 00109$
                                   3308 ;src/main.c:726: dynamic_metasprite_deal();
      000EAF CDr73r08              3309 	call	_dynamic_metasprite_deal
      000EB2                       3310 00110$:
                                   3311 ;src/main.c:727: }
      000EB2 E8 05                 3312 	add	sp, #5
      000EB4 C9                    3313 	ret
                                   3314 ;src/main.c:729: void pile_append_cursor_stack(Pile *pile)
                                   3315 ;	---------------------------------
                                   3316 ; Function pile_append_cursor_stack
                                   3317 ; ---------------------------------
      000EB5                       3318 _pile_append_cursor_stack::
      000EB5 E8 F3                 3319 	add	sp, #-13
                                   3320 ;src/main.c:731: if (pile->height)
      000EB7 F8 0F                 3321 	ldhl	sp,	#15
      000EB9 2A                    3322 	ld	a, (hl+)
      000EBA 5E                    3323 	ld	e, (hl)
      000EBB F8 00                 3324 	ldhl	sp,	#0
      000EBD 22                    3325 	ld	(hl+), a
      000EBE 73                    3326 	ld	(hl), e
                                   3327 ;c
      000EBF D1                    3328 	pop	de
      000EC0 D5                    3329 	push	de
      000EC1 21 04 00              3330 	ld	hl, #0x0004
      000EC4 19                    3331 	add	hl, de
      000EC5 E5                    3332 	push	hl
      000EC6 7D                    3333 	ld	a, l
      000EC7 F8 04                 3334 	ldhl	sp,	#4
      000EC9 77                    3335 	ld	(hl), a
      000ECA E1                    3336 	pop	hl
      000ECB 7C                    3337 	ld	a, h
      000ECC F8 03                 3338 	ldhl	sp,	#3
      000ECE 32                    3339 	ld	(hl-), a
      000ECF 2A                    3340 	ld	a, (hl+)
      000ED0 5F                    3341 	ld	e, a
      000ED1 56                    3342 	ld	d, (hl)
      000ED2 1A                    3343 	ld	a, (de)
      000ED3 F8 0C                 3344 	ldhl	sp,	#12
      000ED5 77                    3345 	ld	(hl), a
                                   3346 ;src/main.c:732: pile->top->next_card = cursor.held_card;
                                   3347 ;c
      000ED6 D1                    3348 	pop	de
      000ED7 D5                    3349 	push	de
      000ED8 21 02 00              3350 	ld	hl, #0x0002
      000EDB 19                    3351 	add	hl, de
      000EDC E5                    3352 	push	hl
      000EDD 7D                    3353 	ld	a, l
      000EDE F8 06                 3354 	ldhl	sp,	#6
      000EE0 77                    3355 	ld	(hl), a
      000EE1 E1                    3356 	pop	hl
      000EE2 7C                    3357 	ld	a, h
      000EE3 F8 05                 3358 	ldhl	sp,	#5
      000EE5 77                    3359 	ld	(hl), a
                                   3360 ;src/main.c:731: if (pile->height)
      000EE6 F8 0C                 3361 	ldhl	sp,	#12
      000EE8 7E                    3362 	ld	a, (hl)
      000EE9 B7                    3363 	or	a, a
      000EEA 28 1C                 3364 	jr	Z, 00102$
                                   3365 ;src/main.c:732: pile->top->next_card = cursor.held_card;
      000EEC F8 04                 3366 	ldhl	sp,#4
      000EEE 2A                    3367 	ld	a, (hl+)
      000EEF 5F                    3368 	ld	e, a
      000EF0 56                    3369 	ld	d, (hl)
      000EF1 1A                    3370 	ld	a, (de)
      000EF2 F8 0B                 3371 	ldhl	sp,	#11
      000EF4 22                    3372 	ld	(hl+), a
      000EF5 13                    3373 	inc	de
      000EF6 1A                    3374 	ld	a, (de)
      000EF7 77                    3375 	ld	(hl), a
      000EF8 21r84r01              3376 	ld	hl, #_cursor
      000EFB 2A                    3377 	ld	a, (hl+)
      000EFC 4F                    3378 	ld	c, a
      000EFD 46                    3379 	ld	b, (hl)
      000EFE F8 0B                 3380 	ldhl	sp,	#11
      000F00 2A                    3381 	ld	a, (hl+)
      000F01 66                    3382 	ld	h, (hl)
      000F02 6F                    3383 	ld	l, a
      000F03 79                    3384 	ld	a, c
      000F04 22                    3385 	ld	(hl+), a
      000F05 70                    3386 	ld	(hl), b
      000F06 18 13                 3387 	jr	00103$
      000F08                       3388 00102$:
                                   3389 ;src/main.c:734: pile->base = cursor.held_card;
      000F08 11r84r01              3390 	ld	de, #_cursor
      000F0B 1A                    3391 	ld	a, (de)
      000F0C F8 0B                 3392 	ldhl	sp,	#11
      000F0E 22                    3393 	ld	(hl+), a
      000F0F 13                    3394 	inc	de
      000F10 1A                    3395 	ld	a, (de)
      000F11 77                    3396 	ld	(hl), a
      000F12 D1                    3397 	pop	de
      000F13 D5                    3398 	push	de
      000F14 2B                    3399 	dec	hl
      000F15 7E                    3400 	ld	a, (hl)
      000F16 12                    3401 	ld	(de), a
      000F17 13                    3402 	inc	de
      000F18 23                    3403 	inc	hl
      000F19 7E                    3404 	ld	a, (hl)
      000F1A 12                    3405 	ld	(de), a
      000F1B                       3406 00103$:
                                   3407 ;src/main.c:736: Pile *src_pile = IDX_PTR(piles, cursor.pile_idx);
      000F1B 01r38r01              3408 	ld	bc, #_piles+0
      000F1E FAr8Ar01              3409 	ld	a, (#(_cursor + 0x0006) + 0)
      000F21 5F                    3410 	ld	e, a
      000F22 16 00                 3411 	ld	d, #0x00
      000F24 6B                    3412 	ld	l, e
      000F25 62                    3413 	ld	h, d
      000F26 29                    3414 	add	hl, hl
      000F27 29                    3415 	add	hl, hl
      000F28 19                    3416 	add	hl, de
      000F29 09                    3417 	add	hl, bc
      000F2A 4D                    3418 	ld	c, l
      000F2B 7C                    3419 	ld	a, h
      000F2C F8 06                 3420 	ldhl	sp,	#6
      000F2E 71                    3421 	ld	(hl), c
      000F2F 23                    3422 	inc	hl
      000F30 77                    3423 	ld	(hl), a
                                   3424 ;src/main.c:737: Card *top_card = cursor.held_card;
      000F31 11r84r01              3425 	ld	de, #_cursor
      000F34 1A                    3426 	ld	a, (de)
      000F35 23                    3427 	inc	hl
      000F36 22                    3428 	ld	(hl+), a
      000F37 13                    3429 	inc	de
      000F38 1A                    3430 	ld	a, (de)
      000F39 77                    3431 	ld	(hl), a
                                   3432 ;src/main.c:738: while (top_card->next_card)
      000F3A                       3433 00104$:
      000F3A F8 08                 3434 	ldhl	sp,#8
      000F3C 2A                    3435 	ld	a, (hl+)
      000F3D 5F                    3436 	ld	e, a
      000F3E 56                    3437 	ld	d, (hl)
      000F3F 1A                    3438 	ld	a, (de)
      000F40 23                    3439 	inc	hl
      000F41 23                    3440 	inc	hl
      000F42 22                    3441 	ld	(hl+), a
      000F43 13                    3442 	inc	de
      000F44 1A                    3443 	ld	a, (de)
      000F45 77                    3444 	ld	(hl), a
      000F46 3A                    3445 	ld	a, (hl-)
      000F47 B6                    3446 	or	a, (hl)
      000F48 28 08                 3447 	jr	Z, 00106$
                                   3448 ;src/main.c:739: top_card = top_card->next_card;
      000F4A 2A                    3449 	ld	a, (hl+)
      000F4B 5E                    3450 	ld	e, (hl)
      000F4C F8 08                 3451 	ldhl	sp,	#8
      000F4E 22                    3452 	ld	(hl+), a
      000F4F 73                    3453 	ld	(hl), e
      000F50 18 E8                 3454 	jr	00104$
      000F52                       3455 00106$:
                                   3456 ;src/main.c:740: pile->top = top_card;
      000F52 F8 04                 3457 	ldhl	sp,#4
      000F54 2A                    3458 	ld	a, (hl+)
      000F55 5F                    3459 	ld	e, a
      000F56 56                    3460 	ld	d, (hl)
      000F57 F8 08                 3461 	ldhl	sp,	#8
      000F59 7E                    3462 	ld	a, (hl)
      000F5A 12                    3463 	ld	(de), a
      000F5B 13                    3464 	inc	de
      000F5C 23                    3465 	inc	hl
      000F5D 7E                    3466 	ld	a, (hl)
      000F5E 12                    3467 	ld	(de), a
                                   3468 ;src/main.c:741: cursor.height = pile->height - !!pile->height;
      000F5F F8 02                 3469 	ldhl	sp,#2
      000F61 2A                    3470 	ld	a, (hl+)
      000F62 5F                    3471 	ld	e, a
      000F63 56                    3472 	ld	d, (hl)
      000F64 1A                    3473 	ld	a, (de)
      000F65 47                    3474 	ld	b, a
      000F66 D6 01                 3475 	sub	a,#0x01
      000F68 3E 00                 3476 	ld	a, #0x00
      000F6A 17                    3477 	rla
      000F6B EE 01                 3478 	xor	a, #0x01
      000F6D 4F                    3479 	ld	c, a
      000F6E 78                    3480 	ld	a, b
      000F6F 91                    3481 	sub	a, c
      000F70 EAr8Br01              3482 	ld	(#(_cursor + 0x0007)),a
                                   3483 ;src/main.c:742: pile->height += cursor.held_stack_size;
      000F73 F8 02                 3484 	ldhl	sp,#2
      000F75 2A                    3485 	ld	a, (hl+)
      000F76 5F                    3486 	ld	e, a
      000F77 56                    3487 	ld	d, (hl)
      000F78 1A                    3488 	ld	a, (de)
      000F79 4F                    3489 	ld	c, a
      000F7A FAr88r01              3490 	ld	a, (#(_cursor + 0x0004) + 0)
      000F7D 81                    3491 	add	a, c
      000F7E 4F                    3492 	ld	c, a
      000F7F 2B                    3493 	dec	hl
      000F80 2A                    3494 	ld	a, (hl+)
      000F81 66                    3495 	ld	h, (hl)
      000F82 6F                    3496 	ld	l, a
      000F83 71                    3497 	ld	(hl), c
                                   3498 ;src/main.c:743: if (cursor.hand_pile_idx != cursor.pile_idx) {
      000F84 FAr89r01              3499 	ld	a, (#(_cursor + 0x0005) + 0)
      000F87 21r8Ar01              3500 	ld	hl, #(_cursor + 0x0006)
      000F8A 4E                    3501 	ld	c, (hl)
      000F8B 91                    3502 	sub	a, c
      000F8C CAr86r10              3503 	jp	Z,00116$
                                   3504 ;src/main.c:744: UINT8 piles_to_clear = 0;
      000F8F AF                    3505 	xor	a, a
      000F90 F8 0C                 3506 	ldhl	sp,	#12
      000F92 77                    3507 	ld	(hl), a
                                   3508 ;src/main.c:745: if (src_pile->height == 13u && is_stack_coherent(src_pile->base)) {
                                   3509 ;c
      000F93 F8 06                 3510 	ldhl	sp,#6
      000F95 2A                    3511 	ld	a, (hl+)
      000F96 5F                    3512 	ld	e, a
      000F97 56                    3513 	ld	d, (hl)
      000F98 21 04 00              3514 	ld	hl, #0x0004
      000F9B 19                    3515 	add	hl, de
      000F9C E5                    3516 	push	hl
      000F9D 7D                    3517 	ld	a, l
      000F9E F8 0C                 3518 	ldhl	sp,	#12
      000FA0 77                    3519 	ld	(hl), a
      000FA1 E1                    3520 	pop	hl
      000FA2 7C                    3521 	ld	a, h
      000FA3 F8 0B                 3522 	ldhl	sp,	#11
      000FA5 32                    3523 	ld	(hl-), a
      000FA6 2A                    3524 	ld	a, (hl+)
      000FA7 5F                    3525 	ld	e, a
      000FA8 56                    3526 	ld	d, (hl)
      000FA9 1A                    3527 	ld	a, (de)
      000FAA D6 0D                 3528 	sub	a, #0x0d
      000FAC 20 1A                 3529 	jr	NZ, 00108$
      000FAE F8 06                 3530 	ldhl	sp,#6
      000FB0 2A                    3531 	ld	a, (hl+)
      000FB1 5F                    3532 	ld	e, a
      000FB2 56                    3533 	ld	d, (hl)
      000FB3 1A                    3534 	ld	a, (de)
      000FB4 4F                    3535 	ld	c, a
      000FB5 13                    3536 	inc	de
      000FB6 1A                    3537 	ld	a, (de)
      000FB7 47                    3538 	ld	b, a
      000FB8 C5                    3539 	push	bc
      000FB9 CDrF1r0D              3540 	call	_is_stack_coherent
      000FBC E8 02                 3541 	add	sp, #2
      000FBE 7B                    3542 	ld	a, e
      000FBF B7                    3543 	or	a, a
      000FC0 28 06                 3544 	jr	Z, 00108$
                                   3545 ;src/main.c:746: piles_to_clear = cursor.pile_idx;
      000FC2 FAr8Ar01              3546 	ld	a, (#(_cursor + 0x0006) + 0)
      000FC5 F8 0C                 3547 	ldhl	sp,	#12
      000FC7 77                    3548 	ld	(hl), a
      000FC8                       3549 00108$:
                                   3550 ;src/main.c:748: if (pile->height == 13u && is_stack_coherent(pile->base)) {
      000FC8 F8 02                 3551 	ldhl	sp,#2
      000FCA 2A                    3552 	ld	a, (hl+)
      000FCB 5F                    3553 	ld	e, a
      000FCC 56                    3554 	ld	d, (hl)
      000FCD 1A                    3555 	ld	a, (de)
      000FCE D6 0D                 3556 	sub	a, #0x0d
      000FD0 20 32                 3557 	jr	NZ, 00111$
      000FD2 D1                    3558 	pop	de
      000FD3 D5                    3559 	push	de
      000FD4 1A                    3560 	ld	a, (de)
      000FD5 4F                    3561 	ld	c, a
      000FD6 13                    3562 	inc	de
      000FD7 1A                    3563 	ld	a, (de)
      000FD8 47                    3564 	ld	b, a
      000FD9 C5                    3565 	push	bc
      000FDA CDrF1r0D              3566 	call	_is_stack_coherent
      000FDD E8 02                 3567 	add	sp, #2
      000FDF 7B                    3568 	ld	a, e
      000FE0 B7                    3569 	or	a, a
      000FE1 28 21                 3570 	jr	Z, 00111$
                                   3571 ;src/main.c:749: cursor.height = 0;
      000FE3 21r8Br01              3572 	ld	hl, #(_cursor + 0x0007)
      000FE6 36 00                 3573 	ld	(hl), #0x00
                                   3574 ;src/main.c:743: if (cursor.hand_pile_idx != cursor.pile_idx) {
      000FE8 FAr89r01              3575 	ld	a, (#(_cursor + 0x0005) + 0)
      000FEB F8 07                 3576 	ldhl	sp,	#7
      000FED 77                    3577 	ld	(hl), a
                                   3578 ;src/main.c:750: piles_to_clear |= piles_to_clear ? cursor.hand_pile_idx << 4u : cursor.hand_pile_idx;
      000FEE F8 0C                 3579 	ldhl	sp,	#12
      000FF0 7E                    3580 	ld	a, (hl)
      000FF1 B7                    3581 	or	a, a
      000FF2 28 09                 3582 	jr	Z, 00119$
      000FF4 F8 07                 3583 	ldhl	sp,	#7
      000FF6 7E                    3584 	ld	a, (hl)
      000FF7 CB 37                 3585 	swap	a
      000FF9 E6 F0                 3586 	and	a, #0xf0
      000FFB 18 03                 3587 	jr	00120$
      000FFD                       3588 00119$:
      000FFD F8 07                 3589 	ldhl	sp,	#7
      000FFF 7E                    3590 	ld	a, (hl)
      001000                       3591 00120$:
      001000 F8 0C                 3592 	ldhl	sp,	#12
      001002 B6                    3593 	or	a, (hl)
      001003 77                    3594 	ld	(hl), a
      001004                       3595 00111$:
                                   3596 ;src/main.c:753: if (cursor.card_to_show)
      001004 11r86r01              3597 	ld	de, #(_cursor + 0x0002)
      001007 1A                    3598 	ld	a, (de)
      001008 F8 06                 3599 	ldhl	sp,	#6
      00100A 22                    3600 	ld	(hl+), a
      00100B 13                    3601 	inc	de
      00100C 1A                    3602 	ld	a, (de)
      00100D 77                    3603 	ld	(hl), a
      00100E 3A                    3604 	ld	a, (hl-)
      00100F B6                    3605 	or	a, (hl)
      001010 28 07                 3606 	jr	Z, 00114$
                                   3607 ;src/main.c:754: cursor.card_to_show->data |= BITMASK_CARD_VISIBLE;
      001012 2A                    3608 	ld	a, (hl+)
      001013 66                    3609 	ld	h, (hl)
      001014 6F                    3610 	ld	l, a
      001015 23                    3611 	inc	hl
      001016 23                    3612 	inc	hl
      001017 CB F6                 3613 	set	6, (hl)
      001019                       3614 00114$:
                                   3615 ;src/main.c:760: cursor.held_card,
      001019 11r84r01              3616 	ld	de, #_cursor
      00101C 1A                    3617 	ld	a, (de)
      00101D F8 06                 3618 	ldhl	sp,	#6
      00101F 22                    3619 	ld	(hl+), a
      001020 13                    3620 	inc	de
      001021 1A                    3621 	ld	a, (de)
      001022 77                    3622 	ld	(hl), a
                                   3623 ;src/main.c:759: cursor.held_stack_size,
      001023 21r88r01              3624 	ld	hl, #(_cursor + 0x0004)
      001026 4E                    3625 	ld	c, (hl)
                                   3626 ;src/main.c:758: (pile->height + 3u - cursor.held_stack_size) * 8u,
      001027 F8 02                 3627 	ldhl	sp,#2
      001029 2A                    3628 	ld	a, (hl+)
      00102A 5F                    3629 	ld	e, a
      00102B 56                    3630 	ld	d, (hl)
      00102C 1A                    3631 	ld	a, (de)
      00102D C6 03                 3632 	add	a, #0x03
      00102F 91                    3633 	sub	a, c
      001030 87                    3634 	add	a, a
      001031 87                    3635 	add	a, a
      001032 87                    3636 	add	a, a
      001033 23                    3637 	inc	hl
      001034 77                    3638 	ld	(hl), a
                                   3639 ;src/main.c:757: (src_pile->height + 2u + cursor.held_stack_size) * 8u, cursor.hand_pile_idx * 16u,
      001035 FAr89r01              3640 	ld	a, (#(_cursor + 0x0005) + 0)
      001038 CB 37                 3641 	swap	a
      00103A E6 F0                 3642 	and	a, #0xf0
      00103C 23                    3643 	inc	hl
      00103D 77                    3644 	ld	(hl), a
      00103E F8 0A                 3645 	ldhl	sp,#10
      001040 2A                    3646 	ld	a, (hl+)
      001041 5F                    3647 	ld	e, a
      001042 56                    3648 	ld	d, (hl)
      001043 1A                    3649 	ld	a, (de)
      001044 C6 02                 3650 	add	a, #0x02
      001046 81                    3651 	add	a, c
      001047 87                    3652 	add	a, a
      001048 87                    3653 	add	a, a
      001049 87                    3654 	add	a, a
      00104A 77                    3655 	ld	(hl), a
                                   3656 ;src/main.c:756: cursor.pile_idx * 16u,
      00104B FAr8Ar01              3657 	ld	a, (#(_cursor + 0x0006) + 0)
      00104E CB 37                 3658 	swap	a
      001050 E6 F0                 3659 	and	a, #0xf0
                                   3660 ;src/main.c:755: dynamic_metasprite_fold(top_card->data,
      001052 F8 08                 3661 	ldhl	sp,	#8
      001054 F5                    3662 	push	af
      001055 2A                    3663 	ld	a, (hl+)
      001056 66                    3664 	ld	h, (hl)
      001057 6F                    3665 	ld	l, a
      001058 F1                    3666 	pop	af
      001059 23                    3667 	inc	hl
      00105A 23                    3668 	inc	hl
      00105B 5E                    3669 	ld	e, (hl)
      00105C F8 0C                 3670 	ldhl	sp,	#12
      00105E 66                    3671 	ld	h, (hl)
      00105F E5                    3672 	push	hl
      001060 33                    3673 	inc	sp
      001061 26 80                 3674 	ld	h, #0x80
      001063 E5                    3675 	push	hl
      001064 33                    3676 	inc	sp
      001065 F8 08                 3677 	ldhl	sp,	#8
      001067 F5                    3678 	push	af
      001068 2A                    3679 	ld	a, (hl+)
      001069 66                    3680 	ld	h, (hl)
      00106A 6F                    3681 	ld	l, a
      00106B F1                    3682 	pop	af
      00106C E5                    3683 	push	hl
      00106D 61                    3684 	ld	h, c
      00106E E5                    3685 	push	hl
      00106F 33                    3686 	inc	sp
      001070 F8 09                 3687 	ldhl	sp,	#9
      001072 66                    3688 	ld	h, (hl)
      001073 E5                    3689 	push	hl
      001074 33                    3690 	inc	sp
      001075 F8 0B                 3691 	ldhl	sp,	#11
      001077 66                    3692 	ld	h, (hl)
      001078 E5                    3693 	push	hl
      001079 33                    3694 	inc	sp
      00107A F8 12                 3695 	ldhl	sp,	#18
      00107C 66                    3696 	ld	h, (hl)
      00107D E5                    3697 	push	hl
      00107E 33                    3698 	inc	sp
      00107F 57                    3699 	ld	d,a
      001080 D5                    3700 	push	de
      001081 CDr1Cr07              3701 	call	_dynamic_metasprite_fold
      001084 E8 0A                 3702 	add	sp, #10
      001086                       3703 00116$:
                                   3704 ;src/main.c:766: cursor.held_card = NULL;
      001086 21r84r01              3705 	ld	hl, #_cursor
      001089 AF                    3706 	xor	a, a
      00108A 22                    3707 	ld	(hl+), a
      00108B 77                    3708 	ld	(hl), a
                                   3709 ;src/main.c:767: cursor.pile_idx = cursor.hand_pile_idx;
      00108C FAr89r01              3710 	ld	a, (#(_cursor + 0x0005) + 0)
      00108F EAr8Ar01              3711 	ld	(#(_cursor + 0x0006)),a
                                   3712 ;src/main.c:768: flags |= FLAG_REDRAW_CURSOR;
      001092 21r6Br01              3713 	ld	hl, #_flags
      001095 7E                    3714 	ld	a, (hl)
      001096 F6 01                 3715 	or	a, #0x01
      001098 77                    3716 	ld	(hl), a
                                   3717 ;src/main.c:769: }
      001099 E8 0D                 3718 	add	sp, #13
      00109B C9                    3719 	ret
                                   3720 ;src/main.c:775: inline void start_game(void)
                                   3721 ;	---------------------------------
                                   3722 ; Function start_game
                                   3723 ; ---------------------------------
      00109C                       3724 _start_game::
                                   3725 ;src/main.c:777: initrand(DIV_REG);
      00109C F0r00                 3726 	ldh	a, (_DIV_REG+0)
      00109E 4F                    3727 	ld	c, a
      00109F 06 00                 3728 	ld	b, #0x00
      0010A1 C5                    3729 	push	bc
      0010A2 CDr00r00              3730 	call	_initrand
      0010A5 E8 02                 3731 	add	sp, #2
                                   3732 ;src/main.c:778: init_deck();
      0010A7 CDrF3r0B              3733 	call	_init_deck
                                   3734 ;src/main.c:779: clear_bkg();
      0010AA CDr8Er01              3735 	call	_clear_bkg
                                   3736 ;src/main.c:780: draw_bkg_game();
                                   3737 ;src/main.c:781: }
      0010AD C3r18r02              3738 	jp  _draw_bkg_game
                                   3739 ;src/main.c:783: inline void input_process(void)
                                   3740 ;	---------------------------------
                                   3741 ; Function input_process
                                   3742 ; ---------------------------------
      0010B0                       3743 _input_process::
      0010B0 E8 F8                 3744 	add	sp, #-8
                                   3745 ;src/main.c:786: UINT8 input = joypad();
      0010B2 CDr00r00              3746 	call	_joypad
      0010B5 F8 00                 3747 	ldhl	sp,	#0
      0010B7 73                    3748 	ld	(hl), e
                                   3749 ;src/main.c:787: UINT8 new_input = input & ~prev_input;
      0010B8 FAr8Er01              3750 	ld	a, (#_input_process_prev_input_65536_296)
      0010BB 2F                    3751 	cpl
      0010BC F8 00                 3752 	ldhl	sp,	#0
      0010BE A6                    3753 	and	a, (hl)
      0010BF 23                    3754 	inc	hl
      0010C0 77                    3755 	ld	(hl), a
                                   3756 ;src/main.c:788: switch (flags & FLAG_GAME_STATE) {
      0010C1 FAr6Br01              3757 	ld	a, (#_flags)
      0010C4 E6 18                 3758 	and	a, #0x18
      0010C6 F8 06                 3759 	ldhl	sp,	#6
      0010C8 77                    3760 	ld	(hl), a
      0010C9 AF                    3761 	xor	a, a
      0010CA 23                    3762 	inc	hl
      0010CB 32                    3763 	ld	(hl-), a
      0010CC 7E                    3764 	ld	a, (hl)
      0010CD B7                    3765 	or	a, a
      0010CE 23                    3766 	inc	hl
      0010CF B6                    3767 	or	a, (hl)
      0010D0 28 0C                 3768 	jr	Z, 00101$
      0010D2 F8 06                 3769 	ldhl	sp,	#6
      0010D4 7E                    3770 	ld	a, (hl)
      0010D5 D6 10                 3771 	sub	a, #0x10
      0010D7 23                    3772 	inc	hl
      0010D8 B6                    3773 	or	a, (hl)
      0010D9 28 33                 3774 	jr	Z, 00106$
      0010DB C3rF9r13              3775 	jp	00149$
                                   3776 ;src/main.c:789: case FLAG_GAME_STATE_START:
      0010DE                       3777 00101$:
                                   3778 ;src/main.c:790: if (new_input) {
      0010DE F8 01                 3779 	ldhl	sp,	#1
      0010E0 7E                    3780 	ld	a, (hl)
      0010E1 B7                    3781 	or	a, a
      0010E2 CArF9r13              3782 	jp	Z, 00149$
                                   3783 ;src/main.c:791: flags &= ~FLAG_GAME_STATE;
      0010E5 21r6Br01              3784 	ld	hl, #_flags
      0010E8 7E                    3785 	ld	a, (hl)
      0010E9 E6 E7                 3786 	and	a, #0xe7
      0010EB 77                    3787 	ld	(hl), a
                                   3788 ;src/main.c:792: flags |= FLAG_GAME_STATE_INGAME;
      0010EC 7E                    3789 	ld	a, (hl)
      0010ED F6 10                 3790 	or	a, #0x10
      0010EF 77                    3791 	ld	(hl), a
                                   3792 ;src/main.c:793: if (flags & FLAG_PLAYING_ANIMATION)
      0010F0 CB 56                 3793 	bit	2, (hl)
      0010F2 28 03                 3794 	jr	Z, 00103$
                                   3795 ;src/main.c:794: dynamic_metasprite_end_animation();
      0010F4 CDrBDr02              3796 	call	_dynamic_metasprite_end_animation
      0010F7                       3797 00103$:
                                   3798 ;src/main.c:777: initrand(DIV_REG);
      0010F7 F0r00                 3799 	ldh	a, (_DIV_REG+0)
      0010F9 4F                    3800 	ld	c, a
      0010FA 06 00                 3801 	ld	b, #0x00
      0010FC C5                    3802 	push	bc
      0010FD CDr00r00              3803 	call	_initrand
      001100 E8 02                 3804 	add	sp, #2
                                   3805 ;src/main.c:778: init_deck();
      001102 CDrF3r0B              3806 	call	_init_deck
                                   3807 ;src/main.c:779: clear_bkg();
      001105 CDr8Er01              3808 	call	_clear_bkg
                                   3809 ;src/main.c:780: draw_bkg_game();
      001108 CDr18r02              3810 	call	_draw_bkg_game
                                   3811 ;src/main.c:797: break;
      00110B C3rF9r13              3812 	jp	00149$
                                   3813 ;src/main.c:798: case FLAG_GAME_STATE_INGAME:
      00110E                       3814 00106$:
                                   3815 ;src/main.c:799: if (cursor.held_card) {
      00110E 21r84r01              3816 	ld	hl, #_cursor
      001111 2A                    3817 	ld	a, (hl+)
      001112 4F                    3818 	ld	c, a
      001113 46                    3819 	ld	b, (hl)
                                   3820 ;src/main.c:792: flags |= FLAG_GAME_STATE_INGAME;
      001114 21r6Br01              3821 	ld	hl, #_flags
      001117 5E                    3822 	ld	e, (hl)
                                   3823 ;src/main.c:802: && cursor.hand_pile_idx != 0) {
      001118 F8 01                 3824 	ldhl	sp,	#1
      00111A 7E                    3825 	ld	a, (hl)
      00111B E6 02                 3826 	and	a, #0x02
      00111D 23                    3827 	inc	hl
      00111E 77                    3828 	ld	(hl), a
      00111F AF                    3829 	xor	a, a
      001120 23                    3830 	inc	hl
                                   3831 ;src/main.c:805: && cursor.hand_pile_idx < 9) {
      001121 32                    3832 	ld	(hl-), a
      001122 2B                    3833 	dec	hl
      001123 7E                    3834 	ld	a, (hl)
      001124 E6 01                 3835 	and	a, #0x01
      001126 F8 04                 3836 	ldhl	sp,	#4
      001128 77                    3837 	ld	(hl), a
      001129 AF                    3838 	xor	a, a
      00112A 23                    3839 	inc	hl
      00112B 77                    3840 	ld	(hl), a
                                   3841 ;src/main.c:809: && ~flags & FLAG_PLAYING_ANIMATION) {
      00112C F8 01                 3842 	ldhl	sp,	#1
      00112E 7E                    3843 	ld	a, (hl)
      00112F E6 10                 3844 	and	a, #0x10
      001131 F8 06                 3845 	ldhl	sp,	#6
      001133 77                    3846 	ld	(hl), a
      001134 AF                    3847 	xor	a, a
      001135 23                    3848 	inc	hl
      001136 77                    3849 	ld	(hl), a
                                   3850 ;src/main.c:799: if (cursor.held_card) {
      001137 78                    3851 	ld	a, b
      001138 B1                    3852 	or	a, c
      001139 CArECr11              3853 	jp	Z, 00147$
                                   3854 ;src/main.c:800: flags |= FLAG_REDRAW_HAND;
      00113C 7B                    3855 	ld	a, e
      00113D F6 02                 3856 	or	a, #0x02
      00113F EAr6Br01              3857 	ld	(#_flags),a
                                   3858 ;src/main.c:802: && cursor.hand_pile_idx != 0) {
      001142 F8 03                 3859 	ldhl	sp,	#3
      001144 3A                    3860 	ld	a, (hl-)
      001145 B6                    3861 	or	a, (hl)
      001146 28 0B                 3862 	jr	Z, 00111$
      001148 01r89r01              3863 	ld	bc, #_cursor+5
      00114B 0A                    3864 	ld	a, (bc)
      00114C B7                    3865 	or	a, a
      00114D 28 04                 3866 	jr	Z, 00111$
                                   3867 ;src/main.c:803: cursor.hand_pile_idx--;
      00114F 3D                    3868 	dec	a
      001150 02                    3869 	ld	(bc), a
      001151 18 10                 3870 	jr	00112$
      001153                       3871 00111$:
                                   3872 ;src/main.c:805: && cursor.hand_pile_idx < 9) {
      001153 F8 05                 3873 	ldhl	sp,	#5
      001155 3A                    3874 	ld	a, (hl-)
      001156 B6                    3875 	or	a, (hl)
      001157 28 0A                 3876 	jr	Z, 00112$
      001159 01r89r01              3877 	ld	bc, #_cursor+5
      00115C 0A                    3878 	ld	a, (bc)
      00115D FE 09                 3879 	cp	a, #0x09
      00115F 30 02                 3880 	jr	NC, 00112$
                                   3881 ;src/main.c:806: cursor.hand_pile_idx++;
      001161 3C                    3882 	inc	a
      001162 02                    3883 	ld	(bc), a
      001163                       3884 00112$:
                                   3885 ;src/main.c:809: && ~flags & FLAG_PLAYING_ANIMATION) {
      001163 F8 07                 3886 	ldhl	sp,	#7
      001165 3A                    3887 	ld	a, (hl-)
      001166 B6                    3888 	or	a, (hl)
      001167 CArF9r13              3889 	jp	Z, 00149$
      00116A FAr6Br01              3890 	ld	a, (#_flags)
      00116D 06 00                 3891 	ld	b, #0x00
      00116F 2F                    3892 	cpl
      001170 4F                    3893 	ld	c, a
      001171 78                    3894 	ld	a, b
      001172 2F                    3895 	cpl
      001173 CB 51                 3896 	bit	2, c
      001175 CArF9r13              3897 	jp	Z,00149$
                                   3898 ;src/main.c:574: Pile *pile = IDX_PTR(piles, cursor.hand_pile_idx);
      001178 01r38r01              3899 	ld	bc, #_piles+0
      00117B FAr89r01              3900 	ld	a, (#(_cursor + 0x0005) + 0)
      00117E F8 07                 3901 	ldhl	sp,	#7
      001180 77                    3902 	ld	(hl), a
      001181 F8 07                 3903 	ldhl	sp,	#7
      001183 5E                    3904 	ld	e, (hl)
      001184 16 00                 3905 	ld	d, #0x00
      001186 6B                    3906 	ld	l, e
      001187 62                    3907 	ld	h, d
      001188 29                    3908 	add	hl, hl
      001189 29                    3909 	add	hl, hl
      00118A 19                    3910 	add	hl, de
      00118B 09                    3911 	add	hl, bc
      00118C 4D                    3912 	ld	c, l
      00118D 44                    3913 	ld	b, h
                                   3914 ;src/main.c:575: if (cursor.hand_pile_idx == cursor.pile_idx) {
      00118E 21r8Ar01              3915 	ld	hl, #_cursor + 6
      001191 5E                    3916 	ld	e, (hl)
      001192 F8 07                 3917 	ldhl	sp,	#7
      001194 7E                    3918 	ld	a, (hl)
      001195 93                    3919 	sub	a, e
      001196 20 09                 3920 	jr	NZ, 00155$
                                   3921 ;src/main.c:576: pile_append_cursor_stack(pile);
      001198 C5                    3922 	push	bc
      001199 CDrB5r0E              3923 	call	_pile_append_cursor_stack
      00119C E8 02                 3924 	add	sp, #2
      00119E C3rF9r13              3925 	jp	00149$
      0011A1                       3926 00155$:
                                   3927 ;src/main.c:577: } else if (!pile->height
      0011A1 21 04 00              3928 	ld	hl, #0x0004
      0011A4 09                    3929 	add	hl, bc
      0011A5 7E                    3930 	ld	a, (hl)
      0011A6 B7                    3931 	or	a, a
      0011A7 28 2E                 3932 	jr	Z, 00153$
                                   3933 ;src/main.c:578: || RANK(pile->top->data) == RANK(cursor.held_card->data) + 1u) {
      0011A9 69                    3934 	ld	l, c
      0011AA 60                    3935 	ld	h, b
      0011AB 23                    3936 	inc	hl
      0011AC 23                    3937 	inc	hl
      0011AD 2A                    3938 	ld	a, (hl+)
      0011AE 66                    3939 	ld	h, (hl)
      0011AF 6F                    3940 	ld	l, a
      0011B0 23                    3941 	inc	hl
      0011B1 23                    3942 	inc	hl
      0011B2 7E                    3943 	ld	a, (hl)
      0011B3 E6 0F                 3944 	and	a, #0x0f
      0011B5 F8 06                 3945 	ldhl	sp,	#6
      0011B7 77                    3946 	ld	(hl), a
      0011B8 AF                    3947 	xor	a, a
      0011B9 23                    3948 	inc	hl
      0011BA 77                    3949 	ld	(hl), a
      0011BB 21r84r01              3950 	ld	hl, #_cursor
      0011BE 2A                    3951 	ld	a, (hl+)
      0011BF 66                    3952 	ld	h, (hl)
      0011C0 6F                    3953 	ld	l, a
      0011C1 23                    3954 	inc	hl
      0011C2 23                    3955 	inc	hl
      0011C3 7E                    3956 	ld	a, (hl)
      0011C4 E6 0F                 3957 	and	a, #0x0f
      0011C6 5F                    3958 	ld	e, a
      0011C7 16 00                 3959 	ld	d, #0x00
      0011C9 13                    3960 	inc	de
      0011CA F8 06                 3961 	ldhl	sp,	#6
      0011CC 7E                    3962 	ld	a, (hl)
      0011CD 93                    3963 	sub	a, e
      0011CE C2rF9r13              3964 	jp	NZ,00149$
      0011D1 23                    3965 	inc	hl
      0011D2 7E                    3966 	ld	a, (hl)
      0011D3 92                    3967 	sub	a, d
      0011D4 C2rF9r13              3968 	jp	NZ,00149$
      0011D7                       3969 00153$:
                                   3970 ;src/main.c:579: pile_append_cursor_stack(pile);
      0011D7 C5                    3971 	push	bc
      0011D8 CDrB5r0E              3972 	call	_pile_append_cursor_stack
      0011DB E8 02                 3973 	add	sp, #2
                                   3974 ;src/main.c:580: score--;
      0011DD 21r6Er01              3975 	ld	hl, #_score + 1
      0011E0 2B                    3976 	dec	hl
      0011E1 2A                    3977 	ld	a, (hl+)
      0011E2 5F                    3978 	ld	e, a
      0011E3 56                    3979 	ld	d, (hl)
      0011E4 1B                    3980 	dec	de
      0011E5 2B                    3981 	dec	hl
      0011E6 7B                    3982 	ld	a, e
      0011E7 22                    3983 	ld	(hl+), a
      0011E8 72                    3984 	ld	(hl), d
                                   3985 ;src/main.c:810: cursor_place_stack();
      0011E9 C3rF9r13              3986 	jp	00149$
      0011EC                       3987 00147$:
                                   3988 ;src/main.c:813: flags |= FLAG_REDRAW_CURSOR;
      0011EC 7B                    3989 	ld	a, e
      0011ED F6 01                 3990 	or	a, #0x01
      0011EF EAr6Br01              3991 	ld	(#_flags),a
                                   3992 ;src/main.c:814: if (new_input & J_DOWN) {
      0011F2 F8 01                 3993 	ldhl	sp,	#1
      0011F4 CB 5E                 3994 	bit	3, (hl)
      0011F6 28 3D                 3995 	jr	Z, 00137$
                                   3996 ;src/main.c:815: if (cursor.pile_idx == PILE_IDX_DECK)
      0011F8 21r8Ar01              3997 	ld	hl, #_cursor + 6
      0011FB 46                    3998 	ld	b, (hl)
      0011FC 78                    3999 	ld	a, b
                                   4000 ;src/main.c:816: cursor.pile_idx = 0;
      0011FD D6 0A                 4001 	sub	a,#0x0a
      0011FF 20 04                 4002 	jr	NZ, 00120$
      001201 77                    4003 	ld	(hl),a
      001202 C3r82r12              4004 	jp	00138$
      001205                       4005 00120$:
                                   4006 ;src/main.c:817: else if (cursor.height + 1u < piles[cursor.pile_idx].height)
      001205 21r8Br01              4007 	ld	hl, #(_cursor + 0x0007)
      001208 4E                    4008 	ld	c, (hl)
      001209 59                    4009 	ld	e, c
      00120A 16 00                 4010 	ld	d, #0x00
      00120C 13                    4011 	inc	de
      00120D F8 04                 4012 	ldhl	sp,	#4
      00120F 7B                    4013 	ld	a, e
      001210 22                    4014 	ld	(hl+), a
      001211 72                    4015 	ld	(hl), d
      001212 58                    4016 	ld	e, b
      001213 16 00                 4017 	ld	d, #0x00
      001215 6B                    4018 	ld	l, e
      001216 62                    4019 	ld	h, d
      001217 29                    4020 	add	hl, hl
      001218 29                    4021 	add	hl, hl
      001219 19                    4022 	add	hl, de
      00121A 11r38r01              4023 	ld	de, #_piles
      00121D 19                    4024 	add	hl, de
      00121E 23                    4025 	inc	hl
      00121F 23                    4026 	inc	hl
      001220 23                    4027 	inc	hl
      001221 23                    4028 	inc	hl
      001222 5E                    4029 	ld	e, (hl)
      001223 06 00                 4030 	ld	b, #0x00
      001225 F8 04                 4031 	ldhl	sp,	#4
      001227 7E                    4032 	ld	a, (hl)
      001228 93                    4033 	sub	a, e
      001229 23                    4034 	inc	hl
      00122A 7E                    4035 	ld	a, (hl)
      00122B 98                    4036 	sbc	a, b
      00122C 30 54                 4037 	jr	NC, 00138$
                                   4038 ;src/main.c:818: cursor.height++;
      00122E 0C                    4039 	inc	c
      00122F 21r8Br01              4040 	ld	hl, #(_cursor + 0x0007)
      001232 71                    4041 	ld	(hl), c
      001233 18 4D                 4042 	jr	00138$
      001235                       4043 00137$:
                                   4044 ;src/main.c:819: } else if (new_input & J_UP) {
      001235 F8 01                 4045 	ldhl	sp,	#1
      001237 CB 56                 4046 	bit	2, (hl)
      001239 28 1C                 4047 	jr	Z, 00134$
                                   4048 ;src/main.c:820: if (cursor.height == 0)
      00123B FAr8Br01              4049 	ld	a, (#(_cursor + 0x0007) + 0)
      00123E F8 05                 4050 	ldhl	sp,	#5
      001240 77                    4051 	ld	(hl), a
      001241 F8 05                 4052 	ldhl	sp,	#5
      001243 7E                    4053 	ld	a, (hl)
      001244 B7                    4054 	or	a, a
      001245 20 07                 4055 	jr	NZ, 00123$
                                   4056 ;src/main.c:821: cursor.pile_idx = PILE_IDX_DECK;
      001247 21r8Ar01              4057 	ld	hl, #(_cursor + 0x0006)
      00124A 36 0A                 4058 	ld	(hl), #0x0a
      00124C 18 34                 4059 	jr	00138$
      00124E                       4060 00123$:
                                   4061 ;src/main.c:823: cursor.height--;
      00124E F8 05                 4062 	ldhl	sp,	#5
      001250 7E                    4063 	ld	a, (hl)
      001251 3D                    4064 	dec	a
      001252 EAr8Br01              4065 	ld	(#(_cursor + 0x0007)),a
      001255 18 2B                 4066 	jr	00138$
      001257                       4067 00134$:
                                   4068 ;src/main.c:825: && cursor.pile_idx != 0
      001257 F8 03                 4069 	ldhl	sp,	#3
      001259 3A                    4070 	ld	a, (hl-)
      00125A B6                    4071 	or	a, (hl)
      00125B 28 12                 4072 	jr	Z, 00129$
      00125D 01r8Ar01              4073 	ld	bc, #_cursor+6
      001260 0A                    4074 	ld	a, (bc)
      001261 B7                    4075 	or	a, a
      001262 28 0B                 4076 	jr	Z, 00129$
                                   4077 ;src/main.c:826: && cursor.pile_idx != PILE_IDX_DECK) {
      001264 FE 0A                 4078 	cp	a, #0x0a
      001266 28 07                 4079 	jr	Z, 00129$
                                   4080 ;src/main.c:827: cursor.pile_idx--;
      001268 3D                    4081 	dec	a
      001269 02                    4082 	ld	(bc), a
                                   4083 ;src/main.c:828: cursor_adjust_height();
      00126A CDrA5r09              4084 	call	_cursor_adjust_height
      00126D 18 13                 4085 	jr	00138$
      00126F                       4086 00129$:
                                   4087 ;src/main.c:830: && cursor.pile_idx < PILE_IDX_DECK - 1u) {
      00126F F8 05                 4088 	ldhl	sp,	#5
      001271 3A                    4089 	ld	a, (hl-)
      001272 B6                    4090 	or	a, (hl)
      001273 28 0D                 4091 	jr	Z, 00138$
      001275 01r8Ar01              4092 	ld	bc, #_cursor+6
      001278 0A                    4093 	ld	a, (bc)
      001279 FE 09                 4094 	cp	a, #0x09
      00127B 30 05                 4095 	jr	NC, 00138$
                                   4096 ;src/main.c:831: cursor.pile_idx++;
      00127D 3C                    4097 	inc	a
      00127E 02                    4098 	ld	(bc), a
                                   4099 ;src/main.c:832: cursor_adjust_height();
      00127F CDrA5r09              4100 	call	_cursor_adjust_height
      001282                       4101 00138$:
                                   4102 ;src/main.c:835: && ~flags & FLAG_PLAYING_ANIMATION) {
      001282 F8 07                 4103 	ldhl	sp,	#7
      001284 3A                    4104 	ld	a, (hl-)
      001285 B6                    4105 	or	a, (hl)
      001286 CArF9r13              4106 	jp	Z, 00149$
      001289 FAr6Br01              4107 	ld	a, (#_flags)
      00128C 06 00                 4108 	ld	b, #0x00
      00128E 2F                    4109 	cpl
      00128F 4F                    4110 	ld	c, a
      001290 78                    4111 	ld	a, b
      001291 2F                    4112 	cpl
      001292 CB 51                 4113 	bit	2, c
      001294 CArF9r13              4114 	jp	Z,00149$
                                   4115 ;src/main.c:836: if (cursor.pile_idx == PILE_IDX_DECK && top_card_idx != 104u)
      001297 21r8Ar01              4116 	ld	hl, #(_cursor + 0x0006)
      00129A 4E                    4117 	ld	c, (hl)
      00129B 79                    4118 	ld	a, c
      00129C D6 0A                 4119 	sub	a, #0x0a
      00129E C2r38r13              4120 	jp	NZ,00140$
      0012A1 FAr6Ar01              4121 	ld	a, (#_top_card_idx)
      0012A4 D6 68                 4122 	sub	a, #0x68
      0012A6 CAr38r13              4123 	jp	Z,00140$
                                   4124 ;src/main.c:704: Pile *pile = IDX_PTR(piles, 0);
      0012A9 01r38r01              4125 	ld	bc, #_piles
                                   4126 ;src/main.c:707: for (i = 0; i < 10u; i++) {
      0012AC 1E 00                 4127 	ld	e, #0x00
      0012AE                       4128 00171$:
                                   4129 ;src/main.c:708: if (!pile->height)
      0012AE 21 04 00              4130 	ld	hl, #0x0004
      0012B1 09                    4131 	add	hl, bc
      0012B2 7E                    4132 	ld	a, (hl)
      0012B3 B7                    4133 	or	a, a
      0012B4 CArF9r13              4134 	jp	Z, 00149$
                                   4135 ;src/main.c:710: pile++;
      0012B7 03                    4136 	inc	bc
      0012B8 03                    4137 	inc	bc
      0012B9 03                    4138 	inc	bc
      0012BA 03                    4139 	inc	bc
      0012BB 03                    4140 	inc	bc
                                   4141 ;src/main.c:707: for (i = 0; i < 10u; i++) {
      0012BC 1C                    4142 	inc	e
      0012BD 7B                    4143 	ld	a, e
      0012BE D6 0A                 4144 	sub	a, #0x0a
      0012C0 38 EC                 4145 	jr	C, 00171$
                                   4146 ;src/main.c:713: pile = IDX_PTR(piles, 0);
      0012C2 F8 05                 4147 	ldhl	sp,	#5
      0012C4 3Er38                 4148 	ld	a, #<(_piles)
      0012C6 22                    4149 	ld	(hl+), a
      0012C7 36s01                 4150 	ld	(hl), #>(_piles)
                                   4151 ;src/main.c:714: Card *deck_top = IDX_PTR(deck, top_card_idx);
      0012C9 21r6Ar01              4152 	ld	hl, #_top_card_idx
      0012CC 4E                    4153 	ld	c, (hl)
      0012CD 06 00                 4154 	ld	b, #0x00
      0012CF 69                    4155 	ld	l, c
      0012D0 60                    4156 	ld	h, b
      0012D1 29                    4157 	add	hl, hl
      0012D2 09                    4158 	add	hl, bc
      0012D3 01r00r00              4159 	ld	bc,#_deck
      0012D6 09                    4160 	add	hl,bc
      0012D7 4D                    4161 	ld	c, l
      0012D8 44                    4162 	ld	b, h
                                   4163 ;src/main.c:715: top_card_idx += 10u;
      0012D9 21r6Ar01              4164 	ld	hl, #_top_card_idx
      0012DC 7E                    4165 	ld	a, (hl)
      0012DD C6 0A                 4166 	add	a, #0x0a
      0012DF 77                    4167 	ld	(hl), a
                                   4168 ;src/main.c:718: for (i = 0; i < 10u; i++) {
      0012E0 F8 07                 4169 	ldhl	sp,	#7
      0012E2 36 0A                 4170 	ld	(hl), #0x0a
      0012E4                       4171 00175$:
                                   4172 ;src/main.c:719: pile->top->next_card = deck_top;
                                   4173 ;c
      0012E4 F8 05                 4174 	ldhl	sp,#5
      0012E6 2A                    4175 	ld	a, (hl+)
      0012E7 5F                    4176 	ld	e, a
      0012E8 56                    4177 	ld	d, (hl)
      0012E9 21 02 00              4178 	ld	hl, #0x0002
      0012EC 19                    4179 	add	hl, de
      0012ED E5                    4180 	push	hl
      0012EE 7D                    4181 	ld	a, l
      0012EF F8 05                 4182 	ldhl	sp,	#5
      0012F1 77                    4183 	ld	(hl), a
      0012F2 E1                    4184 	pop	hl
      0012F3 7C                    4185 	ld	a, h
      0012F4 F8 04                 4186 	ldhl	sp,	#4
      0012F6 32                    4187 	ld	(hl-), a
      0012F7 2A                    4188 	ld	a, (hl+)
      0012F8 5F                    4189 	ld	e, a
      0012F9 56                    4190 	ld	d, (hl)
      0012FA 1A                    4191 	ld	a, (de)
      0012FB 6F                    4192 	ld	l, a
      0012FC 13                    4193 	inc	de
      0012FD 1A                    4194 	ld	a, (de)
      0012FE 67                    4195 	ld	h, a
      0012FF 79                    4196 	ld	a, c
      001300 22                    4197 	ld	(hl+), a
      001301 70                    4198 	ld	(hl), b
                                   4199 ;src/main.c:720: pile->top = deck_top;
      001302 F8 03                 4200 	ldhl	sp,	#3
      001304 2A                    4201 	ld	a, (hl+)
      001305 66                    4202 	ld	h, (hl)
      001306 6F                    4203 	ld	l, a
      001307 79                    4204 	ld	a, c
      001308 22                    4205 	ld	(hl+), a
      001309 70                    4206 	ld	(hl), b
                                   4207 ;src/main.c:721: pile->height++;
                                   4208 ;c
      00130A F8 05                 4209 	ldhl	sp,#5
      00130C 2A                    4210 	ld	a, (hl+)
      00130D 5F                    4211 	ld	e, a
      00130E 56                    4212 	ld	d, (hl)
      00130F 21 04 00              4213 	ld	hl, #0x0004
      001312 19                    4214 	add	hl, de
      001313 5D                    4215 	ld	e, l
      001314 54                    4216 	ld	d, h
      001315 1A                    4217 	ld	a, (de)
      001316 3C                    4218 	inc	a
      001317 12                    4219 	ld	(de), a
                                   4220 ;src/main.c:722: deck_top++;
      001318 03                    4221 	inc	bc
      001319 03                    4222 	inc	bc
      00131A 03                    4223 	inc	bc
                                   4224 ;src/main.c:723: pile++;
                                   4225 ;c
      00131B F8 05                 4226 	ldhl	sp,#5
      00131D 2A                    4227 	ld	a, (hl+)
      00131E 5F                    4228 	ld	e, a
      00131F 56                    4229 	ld	d, (hl)
      001320 21 05 00              4230 	ld	hl, #0x0005
      001323 19                    4231 	add	hl, de
      001324 E5                    4232 	push	hl
      001325 7D                    4233 	ld	a, l
      001326 F8 07                 4234 	ldhl	sp,	#7
      001328 77                    4235 	ld	(hl), a
      001329 E1                    4236 	pop	hl
      00132A 7C                    4237 	ld	a, h
      00132B F8 06                 4238 	ldhl	sp,	#6
      00132D 22                    4239 	ld	(hl+), a
                                   4240 ;src/main.c:718: for (i = 0; i < 10u; i++) {
      00132E 35                    4241 	dec	(hl)
      00132F 7E                    4242 	ld	a, (hl)
      001330 20 B2                 4243 	jr	NZ, 00175$
                                   4244 ;src/main.c:726: dynamic_metasprite_deal();
      001332 CDr73r08              4245 	call	_dynamic_metasprite_deal
                                   4246 ;src/main.c:837: deal();
      001335 C3rF9r13              4247 	jp	00149$
      001338                       4248 00140$:
                                   4249 ;src/main.c:549: Pile *pile = IDX_PTR(piles, cursor.pile_idx);
      001338 06 00                 4250 	ld	b, #0x00
      00133A 69                    4251 	ld	l, c
      00133B 60                    4252 	ld	h, b
      00133C 29                    4253 	add	hl, hl
      00133D 29                    4254 	add	hl, hl
      00133E 09                    4255 	add	hl, bc
      00133F 3Er38                 4256 	ld	a, #<(_piles)
      001341 85                    4257 	add	a, l
      001342 4F                    4258 	ld	c, a
      001343 3Es01                 4259 	ld	a, #>(_piles)
      001345 8C                    4260 	adc	a, h
      001346 F8 03                 4261 	ldhl	sp,	#3
      001348 71                    4262 	ld	(hl), c
      001349 23                    4263 	inc	hl
                                   4264 ;src/main.c:550: Card *top = pile->base;
      00134A 32                    4265 	ld	(hl-), a
      00134B 2A                    4266 	ld	a, (hl+)
      00134C 5F                    4267 	ld	e, a
      00134D 56                    4268 	ld	d, (hl)
      00134E 1A                    4269 	ld	a, (de)
      00134F 23                    4270 	inc	hl
      001350 23                    4271 	inc	hl
      001351 22                    4272 	ld	(hl+), a
      001352 13                    4273 	inc	de
      001353 1A                    4274 	ld	a, (de)
      001354 77                    4275 	ld	(hl), a
                                   4276 ;src/main.c:551: for (i = 1; i < cursor.height; i++)
      001355 06 01                 4277 	ld	b, #0x01
      001357                       4278 00177$:
      001357 21r8Br01              4279 	ld	hl, #(_cursor + 0x0007)
      00135A 4E                    4280 	ld	c, (hl)
      00135B 78                    4281 	ld	a, b
      00135C 91                    4282 	sub	a, c
      00135D 30 0E                 4283 	jr	NC, 00163$
                                   4284 ;src/main.c:552: top = top->next_card;
      00135F F8 06                 4285 	ldhl	sp,#6
      001361 2A                    4286 	ld	a, (hl+)
      001362 5F                    4287 	ld	e, a
      001363 56                    4288 	ld	d, (hl)
      001364 1A                    4289 	ld	a, (de)
      001365 2B                    4290 	dec	hl
      001366 22                    4291 	ld	(hl+), a
      001367 13                    4292 	inc	de
      001368 1A                    4293 	ld	a, (de)
      001369 77                    4294 	ld	(hl), a
                                   4295 ;src/main.c:551: for (i = 1; i < cursor.height; i++)
      00136A 04                    4296 	inc	b
      00136B 18 EA                 4297 	jr	00177$
      00136D                       4298 00163$:
                                   4299 ;src/main.c:553: Card *stack = cursor.height ? top->next_card : top;
      00136D 79                    4300 	ld	a, c
      00136E B7                    4301 	or	a, a
      00136F 28 0C                 4302 	jr	Z, 00181$
      001371 F8 06                 4303 	ldhl	sp,#6
      001373 2A                    4304 	ld	a, (hl+)
      001374 5F                    4305 	ld	e, a
      001375 56                    4306 	ld	d, (hl)
      001376 1A                    4307 	ld	a, (de)
      001377 4F                    4308 	ld	c, a
      001378 13                    4309 	inc	de
      001379 1A                    4310 	ld	a, (de)
      00137A 47                    4311 	ld	b, a
      00137B 18 05                 4312 	jr	00182$
      00137D                       4313 00181$:
      00137D F8 06                 4314 	ldhl	sp,#6
      00137F 2A                    4315 	ld	a, (hl+)
      001380 4F                    4316 	ld	c, a
      001381 46                    4317 	ld	b, (hl)
      001382                       4318 00182$:
                                   4319 ;src/main.c:554: if (!(VISIBLE(stack->data) && is_stack_coherent(stack)))
      001382 59                    4320 	ld	e, c
      001383 50                    4321 	ld	d, b
      001384 13                    4322 	inc	de
      001385 13                    4323 	inc	de
      001386 1A                    4324 	ld	a, (de)
      001387 CB 77                 4325 	bit	6, a
      001389 28 6E                 4326 	jr	Z, 00149$
      00138B C5                    4327 	push	bc
      00138C C5                    4328 	push	bc
      00138D CDrF1r0D              4329 	call	_is_stack_coherent
      001390 E8 02                 4330 	add	sp, #2
      001392 7B                    4331 	ld	a, e
      001393 C1                    4332 	pop	bc
      001394 B7                    4333 	or	a, a
      001395 28 62                 4334 	jr	Z, 00149$
                                   4335 ;src/main.c:557: cursor.held_card = stack;
      001397 21r84r01              4336 	ld	hl, #_cursor
      00139A 79                    4337 	ld	a, c
      00139B 22                    4338 	ld	(hl+), a
      00139C 70                    4339 	ld	(hl), b
                                   4340 ;src/main.c:558: cursor.hand_pile_idx = cursor.pile_idx;
      00139D FAr8Ar01              4341 	ld	a, (#(_cursor + 0x0006) + 0)
      0013A0 EAr89r01              4342 	ld	(#(_cursor + 0x0005)),a
                                   4343 ;src/main.c:559: cursor.held_stack_size = pile->height - cursor.height;
                                   4344 ;c
      0013A3 F8 03                 4345 	ldhl	sp,#3
      0013A5 2A                    4346 	ld	a, (hl+)
      0013A6 5F                    4347 	ld	e, a
      0013A7 56                    4348 	ld	d, (hl)
      0013A8 21 04 00              4349 	ld	hl, #0x0004
      0013AB 19                    4350 	add	hl, de
      0013AC 4D                    4351 	ld	c, l
      0013AD 44                    4352 	ld	b, h
      0013AE 0A                    4353 	ld	a, (bc)
      0013AF 21r8Br01              4354 	ld	hl, #(_cursor + 0x0007)
      0013B2 6E                    4355 	ld	l, (hl)
      0013B3 95                    4356 	sub	a, l
      0013B4 EAr88r01              4357 	ld	(#(_cursor + 0x0004)),a
                                   4358 ;src/main.c:560: pile->height = cursor.height;
      0013B7 FAr8Br01              4359 	ld	a, (#(_cursor + 0x0007) + 0)
      0013BA 02                    4360 	ld	(bc), a
                                   4361 ;src/main.c:561: if (cursor.height) {
      0013BB FAr8Br01              4362 	ld	a, (#(_cursor + 0x0007) + 0)
      0013BE F8 05                 4363 	ldhl	sp,	#5
      0013C0 77                    4364 	ld	(hl), a
                                   4365 ;src/main.c:562: pile->top = top;
      0013C1 F8 03                 4366 	ldhl	sp,#3
      0013C3 2A                    4367 	ld	a, (hl+)
      0013C4 4F                    4368 	ld	c, a
      0013C5 46                    4369 	ld	b, (hl)
      0013C6 03                    4370 	inc	bc
      0013C7 03                    4371 	inc	bc
                                   4372 ;src/main.c:564: cursor.card_to_show = top;
                                   4373 ;src/main.c:561: if (cursor.height) {
      0013C8 23                    4374 	inc	hl
      0013C9 7E                    4375 	ld	a, (hl)
      0013CA B7                    4376 	or	a, a
      0013CB 28 1A                 4377 	jr	Z, 00168$
                                   4378 ;src/main.c:562: pile->top = top;
      0013CD 23                    4379 	inc	hl
      0013CE 2A                    4380 	ld	a, (hl+)
      0013CF 02                    4381 	ld	(bc), a
      0013D0 03                    4382 	inc	bc
      0013D1 7E                    4383 	ld	a, (hl)
      0013D2 02                    4384 	ld	(bc), a
                                   4385 ;src/main.c:563: top->next_card = NULL;
      0013D3 2B                    4386 	dec	hl
      0013D4 2A                    4387 	ld	a, (hl+)
      0013D5 66                    4388 	ld	h, (hl)
      0013D6 6F                    4389 	ld	l, a
      0013D7 AF                    4390 	xor	a, a
      0013D8 22                    4391 	ld	(hl+), a
      0013D9 77                    4392 	ld	(hl), a
                                   4393 ;src/main.c:564: cursor.card_to_show = top;
      0013DA 11r86r01              4394 	ld	de, #(_cursor + 0x0002)
      0013DD F8 06                 4395 	ldhl	sp,	#6
      0013DF 7E                    4396 	ld	a, (hl)
      0013E0 12                    4397 	ld	(de), a
      0013E1 13                    4398 	inc	de
      0013E2 23                    4399 	inc	hl
      0013E3 7E                    4400 	ld	a, (hl)
      0013E4 12                    4401 	ld	(de), a
      0013E5 18 12                 4402 	jr	00149$
      0013E7                       4403 00168$:
                                   4404 ;src/main.c:566: pile->base = NULL;
      0013E7 F8 03                 4405 	ldhl	sp,	#3
      0013E9 2A                    4406 	ld	a, (hl+)
      0013EA 66                    4407 	ld	h, (hl)
      0013EB 6F                    4408 	ld	l, a
      0013EC AF                    4409 	xor	a, a
      0013ED 22                    4410 	ld	(hl+), a
      0013EE 77                    4411 	ld	(hl), a
                                   4412 ;src/main.c:567: pile->top = NULL;
      0013EF AF                    4413 	xor	a, a
      0013F0 02                    4414 	ld	(bc), a
      0013F1 03                    4415 	inc	bc
      0013F2 02                    4416 	ld	(bc), a
                                   4417 ;src/main.c:568: cursor.card_to_show = NULL;
      0013F3 21r86r01              4418 	ld	hl, #(_cursor + 0x0002)
      0013F6 AF                    4419 	xor	a, a
      0013F7 22                    4420 	ld	(hl+), a
      0013F8 77                    4421 	ld	(hl), a
                                   4422 ;src/main.c:843: }
      0013F9                       4423 00149$:
                                   4424 ;src/main.c:844: prev_input = input;
      0013F9 F8 00                 4425 	ldhl	sp,	#0
      0013FB 7E                    4426 	ld	a, (hl)
      0013FC EAr8Er01              4427 	ld	(#_input_process_prev_input_65536_296),a
                                   4428 ;src/main.c:845: }
      0013FF E8 08                 4429 	add	sp, #8
      001401 C9                    4430 	ret
                                   4431 ;src/main.c:847: void main(void)
                                   4432 ;	---------------------------------
                                   4433 ; Function main
                                   4434 ; ---------------------------------
      001402                       4435 _main::
      001402 E8 F6                 4436 	add	sp, #-10
                                   4437 ;src/main.c:849: font_init();
      001404 CDr00r00              4438 	call	_font_init
                                   4439 ;src/main.c:850: font_t font = font_load(font_min);
      001407 21r00r00              4440 	ld	hl, #_font_min
      00140A E5                    4441 	push	hl
      00140B CDr00r00              4442 	call	_font_load
      00140E E8 02                 4443 	add	sp, #2
                                   4444 ;src/main.c:851: font_set(font);
      001410 D5                    4445 	push	de
      001411 CDr00r00              4446 	call	_font_set
      001414 E8 02                 4447 	add	sp, #2
                                   4448 ;src/main.c:852: set_bkg_data(OFFSET_BKG_FONT_ADDON, N_FONT_ADDON, font_addon);
      001416 21r00r00              4449 	ld	hl, #_font_addon
      001419 E5                    4450 	push	hl
      00141A 11 25 01              4451 	ld	de, #0x0125
      00141D D5                    4452 	push	de
      00141E CDr00r00              4453 	call	_set_bkg_data
      001421 E8 04                 4454 	add	sp, #4
                                   4455 ;src/main.c:854: set_bkg_data(OFFSET_BKG_TITLE, N_TITLE, title_textures);
      001423 21r00r00              4456 	ld	hl, #_title_textures
      001426 E5                    4457 	push	hl
      001427 11 B4 30              4458 	ld	de, #0x30b4
      00142A D5                    4459 	push	de
      00142B CDr00r00              4460 	call	_set_bkg_data
      00142E E8 04                 4461 	add	sp, #4
                                   4462 ;src/main.c:855: set_bkg_data(OFFSET_BKG_CARD, N_CARD, card_textures);
      001430 21r00r00              4463 	ld	hl, #_card_textures
      001433 E5                    4464 	push	hl
      001434 11 80 34              4465 	ld	de, #0x3480
      001437 D5                    4466 	push	de
      001438 CDr00r00              4467 	call	_set_bkg_data
      00143B E8 04                 4468 	add	sp, #4
                                   4469 ;src/main.c:856: set_sprite_data(OFFSET_SPRITE_CURSOR, N_CURSOR, cursor_textures);
      00143D 21r00r00              4470 	ld	hl, #_cursor_textures
      001440 E5                    4471 	push	hl
      001441 11 01 08              4472 	ld	de, #0x0801
      001444 D5                    4473 	push	de
      001445 CDr00r00              4474 	call	_set_sprite_data
      001448 E8 04                 4475 	add	sp, #4
                                   4476 ;src/main.c:857: SHOW_BKG;
      00144A F0r00                 4477 	ldh	a, (_LCDC_REG+0)
      00144C F6 01                 4478 	or	a, #0x01
      00144E E0r00                 4479 	ldh	(_LCDC_REG+0),a
                                   4480 ;src/main.c:858: SHOW_SPRITES;
      001450 F0r00                 4481 	ldh	a, (_LCDC_REG+0)
      001452 F6 02                 4482 	or	a, #0x02
      001454 E0r00                 4483 	ldh	(_LCDC_REG+0),a
                                   4484 ;src/main.c:860: set_bkg_tiles(0, 14u, COPYRIGHT_LEN, 1u, copyright);
      001456 21r00r00              4485 	ld	hl, #_copyright
      001459 E5                    4486 	push	hl
      00145A 11 14 01              4487 	ld	de, #0x0114
      00145D D5                    4488 	push	de
      00145E 3E 0E                 4489 	ld	a, #0x0e
      001460 F5                    4490 	push	af
      001461 33                    4491 	inc	sp
      001462 AF                    4492 	xor	a, a
      001463 F5                    4493 	push	af
      001464 33                    4494 	inc	sp
      001465 CDr00r00              4495 	call	_set_bkg_tiles
      001468 E8 06                 4496 	add	sp, #6
                                   4497 ;src/main.c:367: dynamic_metasprite.src[0] = 72;
      00146A 21r6Fr01              4498 	ld	hl, #_dynamic_metasprite
      00146D 36 48                 4499 	ld	(hl), #0x48
      00146F 23                    4500 	inc	hl
      001470 36 00                 4501 	ld	(hl), #0x00
                                   4502 ;src/main.c:368: dynamic_metasprite.src[1] = -24;
      001472 21r71r01              4503 	ld	hl, #(_dynamic_metasprite + 0x0002)
      001475 36 E8                 4504 	ld	(hl), #0xe8
      001477 23                    4505 	inc	hl
      001478 36 FF                 4506 	ld	(hl), #0xff
                                   4507 ;src/main.c:369: dynamic_metasprite.dist[0] = -64;
      00147A 21r73r01              4508 	ld	hl, #(_dynamic_metasprite + 0x0004)
      00147D 36 C0                 4509 	ld	(hl), #0xc0
      00147F 23                    4510 	inc	hl
      001480 36 FF                 4511 	ld	(hl), #0xff
                                   4512 ;src/main.c:370: dynamic_metasprite.dist[1] = 40;
      001482 21r75r01              4513 	ld	hl, #(_dynamic_metasprite + 0x0006)
      001485 36 28                 4514 	ld	(hl), #0x28
      001487 23                    4515 	inc	hl
      001488 36 00                 4516 	ld	(hl), #0x00
                                   4517 ;src/main.c:371: dynamic_metasprite.target_frames = TARGET_FRAMES_SPLASH_SCREEN;
      00148A 21r77r01              4518 	ld	hl, #(_dynamic_metasprite + 0x0008)
      00148D 36 20                 4519 	ld	(hl), #0x20
                                   4520 ;src/main.c:372: dynamic_metasprite.elapsed_frames = 0;
      00148F 21r78r01              4521 	ld	hl, #(_dynamic_metasprite + 0x0009)
      001492 36 00                 4522 	ld	(hl), #0x00
                                   4523 ;src/main.c:373: dynamic_metasprite.metasprite = metasprite_sequential_2x3;
      001494 21r79r01              4524 	ld	hl, #(_dynamic_metasprite + 0x000a)
      001497 36r00                 4525 	ld	(hl), #<(_metasprite_sequential_2x3)
      001499 23                    4526 	inc	hl
      00149A 36s00                 4527 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   4528 ;src/main.c:374: dynamic_metasprite.metasprite_offset = OFFSET_SPRITE_TITLE + OFFSET_TITLE_S;
      00149C 21r7Br01              4529 	ld	hl, #(_dynamic_metasprite + 0x000c)
      00149F 36 B4                 4530 	ld	(hl), #0xb4
                                   4531 ;src/main.c:375: dynamic_metasprite.data[0] = 0;
      0014A1 21r7Cr01              4532 	ld	hl, #(_dynamic_metasprite + 0x000d)
      0014A4 36 00                 4533 	ld	(hl), #0x00
                                   4534 ;src/main.c:376: dynamic_metasprite.callback = &dynamic_metasprite_splash_screen_callback;
      0014A6 21r82r01              4535 	ld	hl, #(_dynamic_metasprite + 0x0013)
      0014A9 36rD1                 4536 	ld	(hl), #<(_dynamic_metasprite_splash_screen_callback)
      0014AB 23                    4537 	inc	hl
      0014AC 36s02                 4538 	ld	(hl), #>(_dynamic_metasprite_splash_screen_callback)
                                   4539 ;src/main.c:377: flags |= FLAG_PLAYING_ANIMATION;
      0014AE 21r6Br01              4540 	ld	hl, #_flags
      0014B1 7E                    4541 	ld	a, (hl)
      0014B2 F6 04                 4542 	or	a, #0x04
      0014B4 77                    4543 	ld	(hl), a
                                   4544 ;src/main.c:864: while (1) {
      0014B5                       4545 00104$:
                                   4546 ;src/main.c:786: UINT8 input = joypad();
      0014B5 CDr00r00              4547 	call	_joypad
      0014B8 F8 02                 4548 	ldhl	sp,	#2
      0014BA 73                    4549 	ld	(hl), e
                                   4550 ;src/main.c:787: UINT8 new_input = input & ~prev_input;
      0014BB FAr8Fr01              4551 	ld	a, (#_main_prev_input_327681_339)
      0014BE 2F                    4552 	cpl
      0014BF F8 02                 4553 	ldhl	sp,	#2
      0014C1 A6                    4554 	and	a, (hl)
      0014C2 2B                    4555 	dec	hl
      0014C3 77                    4556 	ld	(hl), a
                                   4557 ;src/main.c:788: switch (flags & FLAG_GAME_STATE) {
      0014C4 FAr6Br01              4558 	ld	a, (#_flags)
      0014C7 E6 18                 4559 	and	a, #0x18
      0014C9 F8 08                 4560 	ldhl	sp,	#8
      0014CB 77                    4561 	ld	(hl), a
      0014CC AF                    4562 	xor	a, a
      0014CD 23                    4563 	inc	hl
      0014CE 32                    4564 	ld	(hl-), a
      0014CF 7E                    4565 	ld	a, (hl)
      0014D0 B7                    4566 	or	a, a
      0014D1 23                    4567 	inc	hl
      0014D2 B6                    4568 	or	a, (hl)
      0014D3 28 0C                 4569 	jr	Z, 00112$
      0014D5 F8 08                 4570 	ldhl	sp,	#8
      0014D7 7E                    4571 	ld	a, (hl)
      0014D8 D6 10                 4572 	sub	a, #0x10
      0014DA 23                    4573 	inc	hl
      0014DB B6                    4574 	or	a, (hl)
      0014DC 28 33                 4575 	jr	Z, 00175$
      0014DE C3r3Fr18              4576 	jp	00176$
                                   4577 ;src/main.c:789: case FLAG_GAME_STATE_START:
      0014E1                       4578 00112$:
                                   4579 ;src/main.c:790: if (new_input) {
      0014E1 F8 01                 4580 	ldhl	sp,	#1
      0014E3 7E                    4581 	ld	a, (hl)
      0014E4 B7                    4582 	or	a, a
      0014E5 CAr3Fr18              4583 	jp	Z, 00176$
                                   4584 ;src/main.c:791: flags &= ~FLAG_GAME_STATE;
      0014E8 21r6Br01              4585 	ld	hl, #_flags
      0014EB 7E                    4586 	ld	a, (hl)
      0014EC E6 E7                 4587 	and	a, #0xe7
      0014EE 77                    4588 	ld	(hl), a
                                   4589 ;src/main.c:792: flags |= FLAG_GAME_STATE_INGAME;
      0014EF 7E                    4590 	ld	a, (hl)
      0014F0 F6 10                 4591 	or	a, #0x10
      0014F2 77                    4592 	ld	(hl), a
                                   4593 ;src/main.c:793: if (flags & FLAG_PLAYING_ANIMATION)
      0014F3 CB 56                 4594 	bit	2, (hl)
      0014F5 28 03                 4595 	jr	Z, 00108$
                                   4596 ;src/main.c:794: dynamic_metasprite_end_animation();
      0014F7 CDrBDr02              4597 	call	_dynamic_metasprite_end_animation
      0014FA                       4598 00108$:
                                   4599 ;src/main.c:777: initrand(DIV_REG);
      0014FA F0r00                 4600 	ldh	a, (_DIV_REG+0)
      0014FC 4F                    4601 	ld	c, a
      0014FD 06 00                 4602 	ld	b, #0x00
      0014FF C5                    4603 	push	bc
      001500 CDr00r00              4604 	call	_initrand
      001503 E8 02                 4605 	add	sp, #2
                                   4606 ;src/main.c:778: init_deck();
      001505 CDrF3r0B              4607 	call	_init_deck
                                   4608 ;src/main.c:779: clear_bkg();
      001508 CDr8Er01              4609 	call	_clear_bkg
                                   4610 ;src/main.c:780: draw_bkg_game();
      00150B CDr18r02              4611 	call	_draw_bkg_game
                                   4612 ;src/main.c:797: break;
      00150E C3r3Fr18              4613 	jp	00176$
                                   4614 ;src/main.c:798: case FLAG_GAME_STATE_INGAME:
      001511                       4615 00175$:
                                   4616 ;src/main.c:799: if (cursor.held_card) {
      001511 21r84r01              4617 	ld	hl, #_cursor
      001514 2A                    4618 	ld	a, (hl+)
      001515 4F                    4619 	ld	c, a
      001516 46                    4620 	ld	b, (hl)
                                   4621 ;src/main.c:377: flags |= FLAG_PLAYING_ANIMATION;
      001517 FAr6Br01              4622 	ld	a, (#_flags)
      00151A F8 05                 4623 	ldhl	sp,	#5
      00151C 77                    4624 	ld	(hl), a
                                   4625 ;src/main.c:802: && cursor.hand_pile_idx != 0) {
      00151D F8 01                 4626 	ldhl	sp,	#1
      00151F 7E                    4627 	ld	a, (hl)
      001520 E6 02                 4628 	and	a, #0x02
      001522 F8 06                 4629 	ldhl	sp,	#6
      001524 77                    4630 	ld	(hl), a
      001525 AF                    4631 	xor	a, a
      001526 23                    4632 	inc	hl
      001527 77                    4633 	ld	(hl), a
                                   4634 ;src/main.c:805: && cursor.hand_pile_idx < 9) {
      001528 F8 01                 4635 	ldhl	sp,	#1
      00152A 7E                    4636 	ld	a, (hl)
      00152B E6 01                 4637 	and	a, #0x01
      00152D F8 08                 4638 	ldhl	sp,	#8
      00152F 77                    4639 	ld	(hl), a
      001530 AF                    4640 	xor	a, a
      001531 23                    4641 	inc	hl
      001532 77                    4642 	ld	(hl), a
                                   4643 ;src/main.c:809: && ~flags & FLAG_PLAYING_ANIMATION) {
      001533 F8 01                 4644 	ldhl	sp,	#1
      001535 7E                    4645 	ld	a, (hl)
      001536 E6 10                 4646 	and	a, #0x10
      001538 23                    4647 	inc	hl
      001539 23                    4648 	inc	hl
      00153A 77                    4649 	ld	(hl), a
      00153B AF                    4650 	xor	a, a
      00153C 23                    4651 	inc	hl
      00153D 77                    4652 	ld	(hl), a
                                   4653 ;src/main.c:799: if (cursor.held_card) {
      00153E 78                    4654 	ld	a, b
      00153F B1                    4655 	or	a, c
      001540 CArF4r15              4656 	jp	Z, 00173$
                                   4657 ;src/main.c:800: flags |= FLAG_REDRAW_HAND;
      001543 23                    4658 	inc	hl
      001544 7E                    4659 	ld	a, (hl)
      001545 F6 02                 4660 	or	a, #0x02
      001547 EAr6Br01              4661 	ld	(#_flags),a
                                   4662 ;src/main.c:802: && cursor.hand_pile_idx != 0) {
      00154A F8 07                 4663 	ldhl	sp,	#7
      00154C 3A                    4664 	ld	a, (hl-)
      00154D B6                    4665 	or	a, (hl)
      00154E 28 0B                 4666 	jr	Z, 00118$
      001550 01r89r01              4667 	ld	bc, #_cursor+5
      001553 0A                    4668 	ld	a, (bc)
      001554 B7                    4669 	or	a, a
      001555 28 04                 4670 	jr	Z, 00118$
                                   4671 ;src/main.c:803: cursor.hand_pile_idx--;
      001557 3D                    4672 	dec	a
      001558 02                    4673 	ld	(bc), a
      001559 18 10                 4674 	jr	00119$
      00155B                       4675 00118$:
                                   4676 ;src/main.c:805: && cursor.hand_pile_idx < 9) {
      00155B F8 09                 4677 	ldhl	sp,	#9
      00155D 3A                    4678 	ld	a, (hl-)
      00155E B6                    4679 	or	a, (hl)
      00155F 28 0A                 4680 	jr	Z, 00119$
      001561 01r89r01              4681 	ld	bc, #_cursor+5
      001564 0A                    4682 	ld	a, (bc)
      001565 FE 09                 4683 	cp	a, #0x09
      001567 30 02                 4684 	jr	NC, 00119$
                                   4685 ;src/main.c:806: cursor.hand_pile_idx++;
      001569 3C                    4686 	inc	a
      00156A 02                    4687 	ld	(bc), a
      00156B                       4688 00119$:
                                   4689 ;src/main.c:809: && ~flags & FLAG_PLAYING_ANIMATION) {
      00156B F8 04                 4690 	ldhl	sp,	#4
      00156D 3A                    4691 	ld	a, (hl-)
      00156E B6                    4692 	or	a, (hl)
      00156F CAr3Fr18              4693 	jp	Z, 00176$
      001572 FAr6Br01              4694 	ld	a, (#_flags)
      001575 06 00                 4695 	ld	b, #0x00
      001577 2F                    4696 	cpl
      001578 4F                    4697 	ld	c, a
      001579 78                    4698 	ld	a, b
      00157A 2F                    4699 	cpl
      00157B CB 51                 4700 	bit	2, c
      00157D CAr3Fr18              4701 	jp	Z,00176$
                                   4702 ;src/main.c:574: Pile *pile = IDX_PTR(piles, cursor.hand_pile_idx);
      001580 01r38r01              4703 	ld	bc, #_piles+0
      001583 FAr89r01              4704 	ld	a, (#(_cursor + 0x0005) + 0)
      001586 F8 09                 4705 	ldhl	sp,	#9
      001588 77                    4706 	ld	(hl), a
      001589 F8 09                 4707 	ldhl	sp,	#9
      00158B 5E                    4708 	ld	e, (hl)
      00158C 16 00                 4709 	ld	d, #0x00
      00158E 6B                    4710 	ld	l, e
      00158F 62                    4711 	ld	h, d
      001590 29                    4712 	add	hl, hl
      001591 29                    4713 	add	hl, hl
      001592 19                    4714 	add	hl, de
      001593 09                    4715 	add	hl, bc
      001594 4D                    4716 	ld	c, l
      001595 44                    4717 	ld	b, h
                                   4718 ;src/main.c:575: if (cursor.hand_pile_idx == cursor.pile_idx) {
      001596 21r8Ar01              4719 	ld	hl, #_cursor + 6
      001599 5E                    4720 	ld	e, (hl)
      00159A F8 09                 4721 	ldhl	sp,	#9
      00159C 7E                    4722 	ld	a, (hl)
      00159D 93                    4723 	sub	a, e
      00159E 20 09                 4724 	jr	NZ, 00125$
                                   4725 ;src/main.c:576: pile_append_cursor_stack(pile);
      0015A0 C5                    4726 	push	bc
      0015A1 CDrB5r0E              4727 	call	_pile_append_cursor_stack
      0015A4 E8 02                 4728 	add	sp, #2
      0015A6 C3r3Fr18              4729 	jp	00176$
      0015A9                       4730 00125$:
                                   4731 ;src/main.c:577: } else if (!pile->height
      0015A9 21 04 00              4732 	ld	hl, #0x0004
      0015AC 09                    4733 	add	hl, bc
      0015AD 7E                    4734 	ld	a, (hl)
      0015AE B7                    4735 	or	a, a
      0015AF 28 2E                 4736 	jr	Z, 00123$
                                   4737 ;src/main.c:578: || RANK(pile->top->data) == RANK(cursor.held_card->data) + 1u) {
      0015B1 69                    4738 	ld	l, c
      0015B2 60                    4739 	ld	h, b
      0015B3 23                    4740 	inc	hl
      0015B4 23                    4741 	inc	hl
      0015B5 2A                    4742 	ld	a, (hl+)
      0015B6 66                    4743 	ld	h, (hl)
      0015B7 6F                    4744 	ld	l, a
      0015B8 23                    4745 	inc	hl
      0015B9 23                    4746 	inc	hl
      0015BA 7E                    4747 	ld	a, (hl)
      0015BB E6 0F                 4748 	and	a, #0x0f
      0015BD F8 08                 4749 	ldhl	sp,	#8
      0015BF 77                    4750 	ld	(hl), a
      0015C0 AF                    4751 	xor	a, a
      0015C1 23                    4752 	inc	hl
      0015C2 77                    4753 	ld	(hl), a
      0015C3 21r84r01              4754 	ld	hl, #_cursor
      0015C6 2A                    4755 	ld	a, (hl+)
      0015C7 66                    4756 	ld	h, (hl)
      0015C8 6F                    4757 	ld	l, a
      0015C9 23                    4758 	inc	hl
      0015CA 23                    4759 	inc	hl
      0015CB 7E                    4760 	ld	a, (hl)
      0015CC E6 0F                 4761 	and	a, #0x0f
      0015CE 5F                    4762 	ld	e, a
      0015CF 16 00                 4763 	ld	d, #0x00
      0015D1 13                    4764 	inc	de
      0015D2 F8 08                 4765 	ldhl	sp,	#8
      0015D4 7E                    4766 	ld	a, (hl)
      0015D5 93                    4767 	sub	a, e
      0015D6 C2r3Fr18              4768 	jp	NZ,00176$
      0015D9 23                    4769 	inc	hl
      0015DA 7E                    4770 	ld	a, (hl)
      0015DB 92                    4771 	sub	a, d
      0015DC C2r3Fr18              4772 	jp	NZ,00176$
      0015DF                       4773 00123$:
                                   4774 ;src/main.c:579: pile_append_cursor_stack(pile);
      0015DF C5                    4775 	push	bc
      0015E0 CDrB5r0E              4776 	call	_pile_append_cursor_stack
      0015E3 E8 02                 4777 	add	sp, #2
                                   4778 ;src/main.c:580: score--;
      0015E5 21r6Er01              4779 	ld	hl, #_score + 1
      0015E8 2B                    4780 	dec	hl
      0015E9 2A                    4781 	ld	a, (hl+)
      0015EA 5F                    4782 	ld	e, a
      0015EB 56                    4783 	ld	d, (hl)
      0015EC 1B                    4784 	dec	de
      0015ED 2B                    4785 	dec	hl
      0015EE 7B                    4786 	ld	a, e
      0015EF 22                    4787 	ld	(hl+), a
      0015F0 72                    4788 	ld	(hl), d
                                   4789 ;src/main.c:810: cursor_place_stack();
      0015F1 C3r3Fr18              4790 	jp	00176$
      0015F4                       4791 00173$:
                                   4792 ;src/main.c:813: flags |= FLAG_REDRAW_CURSOR;
      0015F4 F8 05                 4793 	ldhl	sp,	#5
      0015F6 7E                    4794 	ld	a, (hl)
      0015F7 F6 01                 4795 	or	a, #0x01
      0015F9 EAr6Br01              4796 	ld	(#_flags),a
                                   4797 ;src/main.c:814: if (new_input & J_DOWN) {
      0015FC F8 01                 4798 	ldhl	sp,	#1
      0015FE CB 5E                 4799 	bit	3, (hl)
      001600 CAr85r16              4800 	jp	Z,00151$
                                   4801 ;src/main.c:815: if (cursor.pile_idx == PILE_IDX_DECK)
      001603 01r8Ar01              4802 	ld	bc, #_cursor + 6
      001606 0A                    4803 	ld	a, (bc)
      001607 F8 09                 4804 	ldhl	sp,	#9
      001609 77                    4805 	ld	(hl), a
      00160A 7E                    4806 	ld	a, (hl)
      00160B D6 0A                 4807 	sub	a, #0x0a
      00160D 20 05                 4808 	jr	NZ, 00134$
                                   4809 ;src/main.c:816: cursor.pile_idx = 0;
      00160F AF                    4810 	xor	a, a
      001610 02                    4811 	ld	(bc), a
      001611 C3rC8r16              4812 	jp	00152$
      001614                       4813 00134$:
                                   4814 ;src/main.c:817: else if (cursor.height + 1u < piles[cursor.pile_idx].height)
      001614 FAr8Br01              4815 	ld	a, (#(_cursor + 0x0007) + 0)
      001617 F8 05                 4816 	ldhl	sp,	#5
      001619 77                    4817 	ld	(hl), a
      00161A F8 05                 4818 	ldhl	sp,	#5
      00161C 2A                    4819 	ld	a, (hl+)
      00161D 23                    4820 	inc	hl
      00161E 77                    4821 	ld	(hl), a
      00161F AF                    4822 	xor	a, a
      001620 23                    4823 	inc	hl
      001621 32                    4824 	ld	(hl-), a
      001622 2A                    4825 	ld	a, (hl+)
      001623 5E                    4826 	ld	e, (hl)
      001624 F8 00                 4827 	ldhl	sp,	#0
      001626 22                    4828 	ld	(hl+), a
      001627 73                    4829 	ld	(hl), e
                                   4830 ;c
      001628 D1                    4831 	pop	de
      001629 D5                    4832 	push	de
      00162A 6B                    4833 	ld	l, e
      00162B 62                    4834 	ld	h, d
      00162C 23                    4835 	inc	hl
      00162D E5                    4836 	push	hl
      00162E 7D                    4837 	ld	a, l
      00162F F8 08                 4838 	ldhl	sp,	#8
      001631 77                    4839 	ld	(hl), a
      001632 E1                    4840 	pop	hl
      001633 7C                    4841 	ld	a, h
      001634 F8 07                 4842 	ldhl	sp,	#7
      001636 22                    4843 	ld	(hl+), a
      001637 23                    4844 	inc	hl
      001638 4E                    4845 	ld	c, (hl)
      001639 06 00                 4846 	ld	b, #0x00
      00163B 69                    4847 	ld	l, c
      00163C 60                    4848 	ld	h, b
      00163D 29                    4849 	add	hl, hl
      00163E 29                    4850 	add	hl, hl
      00163F 09                    4851 	add	hl, bc
      001640 E5                    4852 	push	hl
      001641 7D                    4853 	ld	a, l
      001642 F8 0A                 4854 	ldhl	sp,	#10
      001644 77                    4855 	ld	(hl), a
      001645 E1                    4856 	pop	hl
      001646 7C                    4857 	ld	a, h
      001647 F8 09                 4858 	ldhl	sp,	#9
                                   4859 ;c
      001649 32                    4860 	ld	(hl-), a
      00164A 2A                    4861 	ld	a, (hl+)
      00164B 5F                    4862 	ld	e, a
      00164C 56                    4863 	ld	d, (hl)
      00164D 21r38r01              4864 	ld	hl, #_piles
      001650 19                    4865 	add	hl, de
      001651 33                    4866 	inc	sp
      001652 33                    4867 	inc	sp
                                   4868 ;c
      001653 5D                    4869 	ld	e, l
      001654 54                    4870 	ld	d, h
      001655 D5                    4871 	push	de
      001656 21 04 00              4872 	ld	hl, #0x0004
      001659 19                    4873 	add	hl, de
      00165A E5                    4874 	push	hl
      00165B 7D                    4875 	ld	a, l
      00165C F8 0A                 4876 	ldhl	sp,	#10
      00165E 77                    4877 	ld	(hl), a
      00165F E1                    4878 	pop	hl
      001660 7C                    4879 	ld	a, h
      001661 F8 09                 4880 	ldhl	sp,	#9
      001663 32                    4881 	ld	(hl-), a
      001664 2A                    4882 	ld	a, (hl+)
      001665 5F                    4883 	ld	e, a
      001666 56                    4884 	ld	d, (hl)
      001667 1A                    4885 	ld	a, (de)
      001668 77                    4886 	ld	(hl), a
      001669 3A                    4887 	ld	a, (hl-)
      00166A 77                    4888 	ld	(hl), a
      00166B AF                    4889 	xor	a, a
      00166C 23                    4890 	inc	hl
      00166D 77                    4891 	ld	(hl), a
      00166E F8 06                 4892 	ldhl	sp,	#6
      001670 5D                    4893 	ld	e, l
      001671 54                    4894 	ld	d, h
      001672 F8 08                 4895 	ldhl	sp,	#8
      001674 1A                    4896 	ld	a, (de)
      001675 96                    4897 	sub	a, (hl)
      001676 23                    4898 	inc	hl
      001677 13                    4899 	inc	de
      001678 1A                    4900 	ld	a, (de)
      001679 9E                    4901 	sbc	a, (hl)
      00167A 30 4C                 4902 	jr	NC, 00152$
                                   4903 ;src/main.c:818: cursor.height++;
      00167C F8 05                 4904 	ldhl	sp,	#5
      00167E 7E                    4905 	ld	a, (hl)
      00167F 3C                    4906 	inc	a
      001680 EAr8Br01              4907 	ld	(#(_cursor + 0x0007)),a
      001683 18 43                 4908 	jr	00152$
      001685                       4909 00151$:
                                   4910 ;src/main.c:819: } else if (new_input & J_UP) {
      001685 F8 01                 4911 	ldhl	sp,	#1
      001687 CB 56                 4912 	bit	2, (hl)
      001689 28 12                 4913 	jr	Z, 00149$
                                   4914 ;src/main.c:820: if (cursor.height == 0)
      00168B 01r8Br01              4915 	ld	bc, #_cursor + 7
      00168E 0A                    4916 	ld	a, (bc)
      00168F B7                    4917 	or	a, a
      001690 20 07                 4918 	jr	NZ, 00138$
                                   4919 ;src/main.c:821: cursor.pile_idx = PILE_IDX_DECK;
      001692 21r8Ar01              4920 	ld	hl, #(_cursor + 0x0006)
      001695 36 0A                 4921 	ld	(hl), #0x0a
      001697 18 2F                 4922 	jr	00152$
      001699                       4923 00138$:
                                   4924 ;src/main.c:823: cursor.height--;
      001699 3D                    4925 	dec	a
      00169A 02                    4926 	ld	(bc), a
      00169B 18 2B                 4927 	jr	00152$
      00169D                       4928 00149$:
                                   4929 ;src/main.c:825: && cursor.pile_idx != 0
      00169D F8 07                 4930 	ldhl	sp,	#7
      00169F 3A                    4931 	ld	a, (hl-)
      0016A0 B6                    4932 	or	a, (hl)
      0016A1 28 12                 4933 	jr	Z, 00147$
      0016A3 01r8Ar01              4934 	ld	bc, #_cursor+6
      0016A6 0A                    4935 	ld	a, (bc)
      0016A7 B7                    4936 	or	a, a
      0016A8 28 0B                 4937 	jr	Z, 00147$
                                   4938 ;src/main.c:826: && cursor.pile_idx != PILE_IDX_DECK) {
      0016AA FE 0A                 4939 	cp	a, #0x0a
      0016AC 28 07                 4940 	jr	Z, 00147$
                                   4941 ;src/main.c:827: cursor.pile_idx--;
      0016AE 3D                    4942 	dec	a
      0016AF 02                    4943 	ld	(bc), a
                                   4944 ;src/main.c:828: cursor_adjust_height();
      0016B0 CDrA5r09              4945 	call	_cursor_adjust_height
      0016B3 18 13                 4946 	jr	00152$
      0016B5                       4947 00147$:
                                   4948 ;src/main.c:830: && cursor.pile_idx < PILE_IDX_DECK - 1u) {
      0016B5 F8 09                 4949 	ldhl	sp,	#9
      0016B7 3A                    4950 	ld	a, (hl-)
      0016B8 B6                    4951 	or	a, (hl)
      0016B9 28 0D                 4952 	jr	Z, 00152$
      0016BB 01r8Ar01              4953 	ld	bc, #_cursor+6
      0016BE 0A                    4954 	ld	a, (bc)
      0016BF FE 09                 4955 	cp	a, #0x09
      0016C1 30 05                 4956 	jr	NC, 00152$
                                   4957 ;src/main.c:831: cursor.pile_idx++;
      0016C3 3C                    4958 	inc	a
      0016C4 02                    4959 	ld	(bc), a
                                   4960 ;src/main.c:832: cursor_adjust_height();
      0016C5 CDrA5r09              4961 	call	_cursor_adjust_height
      0016C8                       4962 00152$:
                                   4963 ;src/main.c:835: && ~flags & FLAG_PLAYING_ANIMATION) {
      0016C8 F8 04                 4964 	ldhl	sp,	#4
      0016CA 3A                    4965 	ld	a, (hl-)
      0016CB B6                    4966 	or	a, (hl)
      0016CC CAr3Fr18              4967 	jp	Z, 00176$
      0016CF FAr6Br01              4968 	ld	a, (#_flags)
      0016D2 06 00                 4969 	ld	b, #0x00
      0016D4 2F                    4970 	cpl
      0016D5 4F                    4971 	ld	c, a
      0016D6 78                    4972 	ld	a, b
      0016D7 2F                    4973 	cpl
      0016D8 CB 51                 4974 	bit	2, c
      0016DA CAr3Fr18              4975 	jp	Z,00176$
                                   4976 ;src/main.c:836: if (cursor.pile_idx == PILE_IDX_DECK && top_card_idx != 104u)
      0016DD 21r8Ar01              4977 	ld	hl, #(_cursor + 0x0006)
      0016E0 4E                    4978 	ld	c, (hl)
      0016E1 79                    4979 	ld	a, c
      0016E2 D6 0A                 4980 	sub	a, #0x0a
      0016E4 C2r7Er17              4981 	jp	NZ,00169$
      0016E7 FAr6Ar01              4982 	ld	a, (#_top_card_idx)
      0016EA D6 68                 4983 	sub	a, #0x68
      0016EC CAr7Er17              4984 	jp	Z,00169$
                                   4985 ;src/main.c:704: Pile *pile = IDX_PTR(piles, 0);
      0016EF 01r38r01              4986 	ld	bc, #_piles
                                   4987 ;src/main.c:707: for (i = 0; i < 10u; i++) {
      0016F2 1E 00                 4988 	ld	e, #0x00
      0016F4                       4989 00201$:
                                   4990 ;src/main.c:708: if (!pile->height)
      0016F4 21 04 00              4991 	ld	hl, #0x0004
      0016F7 09                    4992 	add	hl, bc
      0016F8 7E                    4993 	ld	a, (hl)
      0016F9 B7                    4994 	or	a, a
      0016FA CAr3Fr18              4995 	jp	Z, 00176$
                                   4996 ;src/main.c:710: pile++;
      0016FD 03                    4997 	inc	bc
      0016FE 03                    4998 	inc	bc
      0016FF 03                    4999 	inc	bc
      001700 03                    5000 	inc	bc
      001701 03                    5001 	inc	bc
                                   5002 ;src/main.c:707: for (i = 0; i < 10u; i++) {
      001702 1C                    5003 	inc	e
      001703 7B                    5004 	ld	a, e
      001704 D6 0A                 5005 	sub	a, #0x0a
      001706 38 EC                 5006 	jr	C, 00201$
                                   5007 ;src/main.c:713: pile = IDX_PTR(piles, 0);
      001708 F8 07                 5008 	ldhl	sp,	#7
      00170A 3Er38                 5009 	ld	a, #<(_piles)
      00170C 22                    5010 	ld	(hl+), a
      00170D 36s01                 5011 	ld	(hl), #>(_piles)
                                   5012 ;src/main.c:714: Card *deck_top = IDX_PTR(deck, top_card_idx);
      00170F 21r6Ar01              5013 	ld	hl, #_top_card_idx
      001712 4E                    5014 	ld	c, (hl)
      001713 06 00                 5015 	ld	b, #0x00
      001715 69                    5016 	ld	l, c
      001716 60                    5017 	ld	h, b
      001717 29                    5018 	add	hl, hl
      001718 09                    5019 	add	hl, bc
      001719 01r00r00              5020 	ld	bc,#_deck
      00171C 09                    5021 	add	hl,bc
      00171D 4D                    5022 	ld	c, l
      00171E 44                    5023 	ld	b, h
                                   5024 ;src/main.c:715: top_card_idx += 10u;
      00171F 21r6Ar01              5025 	ld	hl, #_top_card_idx
      001722 7E                    5026 	ld	a, (hl)
      001723 C6 0A                 5027 	add	a, #0x0a
      001725 77                    5028 	ld	(hl), a
                                   5029 ;src/main.c:718: for (i = 0; i < 10u; i++) {
      001726 F8 09                 5030 	ldhl	sp,	#9
      001728 36 0A                 5031 	ld	(hl), #0x0a
      00172A                       5032 00205$:
                                   5033 ;src/main.c:719: pile->top->next_card = deck_top;
                                   5034 ;c
      00172A F8 07                 5035 	ldhl	sp,#7
      00172C 2A                    5036 	ld	a, (hl+)
      00172D 5F                    5037 	ld	e, a
      00172E 56                    5038 	ld	d, (hl)
      00172F 21 02 00              5039 	ld	hl, #0x0002
      001732 19                    5040 	add	hl, de
      001733 E5                    5041 	push	hl
      001734 7D                    5042 	ld	a, l
      001735 F8 07                 5043 	ldhl	sp,	#7
      001737 77                    5044 	ld	(hl), a
      001738 E1                    5045 	pop	hl
      001739 7C                    5046 	ld	a, h
      00173A F8 06                 5047 	ldhl	sp,	#6
      00173C 32                    5048 	ld	(hl-), a
      00173D 2A                    5049 	ld	a, (hl+)
      00173E 5F                    5050 	ld	e, a
      00173F 56                    5051 	ld	d, (hl)
      001740 1A                    5052 	ld	a, (de)
      001741 6F                    5053 	ld	l, a
      001742 13                    5054 	inc	de
      001743 1A                    5055 	ld	a, (de)
      001744 67                    5056 	ld	h, a
      001745 79                    5057 	ld	a, c
      001746 22                    5058 	ld	(hl+), a
      001747 70                    5059 	ld	(hl), b
                                   5060 ;src/main.c:720: pile->top = deck_top;
      001748 F8 05                 5061 	ldhl	sp,	#5
      00174A 2A                    5062 	ld	a, (hl+)
      00174B 66                    5063 	ld	h, (hl)
      00174C 6F                    5064 	ld	l, a
      00174D 79                    5065 	ld	a, c
      00174E 22                    5066 	ld	(hl+), a
      00174F 70                    5067 	ld	(hl), b
                                   5068 ;src/main.c:721: pile->height++;
                                   5069 ;c
      001750 F8 07                 5070 	ldhl	sp,#7
      001752 2A                    5071 	ld	a, (hl+)
      001753 5F                    5072 	ld	e, a
      001754 56                    5073 	ld	d, (hl)
      001755 21 04 00              5074 	ld	hl, #0x0004
      001758 19                    5075 	add	hl, de
      001759 5D                    5076 	ld	e, l
      00175A 54                    5077 	ld	d, h
      00175B 1A                    5078 	ld	a, (de)
      00175C 3C                    5079 	inc	a
      00175D 12                    5080 	ld	(de), a
                                   5081 ;src/main.c:722: deck_top++;
      00175E 03                    5082 	inc	bc
      00175F 03                    5083 	inc	bc
      001760 03                    5084 	inc	bc
                                   5085 ;src/main.c:723: pile++;
                                   5086 ;c
      001761 F8 07                 5087 	ldhl	sp,#7
      001763 2A                    5088 	ld	a, (hl+)
      001764 5F                    5089 	ld	e, a
      001765 56                    5090 	ld	d, (hl)
      001766 21 05 00              5091 	ld	hl, #0x0005
      001769 19                    5092 	add	hl, de
      00176A E5                    5093 	push	hl
      00176B 7D                    5094 	ld	a, l
      00176C F8 09                 5095 	ldhl	sp,	#9
      00176E 77                    5096 	ld	(hl), a
      00176F E1                    5097 	pop	hl
      001770 7C                    5098 	ld	a, h
      001771 F8 08                 5099 	ldhl	sp,	#8
      001773 22                    5100 	ld	(hl+), a
                                   5101 ;src/main.c:718: for (i = 0; i < 10u; i++) {
      001774 35                    5102 	dec	(hl)
      001775 7E                    5103 	ld	a, (hl)
      001776 20 B2                 5104 	jr	NZ, 00205$
                                   5105 ;src/main.c:726: dynamic_metasprite_deal();
      001778 CDr73r08              5106 	call	_dynamic_metasprite_deal
                                   5107 ;src/main.c:837: deal();
      00177B C3r3Fr18              5108 	jp	00176$
      00177E                       5109 00169$:
                                   5110 ;src/main.c:549: Pile *pile = IDX_PTR(piles, cursor.pile_idx);
      00177E 06 00                 5111 	ld	b, #0x00
      001780 69                    5112 	ld	l, c
      001781 60                    5113 	ld	h, b
      001782 29                    5114 	add	hl, hl
      001783 29                    5115 	add	hl, hl
      001784 09                    5116 	add	hl, bc
      001785 3Er38                 5117 	ld	a, #<(_piles)
      001787 85                    5118 	add	a, l
      001788 4F                    5119 	ld	c, a
      001789 3Es01                 5120 	ld	a, #>(_piles)
      00178B 8C                    5121 	adc	a, h
      00178C F8 05                 5122 	ldhl	sp,	#5
      00178E 71                    5123 	ld	(hl), c
      00178F 23                    5124 	inc	hl
                                   5125 ;src/main.c:550: Card *top = pile->base;
      001790 32                    5126 	ld	(hl-), a
      001791 2A                    5127 	ld	a, (hl+)
      001792 5F                    5128 	ld	e, a
      001793 56                    5129 	ld	d, (hl)
      001794 1A                    5130 	ld	a, (de)
      001795 23                    5131 	inc	hl
      001796 23                    5132 	inc	hl
      001797 22                    5133 	ld	(hl+), a
      001798 13                    5134 	inc	de
      001799 1A                    5135 	ld	a, (de)
      00179A 77                    5136 	ld	(hl), a
                                   5137 ;src/main.c:551: for (i = 1; i < cursor.height; i++)
      00179B 06 01                 5138 	ld	b, #0x01
      00179D                       5139 00207$:
      00179D 21r8Br01              5140 	ld	hl, #(_cursor + 0x0007)
      0017A0 4E                    5141 	ld	c, (hl)
      0017A1 78                    5142 	ld	a, b
      0017A2 91                    5143 	sub	a, c
      0017A3 30 0E                 5144 	jr	NC, 00161$
                                   5145 ;src/main.c:552: top = top->next_card;
      0017A5 F8 08                 5146 	ldhl	sp,#8
      0017A7 2A                    5147 	ld	a, (hl+)
      0017A8 5F                    5148 	ld	e, a
      0017A9 56                    5149 	ld	d, (hl)
      0017AA 1A                    5150 	ld	a, (de)
      0017AB 2B                    5151 	dec	hl
      0017AC 22                    5152 	ld	(hl+), a
      0017AD 13                    5153 	inc	de
      0017AE 1A                    5154 	ld	a, (de)
      0017AF 77                    5155 	ld	(hl), a
                                   5156 ;src/main.c:551: for (i = 1; i < cursor.height; i++)
      0017B0 04                    5157 	inc	b
      0017B1 18 EA                 5158 	jr	00207$
      0017B3                       5159 00161$:
                                   5160 ;src/main.c:553: Card *stack = cursor.height ? top->next_card : top;
      0017B3 79                    5161 	ld	a, c
      0017B4 B7                    5162 	or	a, a
      0017B5 28 0C                 5163 	jr	Z, 00211$
      0017B7 F8 08                 5164 	ldhl	sp,#8
      0017B9 2A                    5165 	ld	a, (hl+)
      0017BA 5F                    5166 	ld	e, a
      0017BB 56                    5167 	ld	d, (hl)
      0017BC 1A                    5168 	ld	a, (de)
      0017BD 4F                    5169 	ld	c, a
      0017BE 13                    5170 	inc	de
      0017BF 1A                    5171 	ld	a, (de)
      0017C0 47                    5172 	ld	b, a
      0017C1 18 05                 5173 	jr	00212$
      0017C3                       5174 00211$:
      0017C3 F8 08                 5175 	ldhl	sp,#8
      0017C5 2A                    5176 	ld	a, (hl+)
      0017C6 4F                    5177 	ld	c, a
      0017C7 46                    5178 	ld	b, (hl)
      0017C8                       5179 00212$:
                                   5180 ;src/main.c:554: if (!(VISIBLE(stack->data) && is_stack_coherent(stack)))
      0017C8 59                    5181 	ld	e, c
      0017C9 50                    5182 	ld	d, b
      0017CA 13                    5183 	inc	de
      0017CB 13                    5184 	inc	de
      0017CC 1A                    5185 	ld	a, (de)
      0017CD CB 77                 5186 	bit	6, a
      0017CF 28 6E                 5187 	jr	Z, 00176$
      0017D1 C5                    5188 	push	bc
      0017D2 C5                    5189 	push	bc
      0017D3 CDrF1r0D              5190 	call	_is_stack_coherent
      0017D6 E8 02                 5191 	add	sp, #2
      0017D8 7B                    5192 	ld	a, e
      0017D9 C1                    5193 	pop	bc
      0017DA B7                    5194 	or	a, a
      0017DB 28 62                 5195 	jr	Z, 00176$
                                   5196 ;src/main.c:557: cursor.held_card = stack;
      0017DD 21r84r01              5197 	ld	hl, #_cursor
      0017E0 79                    5198 	ld	a, c
      0017E1 22                    5199 	ld	(hl+), a
      0017E2 70                    5200 	ld	(hl), b
                                   5201 ;src/main.c:558: cursor.hand_pile_idx = cursor.pile_idx;
      0017E3 FAr8Ar01              5202 	ld	a, (#(_cursor + 0x0006) + 0)
      0017E6 EAr89r01              5203 	ld	(#(_cursor + 0x0005)),a
                                   5204 ;src/main.c:559: cursor.held_stack_size = pile->height - cursor.height;
                                   5205 ;c
      0017E9 F8 05                 5206 	ldhl	sp,#5
      0017EB 2A                    5207 	ld	a, (hl+)
      0017EC 5F                    5208 	ld	e, a
      0017ED 56                    5209 	ld	d, (hl)
      0017EE 21 04 00              5210 	ld	hl, #0x0004
      0017F1 19                    5211 	add	hl, de
      0017F2 4D                    5212 	ld	c, l
      0017F3 44                    5213 	ld	b, h
      0017F4 0A                    5214 	ld	a, (bc)
      0017F5 21r8Br01              5215 	ld	hl, #(_cursor + 0x0007)
      0017F8 6E                    5216 	ld	l, (hl)
      0017F9 95                    5217 	sub	a, l
      0017FA EAr88r01              5218 	ld	(#(_cursor + 0x0004)),a
                                   5219 ;src/main.c:560: pile->height = cursor.height;
      0017FD FAr8Br01              5220 	ld	a, (#(_cursor + 0x0007) + 0)
      001800 02                    5221 	ld	(bc), a
                                   5222 ;src/main.c:561: if (cursor.height) {
      001801 FAr8Br01              5223 	ld	a, (#(_cursor + 0x0007) + 0)
      001804 F8 07                 5224 	ldhl	sp,	#7
      001806 77                    5225 	ld	(hl), a
                                   5226 ;src/main.c:562: pile->top = top;
      001807 F8 05                 5227 	ldhl	sp,#5
      001809 2A                    5228 	ld	a, (hl+)
      00180A 4F                    5229 	ld	c, a
      00180B 46                    5230 	ld	b, (hl)
      00180C 03                    5231 	inc	bc
      00180D 03                    5232 	inc	bc
                                   5233 ;src/main.c:564: cursor.card_to_show = top;
                                   5234 ;src/main.c:561: if (cursor.height) {
      00180E 23                    5235 	inc	hl
      00180F 7E                    5236 	ld	a, (hl)
      001810 B7                    5237 	or	a, a
      001811 28 1A                 5238 	jr	Z, 00166$
                                   5239 ;src/main.c:562: pile->top = top;
      001813 23                    5240 	inc	hl
      001814 2A                    5241 	ld	a, (hl+)
      001815 02                    5242 	ld	(bc), a
      001816 03                    5243 	inc	bc
      001817 7E                    5244 	ld	a, (hl)
      001818 02                    5245 	ld	(bc), a
                                   5246 ;src/main.c:563: top->next_card = NULL;
      001819 2B                    5247 	dec	hl
      00181A 2A                    5248 	ld	a, (hl+)
      00181B 66                    5249 	ld	h, (hl)
      00181C 6F                    5250 	ld	l, a
      00181D AF                    5251 	xor	a, a
      00181E 22                    5252 	ld	(hl+), a
      00181F 77                    5253 	ld	(hl), a
                                   5254 ;src/main.c:564: cursor.card_to_show = top;
      001820 11r86r01              5255 	ld	de, #(_cursor + 0x0002)
      001823 F8 08                 5256 	ldhl	sp,	#8
      001825 7E                    5257 	ld	a, (hl)
      001826 12                    5258 	ld	(de), a
      001827 13                    5259 	inc	de
      001828 23                    5260 	inc	hl
      001829 7E                    5261 	ld	a, (hl)
      00182A 12                    5262 	ld	(de), a
      00182B 18 12                 5263 	jr	00176$
      00182D                       5264 00166$:
                                   5265 ;src/main.c:566: pile->base = NULL;
      00182D F8 05                 5266 	ldhl	sp,	#5
      00182F 2A                    5267 	ld	a, (hl+)
      001830 66                    5268 	ld	h, (hl)
      001831 6F                    5269 	ld	l, a
      001832 AF                    5270 	xor	a, a
      001833 22                    5271 	ld	(hl+), a
      001834 77                    5272 	ld	(hl), a
                                   5273 ;src/main.c:567: pile->top = NULL;
      001835 AF                    5274 	xor	a, a
      001836 02                    5275 	ld	(bc), a
      001837 03                    5276 	inc	bc
      001838 02                    5277 	ld	(bc), a
                                   5278 ;src/main.c:568: cursor.card_to_show = NULL;
      001839 21r86r01              5279 	ld	hl, #(_cursor + 0x0002)
      00183C AF                    5280 	xor	a, a
      00183D 22                    5281 	ld	(hl+), a
      00183E 77                    5282 	ld	(hl), a
                                   5283 ;src/main.c:843: }
      00183F                       5284 00176$:
                                   5285 ;src/main.c:844: prev_input = input;
      00183F F8 02                 5286 	ldhl	sp,	#2
      001841 7E                    5287 	ld	a, (hl)
      001842 EAr8Fr01              5288 	ld	(#_main_prev_input_327681_339),a
                                   5289 ;src/main.c:867: switch (flags & FLAG_GAME_STATE) {
      001845 FAr6Br01              5290 	ld	a, (#_flags)
      001848 E6 18                 5291 	and	a, #0x18
      00184A 47                    5292 	ld	b, a
      00184B 0E 00                 5293 	ld	c, #0x00
      00184D 78                    5294 	ld	a, b
      00184E D6 10                 5295 	sub	a, #0x10
      001850 B1                    5296 	or	a, c
      001851 C2r38r19              5297 	jp	NZ,00102$
                                   5298 ;src/main.c:586: cursor.anim_ctr++;
      001854 21r8Cr01              5299 	ld	hl, #_cursor + 8
      001857 56                    5300 	ld	d, (hl)
      001858 14                    5301 	inc	d
      001859 72                    5302 	ld	(hl), d
                                   5303 ;src/main.c:587: cursor.anim_ctr &= (1u << (CURSOR_PERIOD_LOGSCALE + 1u)) - 1u;
      00185A CB BA                 5304 	res	7, d
      00185C 72                    5305 	ld	(hl), d
                                   5306 ;src/main.c:588: UINT8 prev_anim_frame = cursor.anim_frame;
      00185D 01r8Dr01              5307 	ld	bc, #_cursor + 9
      001860 0A                    5308 	ld	a, (bc)
      001861 5F                    5309 	ld	e, a
                                   5310 ;src/main.c:589: cursor.anim_frame = cursor.anim_ctr >> CURSOR_PERIOD_LOGSCALE;
      001862 7A                    5311 	ld	a, d
      001863 07                    5312 	rlca
      001864 07                    5313 	rlca
      001865 E6 03                 5314 	and	a, #0x03
      001867 02                    5315 	ld	(bc), a
                                   5316 ;src/main.c:590: if (cursor.anim_frame != prev_anim_frame)
      001868 93                    5317 	sub	a, e
      001869 28 07                 5318 	jr	Z, 00179$
                                   5319 ;src/main.c:591: flags |= FLAG_REDRAW_CURSOR;
      00186B 21r6Br01              5320 	ld	hl, #_flags
      00186E 7E                    5321 	ld	a, (hl)
      00186F F6 01                 5322 	or	a, #0x01
      001871 77                    5323 	ld	(hl), a
      001872                       5324 00179$:
                                   5325 ;src/main.c:593: if (flags & FLAG_REDRAW_CURSOR) {
      001872 FAr6Br01              5326 	ld	a, (#_flags)
      001875 0F                    5327 	rrca
      001876 30 62                 5328 	jr	NC, 00186$
                                   5329 ;src/main.c:594: flags &= ~FLAG_REDRAW_CURSOR;
      001878 21r6Br01              5330 	ld	hl, #_flags
      00187B 7E                    5331 	ld	a, (hl)
      00187C E6 FE                 5332 	and	a, #0xfe
      00187E 77                    5333 	ld	(hl), a
                                   5334 ;src/main.c:595: if (cursor.pile_idx == PILE_IDX_DECK)
      00187F 21r8Ar01              5335 	ld	hl, #_cursor + 6
      001882 6E                    5336 	ld	l, (hl)
                                   5337 ;src/main.c:588: UINT8 prev_anim_frame = cursor.anim_frame;
      001883 0A                    5338 	ld	a, (bc)
                                   5339 ;src/main.c:596: move_metasprite(cursor_metasprites[cursor.anim_frame],
      001884 16 00                 5340 	ld	d, #0x00
      001886 5F                    5341 	ld	e, a
      001887 CB 23                 5342 	sla	e
      001889 CB 12                 5343 	rl	d
                                   5344 ;src/main.c:595: if (cursor.pile_idx == PILE_IDX_DECK)
      00188B 7D                    5345 	ld	a, l
      00188C D6 0A                 5346 	sub	a, #0x0a
      00188E 20 1F                 5347 	jr	NZ, 00183$
                                   5348 ;src/main.c:596: move_metasprite(cursor_metasprites[cursor.anim_frame],
      001890 21r00r00              5349 	ld	hl, #_cursor_metasprites
      001893 19                    5350 	add	hl, de
      001894 2A                    5351 	ld	a, (hl+)
      001895 4E                    5352 	ld	c, (hl)
                                   5353 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      001896 21r00r00              5354 	ld	hl, #___current_metasprite
      001899 22                    5355 	ld	(hl+), a
      00189A 71                    5356 	ld	(hl), c
                                   5357 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      00189B 21r00r00              5358 	ld	hl, #___current_base_tile
      00189E 36 01                 5359 	ld	(hl), #0x01
                                   5360 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      0018A0 AF                    5361 	xor	a, a
      0018A1 F5                    5362 	push	af
      0018A2 33                    5363 	inc	sp
      0018A3 AF                    5364 	xor	a, a
      0018A4 57                    5365 	ld	d,a
      0018A5 1E 22                 5366 	ld	e,#0x22
      0018A7 D5                    5367 	push	de
      0018A8 CDr00r00              5368 	call	___move_metasprite
      0018AB E8 03                 5369 	add	sp, #3
                                   5370 ;src/main.c:601: );
      0018AD 18 2B                 5371 	jr	00186$
      0018AF                       5372 00183$:
                                   5373 ;src/main.c:607: (cursor.height + 3u) * 8u
      0018AF 01r8Br01              5374 	ld	bc, #_cursor + 7
      0018B2 0A                    5375 	ld	a, (bc)
      0018B3 C6 03                 5376 	add	a, #0x03
      0018B5 87                    5377 	add	a, a
      0018B6 87                    5378 	add	a, a
      0018B7 87                    5379 	add	a, a
      0018B8 47                    5380 	ld	b, a
                                   5381 ;src/main.c:606: cursor.pile_idx * 16u,
      0018B9 7D                    5382 	ld	a, l
      0018BA CB 37                 5383 	swap	a
      0018BC E6 F0                 5384 	and	a, #0xf0
      0018BE 4F                    5385 	ld	c, a
                                   5386 ;src/main.c:603: move_metasprite(cursor_metasprites[cursor.anim_frame],
      0018BF 21r00r00              5387 	ld	hl, #_cursor_metasprites
      0018C2 19                    5388 	add	hl, de
      0018C3 2A                    5389 	ld	a, (hl+)
                                   5390 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      0018C4 5E                    5391 	ld	e, (hl)
      0018C5 21r00r00              5392 	ld	hl, #___current_metasprite
      0018C8 22                    5393 	ld	(hl+), a
      0018C9 73                    5394 	ld	(hl), e
                                   5395 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      0018CA 21r00r00              5396 	ld	hl, #___current_base_tile
      0018CD 36 01                 5397 	ld	(hl), #0x01
                                   5398 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      0018CF C5                    5399 	push	bc
      0018D0 33                    5400 	inc	sp
      0018D1 51                    5401 	ld	d, c
      0018D2 1E 22                 5402 	ld	e,#0x22
      0018D4 D5                    5403 	push	de
      0018D5 CDr00r00              5404 	call	___move_metasprite
      0018D8 E8 03                 5405 	add	sp, #3
                                   5406 ;src/main.c:608: );
      0018DA                       5407 00186$:
                                   5408 ;src/main.c:610: if (flags & FLAG_REDRAW_HAND) {
      0018DA FAr6Br01              5409 	ld	a, (#_flags)
      0018DD CB 4F                 5410 	bit	1, a
      0018DF 28 57                 5411 	jr	Z, 00102$
                                   5412 ;src/main.c:611: flags &= ~FLAG_REDRAW_HAND;
      0018E1 21r6Br01              5413 	ld	hl, #_flags
      0018E4 7E                    5414 	ld	a, (hl)
      0018E5 E6 FD                 5415 	and	a, #0xfd
      0018E7 77                    5416 	ld	(hl), a
                                   5417 ;src/main.c:612: if (cursor.held_card) {
      0018E8 21r84r01              5418 	ld	hl, #_cursor
      0018EB 2A                    5419 	ld	a, (hl+)
      0018EC B6                    5420 	or	a,(hl)
      0018ED 28 41                 5421 	jr	Z, 00189$
                                   5422 ;src/main.c:613: UINT8 height = piles[cursor.hand_pile_idx].height;
      0018EF 21r89r01              5423 	ld	hl, #_cursor + 5
      0018F2 4E                    5424 	ld	c, (hl)
      0018F3 06 00                 5425 	ld	b, #0x00
      0018F5 69                    5426 	ld	l, c
      0018F6 60                    5427 	ld	h, b
      0018F7 29                    5428 	add	hl, hl
      0018F8 29                    5429 	add	hl, hl
      0018F9 09                    5430 	add	hl, bc
      0018FA 11r38r01              5431 	ld	de, #_piles
      0018FD 19                    5432 	add	hl, de
      0018FE 23                    5433 	inc	hl
      0018FF 23                    5434 	inc	hl
      001900 23                    5435 	inc	hl
      001901 23                    5436 	inc	hl
      001902 46                    5437 	ld	b, (hl)
                                   5438 ;src/main.c:618: (height + !height + 2u) * 8u
      001903 78                    5439 	ld	a, b
      001904 D6 01                 5440 	sub	a,#0x01
      001906 3E 00                 5441 	ld	a, #0x00
      001908 17                    5442 	rla
      001909 80                    5443 	add	a, b
      00190A C6 02                 5444 	add	a, #0x02
      00190C 87                    5445 	add	a, a
      00190D 87                    5446 	add	a, a
      00190E 87                    5447 	add	a, a
      00190F 57                    5448 	ld	d, a
                                   5449 ;src/main.c:617: cursor.hand_pile_idx * 16u,
      001910 79                    5450 	ld	a, c
      001911 CB 37                 5451 	swap	a
      001913 E6 F0                 5452 	and	a, #0xf0
      001915 47                    5453 	ld	b, a
                                   5454 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      001916 21r00r00              5455 	ld	hl, #___current_metasprite
      001919 36r00                 5456 	ld	(hl), #<(_metasprite_sequential_2x3)
      00191B 23                    5457 	inc	hl
      00191C 36s00                 5458 	ld	(hl), #>(_metasprite_sequential_2x3)
                                   5459 ;/home/wojtek/gbdk/include/gb/metasprites.h:80: __current_base_tile = base_tile;
      00191E 21r00r00              5460 	ld	hl, #___current_base_tile
      001921 36 03                 5461 	ld	(hl), #0x03
                                   5462 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      001923 58                    5463 	ld	e, b
      001924 D5                    5464 	push	de
      001925 3E 1C                 5465 	ld	a, #0x1c
      001927 F5                    5466 	push	af
      001928 33                    5467 	inc	sp
      001929 CDr00r00              5468 	call	___move_metasprite
      00192C E8 03                 5469 	add	sp, #3
                                   5470 ;src/main.c:619: );
      00192E 18 08                 5471 	jr	00102$
      001930                       5472 00189$:
                                   5473 ;src/main.c:621: metasprite_2x3_hide(SPRITE_HAND);
      001930 3E 1C                 5474 	ld	a, #0x1c
      001932 F5                    5475 	push	af
      001933 33                    5476 	inc	sp
      001934 CDr5Dr02              5477 	call	_metasprite_2x3_hide
      001937 33                    5478 	inc	sp
                                   5479 ;src/main.c:871: }
      001938                       5480 00102$:
                                   5481 ;src/main.c:519: if (dynamic_metasprite.elapsed_frames >= dynamic_metasprite.target_frames)
      001938 21r78r01              5482 	ld	hl, #(_dynamic_metasprite + 0x0009)
      00193B 4E                    5483 	ld	c, (hl)
      00193C 21r77r01              5484 	ld	hl, #(_dynamic_metasprite + 0x0008)
      00193F 46                    5485 	ld	b, (hl)
      001940 58                    5486 	ld	e, b
      001941 79                    5487 	ld	a,c
      001942 57                    5488 	ld	d,a
      001943 90                    5489 	sub	a, b
      001944 CB 7B                 5490 	bit	7, e
      001946 28 07                 5491 	jr	Z, 00481$
      001948 CB 7A                 5492 	bit	7, d
      00194A 20 08                 5493 	jr	NZ, 00482$
      00194C BF                    5494 	cp	a, a
      00194D 18 05                 5495 	jr	00482$
      00194F                       5496 00481$:
      00194F CB 7A                 5497 	bit	7, d
      001951 28 01                 5498 	jr	Z, 00482$
      001953 37                    5499 	scf
      001954                       5500 00482$:
      001954 D2rFDr19              5501 	jp	NC, 00200$
                                   5502 ;src/main.c:522: dynamic_metasprite.elapsed_frames++;
      001957 0C                    5503 	inc	c
      001958 21r78r01              5504 	ld	hl, #(_dynamic_metasprite + 0x0009)
      00195B 71                    5505 	ld	(hl), c
                                   5506 ;src/main.c:527: dynamic_metasprite.src[1] + (dynamic_metasprite.dist[1] * dynamic_metasprite.elapsed_frames / dynamic_metasprite.target_frames)
      00195C FAr71r01              5507 	ld	a, (#(_dynamic_metasprite + 0x0002) + 0)
      00195F F8 05                 5508 	ldhl	sp,	#5
      001961 77                    5509 	ld	(hl), a
      001962 21r75r01              5510 	ld	hl, #(_dynamic_metasprite + 0x0006)
      001965 2A                    5511 	ld	a, (hl+)
      001966 66                    5512 	ld	h, (hl)
      001967 6F                    5513 	ld	l, a
      001968 79                    5514 	ld	a, c
      001969 17                    5515 	rla
      00196A 9F                    5516 	sbc	a, a
      00196B 47                    5517 	ld	b, a
      00196C C5                    5518 	push	bc
      00196D C5                    5519 	push	bc
      00196E E5                    5520 	push	hl
                                   5521 ;src/main.c:519: if (dynamic_metasprite.elapsed_frames >= dynamic_metasprite.target_frames)
      00196F CDr00r00              5522 	call	__mulint
      001972 E8 04                 5523 	add	sp, #4
      001974 E5                    5524 	push	hl
      001975 F8 0C                 5525 	ldhl	sp,	#12
      001977 73                    5526 	ld	(hl), e
      001978 F8 0D                 5527 	ldhl	sp,	#13
      00197A 72                    5528 	ld	(hl), d
      00197B E1                    5529 	pop	hl
      00197C C1                    5530 	pop	bc
      00197D FAr77r01              5531 	ld	a, (#(_dynamic_metasprite + 0x0008) + 0)
                                   5532 ;src/main.c:527: dynamic_metasprite.src[1] + (dynamic_metasprite.dist[1] * dynamic_metasprite.elapsed_frames / dynamic_metasprite.target_frames)
      001980 F8 06                 5533 	ldhl	sp,	#6
      001982 77                    5534 	ld	(hl), a
      001983 17                    5535 	rla
      001984 9F                    5536 	sbc	a, a
      001985 23                    5537 	inc	hl
      001986 77                    5538 	ld	(hl), a
      001987 C5                    5539 	push	bc
      001988 2B                    5540 	dec	hl
      001989 2A                    5541 	ld	a, (hl+)
      00198A 66                    5542 	ld	h, (hl)
      00198B 6F                    5543 	ld	l, a
      00198C E5                    5544 	push	hl
      00198D F8 0C                 5545 	ldhl	sp,	#12
      00198F 2A                    5546 	ld	a, (hl+)
      001990 66                    5547 	ld	h, (hl)
      001991 6F                    5548 	ld	l, a
      001992 E5                    5549 	push	hl
      001993 CDr00r00              5550 	call	__divsint
      001996 E8 04                 5551 	add	sp, #4
      001998 C1                    5552 	pop	bc
      001999 7B                    5553 	ld	a, e
      00199A F8 05                 5554 	ldhl	sp,	#5
      00199C 86                    5555 	add	a, (hl)
      00199D F8 08                 5556 	ldhl	sp,	#8
      00199F 77                    5557 	ld	(hl), a
                                   5558 ;src/main.c:526: dynamic_metasprite.src[0] + (dynamic_metasprite.dist[0] * dynamic_metasprite.elapsed_frames / dynamic_metasprite.target_frames),
      0019A0 FAr6Fr01              5559 	ld	a, (#_dynamic_metasprite + 0)
      0019A3 F8 09                 5560 	ldhl	sp,	#9
      0019A5 77                    5561 	ld	(hl), a
      0019A6 21r73r01              5562 	ld	hl, #(_dynamic_metasprite + 0x0004)
      0019A9 2A                    5563 	ld	a, (hl+)
      0019AA 66                    5564 	ld	h, (hl)
      0019AB 6F                    5565 	ld	l, a
      0019AC C5                    5566 	push	bc
      0019AD E5                    5567 	push	hl
      0019AE CDr00r00              5568 	call	__mulint
      0019B1 E8 04                 5569 	add	sp, #4
      0019B3 F8 06                 5570 	ldhl	sp,	#6
      0019B5 2A                    5571 	ld	a, (hl+)
      0019B6 66                    5572 	ld	h, (hl)
      0019B7 6F                    5573 	ld	l, a
      0019B8 E5                    5574 	push	hl
      0019B9 D5                    5575 	push	de
      0019BA CDr00r00              5576 	call	__divsint
      0019BD E8 04                 5577 	add	sp, #4
      0019BF 7B                    5578 	ld	a, e
      0019C0 F8 09                 5579 	ldhl	sp,	#9
      0019C2 86                    5580 	add	a, (hl)
      0019C3 47                    5581 	ld	b, a
                                   5582 ;src/main.c:524: dynamic_metasprite.metasprite_offset,
      0019C4 FAr7Br01              5583 	ld	a, (#(_dynamic_metasprite + 0x000c) + 0)
      0019C7 EAr00r00              5584 	ld	(#___current_base_tile),a
                                   5585 ;src/main.c:523: move_metasprite(dynamic_metasprite.metasprite,
      0019CA 21r79r01              5586 	ld	hl, #(_dynamic_metasprite + 0x000a)
      0019CD 2A                    5587 	ld	a, (hl+)
      0019CE 4F                    5588 	ld	c, a
      0019CF 7E                    5589 	ld	a, (hl)
                                   5590 ;/home/wojtek/gbdk/include/gb/metasprites.h:79: __current_metasprite = metasprite; 
      0019D0 21r00r00              5591 	ld	hl, #___current_metasprite
      0019D3 71                    5592 	ld	(hl), c
      0019D4 23                    5593 	inc	hl
      0019D5 77                    5594 	ld	(hl), a
                                   5595 ;/home/wojtek/gbdk/include/gb/metasprites.h:81: return __move_metasprite(base_sprite, x, y); 
      0019D6 F8 08                 5596 	ldhl	sp,	#8
      0019D8 7E                    5597 	ld	a, (hl)
      0019D9 F5                    5598 	push	af
      0019DA 33                    5599 	inc	sp
      0019DB C5                    5600 	push	bc
      0019DC 33                    5601 	inc	sp
      0019DD AF                    5602 	xor	a, a
      0019DE F5                    5603 	push	af
      0019DF 33                    5604 	inc	sp
      0019E0 CDr00r00              5605 	call	___move_metasprite
      0019E3 E8 03                 5606 	add	sp, #3
                                   5607 ;src/main.c:529: if (dynamic_metasprite.elapsed_frames == dynamic_metasprite.target_frames
      0019E5 FAr78r01              5608 	ld	a, (#(_dynamic_metasprite + 0x0009) + 0)
      0019E8 21r77r01              5609 	ld	hl, #(_dynamic_metasprite + 0x0008)
      0019EB 4E                    5610 	ld	c, (hl)
      0019EC 91                    5611 	sub	a, c
      0019ED 20 0E                 5612 	jr	NZ, 00200$
                                   5613 ;src/main.c:530: && dynamic_metasprite.callback)
      0019EF 21r82r01              5614 	ld	hl, #(_dynamic_metasprite + 0x0013)
      0019F2 2A                    5615 	ld	a, (hl+)
      0019F3 4F                    5616 	ld	c, a
      0019F4 66                    5617 	ld	h, (hl)
      0019F5 7C                    5618 	ld	a, h
      0019F6 B1                    5619 	or	a, c
      0019F7 28 04                 5620 	jr	Z, 00200$
                                   5621 ;src/main.c:531: dynamic_metasprite.callback();
      0019F9 69                    5622 	ld	l, c
      0019FA CDr00r00              5623 	call	___sdcc_call_hl
                                   5624 ;src/main.c:873: dynamic_metasprite_process();
      0019FD                       5625 00200$:
                                   5626 ;src/main.c:875: wait_vbl_done();
      0019FD CDr00r00              5627 	call	_wait_vbl_done
      001A00 C3rB5r14              5628 	jp	00104$
                                   5629 ;src/main.c:877: }
      001A03 E8 0A                 5630 	add	sp, #10
      001A05 C9                    5631 	ret
                                   5632 	.area _CODE
                                   5633 	.area _CABS (ABS)
